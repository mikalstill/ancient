<?xml version="1.0" encoding="UTF-8"?>
<article ratings="auto" toc="auto">

   <seriestitle>[Optional series title]</seriestitle>
   <papertitle>Graphics programming with libtiff</papertitle>
   <subtitle>Color</subtitle>
   <author company="TOWER Software Engineering" email="mikal@stillhq.com" jobtitle="Senior Software Engineer" name="Michael Still">Michael has been working in the image processing field for several years, including a couple of years managing and dveloping large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as being the maintainer of the comp.text.pdf USENET frequently asked questions document. You can contact Michael at <a href="mailto:mikal@stillhq.com">mikal@stillhq.com</a>.</author>

   <date month="April" year="2002"></date>
   <zone name="linux"></zone>
   <pdf url="ftp://www6.software.ibm.com/software/developer/library/[xxx.pdf]" size="xxKB"></pdf>
   <zip url="ftp://www6.software.ibm.com/software/developer/library/xxx.zip"></zip>

   <meta name="KEYWORDS" content="tiff libtiff image imaging raster bitmap color colour" />	
   <meta name="LASTUPDATE" content="20020425 MBS"/>

   <relatedlist>
   <a href="">[Link 1 to related content]</a>
   <a href="">[Link 2 to related content]</a>
   </relatedlist>			
		
   <abstract>TIFF is an extremely common, but quite complex raster image format.
 Libtiff is a standard implementation of the TIFF specification, which is free and works on many operating systems. This article discusses some of the pitfalls of TIFF, and guides the reader through use of the libtiff library. This article provides examples on how to use libtiff for your grayscale and color imaging needs.
</abstract>

<sidebar>
<heading refname="" type="sidebar" toc="no">Did you read the previous article?</heading>
<p>This article is a follow up to my previous article on black and white graphics programming with libtiff. This article covers grayscale and color imaging, but it assumes that you have read and understood the code from the black and white article. It might be helpful to refer to that article before going too far here.</p>
</sidebar>

<p>With this article, I will discuss some of the theory required to understand how the image data is stored for color and grayscale. This theory applies to all imaging formats. We'll then discuss some of the specifics of using libtiff.</p>


<p><heading refname="h1" type="major" toc="yes">Theory of color and grayscale storage</heading>	
The first thing that we need to understand to be able to support color and grayscale images is the format of the image data within memory.</p>
	
<p>[Next paragraph goes here]</p>

<p><heading refname="h1" type="major" toc="yes">Compression algorithms in libtiff</heading>	
There are several compression algorithms available within libtiff. How do you select which one is right for your imaging needs?</p>

<b>Libtiff compression algorithms</b>
<htmlinsert><![CDATA[

<table width="100%" cellspacing="0" cellpadding="3" border="1">
<tr valign="top">
<td><b>Compression algorithm</b></td>
<td><b>Well suited to</b></td>
</tr>
<tr valign="top">
<td>CCITT Group 4 Fax and Group 3 Fax</td>
<td>This entry is here for completeness. If your coding for black and white images, then you're probably using the CCITT fax compression methods. These compression algorithms don't support color.</td>
</tr>
<tr valign="top">
<td>JPEG</td>
<td>JPEG compression is great for large images such as photos. However, the compression is normally lossy (in that image data is thrown away as part of the compression process). This makes JPEG very poor for compressing text which needs to remain readable. The other thing to bear in mind is that the loss is accumulative.</td>
</tr>
<tr valign="top">
<td>Content A3</td>
<td>Content B3</td>
<td>Content C3</td>
</tr>
</table>

]]></htmlinsert>

<sidebar>
<heading refname="" type="sidebar" toc="no">Accumulating loss?</heading>
<p>Why does the loss in lossy compression algorithms such as JPEG accumulate? Imagine that you compress an image using JPEG. You then need to add say a barcode to the image, so you uncompress the image, add the barcode, and recompress it. When the recompression occurs, then a new set of loss is introduced. You can imagine that if you do this enough, then you'll end up with an image which is a big blob.</p>
</sidebar>



TIFFReadRGBAStrip pain






<!--MINOR HEADING: CODE HEADING TAG WITH TYPE="MINOR".  ENTER A REFERENCE NAME TO BE USED AS AN INLINE LINK IN THE TOC.  USE ALT= ATTRIBUTE IF YOU WANT THE TOC TEXT TO BE DIFFERENT FROM THE HEADING.  TO REMOVE THIS HEADING FROM THE TOC, CODE TOC="NO".   PRECEDE ALL MINOR HEADINGS WITH A PARAGRAPH TAG-->
<p><heading refname="h2" type="minor" toc="yes">[Minor heading 1]</heading>
[Insert paragraph text here and end the paragraph with an end paragraph tag.  To include inline code in a paragraph, surround the code snippet with a
code tag that has the attribute: type="inline".  This is an <code type="inline">inline code snippet</code> .
</p>

<!-- CODE SECTION WITH HEADING:  PLACE HEADING INSIDE CODE TAG WITH TYPE="CODE".  DO NOT SURROUND CODE SECTION WITH PARAGRAPH TAGS.  THE TOC ATTRIBUTE DETERMINES IF THIS HEADING IS INCLUDED IN THE TOC.   DEFAULT IS TOC="NO".-->
<code type="section">
<heading refname="code1" type="code" toc="no">[Caption for sample code section or code listing]</heading>
[Code goes here.  &lt;pre&gt; tags will be added automatically.

Use the b tag to surround <b>bolded code</b>.

To specify colors, use the class attribute on the b tag:
        code &lt;b class="red"&gt; for <b class="red">red</b>.
        code &lt;b class="green"&gt; for <b class="green">green</b>.
        code &lt;b class="blue"&gt; for <b class="blue">blue</b>.

Use the space key to indent lines.]
</code>

<p>[Next paragraph goes here]</p>

<!-- CODE SECTION WITHOUT HEADING:  DO NOT SURROUND CODE SECTION WITH PARAGRAPH TAGS.  THE TOC ATTRIBUTE DETERMINES IF THIS HEADING IS INCLUDED IN THE TOC.   DEFAULT IS TOC="NO".-->
<code type="section">
[This code example does not have a code heading]
</code>

<p><heading refname="h3" type="major" toc="yes">[Major heading 2]</heading>
[Insert paragraph text here and end with an end paragraph tag.]</p>


<!-- FIGURE WITH HEADING:  PLACE HEADING INSIDE FIGURE TAG WITH TYPE="FIGURE".  DO NOT SURROUND FIGURE WITH PARAGRAPH TAGS.  THE TOC ATTRIBUTE DETERMINES IF THIS HEADING IS INCLUDED IN THE TOC.   DEFAULT IS TOC="NO".   ALWAYS CODE THE ALT= ATTRIBUTE FOR A FIGURE.  ALWAYS CODE CORRECT HEIGHT AND WIDTH FOR FIGURE-->
<figure>
<heading refname="figure1" type="figure" toc="no">[Figure x.   Caption for sample figure]</heading>
<img src="xxx.jpg" width="500" height="200" alt="[Sample figure; code correct height and width"/>
</figure>

<p>[Refer to figure using the reference name (refname) assigned to the figure, as follows: <a href="#figure1">Figure 1</a>. ]</p>

<!-- THIRD-LEVEL HEADING:  PRECEDE ALL THIRD-LEVEL HEADINGS WITH A PARAGRAPH TAG.  FOLLOW THE HEADING WITH A BREAK TAG.-->
<p><b>[Third-level heading]</b><br />
[The third-level heading above is created using bold tags and is followed by a break tag to separate it from the paragraph text.]</p>

<p>[Next paragraph goes here with unordered list.  If you end the paragraph tag before the list, you get a space separating the text from the list.]</p>
<ul>
<li>[List item one]</li>
<li>[List item two]</li>
<li>[List item three]</li>
</ul>

<!-- RESOURCE LIST WITH HEADINGS:  PLACE HEADINGS INSIDE RESOURCELIST TAG WITH TYPE="RESOURCELIST".  DO NOT SURROUND LIST WITH PARAGRAPH TAGS, BUT USE PARAGRAPH TAGS AROUND RESOURCELIST HEADINGS.-->
<resourcelist>
<ul>
<li>[First resource item and link without a heading]</li>
<li>[Second resource item and link without a heading]</li>
</ul>
<p><heading refname="" type="resourcelist" toc="no">[Sample resource list heading]</heading></p>
<ul>
<li>[First resource item and link with a heading]</li>
<li>[Second resource item and link with a heading]</li>
</ul>
</resourcelist>

<!-- IF AN ATTRIBUTION IS REQUIRED, USE AN APPROPRIATE ONE BELOW OR ENTER NEW TEXT-->
<!--   JavaWorld ATTRIBUTION :  REMOVE COMMENTS TO USE OR REMOVE TAGS BELOW -->
<!--<attribution>Reprinted with permission from  <a href="http://www.javaworld.com/?IBMDev">JavaWorld</a> magazine. Copyright Web Publishing Inc., an IDG Communications company.  Register for <a href="http://www.javaworld.com/javaworld/common/jw-subscribe.html?IBMDev">editorial e-mail</a> alerts.</attribution>-->

<!--   LinuxWorld ATTRIBUTION :  REMOVE COMMENTS TO USE OR REMOVE TAGS BELOW -->
<!--<attribution>Reprinted with permission from <a href="http://www.linuxworld.com?IBMDev">LinuxWorld</a> magazine. Copyright Web Publishing Inc., an IDG Communications company. <a href="http://www.linuxworld.com/linuxworld/common/lw-subscribe.html?IBMDev">Register for editorial e-mail</a>.</attribution>-->
	
<!-- ENDS ARTICLE -->
</article>

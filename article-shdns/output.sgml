<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article>
<title>UDP shell scripts with inetd</title>

<sect1><title>About the author</title>
<para>
Michael has been working in the image processing field for several years, including a couple of years managing and developing large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as being the maintainer of the comp.text.pdf USENET frequently asked questions document.
</para>

<para>
Michael has a website at http://www.stillhq.com.
</para>
</sect1>

<sect1><title>Introduction</title>
<para>
...Assumed C knowledge...

TODO
</para>
</sect1>




















<sect1><title>UDP</title>
<para>
It strikes me as logical to start this article with an extremely brief introduction to UDP. At some points it makes sense to compare this with the alternative, TCP.
</para>

<para>
Both UDP and TCP sit onto of the Internet protocol, which handles all the plumbing of actually getting the data out of the back of the client machine to the server. This is where the similarity ends. UDP is the <emphasis>User Datagram Protocol</emphasis>, and is unreliable. On the other hand, TCP is the <emphasis>Transmission Control Protocol</emphasis>, and is reliable.
</para>

<para>
What is reliability? Well, TCP will hold your hand and ensure for you that every packet you send is recieved by the other machine. It will also ensure that the packets arrive in the right order. There are also some games played with the choice of initial sequence number to make it harder for man in the middle attacks to be successful.
</para>

<para>
UDP is unreliable, which means it does none of this for you. It is the programmer's responsibility to ensure that all the packets sent arrived, and were in the right order.
</para>

<para>
So why would you ever use UDP? Well, all this reliability in TCP comes at a price. That price is performance. Before a TCP connection is estabilished, the following protocol sequence occurs.
</para>

<graphic format="eps" fileref="gen-tcp-handshake.eps">

<para>
So before the two machines can even communicate, they've spent one and a half round trips just setting up the connection.
</para>

<para>
UDP, on the other hand, does none of this. A single packet is sent, and it either arrives or it doesn't. Normally the client application will note that a reply was never received after a given timeout, and retransmit the packet.
</para>

<para>
A good example of a common network protocol that uses UDP is the Domain Name System (DNS). UDP is well suited here because the packets are short (they fit in a single datagram) and we therefore don't have to worry about our packets arriving out of order.We also want DNS to be as fast as possible. 
</para>

<para>
TODO: is there more processor load associated with all the extra processing required to make TCP reliable?
</para>

<para>
For more information on UDP, and IP in general, I recommend:

TODO
</para>

<sect2><title>Datagrams</title>
<para>
TODO
</para>
</sect2>

<sect2><title>Disconnected sockets</title>
<para>
TODO
</para>

<programlisting>
// Disconnected UDP socket example: this example simply reads from clients (there can be more 
// than one), and returns what they said straight back to them. You'll note that we can't use 
// read and write to get to the traffic, as this is not available for disconnected UDP sockets.

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char *argv[]){
  int lfd;
  struct sockaddr_in servaddr;
  struct sockaddr clientaddr;
  char buf[1024];
  size_t len;
  socklen_t clen;
  
  // We will listen with this file descriptor
  if((lfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0){
    fprintf(stderr, "Error whilst starting to listen\n");
    exit(42);
  }

  // Define what we are listening for
  bzero(&amp;servaddr, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port = htons(1234);

  // Bind to the address
  if(bind(lfd, (struct sockaddr *) &amp;servaddr, sizeof(servaddr)) &lt; 0){
    perror("Couldn't bind");
    exit(42);
  }
  
  // Do stuff
  while(1){
    len = 1024;
    printf("Reading...\n");
    clen = sizeof(clientaddr);
    if((len = recvfrom(lfd, buf, len, 0, (struct sockaddr *) &amp;clientaddr, 
               &amp;clen)) &lt; 0){
      perror("Socket read error");
      exit(42);
    }
    if(len == 0) break;

    // The buffer is not null terminated
    buf[len] = '\0';
    printf("Read: %s\n", buf);

    // And send it straight back
    if(sendto(lfd, buf, len, 0, &amp;clientaddr, clen) &lt; 0){
      perror("Socket write error");
      exit(42);
    }
  }
}
</programlisting>
<para><emphasis>Code: disconnected.c</emphasis></para>
</sect2>

<sect2><title>Connected sockets</title>
<para>
TODO
</para>

<programlisting>
// Connected UDP socket example: this example simply reads from clients (there can be more 
// than one), and returns what they said straight back to them. You'll note that we can now use 
// read and write to get to the traffic...

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char *argv[]){
  int lfd;
  struct sockaddr_in servaddr;
  struct sockaddr clientaddr;
  char buf[1024];
  size_t len;
  socklen_t clen;
  
  // We will listen with this file descriptor
  if((lfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0){
    fprintf(stderr, "Error whilst starting to listen\n");
    exit(42);
  }

  // Define what we are listening for
  bzero(&amp;servaddr, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port = htons(1234);

  // Bind to the address
  if(bind(lfd, (struct sockaddr *) &amp;servaddr, sizeof(servaddr)) &lt; 0){
    perror("Couldn't bind");
    exit(42);
  }
  
  // Do stuff
  while(1){
    // We need to peek at the first part of the packet to determine who to connect to
    len = 1;
    printf("Reading...\n");
    clen = sizeof(clientaddr);
    if((len = recvfrom(lfd, buf, len, MSG_PEEK, (struct sockaddr *) &amp;clientaddr, 
               &amp;clen)) &lt; 0){
      perror("Socket peek error");
      exit(42);
    }
    if(len == 0) break;

    // Connect
    if(connect(lfd, &amp;clientaddr, clen) &lt; 0){
      perror("Could not connect");
      exit(42);
    }

    // And now we can just use the normal read and write
    len = 1024;
    if((len = read(lfd, buf, len)) &lt; 0){
      perror("Socket read error");
      exit(42);
    }
    if(write(lfd, buf, len) &lt; 0){
      perror("Socket write error");
      exit(42);
    }
  }
}
</programlisting>
<para><emphasis>Code: connected.c</emphasis></para>
</sect2>
</sect1>











<sect1><title>inetd</title>
<para>
I guess I should also briefly explain what inetd and xinetd do for you.

TODO
</para>

<sect2><title>Role</title>
<para>
TODO
</para>
</sect2>

<sect2><title>Working with UDP</title>
<para>
TODO
</para>
</sect2>

<sect2><title>Getting connected sockets</title>
<para>
TODO
</para>

<programlisting>
// Disconnected UDP socket example: this example simply waits fro traffic, and the starts
// a process to deal with the results. One process per packet, one packet per process.
// This version wont work, because the socket is not connected. In fact, cat is smart enough
// to warn us about this:
//
//           cat: write error: Transport endpoint is not connected

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/poll.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char *argv[]){
  int lfd;
  struct sockaddr_in servaddr;
  struct pollfd pfd;
  
  // We will listen with this file descriptor
  if((lfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0){
    fprintf(stderr, "Error whilst starting to listen\n");
    exit(42);
  }

  // Define what we are listening for
  bzero(&amp;servaddr, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port = htons(1234);

  // Bind to the address
  if(bind(lfd, (struct sockaddr *) &amp;servaddr, sizeof(servaddr)) &lt; 0){
    perror("Couldn't bind");
    exit(42);
  }

  // Setup the list of file descriptors we want to wait for events on
  pfd.fd = lfd;
  pfd.events = POLLIN | POLLPRI;
  
  // Do stuff
  while(1){
    if(poll(&amp;pfd, 1, -1) &lt; 0){
      perror("Waiting for new data failed");
      exit(42);
    }

    printf("Data arrived\n");

    // Spawn a child to handle this packet
    switch(fork()){
    case -1:
      perror("Couldn't spawn child to handle connection");
      exit(42);
      
    case 0:
      // Child process -- setup the file descriptors, and the run the helper application
      dup2(lfd, 0);
      dup2(lfd, 1);

      execl("/bin/cat", "cat", NULL);
      perror("Exec failed");
      exit(42);
      break;

    default:
      // Parent process
      break;
    }
  }
}
</programlisting>
<para><emphasis>Code: disconnexec.c</emphasis></para>

<para>
TODO
</para>

<programlisting>
// Connected UDP socket example: this example this example simply waits fro traffic, and the 
// starts a process to deal with the results. One process per packet, one packet per process. 
// You'll note that we can now use read and write to get to the traffic, and that this all
// works...

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int main(int argc, char *argv[]){
  int lfd;
  struct sockaddr_in servaddr;
  struct sockaddr clientaddr;
  char buf[1024];
  size_t len;
  socklen_t clen;
  
  // We will listen with this file descriptor
  if((lfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0){
    fprintf(stderr, "Error whilst starting to listen\n");
    exit(42);
  }

  // Define what we are listening for
  bzero(&amp;servaddr, sizeof(servaddr));
  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port = htons(1234);

  // Bind to the address
  if(bind(lfd, (struct sockaddr *) &amp;servaddr, sizeof(servaddr)) &lt; 0){
    perror("Couldn't bind");
    exit(42);
  }
  
  // Do stuff
  while(1){
    // We need to peek at the first part of the packet to determine who to connect to
    len = 1;
    printf("Reading...\n");
    clen = sizeof(clientaddr);
    if((len = recvfrom(lfd, buf, len, MSG_PEEK, (struct sockaddr *) &amp;clientaddr, 
               &amp;clen)) &lt; 0){
      perror("Socket peek error");
      exit(42);
    }
    if(len == 0) break;

    // Connect
    if(connect(lfd, &amp;clientaddr, clen) &lt; 0){
      perror("Could not connect");
      exit(42);
    }
    
    printf("Data arrived\n");

    // Spawn a child to handle this packet
    switch(fork()){
    case -1:
      perror("Couldn't spawn child to handle connection");
      exit(42);
      
    case 0:
      // Child process -- setup the file descriptors, and the run the helper application
      dup2(lfd, 0);
      dup2(lfd, 1);

      execl("/bin/cat", "cat", NULL);
      perror("Exec failed");
      exit(42);
      break;

    default:
      // Parent process
      break;
    }
  }
}
</programlisting>
<para><emphasis>Code: connexec.c</emphasis></para>
</sect2>

<sect2><title>Patches</title>
<para>
TODO
</para>
</sect2>
</sect1>













<sect1><title>shdns</title>
<para>
TODO
</para>

<sect2><title>The code</title>
<para>
TODO
</para>

<programlisting>
#!/bin/bash

logger "shdns $$ Started listening"
/home/mikal/opensource-unstable/shdns/shdns /tmp/shdns-$$ &amp;
cat - &gt; /tmp/shdns-$$
logger "shdns $$ Waiting for processor to end"
wait
logger "shdns $$ Stopped listening"
</programlisting>
<para><emphasis>Code: shdns-server</emphasis></para>

<para>
TODO
</para>

<programlisting>
#!/bin/bash

# shdns: take a query and build a response

##############################################################################
# Utility functions
##############################################################################

# The state of a given bit in the byte: (byte, poweroftwo)
dumpbit(){
  local temp
  temp=$1

  if [ $1 -gt $(( $2 - 1 )) ]
  then
    echo -n "1"
    temp=$(( $1 - $2 ))
  else
    echo -n "0"
  fi

  return $temp
}

# The state of the whole byte: (byte)
dumpbyte(){
  dumpbit $1 128
  dumpbit $? 64
  dumpbit $? 32
  dumpbit $? 16
  dumpbit $? 8
  dumpbit $? 4
  dumpbit $? 2
  dumpbit $? 1
}

# Is a given bit on? (byte, poweroftwo)
testbit(){
  return `dumpbit $1 $2`
}

# Turn on a given bit in the byte: (initial byte state, poweroftwo, desiredstate)
# Returns a decimal version of the byte
twiddlebit(){
  local temp
  temp=$1

  testbit $1 $2
  if [ $? = 1 ]
  then
    if [ $3 = 0 ]
    then
      temp=$(( $temp - $2 ))
    fi
  else 
    if [ $3 = 1 ]
    then
      temp=$(( $temp + $2 ))
    fi
  fi

  return $temp
}

# Spin until a byte exists: (filename, bytenumber)
spinfor(){
  local len

  len=`cat $1 | wc -c | tr -d " "`
  while [ $len -lt $2 ]
  do
    logger "shdns $$ Spin on byte $2"
    usleep $3
    len=`cat $1 | wc -c | tr -d " "`
  done
}

# Read a single byte from a file: (filename, bytenumber)
readbyte(){
  spinfor $1 $2 10 
  cat $1 | cut -b $2
}

# Read a range of bytes from a file: (filename, startbyte, length)
readstring(){
  spinfor $1 $(( $2 + $3 - 1 )) 10
  logger "shdns $$ Getting byte range $1:$2-"$(( $2 + $3 - 1 ))":$3"
  cat $1 | cut -b $2-$(( $2 + $3 - 1 ))
}

# Read a single binary byte as decimal from a file: (filename, bytenumber)
readbytebinary(){
  local temp

  spinfor $1 $2 1000
  temp=`cat $1 | cut -b $2 | od -Ad -c | head -1 | tr -s " " | cut -f 2 -d " "`
  if [ `echo $temp | cut -b 1` = "\\" ]
  then
    case `echo $temp | cut -b 2` in
    0 ) temp="0";;
    a ) temp="7";;
    b ) temp="8";;
    t ) temp="9";;
    n ) temp="10";;
    v ) temp="11";;
    f ) temp="12";;
    \\ ) temp="92";;
    * ) echo "Error: Unknown escape binary sequence"; exit;;
    esac
  fi
  
  return $temp
}

# Output the bit for this value: (inputvalue, byteoffset)
writebinarybit(){
  if [ $1 -gt $(( $2 - 1 )) ]
  then
    echo -n "1"
    return $(( $1 - $2 ))
  else
    echo -n "0"
    return $1
  fi
}

# Turn a number into a binary byte: (inputvalue)
writebinarybyte(){
  writebinarybit $1 128
  writebinarybit $? 64
  writebinarybit $? 32
  writebinarybit $? 16
  writebinarybit $? 8
  writebinarybit $? 4
  writebinarybit $? 2
  writebinarybit $? 1
}

# Output the byte which is represented by a decimal number
tobyte(){
  # Echo only takes octal numbers, so we convert
  echo -n -e \\$1
}

###############################################################################

process(){
  logger "shdns $$ Started parsing $1 at $2"
  inset=$2

  # Identification: 2 bytes
  id=`readstring $1 $inset 2`; inset=$(( $inset + 2 ))
  logger "shdns $$ Packet id: $id"

  # Flags: 2 bytes
  temp=`cat $1 | cut -b $inset |  od -Ad -c | head -1 | cut -f 2 -d " "`; inset=$(( $inset + 1 ))
  testbit $temp 128; qr=$?
  testbit $temp 8; op=$?
  testbit $temp 4; aa=$?
  testbit $temp 2; trun=$?
  testbit $temp 1; rd=$?

  logger "shdns $$ Query / response: $qr"
  logger "shdns $$ Opcode: $op"
  logger "shdns $$ Authoritative answer: $aa"
  logger "shdns $$ Packet truncated: $trun"
  logger "shdns $$ Recursion desired: $rd"

  readbytebinary "$1" $inset; temp=$?; inset=$(( $inset + 1 ))
  testbit $temp 128; ra=$?
  
  logger "shdns $$ Recursion available: $ra"
  
  # The number of questions is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?; inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?; inset=$(( $inset + 1 ))
  qcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of questions: $qcount"
  
  # The number of answers is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?; inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?; inset=$(( $inset + 1 ))
  acount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of answers: $acount"
  
  # The number of authority RRs is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?; inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?; inset=$(( $inset + 1 ))
  authcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of authorities: $authcount"
  
  # The number of additional RRs is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?; inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?; inset=$(( $inset + 1 ))
  addcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of additionals: $addcount"
  
  ######################
  # For each question
  ######################
  
  len=42
  questioncount=0
  
  while [ $questioncount -lt $qcount ]
  do
    questionstart=$inset
    logger "shdns $$ Question"
    name=""
  
    namelength=0
    readbytebinary "$1" $inset; len=$?
    while [ $len -gt 0 ]
    do
      inset=$(( $inset + 1 ))
      name="$name"`readstring "$1" $inset $len`"."
      inset=$(( $inset + $len ))
      
      namelength=$(( $namelength + $len + 1 ))
      readbytebinary "$1" $inset; len=$?
    done
    inset=$(( $inset + 2 ))
    logger "shdns $$ Lookup: $name"
  
    # Type of question
    readbytebinary "$1" $inset; type=$?
    error="none"
    temp="shdns $$ Determine the query type"
    case $type in
    1 ) temp="$temp A";;
    2 ) temp="$temp NS";;
    5 ) temp="$temp CNAME";;
    12 ) temp="$temp PTR";;
    13 ) temp="$temp HINFO";;
    15 ) temp="$temp MX";;
    * ) temp="Error: Unknown query type"; error="yes";;
    esac
  
    logger "$temp ($error)"
    inset=$(( $inset + 1 ))  

    # The class should always be 1
    readbytebinary "$1" $inset; class=$?; inset=$(( $inset + 1 ))
    logger "shdns $$ Query class: $class"
  
    if [ "%$error%" = "%none%" ]
    then
      # Dodgy bug fix
      name=`echo $name | sed 's/\.$//'`
    
      # Lookup the name in the db file
      result=`grep "$name" /home/mikal/opensource-unstable/shdns/lookup | tr -s "\t" | cut -f 2`
      logger "shdns $$ Result: $result"

      #########################################################
      # Now we need to build a response to the query

      # The id number we were handed gets handed straight back
      echo -n "$id"

      # Flag this packet as being a reply (we currently never claim to be authoritive)
      twiddlebit 0 128 1
      tobyte $?
#      tobyte 0

      # Number of questions (we have to return the question we are answering)
      tobyte 0
      tobyte 1
 
      # Number of answers
      tobyte 0
      tobyte 1

      # Number of authorities
      tobyte 0
      tobyte 0

      # Number of additionals
      tobyte 0
      tobyte 0

      # It's easy to return the question, we just copy it...
      echo -n `readstring $1 $questionstart $(( $inset - $questionstart - 2 ))`
      tobyte 0

      # The type is the same as in the question
      tobyte 0
      tobyte $type

      # The class is one
      tobyte 0
      tobyte 1

      # The time to live is always low, because we are dodgy
      tobyte 4
      tobyte 4
      tobyte 4
      tobyte 4

      # The length of the returned data is always an IP (32 bits)
      tobyte 0
      tobyte 4

      # And now the answer as a number
      # For the result in the answer, we are going to need this in a binary form of decimal
      while [ "%$result%" != "%%" ]
      do
        temp=`echo $result | cut -f 1 -d "."`
        result=`echo $result | sed 's/^[0-9]*\.*//'`
        tobyte $temp
        logger "shdns $$ Processing result segment: $temp ($result)"
      done

      # We need to return an authority as well...

      logger "shdns $$ Finished extracting result"
    else
      # Work out the erroneous type
      logger "shdns $$ Erroneous type was $type ("`dumpbyte $type`")"
    fi

    logger "shdns $$ Finished processing question"
    questioncount=$(( $questioncount + 1 ))
  done

  return $inset`twiddlebit 0 128 1`
}

###############################################################################

offset=1
#while [ 1 -ne 0 ]
#do
  spinfor $1 $offset
  process $1 $offset
  offset=$?
  logger "shdns $$ Ended at $offset"
#  killall -9 cat
#done

exit

</programlisting>
<para><emphasis>Code: shdns</emphasis></para>
</sect2>

<sect2><title>Does it work?</title>
<para>
TODO
</para>
</sect2>
</sect1>

<sect1><title>Getting the code from this article</title>
<para>
TODO
</para>
</sect1>

</article>

.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "PLOT_STRINGWIDTH" "3" "26 May 2003" "" ""

.SH NAME
plot_stringwidth \- determine how many pixels a string will take horizontally
.SH SYNOPSIS

.nf
 #include&lt;libmplot.h&gt;
 unsigned int plot_stringwidth(plot_state *state, char *string);
.fi
.SH "DESCRIPTION"
.PP
This function determines how many pixels a string will consume in the current font and size.
.SH "RETURNS"
.PP
0 on success, -1 otherwise
.SH "EXAMPLE"

.nf
 #include&lt;libmplot.h&gt;
 plot_state *graph;
 char *words[] = {"This", "is", "a", "string", "which", "is", "quite", "long.",
 "It", "demonstrates", "how", "to", "do", "word", "wrap", NULL};
 if((graph = plot_newplot(400, 300)) == NULL){
 ... error ...
 }
 plot_setfontcolor(graph, 26, 22, 249);
 plot_setfont(graph, "/usr/share/fonts/default/Type1/n021004l.pfb", 12);
 plot_settextlocation(graph, 20, 70);
 count = 0;
 while(words[count] != NULL){
 plot_gettextlocation(graph, &amp;textx, &amp;texty);
 if((textx + plot_stringwidth(graph, words[count])) > 380){
 if(texty + 70 > 150)
 break;
 plot_settextlocation(graph, 20, texty + 20);
 }
 plot_writestring(graph, words[count]);
 plot_writestring(graph, " ");
 count++;
 }
.fi
.SH "VERSION"
.PP
This documentation was generated for \fBlibplot\fR 0.3 by \fBautodocbook\fR (http://www.stillhq.com).
.SH "AUTHOR"
.PP
\fBlibplot\fR is under development by Michael Still (mikal@stillhq.com). All code is Copyright Michael Still 2002,  and is released under the GNU GPL. Code submissions are welcomed. Contact Michael at the address above if you have something you would like to contribute.
.SH "BUGS"
.PP
There  are no known bugs in \fBlibplot\fR. If you find one, please contact mikal@stillhq.com and let me know.

<sect4><title>Strings</title>
<para>
Strings are represented a series of unsigned bytes
  <footnote><para>That is, in the range 0 to 255.</para></footnote>
which is identical to the ASCII strings most programmers are familar with in C. There are two main representations of strings. These are:
</para>

<sect5><title>Bracket notation</title>
<para>
Strings can be wrapped in curved brackets such as () to delimit the start and end of the string. Strings may also contain brackets, so long as they are balanced or escaped with a backslash.
</para>

<para>
These are known as literal strings in the PDF specification.
</para>
</sect5>

<sect5><title>Examples</title>
<programlisting>
(hello)
(hello world)
(hello world \(the people I like\))
(hello world (the people I like))
</programlisting>
</sect5>

<sect5><title>Escaped characters</title>
<para>
There are a series of standard characters which are used with the backslash escape. These are:
</para>

<itemizedlist>
<listitem><para><emphasis>\n</emphasis>: Newline</para></listitem>
<listitem><para><emphasis>\r</emphasis>: Carriage return</para></listitem>
<listitem><para><emphasis>\t</emphasis>: Tab</para></listitem>
<listitem><para><emphasis>\b</emphasis>: Backspace</para></listitem>
<listitem><para><emphasis>\f</emphasis>: Form feed</para></listitem>
<listitem><para><emphasis>\(</emphasis>: Open bracket</para></listitem>
<listitem><para><emphasis>\)</emphasis>: Close bracket</para></listitem>
<listitem><para><emphasis>\\</emphasis>: Backslash</para></listitem>
<listitem><para><emphasis>\ddd</emphasis>: Arbitary character (ddd is a number in octal)</para></listitem>
</itemizedlist>

<para>
The backslash operator can also be used to continue text on the next line. For instance:
</para>

<programlisting>
(This is a very long string which we want to \
break over a couple of lines.)
</programlisting>

<para>
This means that we can also embed newlines without using the escape. For instance, these two text blocks are the same:
</para>

<programlisting>
(This is a 
string \
with some lines)
</programlisting>

<para>
and
</para>

<programlisting>
(This is a\nstring with some lines)
</programlisting>

<para>
More on strings in this notation can be found in the PDF specification, version 1.3, on page 30.
</para>
</sect5>

<sect5><title>Hexadecimal notation</title>
<para>
Strings can also be written in hexadecimal form, and in this case are enclosed in angle brackets.
</para>
</sect5>

<sect5><title>Examples</title>
<para>
An example of a hexidecimal string is:
</para>

<programlisting>
&lt;4E6F762073686D6F7A206B6120706F702E&gt;
</programlisting>

<para>
If the final digit is missing, then it is assumed to be zero. For instance, the following string:
</para>

<programlisting>
&lt;901FA&gt;
</programlisting>

<para>
Is the same as:
</para>

<programlisting>
&lt;901FA0&gt;
</programlisting>
</sect5>

</sect4>

<sect1><title>Theory of color and gray scale storage</title>
<para>
There are several ways that the value of a pixel can be stored within a raster image. This is a pretty fundamental concept, so it is best to get it out of the way early on before we get caught up in the actual format of images.
</para>

<slidetext>
<li>There are several ways that we can store the pixels within a raster
</slidetext>

<slideinclude>
<figure><title>The worst picture of a house you have ever seen</title>
<execute><cmd>img</cmd><args>theory-figure1.png</args></execute>
</figure>
</slideinclude>

<para>
I will use the simple image above to demonstrate the ways that the pixel values can be stored...
</para>

<slidetext>
<li>Let's use this house as an example...
</slidetext>

<slidebreak>

<slideinclude>
<figure><title>A zoom in on the house</title>
<execute><cmd>img</cmd><args>theory-figure2.png</args></execute>
</figure>
</slideinclude>

<para>
We'll in fact only use a zoomed in portion of the image so that what is happening is clearer.
</para>

<sect2><title>Direct storage of black and white</title>
<slideinclude>
<figure><title>A black and white zoom in</title>
<execute><cmd>img</cmd><args>theory-figure3.png</args></execute>
</figure>
</slideinclude>

<para>
Black and white images only really have one pixel value storage option. This is to store the value of the pixel directly at the pixel location in the image data itself. This is a good option for black and white data, because it only takes on bit per pixel anyway.
</para>

<slidetext>
<li>Black and white images only have one storage option
<li>Store the on / off value at the pixel location within the raster
<li>We only need one bit per pixel...
</slidetext>

<slidebreak>

<slideinclude>
<figure><title>Black and white data</title>
<execute><cmd>img</cmd><args>theory-figure4.png</args></execute>
</figure>
</slideinclude>

<para>
Whilst this is a very simple example, make sure you understand how the diagram works, because it gets more complex from here. Each square represents the storage space in the image data, and in this example the values representing the pixel values is stored inside the image data.
</para>

<slidetext>
<li>Watch out, it only gets more complex from here...
</slidetext>
</sect2>

<sect2><title>Direct gray scale storage</title>
<slideinclude>
<figure><title>A gray scale zoom in</title>
<execute><cmd>img</cmd><args>theory-figure5.png</args></execute>
</figure>
</slideinclude>

<para>
In this example, we are storing the gray scale values of the pixels within the image data.
</para>

<slidetext>
<li>Similar to black and white, we just store the value at the pixel location
</slidetext>
</sect2>

<sect2><title>Direct RGB storage</title>
<slideinclude>
<figure><title>A RGB zoom in</title>
<execute><cmd>img</cmd><args>theory-figure6.png</args></execute>
</figure>
</slideinclude>

<para>
Here we are storing the red green and blue values for each pixel within the image data.
</para>

<slidetext>
<li>We could store the RGB values within the pixel location
</slidetext>
</sect2>

<sect2><title>Paletted RGB storage</title>
<slideinclude>
<figure><title>A paletted RGB zoom in</title>
<execute><cmd>img</cmd><args>theory-figure7.png</args></execute>
</figure>
</slideinclude>

<para>
The other option is to instead store within the image data itself a number which uniquely identifies the color at that pixel. We can then have a table elsewhere in the image file which defines the color that is that unique value. This table is a palette, and this is a very common way of storing RGB data (it is in fact the only option with some formats such as GIF).
</para>

<slidetext>
<li>Here we just store the index into a lookup table in the pixel location
<li>The lookup table is called a palette
<li>This also works for grayscale images...
</slidetext>

<para>
You can also use palettes for gray scale images, I just haven't provided an example of that here.
</para>

<sect3><title>The advantage of paletting</title>
<para>
The big advantage of paletting an image is that the final file is going to be much smaller. For example, an A4 page is 1754 by 2479 pixels. That's 4,348,166 pixels. Now, let's assume for this example that the image is 24 bit color (that is 8 bits per color per pixel), and that there are seven colors in the image. That means that unpaletted, we have 13,044,498 bytes of image data (uncompressed). If we palette the image data, then we only need three bits of data in the image data -- 1,630,562 bytes (uncompressed). We'll also need to store the palette itself, which will need another 21 bytes (uncompressed). We don't need to store the color indices, as they are just an offset into an array.
</para>

<para>
This means that the total saving on an uncompressed image is 11,413,936 bytes. The disadvantage of course is that using the image is almost certainly going to be slightly slower...
</para>

<slidetext>
<li>A4 page = 1754 x 2479 pixels = 4,348,166 pixels
<li>Assume 24 bit color (8 bits for each of R, G, and B)
<li>Assume 7 colors in the image (3 bits for the palette index)
<li>Unpaletted: 4,348,166 * 24 bits = 13,044,498 bytes (uncompressed)
<li>Paletted: 4,348,166 * 3 bits = 1,630,562 bytes (uncompressed)
  <ul>
  <li>Plus the size of the palette: 7 * 24 bits = 21 bytes
  </ul>
</slidetext>
</sect3>
</sect2>
</sect1>

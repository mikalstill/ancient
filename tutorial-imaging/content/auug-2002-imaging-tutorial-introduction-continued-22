TITLE: AUUG 2002: Imaging Tutorial: Introduction: Continued 22
<br><br><div align="center"><b>Four pictures of my son Andrew</b>
<br><img src="/notes/presentations/content/gen-tiff-figure8.jpg">
</div><BR><BR>



<BR><BR><b>Reading more than one image inside a TIFF</b>
<BR><BR>
We should also probably know how to get to these images once we have more than one image inside a single TIFF file...


<BR><BR>
This example below demonstrates how to do this.



<pre>
#include &lt;stdio.h&gt;
#include &lt;tiffio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;

void usage (char *, int);

int
main (int argc, char *argv[])
{
  TIFF *input, *output;
  uint32 width, height;
  tsize_t stripSize, stripNumber;
  unsigned long x, y;
  char *inputFilename = NULL, *outputFilename = NULL, 
    outputFilenameActual[200], *raster, *roff, optchar;
  int count;

  /////////////////////////////////////////////////////////////////////////////
  // Parse the command line options
  while ((optchar = getopt (argc, argv, "i:o:")) != -1)
    {
      switch (optchar)
	{
	case 'i':
	  inputFilename = (char *) strdup (optarg);
	  break;

	case 'o':
	  outputFilename = (char *) strdup (optarg);
	  break;

	default:
	  usage(argv[0], 0);
	  break;
	}
    }

  // Check the output parent name
  if(outputFilename == NULL){
    fprintf(stderr, \
	    "You need to specify a name for the series of output files\n");
    usage(argv[0], 42);
  }

  // Open the input TIFF image
  if ((inputFilename == NULL) ||
      (input = TIFFOpen (inputFilename, "r")) == NULL)
    {
      fprintf (stderr, "Could not open incoming input %s\n", inputFilename);
      usage (argv[0], 42);
    }

  /////////////////////////////////////////////////////////////////////////////
  // Grab a sub file from the input image and move it to a separate file. We do
  // this forever (until we break down below)...
  for(count = 0;; count++){
    // Find the width and height of the input
    TIFFGetField (input, TIFFTAG_IMAGEWIDTH, &amp;width);
    TIFFGetField (input, TIFFTAG_IMAGELENGTH, &amp;height);

    ///////////////////////////////////////////////////////////////////////////
    // Grab some memory
    if ((raster = (char *) malloc (sizeof (char) * width * height * 3)) == 
	NULL)
      {
	fprintf (stderr, 
		 "Could not allocate enough memory for input raster\n");
	exit (42);
      }

    ///////////////////////////////////////////////////////////////////////////
    // Read the input into the memory buffer
    // todo: I couldn't use TIFFReadRGBAStrip here, because it gets confused
    stripSize = TIFFStripSize (input);
    roff = raster;
    for (stripNumber = 0; stripNumber &lt; TIFFNumberOfStrips (input);
	 stripNumber++)
      {
	roff += TIFFReadEncodedStrip (input, stripNumber, roff, stripSize);
      }
    
    ///////////////////////////////////////////////////////////////////////////
    // Open the output TIFF
    snprintf(outputFilenameActual, 200, "%s-%d.tif", outputFilename, count);
    if ((output = TIFFOpen (outputFilenameActual, "w")) == NULL)
      {
	fprintf (stderr, "Could not open outgoing input %s\n", outputFilename);
	usage (argv[0], 42);
      }

    printf(".");
    fflush(stdout);

    // todo: We need to copy tags from the input image to the output image
    TIFFSetField (output, TIFFTAG_IMAGEWIDTH, width);
    TIFFSetField (output, TIFFTAG_IMAGELENGTH, height);
    TIFFSetField (output, TIFFTAG_COMPRESSION, COMPRESSION_DEFLATE);
    TIFFSetField (output, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);
    TIFFSetField (output, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);
    TIFFSetField (output, TIFFTAG_BITSPERSAMPLE, 8);
    TIFFSetField (output, TIFFTAG_SAMPLESPERPIXEL, 3);
    // todo: balance this off with having 8 kb per strip...
    TIFFSetField (output, TIFFTAG_ROWSPERSTRIP, 100000);
    
    // Copy the subfile to a output location
    if (TIFFWriteEncodedStrip (output, 0, raster,
			       width * height * 3 * sizeof (char)) == 0)
      {
	fprintf (stderr, "Could not write the output image\n");
	exit (42);
      }

    ///////////////////////////////////////////////////////////////////////////
    // Flush this subfile and move onto the next one
    if(TIFFReadDirectory(input) == 0){
      printf(" No more subfiles");
      break;
    }

    ///////////////////////////////////////////////////////////////////////////
    // Doing correct cleanup with a loop like this is important...
    free(raster);
  }
  printf("\n");
    
  // Cleanup
  TIFFClose (input);
  TIFFClose (output);
  free (raster);
}

void
usage (char *cmd, int exitamt)
{
  fprintf (stderr, "Bad command line arguements...\n\n");
  fprintf (stderr, "Usage: %s -i &lt;inputfile&gt; -o &lt;outputfile&gt; -c &lt;count&gt;\n", 
	   cmd);
  exit (exitamt);
}
</pre>
<BR><BR><i>Code: /home/mikal/opensource/tiff-directories/read.c</i>




<BR><BR><b>tiffcp</b>
<!-- 	$Header: /usr/local/google/home/mikal/cvs/tutorial-imaging/content/auug-2002-imaging-tutorial-introduction-continued-22,v 1.1 2002-09-04 23:09:37 mikal Exp $ -->
<!--  -->
<!--  Copyright (c) 1988-1997 Sam Leffler -->
<!--  Copyright (c) 1991-1997 Silicon Graphics, Inc. -->
<!--  -->
<!--  Permission to use, copy, modify, distribute, and sell this software and  -->
<!--  its documentation for any purpose is hereby granted without fee, provided -->
<!--  that (i) the above copyright notices and this permission notice appear in -->
<!--  all copies of the software and related documentation, and (ii) the names of -->
<!--  Sam Leffler and Silicon Graphics may not be used in any advertising or -->
<!--  publicity relating to the software without the specific, prior written -->
<!--  permission of Sam Leffler and Silicon Graphics. -->
<!--   -->
<!--  THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,  -->
<!--  EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY  -->
<!--  WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.   -->
<!--   -->
<!--  IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR -->
<!--  ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, -->
<!--  OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, -->
<!--  WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF  -->
<!--  LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE  -->
<!--  OF THIS SOFTWARE. -->
<!--  -->
<BR><BR><b>NAME</b>

<BR><BR>tiffcp - copy (and possibly convert) a
<i>TIFF</i>
file


<BR><BR><b>SYNOPSIS</b>

<BR><BR><i><b>tiffcp</b></i>
[
<i>options</i>
]
<i>"src1.tif ... srcN.tif dst.tif"</i>


<BR><BR><b>DESCRIPTION</b>

<BR><BR><i>tiffcp</i>
combines one or more files created according
to the Tag Image File Format, Revision 6.0
into a single
<i>TIFF</i>
file.
Because the output file may be compressed using a different
algorithm than the input files,
<i>tiffcp</i>
is most often used to convert between different compression
schemes.



<BR><BR>By default,
<i>tiffcp</i>
will copy all the understood tags in a
<i>TIFF</i>
directory of an input
file to the associated directory in the output file.



<BR><BR><i>tiffcp</i>
can be used to reorganize the storage characteristics of data
in a file, but it is explicitly intended to not alter or convert
the image data content in any way.


<BR><BR><b>OPTIONS</b>

<BR><BR>

<listitem>

<BR><BR><i><b>-b image</b></i>
subtract the following monochrome image from all others
processed.  This can be used to remove a noise bias
from a set of images.  This bias image is typlically an
image of noise the camera saw with its shutter closed.

</listitem>
<listitem>

<BR><BR><i><b>-B</b></i>
Force output to be written with Big-Endian byte order.
This option only has an effect when the output file is created or
overwritten and not when it is appended to.

</listitem>
<listitem>

<BR><BR><i><b>-C</b></i>
Suppress the use of ``strip chopping'' when reading images
that have a single strip/tile of uncompressed data.

</listitem>
<listitem>

<BR><BR><i><b>-c</b></i>
Specify the compression to use for data written to the output file:
<i><b>none </b></i>
for no compression,
<i><b>packbits</b></i>
for PackBits compression,
<i><b>lzw</b></i>
for Lempel-Ziv &amp; Welch compression,
<i><b>jpeg</b></i>
for baseline JPEG compression,
<i><b>zip</b></i>
for Deflate compression,
<i><b>g3</b></i>
for CCITT Group 3 (T.4) compression,
and
<i><b>g4</b></i>
for CCITT Group 4 (T.6) compression.
By default
<i>tiffcp</i>
will compress data according to the value of the
<i>Compression</i>
tag found in the source file.
The
<i>CCITT</i>
Group 3 and Group 4 compression algorithms can only
be used with bilevel data.
Group 3 compression can be specified together with several
T.4-specific options:
<i><b>1d</b></i>
for 1-dimensional encoding,
<i><b>2d</b></i>
for 2-dimensional encoding,
and
<i><b>fill</b></i>
to force each encoded scanline to be zero-filled so that the
terminating EOL code lies on a byte boundary.
Group 3-specific options are specified by appending a ``:''-separated
list to the ``g3'' option; e.g.
<i><b>"-c g3:2d:fill"</b></i>
to get 2D-encoded data with byte-aligned EOL codes.
<i>LZW</i>
compression can be specified together with a
<i>predictor</i>
value.
A predictor value of 2 causes
each scanline of the output image to undergo horizontal
differencing before it is encoded; a value
of 1 forces each scanline to be encoded without differencing.
LZW-specific options are specified by appending a ``:''-separated
list to the ``lzw'' option; e.g.
<i><b>"-c lzw:2"</b></i>
for
<i>LZW</i>
compression with horizontal differencing.

</listitem>
<listitem>

<BR><BR><i><b>-f</b></i>
Specify the bit fill order to use in writing output data.
By default,
<i>tiffcp</i>
will create a new file with the same fill order as the original.
Specifying
<i><b>"-f lsb2msb"</b></i>
will force data to be written with the FillOrder tag set to
<i>LSB2MSB,</i>
while
<i><b>"-f msb2lsb"</b></i>
will force data to be written with the FillOrder tag set to
<i>MSB2LSB.</i>

</listitem>
<listitem>

<BR><BR><i><b>-l</b></i>
Specify the length of a tile (in pixels).
<i>tiffcp</i>
attempts to set the tile dimensions so
that no more than 8 kilobytes of data appear in a tile.

</listitem>
<listitem>

<BR><BR><i><b>-L</b></i>
Force output to be written with Little-Endian byte order.
This option only has an effect when the output file is created or
overwritten and not when it is appended to.

</listitem>
<listitem>

<BR><BR><i><b>-M</b></i>
Suppress the use of memory-mapped files when reading images.

</listitem>
<listitem>

<BR><BR><i><b>-p</b></i>
Specify the planar configuration to use in writing image data
that has one 8-bit sample per pixel.
By default,
<i>tiffcp</i>
will create a new file with the same planar configuration as
the original.
Specifying
<i><b>"-p contig"</b></i>
will force data to be written with multi-sample data packed
together, while
<i><b>"-p separate"</b></i>
will force samples to be written in separate planes.

</listitem>
<listitem>

<BR><BR><i><b>-r</b></i>
Specify the number of rows (scanlines) in each strip of data
written to the output file.
By default,
<i>tiffcp</i>
attempts to set the rows/strip
that no more than 8 kilobytes of data appear in a strip.

</listitem>
<listitem>

<BR><BR><i><b>-s</b></i>
Force the output file to be written with data organized in strips
(rather than tiles).

</listitem>
<listitem>

<BR><BR><i><b>-t</b></i>
Force the output file to be written wtih data organized in tiles
(rather than strips).
options can be used to force the resultant image to be written
as strips or tiles of data, respectively.

</listitem>
<listitem>

<BR><BR><i><b>-w</b></i>
Specify the width of a tile (in pixels).
<i>tiffcp</i>
attempts to set the tile dimensions so
that no more than 8 kilobytes of data appear in a tile.
<i>tiffcp</i>
attempts to set the tile dimensions so
that no more than 8 kilobytes of data appear in a tile.

</listitem>
<listitem>

<BR><BR><i><b>-,={character}</b></i>
substitute {character} for ',' in parsing image directory indices
in files.  This is necessary if filenames contain commas.
Note that ',=' with whitespace immediately following will disable
the special meaning of the ',' entirely.  See examples.

</listitem>


<BR><BR>

<BR><BR><b>EXAMPLES</b>

<BR><BR>The following concatenates two files and writes the result using
<i>LZW</i>
encoding:
tiffcp -c lzw a.tif b.tif result.tif



<BR><BR>To convert a G3 1d-encoded
<i>TIFF</i>
to a single strip of G4-encoded data the following might be used:
tiffcp -c g4 -r 10000 g3.tif g4.tif
(1000 is just a number that is larger than the number of rows in
the source file.)



<BR><BR>To extract a selected set of images from a multi-image
TIFF file, the file name may be immediately followed by a ','
separated list of image directory indices.  The first image
is always in directory 0.  Thus, to copy the 1st and 3rd
images of image file "album.tif" to "result.tif":
tiffcp album.tif,0,2 result.tif



<BR><BR>Given file "CCD.tif" whose first image is a noise bias
followed by images which include that bias,
subtract the noise from all those images following it
(while decompressing) with the command:
tiffcp -c none -b CCD.tif CCD.tif,1, result.tif



<BR><BR>If the file above were named "CCD,X.tif", the "-,=" option would
be required to correctly parse this filename with image numbers,
as follows:
tiffcp -c none -,=% -b CCD,X.tif CCD,X%1%.tif result.tif


<BR><BR><b>SEE ALSO</b>

<BR><BR><i>pal2rgb (1),</i>
<i>tiffinfo (1),</i>
<i>tiffcmp (1),</i>
<i>tiffmedian (1),</i>
<i>tiffsplit (1),</i>
<i>libtiff (3)</i>





<BR><BR><b>tiffdither</b>
<!-- 	$Header: /usr/local/google/home/mikal/cvs/tutorial-imaging/content/auug-2002-imaging-tutorial-introduction-continued-22,v 1.1 2002-09-04 23:09:37 mikal Exp $ -->
<!--  -->
<!--  Copyright (c) 1990-1997 Sam Leffler -->
<!--  Copyright (c) 1991-1997 Silicon Graphics, Inc. -->
<!--  -->
<!--  Permission to use, copy, modify, distribute, and sell this software and  -->
<!--  its documentation for any purpose is hereby granted without fee, provided -->
<!--  that (i) the above copyright notices and this permission notice appear in -->
<!--  all copies of the software and related documentation, and (ii) the names of -->
<!--  Sam Leffler and Silicon Graphics may not be used in any advertising or -->
<!--  publicity relating to the software without the specific, prior written -->
<!--  permission of Sam Leffler and Silicon Graphics. -->
<!--   -->
<!--  THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,  -->
<!--  EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY  -->
<!--  WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.   -->
<!--   -->
<!--  IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR -->
<!--  ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, -->
<!--  OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, -->
<!--  WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF  -->
<!--  LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE  -->
<!--  OF THIS SOFTWARE. -->
<!--  -->
<BR><BR><b>NAME</b>

<BR><BR>tiffdither - convert a greyscale image to bilevel using dithering


<BR><BR><b>SYNOPSIS</b>

<BR><BR><i><b>tiffdither</b></i>
[
<i>options</i>
]
<i>input.tif</i>
<i>output.tif</i>


<BR><BR><b>DESCRIPTION</b>

<BR><BR><i>tiffdither</i>
converts a single channel 8-bit greyscale image to a bilevel image
using Floyd-Steinberg error propagation with threholding.


<BR><BR><b>OPTIONS</b>

<BR><BR>

<listitem>

<BR><BR><i><b>-c</b></i>
Specify the compression to use for data written to the output file:
<i><b>none </b></i>
for no compression,
<i><b>packbits</b></i>
for PackBits compression,
<i><b>lzw</b></i>
for Lempel-Ziv &amp; Welch compression,
<i><b>zip</b></i>
for Deflate compression,
<i><b>g3</b></i>
for CCITT Group 3 (T.4) compression,
and
<i><b>g4</b></i>
for CCITT Group 4 (T.6) compression.
By default
<i>tiffdither</i>
will compress data according to the value of the
<i>Compression</i>
tag found in the source file.
The
<i>CCITT</i>
Group 3 and Group 4 compression algorithms can only
be used with bilevel data.
Group 3 compression can be specified together with several
T.4-specific options:
<i><b>1d</b></i>
for 1-dimensional encoding,
<i><b>2d</b></i>
for 2-dimensional encoding,
and
<i><b>fill</b></i>
to force each encoded scanline to be zero-filled so that the
terminating EOL code lies on a byte boundary.
Group 3-specific options are specified by appending a ``:''-separated
list to the ``g3'' option; e.g.
<i><b>"-c g3:2d:fill"</b></i>
to get 2D-encoded data with byte-aligned EOL codes.
<i>LZW</i>
compression can be specified together with a
<i>predictor</i>
value.
A predictor value of 2 causes
each scanline of the output image to undergo horizontal
differencing before it is encoded; a value
of 1 forces each scanline to be encoded without differencing.
LZW-specific options are specified by appending a ``:''-separated
list to the ``lzw'' option; e.g.
<i><b>"-c lzw:2"</b></i>
for
<i>LZW</i>
compression with horizontal differencing.

</listitem>
<listitem>

<BR><BR><i><b>-f</b></i>
Specify the bit fill order to use in writing output data.
By default,
<i>tiffdither</i>
will create a new file with the same fill order as the original.
Specifying
<i><b>"-f lsb2msb"</b></i>
will force data to be written with the FillOrder tag set to
<i>LSB2MSB ,</i>
while
<i><b>"-f msb2lsb"</b></i>
will force data to be written with the FillOrder tag set to
<i>MSB2LSB .</i>

</listitem>
<listitem>

<BR><BR><i><b>-t</b></i>
Set the threshold value for dithering.
By default the threshold value is 128.

</listitem>


<BR><BR>

<BR><BR><b>NOTES</b>

<BR><BR>The dither algorithm is taken from the
<i>tiffmedian (1)</i>
program (written by Paul Heckbert).


<BR><BR><b>SEE ALSO</b>

<BR><BR><i>pal2rgb (1),</i>
<i>fax2tiff (1),</i>
<i>tiffinfo (1),</i>
<i>tiffcp (1),</i>
<i>tiff2bw (1),</i>
<i>libtiff (3)</i>



<BR><BR>
<i><b>tiffdither</b></i> takes gray scale images and dithers them into black and white images. For instance, the gray scale example from earlier in this tutorial produced the following image:


<slidebreak>

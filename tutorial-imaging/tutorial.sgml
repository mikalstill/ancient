<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<book><bookinfo>
<title>AUUG 2002: Imaging Tutorial</title>
<authorgroup>
<author><firstname>Michael</firstname><surname>Still</surname></author>
</authorgroup>
</bookinfo>

%builddb.pl:introduction.sgml%
%builddb.pl:concepts.sgml%
%builddb.pl:theory.sgml%
%builddb.pl:tiff.sgml%

<chapter id="chap-png"><title>PNG</title>
<para>
...
</para>

<sect1><title>Further reading</title>
<para>
...
</para>
</sect1>

</chapter>

%builddb.pl:jpeg.sgml%

<sect1><title>Further reading</title>
<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-gif"><title>GIF</title>
<para>
...
</para>

<sect1><title>Further reading</title>
<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-svg"><title>SVG</title>
<para>
...
</para>

<sect1><title>Further reading</title>
<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-others"><title>Other raster image formats</title>
<para>
...
</para>
<sect1><title>Further reading</title>

<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-pdf"><title>PDF</title>
<para>
...
</para>

<sect1><title>ClibPDF</title>
<para>
...
</para>
</sect1>

<sect1><title>PDFlib</title>
<para>
...
</para>
</sect1>

<sect1><title>Panda</title>
<para>
...
</para>
</sect1>

<sect1><title>Adobe products</title>
<para>
...
</para>
</sect1>

<sect1><title>Further reading</title>
<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-opengl"><title>OpenGL</title>
<para>
...
</para>
<sect1><title>Further reading</title>

<para>
...
</para>
</sect1>

</chapter>

<chapter id="chap-random"><title>Random important topics</title>
<para>
There are also a few topics which are important enough to be mentioned here, but haven't found their way into the discussions in any other place. They therefore get a chapter of their own here at the end.
</para>

<sect1><title>Encrypting images can have unexpected effects</title>
<para>
DES in Electronic Code Book (ECB) mode is a particularly poor choice of cryptography for image files. This is because ECB mode implements a lookup table between the unencrypted value and the encrypted value. This results in a known input value turning into the same output value over and over. This can have some interesting bluring effects, but wont obscure the image contents. An example will help this make more sense -- figure 1 is the logo for the company I am currently working for. I took this image, and ran it through some DES ECB code and produced figure 2.
</para>

<figure>
<title>The TOWER corporate logo</title>
<graphic format="EPS" fileref="desecb-figure1.eps"></graphic>
</figure>

<figure>
<title>After ECB encryption</title>
<graphic format="EPS" fileref="desecb-figure2.eps"></graphic>
</figure>

<para>
You can see that whilst the image has certainly changed, the contents of the image has not really been obscured. %todo: more%
</para>

<para>
For those who have an excessive interest in code, I encrypted the TIFF image which is the TOWER logo with the code below:
</para>

<programlisting>
...
</programlisting>

<para>
What about encrypting an image of text? %todo: more%
</para>

<para>
We should note that ECB mode is not commonly used anyway. If you use something like PGP or blowfish, then you should be much happier... %todo: check this%
</para>
</sect1>

<sect1><title>ImageMagick</title>
<para>
Available from: xxx
Installation steps; ./configure; make; make install
</para>

<para>
%todo: I'm only really talking about convert here -- what about the others?%
</para>

<para>
ImageMagick provides a series of convenient tools for converting and manipulating images. This includes converting between formats, changing the color space attributes, downsampling, scaling, rotation and text annotation. It should be noted that ImageMagick doesn't implement an API -- in other words it is a command line tool, which isn't really suited to being built into applications. ImageMagick also depends on many other packages (such as libtiff) being available for all it's functionality to work. These required helper packages are called "delegates".
</para>

<sect2><title>Example: Converting between image formats</title>
<para>
...
</para>
</sect2>

<sect2><title>Example: Scaling an image</title>
<para>
...
</para>
</sect2>

<sect2><title>Example: Rotating an image</title>
<para>
...
</para>
</sect2>

<sect2><title>Example: Inserting text annotations onto an image</title>
<para>
...
</para>
</sect2>

<sect2><title>A sample script -- generating a history of CVS commits to a repository</title>
<para>
Now it's time to provide an example of how the ImageMagick commands can be used to create something quite useful. This example is a script I wrote a few months ago to generate a graphical history of a CVS repository. The script takes the output of the <command>cvs log</command> command, and parses this. The <command>cvs log</command> output looks something like this:
</para>

<para>
%todo: should this be cut down a little%
</para>

<programlisting>
%code2db.pl:source/imagemagick/cvsreport/sample.log%
</programlisting>

<para>
The following perl script parses this log file to produce a HTML description of the activity described by the log:
</para>

<programlisting>
%code2db.pl:source/imagemagick/cvsreport/cvsreport.pl%
</programlisting>

<para>
The output of the script looks something like this:
</para>

<para>
%todo: figure%
</para>
</sect2>
</sect1>

<sect1><title>Imlib</title>
<para>
...
</para>
</sect1>

<sect1><title>AA</title>
<para>
Available from: xxx
Installation steps; ./configure; make; make install
</para>

<para>
aalib is a library which renders images into black and white ASCII art. This can be quite useful for previewing images on consoles which don't have graphics capabilities (although these are becoming quite rare these days).
</para>

<para>
I imagine that it's also probably one of the ways things like ASCII art versions of Star Wars are generated.
</para>

<para>
There are sample images generated by allib available at aa... Some of the more interesting ones are:
..
%todo: insert images%
..
and
..
</para>

<para>
%todo: more%
</para>
</sect1>







<sect1><title>RasterMaster</title>
<para>
...
</para>
</sect1>








<sect1><title>FreeType</title>
<para>
...
</para>
</sect1>

<sect1><title>The GNU autotools</title>
<para>
...
</para>
</sect1>

<sect1><title>SVGAlib</title>
<para>
...
</para>
</sect1>
</chapter>























<chapter id="chap-resources"><title>Resources</title>
<para>
There are a few resources which will make your life much easier. Here are some of my favourites:
</para>

<para>
%todo: This biblio entry is crap and broken and should be fixed...%
</para>

<bibliography><title>References</title>
<bibliomixed>
  <bibliomset relation='article'>
    <surname>Foley</surname>, <firstname>James D</firstname>.
    <surname>van Dam</surname>, <firstname>Andries</firstname>.
    <surname>Feiner</surname>, <firstname>Steven K</firstname>.
    <surname>Hughes</surname>, <firstname>John F</firstname>.
    <title role='article'>Computer Graphics: Principles and Practise</title>.
  </bibliomset>
  <bibliomset relation='journal'>
    <title>The World Wide Web Journal</title> 
    <volumenum>2</volumenum><issuenum>1</issuenum>.
    <publishername>O'Reilly &amp; Associates, Inc.</publishername> and
    <corpname>The World Wide Web Consortium</corpname>.
    <pubdate>Winter, 1996</pubdate></bibliomset>.
</bibliomixed>
</bibliography>



</chapter>


















<chapter id="chap-conclusion"><title>Conclusion</title>
<para>
...
</para>
</chapter>





<chapter><title>TODO</title>
<para>
Finish conversion of article 1
Convert article 2
DES code cleanup
Comparison chart for image formats
</para>
</chapter>

</book>

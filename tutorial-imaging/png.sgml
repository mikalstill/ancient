<chapter id="chap-png"><title>PNG</title>
<para><quote>
A Turbo-Studly Image Format with Lossless Compression
(Not Related to Papua New Guinea, the Pawnee National Grassland,
the Professional Numismatists Guild or the ``Pack 'N' Go'' format)
</quote> -- libpng.org</para>

<execute><cmd>todo</cmd><input>Put chunk info in here</input></execute>

<para>
PNG
  <footnote><para>Short for Portable Network Graphics.</para></footnote>
is my favorite image format after TIFF. It is well conceived, well implemented, and very powerful. It also has some interesting features, mainly aimed at Internet use, which TIFF lacks. It is also usable in modern web browsers
  <footnote><para>For instance Netscape 4 and Internet Explorer 4 and later.</para></footnote>
, unlike TIFF. PNG is also much simpler in many respects than TIFF.
</para>

<para>
This chapter will focus on the libpng library. This isn't really a limitation, as the people behind libpng are also the people who write the PNG specification, so you're pretty safe in assuming that if it's useful and PNG does it, then libpng implements it.
</para>

<sect1><title>Introduction</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>

A bunch of the examples in this chapter are based on the pngtools code I wrote a while ago, which I have updated as part of writing this chapter.
</para>

<sidebar><title>Refer to the TIFF chapter</title>
<para>
Much of the discussion in this chapter will make a whole bunch more sense if you've read the TIFF chapter. Off you go, I'll wait for you to come back...
</para>
</sidebar>
</sect1>

<sect1><title>Installation</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>

<sect2><title>Unix</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>
</sect2>

<sect2><title>win32</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>
</sect2>
</sect1>

<sect1><title>The PNG on disc format</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>
</sect1>

<sect1><title>Opening a PNG file</title>
<para>
The first step to learning how to use libpng is probably to understand how to open a PNG file and get some data out of it. Below is a minimal example of how to open a PNG file, not including actually reading the image data...
</para>

<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/png-open/read-infrastructure.c</input></execute>

<para>
In this example, we do everything we need to open a PNG image, without actually reading the image data. The steps to getting to the image data are:
</para>

<itemizedlist>
<listitem><para>Open the file ready for reading. For this we just use the c standard library's <command>FILE *</command>, unlike the libtiff examples, in which we used a <command>TIFF *</command>
  <footnote><para>In reality, the libtiff could just use the <command>FILE *</command> method internally, although they don't always, as shown by the TIFFClientOpen examples in the TIFF chapter.</para></footnote>
. I'm not aware of whether we can fake out a <command>FILE *</command> if we wanted to pull a PNG out of something other than a file, one day when I have infinite free time I really should look more into this.</para></listitem>

<listitem><para>Another thing we need to do which libtiff does for us and libpng doesn't is check that the file really is a PNG file. We do this with the <command>png_check_sig</command>() call. This expects the first 8 bytes of the file to be handed to it, which is what the <command>fread</command>() function call gets for us.</para></listitem>

<listitem><para></para></listitem>
</itemizedlist>
</sect1>

<sect1><title>PNG tags</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>

<sect2><title>pnginfo</title>
<para>
The <command>pnginfo</command> command implemented here is modeled on the <command>tiffinfo</command>, which was discussed in the TIFF chapter earlier in this tutorial. In fact, the output text is written to be as close to the <command>tiffinfo</command> command as possible.
</para>

<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pngtools/pnginfo.c</input></execute>
</sect1>

<sect1><title>Man pages</title>
<para>
To be honest, the libtiff man pages are much better than the documentation which comes with libpng. libpng has one main man page, which is included for ease of reference below.
</para>

<sect2><title>libpng</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>

<execute><cmd>todo</cmd><input>source/png/man/libpng.3</input><args>-s 3</args></execute>
</sect2>

<sect2><title>libpng.txt</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>

<execute><cmd>text2db.pl</cmd><input>source/png/man/libpng.txt</input></execute>
</sect2>
</sect1>

<sect1><title>Conclusion</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>
</sect1>

<sect1><title>Further reading</title>
<para>
<execute><cmd>todo</cmd><input>More content here</input></execute>
</para>
</sect1>

</chapter>


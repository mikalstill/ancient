<chapter id="chap-pdf"><title>PDF</title>
<para>
<quote>
"THE ORIGINS OF THE Portable Document Format and the Adobe Acrobat product family date to early 1990. At that time, the PostScript page description language was rapidly becoming the
worldwide standard for the production of the printed page. PDF builds on the PostScript page description language by layering a document structure and interactive navigation features on
PostScript's underlying imaging model, providing a convenient, efficient mechanism enabling documents to be reliably viewed and printed anywhere. The PDF specification was first published at
the same time the first Acrobat products were introduced in 1993. Since then, updated versions of the specification have been and continue to be available from Adobe via the World Wide Web.
This book is the first version of the specification that is completely self-contained, including the precise documentation of the underlying imaging model from PostScript along with the
PDF-specific features that are combined in version 1.3 of the PDF standard." -- PDF Specification
</quote>
</para>

<para>
Portable Document Format (PDF) isn't strictly an image format. However, people are increasingly asking for PDF functionality in applications -- especially those on the Internet.
</para>

<para>
This chapter will focus on PDF 1.3 (second edition), because that is the specification version which I am most familiar with at the moment.
</para>

<sect1><title>Introduction</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<para>
This chapter is broken into five major sections. These are:

<itemizedlist>
<listitem><para>Discussion of the PDF format itself</para></listitem>
<listitem><para>An introduction to ClibPDF</para></listitem>
<listitem><para>An introduction to PDFLib</para></listitem>
<listitem><para>An introduction to Panda</para></listitem>
<listitem><para>Discussion of the Adobe PDF tools</para></listitem>
</itemizedlist>
</para>
</sect1>

<sect1><title>All about the PDF format</title>
<para>
The PDF file format is broken into a tree structure. This tree is made up of combinations of a few possible objects. We'll start by describing these objects, and then move onto how they fit together.
</para>

<sect2><title>File header</title>
<para>
Every PDF file starts with a simple header which declares the file to be a valid PDF file. This header will look something like this:
</para>

<programlisting>
%PDF-1.3 ∞<9F><92><9C><9F>‘‡Œ–––
</programlisting>

<para>
This header had the following parts:
</para>

<itemizedlist>
<listitem><para><emphasis>%PDF-</emphasis>: this is a PDF document.</para></listitem>
<listitem><para><emphasis>1.3</emphasis>: it meets version 1.3 of the PDF specification.</para></listitem>
<listitem><para><emphasis>∞<9F><92><9C><9F>‘‡Œ–––</emphasis>: random binary stuff. This is just here so that <quote>smart</quote> FTP clients don't decide the file is an ASCII file in error
  <footnote><para>Whilst the vast majority of PDF structure is represented with ASCII text, this doesn't stop you from embedding binary into the file</para></footnote>
.</para></listitem>
</itemizedlist>
</para>

<sect3><title>Specification versions</title>
<para>
There have been five versions of the PDF specification released at the time of writing this document. They are:

<itemizedlist>
<listitem><para><emphasis>1.0</emphasis>: maps functionality available in Adobe Acrobat 1.0</para></listitem>
<listitem><para><emphasis>1.1</emphasis>: maps functionality available in Adobe Acrobat 2.0</para></listitem>
<listitem><para><emphasis>1.2</emphasis>: maps functionality available in Adobe Acrobat 3.0</para></listitem>
<listitem><para><emphasis>1.3 (both first and second editions)</emphasis>: maps functionality available in Adobe Acrobat 4.0</para></listitem>
<listitem><para><emphasis>1.4</emphasis>: maps functionality available in Adobe Acrobat 5.0</para></listitem>
</itemizedlist>

<para>
In theory at least, the PDF specification versions should be backwards compatible -- viewers should ignore object types and dictionary entries that they don't understand. This means that you can also insert your own information into the PDF document without breaking its ability to be viewed in other applications.
</para>
</sect3>
</sect2>

<sect2><title>Objects</title>
<para>
Objects in PDF files have a number, and a generation (version) number. They are represented as an ASCII text sequence in the file, for instance:
</para>

<programlisting>
1 0 obj
&lt;&lt;
        /Type /Catalog
        /Pages 2 0 R
&gt;&gt;
endobj
</programlisting>

<para>
This object is the 0th version of object number 1. The text between the &lt;&lt; and the &gt;&gt; is discussed in the next section.
</para>

<sidebar><title>Order of objects in the file</title>
<para>
Note that objects can appear in the file in any order, because there is a lookup table called an XREF table at the end of the file that they can be looked up from.
</para>
</sidebar>
</sect3>
</sect2>

<sect2><title>Dictionaries</title>
<para>
Objects have associated with them a (key, value) pair database. This stores properties of the object -- these would normally include things like the dimensions of the page, or the name of the author of the document, and other interesting things like that.
</para>

<para>
In the example object above, we had the following dictionary items...
</para>

<programlisting>
        /Type /Catalog
        /Pages 2 0 R
</programlisting>

<para>
This dictionary specifies that the key <quote>Type</quote> has the value <quote>Catalog</quote>, and that the value <quote>Pages</quote> has the value <quote>2 0 R</quote>. This last value is an object reference, which we discuss in the Redirection section a little bit later in this chapter.
</para>

<sect3><title>Dictionary data types</title>
<para>
What data types are valid in dictionaries? Well, version 1.3 of the PDF specification names the following data types:
</para>

<execute><cmd>insertall.sh</cmd><args>pdf-type-*.sgml</args></execute>
<execute><cmd>todo</cmd><input>Do these</input></execute>

</sect3>

<sect3><title>Minimal dictionaries</title>
<para>
In addition to having full dictionaries, it is possible to have very simple objects which only have one value in the dictionary, these objects look a little different than a normal object, for instance:
</para>

<programlisting>
17 0 obj
203
endobj
</programlisting>

<para>
In this example, the object stores a simple integer value. Why would you want to do this? Well, the answer is that in a dictionary you can have the value for the key stored in another object:
</para>

<programlisting>
42 0 obj
&lt;&lt;
  /Length 24 0 R
&gt;&gt;
endobj

24 0 obj
462
endobj
</programlisting>

<para>
Here, we don't know the length of the stream associated with the object (I describe these in a second) at the time we wrote the object out, so we can simply insert it later in the document. This is called an object reference, which is in the form:
</para>

<programlisting>
objectnumber revision R
</programlisting>
</sect3>
</sect2>

<sect2><title>Streams</title>
<para>
The other type of data that an object can have associated with it is a stream. Streams are used to store less structured data, for instance descriptions of the items on a page, or random binary data. The form for a stream is:
</para>

<programlisting>
42 0 obj
&lt;&lt;
  /Length 24 0 R
&gt;&gt;
stream
...stream data...
endstream
endobj
</programlisting>

<para>
A description for the page layout descriptions is outside the scope of this document. <execute><cmd>nextedition</cmd><input>We should include information about the page description</input></execute> The other type of information which can be stored in a stream is arbitary information such as the content of images (which would normally be raster information). <execute><cmd>nextedition</cmd><input>In depth discussion</input><execute> An indepth discussion of the formatting of the raster information is also outside the scope of this document.

<sect3><title>Filters on streams</title>
<para>
Streams can be filtered. A filter is an operation which occurs on the stream contents before they are saved into the PDF document, examples include compression, and ASCII85 encoding
  <footnote><para>ASCII85 encoding is when you take binary data (which will be in the range 0x00 to 0xFF per byte, and force it into the range 0x00 to 0x55. This is done because some transport mediums (such as email), cannot handle binary data, so the data is made to look more like ASCII information. Note that this bloats the size of the data somewhat.</para></footnote>
, which can't really be called compression.
</para>

<para>
So what are the possible filters? Well, as of PDF 1.3
  <footnote><para>More have been added to this list in PDF 1.4</para></footnote>
, they are:
</para>

<execute><cmd>insertall.sh</cmd><args>pdf-filter-*.sgml</args></execute>
<execute><cmd>todo</cmd><input>Do these</input></execute>

</sect3>
</sect2>

<sect2><title>Object structure</title>
<execute><cmd>todo</cmd><input>Detail here</input></execute>
</sect2>
</sect1>

<sect1><title>On with the libraries</title>
<para>
Now that we've discussed the format of the PDF file format, we can talk about the different options for building PDF files. The three main options are ClibPDF, PDFlib, and Panda. Adobe also sells a PDf library, but it has a reputation for being extremely expensive.
</para>

<para>
In our discussion of the three libraries, we will work through the same set of programs, to give you an opportunity to compare the three libraries. After all, they all have their own strengths, and weaknesses.
</para>
<sect1>

<sect1><title>ClibPDF</title>
<para>
ClibPDF was my first introduction to PDF generation APIs. It is available from http://www.fastio.com, and was last updated in December 1999, so it is starting to get a little old. There are still many people who use ClibPDF however.
</para>

<para>
Note that ClibPDF is not free software. The license is included below for your reference:
</para>

<figure>
<title>ClibPDF license, page 1</title>
<graphic format="EPS" fileref="clibpdf-license.eps.0">
</figure>

<figure>
<title>ClibPDF license, page 2</title>
<graphic format="EPS" fileref="clibpdf-license.eps.1">
</figure>

<figure>
<title>ClibPDF license, page 3</title>
<graphic format="EPS" fileref="clibpdf-license.eps.2">
</figure>

<figure>
<title>ClibPDF license, page 4</title>
<graphic format="EPS" fileref="clibpdf-license.eps.3">
</figure>

<figure>
<title>ClibPDF license, page 5</title>
<graphic format="EPS" fileref="clibpdf-license.eps.4">
</figure>

<figure>
<title>ClibPDF license, page 6</title>
<graphic format="EPS" fileref="clibpdf-license.eps.5">
</figure>

<figure>
<title>ClibPDF license, page 7</title>
<graphic format="EPS" fileref="clibpdf-license.eps.6">
</figure>

<figure>
<title>ClibPDF license, page 8</title>
<graphic format="EPS" fileref="clibpdf-license.eps.7">
</figure>

<figure>
<title>ClibPDF license, page 9</title>
<graphic format="EPS" fileref="clibpdf-license.eps.8">
</figure>
</sect2>

<sect2><title>Installation</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<sect3><title>Unix</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>

<sect3><title>win32</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>
</sect2>
</sect1>

<sect1><title>PDFlib</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<sect2><title>Installation</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<sect3><title>Unix</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>

<sect3><title>win32</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>
</sect2>
</sect1>

<sect1><title>Panda</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<sect2><title>Installation</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>

<sect3><title>Unix</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>

<sect3><title>win32</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect3>
</sect2>
</sect1>

<sect1><title>Adobe products</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect1>





<sect1><title>Conclusion</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect1>

<sect1><title>Further reading</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect1>

</chapter>

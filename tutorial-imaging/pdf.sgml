<chapter id="chap-pdf"><title>PDF</title>
<para>
<quote>
THE ORIGINS OF THE Portable Document Format and the Adobe Acrobat product family date to early 1990. At that time, the PostScript page description language was rapidly becoming the worldwide standard for the production of the printed page. PDF builds on the PostScript page description language by layering a document structure and interactive navigation features on PostScript's underlying imaging model, providing a convenient, efficient mechanism enabling documents to be reliably viewed and printed anywhere. The PDF specification was first published at the same time the first Acrobat products were introduced in 1993.
</quote>
 -- PDF Specification
</para>

<para>
Portable Document Format (PDF) isn't strictly an image format. However, people are increasingly asking for PDF functionality in applications -- especially those on the Internet.
</para>

<para>
This chapter will focus on PDF 1.3 (second edition), because that is the specification version which I am most familiar with at the moment.
</para>

<sect1><title>Introduction</title>
<para>
In a sense this PDF chapter is the culmination of the tutorial... Many of the formats we have discussed up to this point can be included in some way in PDF files. I think that PDF is probably the most interesting imaging format in common use today.
</para>

<para>
This chapter is broken into two major sections. These are: a discussion of the PDF format, and then an introduction to Panda, a PDF generation API.
</para>
</sect1>

<sect1><title>All about the PDF format</title>
<para>
The PDF file format is broken into a tree structure. This tree is made up of combinations of a few possible objects. We'll start by describing these objects, and then move onto how they fit together.
</para>

<sect2><title>File header</title>
<para>
Every PDF file starts with a simple header which declares the file to be a valid PDF file. This header will look something like this:
</para>

<programlisting>
%PDF-1.3 ∞<9F><92><9C><9F>‘‡Œ–––
</programlisting>

<para>
This header had the following parts:
</para>

<itemizedlist>
<listitem><para><emphasis>%PDF-</emphasis>: this is a PDF document.</para></listitem>
<listitem><para><emphasis>1.3</emphasis>: it meets version 1.3 of the PDF specification.</para></listitem>
<listitem><para><emphasis>∞<9F><92><9C><9F>‘‡Œ–––</emphasis>: random binary stuff. This is just here so that <quote>smart</quote> FTP clients don't decide the file is an ASCII file in error
  <footnote><para>Whilst the vast majority of PDF structure is represented with ASCII text, this doesn't stop you from embedding binary into the file</para></footnote>
.</para></listitem>
</itemizedlist>

<sect3><title>Specification versions</title>
<para>
There have been five versions of the PDF specification released at the time of writing this document. They are:
</para>

<itemizedlist>
<listitem><para><emphasis>1.0</emphasis>: maps functionality available in Adobe Acrobat 1.0</para></listitem>
<listitem><para><emphasis>1.1</emphasis>: maps functionality available in Adobe Acrobat 2.0</para></listitem>
<listitem><para><emphasis>1.2</emphasis>: maps functionality available in Adobe Acrobat 3.0</para></listitem>
<listitem><para><emphasis>1.3 (both first and second editions)</emphasis>: maps functionality available in Adobe Acrobat 4.0</para></listitem>
<listitem><para><emphasis>1.4</emphasis>: maps functionality available in Adobe Acrobat 5.0</para></listitem>
</itemizedlist>

<para>
In theory at least, the PDF specification versions should be backwards compatible -- viewers should ignore object types and dictionary entries that they don't understand. This means that you can also insert your own information into the PDF document without breaking its ability to be viewed in other applications.
</para>
</sect3>
</sect2>

<sect2><title>Objects</title>
<para>
Objects in PDF files have a number, and a generation (version) number. They are represented as an ASCII text sequence in the file, for instance:
</para>

<programlisting>
1 0 obj
&lt;&lt;
        /Type /Catalog
        /Pages 2 0 R
&gt;&gt;
endobj
</programlisting>

<para>
This object is the 0th version of object number 1. The text between the &lt;&lt; and the &gt;&gt; is discussed in the next section.
</para>

<sidebar><title>Order of objects in the file</title>
<para>
Note that objects can appear in the file in any order, because there is a lookup table called an XREF table at the end of the file that they can be looked up from.
</para>
</sidebar>
</sect2>

<sect2><title>Dictionaries</title>
<para>
Objects have associated with them a (key, value) pair database. This stores properties of the object -- these would normally include things like the dimensions of the page, or the name of the author of the document, and other interesting things like that.
</para>

<para>
In the example object above, we had the following dictionary items...
</para>

<programlisting>
        /Type /Catalog
        /Pages 2 0 R
</programlisting>

<para>
This dictionary specifies that the key <quote>Type</quote> has the value <quote>Catalog</quote>, and that the value <quote>Pages</quote> has the value <quote>2 0 R</quote>. This last value is an object reference, which we discuss in the Redirection section a little bit later in this chapter.
</para>

<sect3><title>Dictionary data types</title>
<para>
What data types are valid in dictionaries? Well, version 1.3 of the PDF specification names the following data types:
</para>

<execute><cmd>insertall.sh</cmd><args>pdf-type-.*.sgml</args></execute>

<sect4><title>A lexer for PDF</title>
<para>
Refer to the lexer for PDF documents at the end of this chapter if you are more interested in the format of data types.
</para>
</sect4>
</sect3>

<sect3><title>Minimal dictionaries</title>
<para>
In addition to having full dictionaries, it is possible to have very simple objects which only have one value in the dictionary, these objects look a little different than a normal object, for instance:
</para>

<programlisting>
17 0 obj
203
endobj
</programlisting>

<para>
In this example, the object stores a simple integer value. Why would you want to do this? Well, the answer is that in a dictionary you can have the value for the key stored in another object:
</para>

<programlisting>
42 0 obj
&lt;&lt;
  /Length 24 0 R
&gt;&gt;
endobj

24 0 obj
462
endobj
</programlisting>

<para>
Here, we don't know the length of the stream associated with the object (I describe these in a second) at the time we wrote the object out, so we can simply insert it later in the document. This is called an object reference, which is in the form:
</para>

<programlisting>
objectnumber revision R
</programlisting>
</sect3>
</sect2>

<sect2><title>Streams</title>
<para>
The other type of data that an object can have associated with it is a stream. Streams are used to store less structured data, for instance descriptions of the items on a page, or random binary data. The form for a stream is:
</para>

<programlisting>
42 0 obj
&lt;&lt;
  /Length 24 0 R
&gt;&gt;
stream
...stream data...
endstream
endobj
</programlisting>

<para>
A description for the page layout descriptions is outside the scope of this document. 

<execute><cmd>nextedition</cmd><input>We should include information about the page description</input></execute> 

The other type of information which can be stored in a stream is arbitary information such as the content of images (which would normally be raster information). 

<execute><cmd>nextedition</cmd><input>In depth discussion</input></execute> 

An indepth discussion of the formatting of the raster information is also outside the scope of this document.
</para>

<sect3><title>Filters on streams</title>
<para>
Streams can be filtered. A filter is an operation which occurs on the stream contents before they are saved into the PDF document, examples include compression, and ASCII85 encoding
  <footnote><para>ASCII85 encoding is when you take binary data (which will be in the range 0x00 to 0xFF per byte, and force it into the range 0x00 to 0x55. This is done because some transport mediums (such as email), cannot handle binary data, so the data is made to look more like ASCII information. Note that this bloats the size of the data somewhat.</para></footnote>
, which can't really be called compression.
</para>

<para>
So what are the possible filters? Well, as of PDF 1.3
  <footnote><para>More have been added to this list in PDF 1.4</para></footnote>
, they are:
</para>

<execute><cmd>insertall.sh</cmd><args>pdf-filter-.*.sgml</args></execute>

</sect3>
</sect2>

<sect2><title>Object structure</title>
<para>
The diagram below shows the basic object structure of a PDF document. It can be much more complex than this, especially if you reuse commonly used objects like the logo which is on every page of the document. In words, the structure is something like:
</para>

<sect3><title>Catalog Object</title>
<para>
Every PDF document has a catalog object. This catalog object refers to a pages object.
</para>
</sect3>

<sect3><title>Pages object</title>
<para>
The pages object stores a list of pages within the PDF document, in the form of a dictionary array with the key name <quote>/Kids</quote>. Each of these pages will have an object.
</para>
</sect3>

<sect3><title>A Page object per page</title>
<para>
Each page object will have a content object.
</para>
</sect3>

<sect3><title>Content objects</title>
<para>
Each content object will refer to the pages object, as well as refering to resources that that needed to draw this page. The resources can be used by other contents objects as well. Resources are things like fonts, and images.
</para>

<para>
A postscript-like description of the layout of the page is stored in this object's stream.
</para>
</sect3>

<sect3><title>Resources</title>
<para>
A resources object stores information you need to be able to use a given resource such as a font or image.
</para>

<para>
If the resource is an image or an embedded font, then the additional binary data (such as a raster) is stored in this objects stream.
</para>
</sect3>

<figure><title>A typical PDF object structure</title>
<graphic format="EPS" fileref="pdf-figure1.eps">
</figure>

</sect2>
</sect1>

<sect1><title>Support for presentations</title>
<para>
PDF documents can be used to create presentation slide shows. There are two main features which support this use of PDF -- page duration, and page transitions. The page duration is the amount of time that the page will appear on the screen before the PDF viewer automatically moves onto the next page. The transition is the effect applied to the PDF pages when they are being swapped between -- this is very similar to the Microsoft PowerPoint presentations.
</para>

<para>
It is important to note that not all PDF viewers support this functionality.
</para>
</sect1>

<sect1><title>Panda</title>
<para>
Panda is my own PDF generation library. I wrote it because I was not happy with the license and some of the limitations with ClibPDF, and the license for PDFlib wasn't acceptable. To be honest, the best way to learn about something is also to build an implementation of it, which was an additional motivation.
</para>

<para>
You can get Panda from http://www.stillhq.com, and is licensed under the GNU GPL, which can be found at the start of this tutorial.
</para>

<sect2><title>Installation</title>
<para>
First, download Panda from http://www.stillhq.com, and then follow these simple steps:
</para>

<sect3><title>Unix</title>
<para>
Follow these simple steps to install Panda on your unix system:
</para>

<itemizedlist>
<listitem><para>Extract the tarball</para></listitem>
<listitem><para>Change into the Panda directory</para></listitem>
<listitem><para>./configure</para></listitem>
<listitem><para>make</para></listitem>
<listitem><para>make install</para></listitem>
</itemizedlist>

<para>
This will also build the examples in the examples directory.
</para>
</sect3>

<sect3><title>win32</title>
<para>
Panda currently compiles quite happily on Windows, and if you download the right version of the tarball even includes a Microsoft Visual Studio project file. Note that the current version of Panda (0.5.1), doesn't include a COM wrapper for Panda, so you either need to be programing in C or C++, or a language which can import DLL symbols (for instance Microsoft Visual Basic).
</para>
</sect3>
</sect2>

<sect2><title>Hello world example</title>
<para>
The most basic PDF example is the hello world application. Here is the Panda iteration:
</para>

<execute><cmd>code2db.pl</cmd><input>source/pdf/panda/hello/hello.c</input></execute>

<para>
Which produces...
</para>

<execute><cmd>pdf2db.sh</cmd><args>source/pdf/panda/hello/hello.pdf "Panda hello world"</args></execute>

<para>
todo
</para>
</sect2>

<sect2><title>Initialization</title>
<para>
Initialisation of Panda is easy. Simply call <command>panda_init</command>(). You'll also need to create a PDF document, which is done with the <command>panda_open</command> function.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_init.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_open.sgml</input></execute>
</sect2>

<sect2><title>Creating pages</title>
<para>
Pages are created in Panda using the <command>panda_newpage</command> function. You can magically be editting as many pages at a time as you like with Panda without any additional calls being needed.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_newpage.sgml</input></execute>
</sect2>

<sect2><title>Object properties</title>
<para>
Panda allows you to selectively apply properties to portions of your PDF document. The most common example is choosing which portions of your PDF document to compress.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_setobjectproperty.sgml</input></execute>
</sect2>

<sect2><title>Finalization</title>
<para>
Pages don't need to be closed in Panda. This is done when the <command>panda_close</command> function is called. This function writes the entire PDF document out to disc.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_close.sgml</input></execute>
</sect2>

<sect2><title>Inserting text</title>
<para>
One of the advantages which ClibPDF has over Panda is that it currently supported word wrap, whereas Panda doesn't. Panda does have a variety of text functionality however. The public text functions in Panda are: <command>panda_textboxrot</commmand>, which creates a text box at a jaunty angle, <command>panda_textbox</command>, which creates a horizontal textbox (a zero angle), and <command>panda_textdirection</command>, which sets the flow direction for text.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_textbox.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_textboxrot.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_textdirection.sgml</input></execute>
</sect2>

<sect2><title>Fonts</title>
<para>
Panda currently only supports the standard PDF fonts, and will not allow you to embed arbitary fonts into your PDF documents (unlike PDFlib). Some users might find this a little limiting for the time being. In Panda, you use fonts by first creating a pointer to the font using <command>panda_createfont</command>, and then start using that font with <command>panda_setfont</command>. This allows you use efficiently create the five fonts you are going to use in the document, and then swap backwards and forwards within that set of five with no performance penalty.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_createfont.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setfont.sgml</input></execute>
</sect2>

<sect2><title>Font attributes</title>
<para>
Panda also allows you to set a variety of font attributes...
</para>

<execute><cmd>builddb.pl</cmd><input>panda_setcharacterspacing.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setfillcolor.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setfontmode.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setfontsize.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_sethorizontalscaling.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setleading.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setwordspacing.sgml</input></execute>

</sect2>

<sect2><title>Inserting raster images</title>
<para>
Panda probably has the best raster image support of any of the PDF libraries available (not including Adobe's libraries). This is because this is my main area of expertise, and has been the main focus of the Panda development effort. For example ClibPDF only supports TIFF images in a limited set of formats, whereas I am not aware of any TIFF files which cannot be inserting into a PDF with Panda. Panda also never creates temporary files on disc when it needs to convert between TIFF formats, unlike PDFlib.
</para>

<sect3><title>TIFF support</title>
<para>
Panda support TIFF fully.
</para>
</sect3>

<sect3><title>JPEG support</title>
<para>
Panda supports JPEG fully.
</para>
</sect3>

<sect3><title>PNG support</title>
<para>
Panda supports PNG fully.
</para>
</sect3>

<sect3><title>Inserting images onto pages</title>
<para>
In Panda you use the <command>panda_imagebox</command>, and the <command>panda_imageboxrot</command> functions to insert images.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_imagebox.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_imageboxrot.sgml</input></execute>
</sect3>
</sect2>

<sect2><title>Vector graphics</title>
<para>
Panda, supports the full range of PDF vector graphics commands. See the sections below for a description of the functionality available.
</para>

<sect3><title>Lines</title>
<para>
With Panda, the way you draw a line is to first create a line with <command>panda_setlinestart</command>, you then draw line segments with <command>panda_addlinesegment</command>. When you're finished, you close the line with <command>panda_closeline</command>. <command>panda_strokeline</command> is used to force the line to be drawn. You can also add curved segments to a line using <command>panda_addcubiccurvesegment</command>, <command>panda_addquadraticcurvesegmentone</command>, and <command>panda_addquadraticcurvesegmenttwo</command>. Finally, if all you want is a rectangle, then use <command>panda_rectangle</command> to do it for you.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_setlinestart.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_addlinesegment.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_closeline.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_endline.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_strokeline.sgml</input></execute>

<execute><cmd>builddb.pl</cmd><input>panda_addcubiccurvesegment.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_addquadraticcurvesegmentone.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_addquadraticcurvesegmenttwo.sgml</input></execute>

<execute><cmd>builddb.pl</cmd><input>panda_rectangle.sgml</input></execute>
</sect3>

<sect3><title>Fills and other line attributes</title>
<para>
Once you have drawn a line, then it can be filled. You can also configure the state of the pen <emphasis>before</emphasis> you draw the line to change the way it appears...
</para>

<execute><cmd>builddb.pl</cmd><input>panda_fillline.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setlinecap.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setlinecolor.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setlinejoin.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setlinewidth.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setlinedashing.sgml</input></execute>

</sect3>
</sect2>

<sect2><title>Document metadata</title>
<para>
PDF supports embedding metadata about a document into the PDF itself, and Panda supports this through the following calls:
</para>

<execute><cmd>builddb.pl</cmd><input>panda_setauthor.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setkeywords.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_setsubject.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_settitle.sgml</input></execute>

</sect2>

<sect2><title>Presentation support</title>
<para>
PDF can be used for presentations, and therefore allows you to specify a number of interesting things which are normally associated more with Microsoft PowerPoint presentations...
</para>

<execute><cmd>builddb.pl</cmd><input>panda_centerwindow.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_fitwindow.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_fullscreen.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_hidemenubar.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_hidetoolbar.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_hidewindowui.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_nfspagemodde.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_pageduration.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_transduration.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_transstyle.sgml</input></execute>

</sect2>

<sect2><title>Page templates</title>
<para>
A page template is created using <command>panda_newtemplate</command>. A template is just like any other page, and uses all the normal drawing functions. The cool bit is that you can then apply a template to another page using <command>panda_applytemplate</command>. This allows for the standard parts of the page to only be defined once -- which is very useful for things like letterhead.
</para>

<execute><cmd>builddb.pl</cmd><input>panda_newtemplate.sgml</input></execute>
<execute><cmd>builddb.pl</cmd><input>panda_applytemplate.sgml</input></execute>

</sect2>

<sect2><title>A full Panda example</title>
<para>
This section presents a full Panda example showing what the library is capable of. This code comes from the Panda distribution:
</para>

<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/panda/examples/main.c</input></execute>

<para>
It produces output like:
</para>

<execute><cmd>pdf2db.sh</cmd><input>~mikal/opensource/panda/examples/output.pdf</input></execute>
</sect2>

</sect1>




























<sect1><title>A lexer for PDF</title>
<para>
Part of my Panda work has been the development of a lexer for PDF documents known as Panda<emphasis>Lex</emphasis>. Whilst Panda<emphasis>Lex</emphasis> is by no means complete, it might prove to be useful for your understanding of the PDF document structure. I have therefore included it here. The lexer takes the form of several components: a lexer for the grammar, a grammar, and some c code to hold it all together.
</para>

<sect2><title>lexer.l</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/lexer.l</input></execute>
</sect2>

<sect2><title>lexinterface.h</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/lexinterface.h</input></execute>
</sect2>

<sect2><title>pandalex.h</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/pandalex.h</input></execute>
</sect2>

<sect2><title>parser.y</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/parser.y</input></execute>
</sect2>

<sect2><title>samples.c</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/samples.c</input></execute>
</sect2>

<sect2><title>samples.h</title>
<execute><cmd>code2db.pl</cmd><input>~mikal/opensource/pandalex/samples.h</input></execute>
</sect2>

</sect1>

<sect1><title>Conclusion</title>
<para>
<execute><cmd>todo</cmd><input>Content</input></execute>
</para>
</sect1>

<sect1><title>Further reading</title>
<para>
The following resources might be of use if you need more information:
</para>

<itemizedlist>
<listitem><para>http://developer.adobe.com has many useful resources, including the PDF specification (at the time of writing the latest version is 1.4, although this chapter is based on 1.3, because this is what is supported by the two libraries discussed here).</para></listitem>
<listitem><para></para></listitem>
<listitem><para></para></listitem>
<listitem><para></para></listitem>
<listitem><para></para></listitem>
</itemizedlist>
</sect1>

</chapter>

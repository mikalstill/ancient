<refentry>
<refmeta>
<refentrytitle>panda_traverseobjects</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>

<refnamediv>
<refname>panda_traverseobjects</refname>
<refpurpose>traverse the PDF object tree and perform an operation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<synopsis>
 #include&lt;panda/constants.h&gt;
 #include&lt;panda/functions.h&gt;
 void panda_traverseobjects (panda_pdf * output, panda_object * startObject, int direction, traverseFunct function);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>
<para><command>PANDA INTERNAL</command>. This function traverses the object tree created by <command>panda_addchild</command>() and repeatedly calls the function defined as a callback. The traversal has a direction as defined by: panda_up (bottom up) or panda_down (top down). This call is commonly used by <command>panda_close</command> to call <command>panda_writeobject</command>() and <command>panda_freeobject</command>(). API users might also find it useful, although I wouldn't know why.</para>
</refsect1>

<refsect1>
<title>RETURNS</title>
<para>None</para>
</refsect1>

<refsect1>
<title>EXAMPLE</title>
<para> #include&lt;panda/constants.h&gt;
 #include&lt;panda/functions.h&gt;
 
 panda_pdf *document;
 
 panda_init();
 
 document = panda_open("filename.pdf", "w");
 
 ... create a whole bunch of objects and add them to the tree ...
 panda_traverseobjects(document, document->catalog, panda_down, panda_writeobject);
</para>
</refsect1>

<refsect1>
<title>SEE ALSO</title>
<para>panda_newobject, panda_freeobject, panda_writeobject, panda_addchild</para>
</refsect1>

</refentry>

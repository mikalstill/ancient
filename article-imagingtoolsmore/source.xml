
<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/xsl" href="C:\Documents and Settings\Administrator\My Documents\Articles\1 - Templates\dw-document-html-2.1.xsl"?>
<dw-document xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\Administrator\My Documents\Articles\1 - Templates\dw-document-2.1.xsd">

<!-- SKILL LEVEL 
If known, specify the (skill) level, 1 to 5 -->
<dw-article toc="auto" ratings="auto" level="1" localsite="worldwide" related_contents="auto">
<id domino-uid=""/>

<meta name="keywords" content="image, raster, imagemagick, convert, rotate, scale, thumbnail, resize, artistic"/>
<!-- Fill in or leave blank for production to fill in.  -->
<meta name="lastupdate" content="2003mmdd your-initials"/>

<zone name="linux"/>

<seriestitle></seriestitle>
<title>More graphics from the command line</title>
<subtitle></subtitle>
<!--  End TITLE -->

<!-- Ignore these lines. -->
<!-- <forumurl url=""/> -->
<!-- <zip url=""/> -->
<!-- <pdf size="" url=""/> -->

<author company="TOWER Software" email="mikal@stillhq.com" jobtitle="Senior Software Engineer" name="Michael Still">
<bio>Michael has been working in the image processing field for several years, including a couple of years managing and developing large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as a bunch of other Open Source code.</bio></author>
<!--  End AUTHOR -->

<!-- DATE INFO
Fill in or leave blank for production to fill in.-->
<date month="12" day="25" year="2003"/>

<abstract miniabstract="">This article discusses commonly used image manipulations using command line tools, mainly from the ImageMagick suite. It expands on the examples from the "Command line imaging tools" article.</abstract>

<column-info col-name="" col-icon=""/>
<docbody>

<p>Earlier this year I wrote an article for IBM DeveloperWorks about image manipulations on the command line using ImageMagick. The article was quite well received, and since then I have fielded many email questions on ImageMagick. This article expands on the techniques discussed in that previous article, as well as answering as many of those questions as I can. If this is the first ImageMagick article from IBM DeveloperWorks that you've found, you would do well to have a look at this first article as well.</p>

<p>This article takes the form of discussing specific problems as examples, but the concepts should be applicable to other problem spaces as well.</p>

<p>It should be noted that there are many ways to do the things discussed in this article. I will only discuss the methods I use, and know work for me. That doesn't mean the other tools out there are broken, it just means that I'm happy with what I am using now.</p>






<heading refname="" type="major" toc="yes" name="" alttoc="">Curving corners</heading>
<p>If you have a look at MacOS X, and many websites, the pictures have quite nice curved corners. How do you achieve this effect with ImageMagick? Well, we're going to have to show some enginuity in producing this effect by using the <b>composite</b> command.</p>

<p>Before we get there though, let's talk about the strategy we're going to emply. If you think about it, an image with curved corners can be made by taking some standard pre-made corners, and superimposing them over the original image. There's no real need for the corners to be curved even -- we could have angled corners, or something much more fancy.</p>

<p>So, the first step is to make some corners. Below is a corner I whipped up in the GIMP. I wont show you all four, as the others are just this one rotated by differing multiples of 90 degrees.</p>

<sidebar>
<heading refname="" type="sidebar" toc="no" name="" alttoc="">The GIMP</heading>
<p>The GIMP, the GNU Image Manipulation Package, is a very useful raster graphics editor, much like Adobe Photoshop. It's great for tweaking images, or for creating your own new pictures. Checkout <a href="http://www.gimp.org">www.gimp.org</a> for more details.</p> 
</sidebar>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 1. A curved corner made in the GIMP</heading>
<img src="rounded-ne.png" width="10" height="10" alt="A rounded corner"/>
</figure>

<p>You should note that the curve on this image is actually in white, and the rest of the image is transparent. This transparency will allow the image we are adding the corners to to show through. This can be a little confusing, as some image viewers such as <b>xview</b> will show the transparency in black or some other color.</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 2. The curved corner displayed with xview</heading>
<img src="rounded-ne-xview.png" width="98" height="57" alt="A rounded corner with xview"/>
</figure>

<p>The actual corner image will become more clear when we superimpose it upon an image, so let's get on with that.</p>

<p>I have a thumbnail which I made earlier of the view from the shore of one of Canberra's lakes. Without the rounded corners, the thumbnail looks like this:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 3. Lake Burley Griffin</heading>
<img src="lake.png" width="144" height="192" alt="A lake view"/>
</figure>

<p>To superimpose an image onto another, you use the <b>composite</b> command. Let's just do one corner, to see what happens...</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 1. Rounding one corner</heading>
<code type="section">
composite -gravity NorthEast rounded-ne.png lake.png lake-1.png
</code>

<p>Here, the gravity arguement defines where on the image to put the superimposed image -- in our case the rounded corner. This particular command gives us the following image:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 4. Lake Burley Griffin with one rounded corner</heading>
<img src="lake-1.png" width="144" height="192" alt="A lake view"/>
</figure>

<sidebar>
<heading refname="" type="sidebar" toc="no" name="" alttoc="">Gravity</heading>
<p>The gravity arguement specifies where on the background image the superimposed image is placed. The possible gravities, and their effects are:</p> 

<heading refname="" type="figure" toc="no" name="" alttoc="">Gravity directions</heading>
<img src="gravity2.png" width="261" height="205" alt="Gravity directions"/>

<p>For example, SouthWest will force the superimposed image to the bottom left hand corner of the background image.</p>
</figure>
</sidebar>

<p>So let's do the rest of the corners...</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 2. Rounding all of the corners</heading>
<code type="section">
composite -gravity NorthEast rounded-ne.png lake.png lake-1.png
composite -gravity NorthWest rounded-nw.png lake-1.png lake-2.png
composite -gravity SouthEast rounded-se.png lake-2.png lake-3.png
composite -gravity SouthWest rounded-sw.png lake-3.png lake-4.png
</code>

<p>Which gives us the finished image:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 5. Lake Burley Griffin with rounded corners</heading>
<img src="lake-4.png" width="144" height="192" alt="A lake view"/>
</figure>

<p>Which looks kinda cool in my humble opinion. You should also take note that there is no reason for these corner images to be rounded. If you're interested in angled corners or such, then they're equally possible -- just change the corner images in a bitmap editor.</p>

<p>If you want to use my rounded corners, a URL is listed in the resources section at the end of this article.</p>



<heading refname="" type="major" toc="yes" name="" alttoc="">Putting frames around images</heading>
<p>Another thing which several readers asked about was how to add frames to images. Again, this is relatively easy to do with ImageMagick.</p>

<heading refname="" type="minor" toc="yes" name="" alttoc="">A raised or lowered border</heading>

<p>The first type of frame I will show you is a raised or lowered border. This effect works by tweaking the colors at the edge of an image to give the impression that it is either raised above the surrounding surface, or pushed below it. For the effect, you need to specify a size, with the horizontal size first, and then the vertical size. These sizes must obey the rule that twice the size specified must be less than or equal to the dimention of the image in that direction. For example, you can't specify a frame size verically that is more than half the vertical size of the image.</p>

<p>To create a raised border, use the <i>-raise</i> command line arguement. For example, to create a 5 pixel by 5 pixel border, we execute:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 3. Creating a raised border</heading>
<code type="section">
convert -raise 5x5 tree.png tree-raised.png
</code>

<p>Which gives us the finished image:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 6. An image with a raised border</heading>
<img src="tree-raised.png" width="320" height="240" alt="Some trees by a bay with a raised border"/>
</figure>

<p>To create a lowered border, just use the <i>+raise</i> command line arguement instead. For example:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 4. Creating a lowered border</heading>
<code type="section">
convert +raise 5x5 tree.png tree-lowered.png
</code>

<p>Which gives a slightly different finished image:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 6. An image with a raised border</heading>
<img src="tree-lowered.png" width="320" height="240" alt="Some trees by a bay with a lowered border"/>
</figure>




<heading refname="" type="minor" toc="yes" name="" alttoc="">A simple colored border</heading>

<p>If you're after something a little more simple, you might be interested in a border of just a solid color. ImageMagick can do this for you as well.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 5. Creating a simple solid red border</heading>
<code type="section">
convert -bordercolor red -border 5x5 flower.png flower-border.png
</code>

<p>Which creates:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 7. An image with a red border</heading>
<img src="flower-border.png" width="320" height="240" alt="Some flowers with a red border"/>
</figure>

<p>What border colors can we specify on the command line? Well, the list is simply too long to put into this article. To get a copy of the list, execute this command:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 6. Generate a list of colors usable in borders</heading>
<code type="section">
convert -list color
</code>

<p>I will give in a little, and list for you some of the more commonly used colors of the 683 available: aquamarine, azure, beige, bisque, black, blue, brown, burlywood, chartreuse, chocolate, coral, cornsilk, cyan, firebrick, gainsboro, gold, goldenrod, green, honeydew, ivory, khaki, lavender, linen, magenta, maroon, moccasin, navy, orange, orchid, peru, pink, plum, purple, red, salmon, seashell, sienna, snow, tan, thistle, tomato, turquoise, violet, wheat and yellow.</p>

<p>You can also of course specify your own colors by using any of the following formats, where R represents the red value, G the green, B the blue, and A the alpha (transparency) value:</p>

<ul>
<li>#RGB - (R,G,B are hex numbers, 4 bits each)
<li>#RRGGBB - (8 bits each)
<li>#RRRGGGBBB - (12 bits each)
<li>#RRRRGGGGBBBB - (16 bits each)
<li>#RGBA - (4 bits each)
<li>#RRGGBBAA - (8 bits each)
<li>#RRRGGGBBBAAA - (12 bits each)
<li>#RRRRGGGGBBBBAAAA - (16 bits each)
<li>rgb(r,g,b) - (r,g,b are decimal numbers)
<li>rgba(r,g,b,a) - (r,g,b,a are decimal numbers)
</ul>

<heading refname="" type="minor" toc="yes" name="" alttoc="">Building a more complicated frame</heading>

<p>Next let's build a slightly more complicated frame, using the <i>-frame</i> command line arguement. First we'll add a simple frame which is identical (except for the color) to the border we built in the previous example.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 7. Creating a simple solid red border</heading>
<code type="section">
convert -mattecolor black -frame 5x5 beach.png beach-frame.png
</code>

<p>The arguments are <i>-mattcolor</i> and <i>-frame</i> instead of <i>-bordercolor</i> and <i>-border</i>, but the rest is the same as with the border command.</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 8. A simple black border</heading>
<img src="beach-frame.png" width="320" height="240" alt="A picture of the beach with a simple black frame"/>
</figure>

<p>Now we can add some extra complexity by adding some gray shading similar to what the <i>-raise</i> command gave us.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 8. A simple black border with some gray around the edges</heading>
<code type="section">
convert -mattecolor black -frame 5x5+2 beach.png beach-frame2.png
</code>

<p>Which is getting there:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 9. The same picture, but with some more decoration</heading>
<img src="beach-frame2.png" width="320" height="240" alt="A picture of the each with a slighlty more complicated border"/>
</figure>

<p>Finally, we can add some more decoration, to get the final effect I want...</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 9. A fully decorated frame</heading>
<code type="section">
convert -mattecolor black -frame 5x5+2+2 beach.png beach-frame3.png
</code>

<p>Which finally gives us:</p>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 10. A finished frame</heading>
<img src="beach-frame3.png" width="320" height="240" alt="A picture of the beach with a finished frame"/>
</figure>

<p>If you're looking at ways to make nice frames for your images, then I recommend that you spend a few moments playing with the arguements to the <i>-frame</i> command. For example, here's some interesting frames for a picture of a rock at King's Canyon, in Australia.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 10. An interesting frame mark 1</heading>
<code type="section">
convert -mattecolor gray -frame 25x25+0+25 rock.png rock-frame1.png
</code>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 11. An interesting frame</heading>
<img src="rock-frame1.png" width="320" height="240" alt="A rock picture with a frame"/>
</figure>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 11. An interesting frame mark 2</heading>
<code type="section">
convert -mattecolor gray -frame 25x25+25+0 rock.png rock-frame2.png
</code>

<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 12. Another interesting frame</heading>
<img src="rock-frame2.png" width="320" height="240" alt="A rock picture with a frame"/>
</figure>








<heading refname="" type="major" toc="yes" name="" alttoc="">Processing many images at once</heading>

<p>In my previous article, I showed you sample code to apply conversions to many images at once. As has been pointed out by several people, the code I showed was not the best way of doing this.</p>

<p>Here's the code I showed you:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 12. Thumb nailing all the JPEGs in the current directory</heading>
<code type="section">
for img in `ls *.jpg`
do
  convert -sample 25%x25% $img thumb-$img
done
</code>

<p>Now it turns out that this is poor bash style, as it doesn't handle spaces in filenames very gracefully (each word will be treated as a separate filename). Instead, a better way of doing this in bash is to do:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 13. Thumb nailing all the JPEGs in the current directory, with better bash</heading>
<code type="section">
for img in *.jpg
do
  convert -sample 25%x25% $img thumb-$img
done
</code>

<p>Which which will handle spaces in filenames much more gracefully.</p>

<p>It turns out however that both of these solutions aren't needed with ImageMagick -- we can just use the <b>mogrify</b> command. <b>mogrify</b> is used to convert a sequence of images (although it will work for single images as well).</p>

<p>That code snippet above becomes:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 14. Thumb nailing all the JPEGs in the current directory, with mogrify</heading>
<code type="section">
mogrify -sample 25%x25% *.jpg
</code>

<p><i>Note that this will overwrite the original images with new ones. This is one of the limitations of <b>mogrify</b>, in that it is harder to specify output filenames.</i> The only way to specify an output filename is to change the format of the output image compared with the input image. This will result in a different extension for the new image. For example:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 15. Thumb nailing all the JPEGs in the current directory, with mogrify</heading>
<code type="section">
mogrify -format png -sample 25%x25% *.jpg
</code>

<p>This will create a series of output files with the jpg at the end of the filename has been replaced with a png, with the associated image format change.</p>

<p>All of the conversions previously defined will also work with the <b>mogrify</b> command, so if you don't mind the original images being overwritten then it's a good choice.</p>

</docbody>

<relatedlist>
<a href="http://www-106.ibm.com/developerworks/linux/library/l-libtiff/">Graphics programming with libtiff</a>
<a href="http://www-106.ibm.com/developerworks/linux/library/l-libtiff2/">Graphics programming with libtiff, Part 2</a>
<a href="http://www-106.ibm.com/developerworks/linux/library/l-graf/">Graphics from the command line</a>
</relatedlist>

<resourcelist>
<ul>

<li>The <a href="http://www.imagemagick.org">ImageMagick</a> website is an excellent resource, and offers downloads of the ImageMagick source code.

<li>"<a href="http://www-106.ibm.com/developerworks/linux/library/l-libtiff/">Graphics programming with libtiff</a>" (<i>developerWorks</i>, March 2002) discuesses black and white imaging concepts, with a particular focus on TIFF images.</li>

<li>"<a href="http://www-106.ibm.com/developerworks/linux/library/l-libtiff2/">Graphics programming with libtiff, Part 2</a>" (<i>developerWorks</i>, June 2002) discusses color TIFF images, but also discusses important topics such as which compression scheme is right for you.</li>

<li>"<a href="http://www-106.ibm.com/developerworks/linux/library/l-graf/">Graphics from the command line</a>" (<i>developerWorks</i>, July 2003) is the first article in the series and discusses how to thumbnail, rotate, apply interesting graphical manipulations, and determine image information with ImageMagick.

<li>The <a href="http://www.stillhq.com/cgi-bin/getpage?area=pngtools">pnginfo</a> is part of the pngtools suite.</li>

</ul>
</resourcelist>
</dw-article>
</dw-document>
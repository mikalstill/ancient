<?xml version="1.0" encoding="UTF-8"?>
<!-- REMOVE ALL TEMPLATE COMMENTS FROM THE FILE BEFORE PUBLISHING; SAMPLE TEXT IS IN BRACKETS-->

<!-- CHANGE ATTRIBUTES BELOW TO "NO" TO REMOVE RATINGS AREA OR TABLE OF CONTENTS-->
<article ratings="auto" toc="auto">

<!-- IF THIS IS PART OF A SERIES, ENTER SERIES TITLE BELOW.   OTHERWISE, REMOVE THIS TAG.  DO NOT END TEXT WITH A COLON;  THE STYLESHEET HANDLES THIS-->
   <seriestitle>[Optional series title]</seriestitle>
   <papertitle>TIFF imaging with libtiff</papertitle>
   <subtitle>[Enter required paper subtitle here]</subtitle>
   <author company="TOWER Software Engineering" email="mikal@stillhq.com" jobtitle="Senior Software Engineer" name="Michael Still">Michael has been working in the image processing field for several years, including a couple of years managing and dveloping large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as being the maintainer of the comp.text.pdf USENET frequently asked questions document. You can contact Michael at <a href="mailto:mikal@stillhq.com">mikal@stillhq.com</a>.</author>

   <date month="February" year="2002"></date>
   <zone name="linux"></zone>
   <pdf url="ftp://www6.software.ibm.com/software/developer/library/[xxx.pdf]" size="xxKB"></pdf>
   <zip url="ftp://www6.software.ibm.com/software/developer/library/xxx.zip"></zip>

   <meta name="KEYWORDS" content="tiff libtiff image imaging raster bitmap" />	
   <meta name="LASTUPDATE" content="20020211 MBS"/>
        
   <relatedlist>
   <a href="">[Link 1 to related content]</a>
   <a href="">[Link 2 to related content]</a>
   </relatedlist>			
		
<!-- ENTER ARTICLE ABSTRACT BELOW.  REMOVE ANY BLANKS OR CARRIAGE RETURN CHARACTERS WITHIN THE TEXT.  KEEP THE ABSTRACT SHORT (NO MORE THAN SEVEN LINES ON THE HTML PAGE).  THESE RESTRICTIONS ARE REQUIRED FOR THE "EMAIL IT!" FUNCTION. -->	
   <abstract>TIFF is an extremely common, but quite complex raster image format. Libtiff is a standard implementation of the TIFF specification, which is free and works on many operating systems. This article discusses some of the pitfalls of TIFF, and guides the reader through use of the libtiff library.</abstract>

<p>TIFF (Tagged Image File Format) is a raster image format which was originally produced by <a href="http://www.adobe.com">Adobe</a>. Raster image formats are those which store the picture as a bitmap describing the state of pixels, as opposed to recording the length and locations of primatives such as lines and curves. Libtiff is one of the standard implementations of the TIFF specification, and is in wide use today because of its speed, power and easy source availability.</p>

<p>This article focuses on black and white TIFF images, there ins't enough space in the article to cover color images as well. These will be covered in another article in a later edition of DeveloperWorks.</p>

<p><heading refname="hard" type="major" toc="yes">Coding for TIFF can be hard</heading>	
Most file format specifications define some basic rules for the representation of the file. For instance, PNG<CHECKTHIS> (a compeditor to TIFF) documents are always big endian. TIFF doesn't mandate things like this though, here is a list of some of the seemingly basic things that it doesn't define:</p>

<ul>
  <li>The byte order -- big endian, or little endian
  <li>The fill order of the bit within the image bytes -- most significant bit first, or least significant
  <li>The meaning of a given pixel value for black and white -- is 0 black, or white?
  <li>...and so on
</ul>

<p>This means that creating a TIFF can be very easy, because it is rare to have to do any conversion of the data that you already have. It does mean, on the other hand, that being able to read in random tiff created by other applications can be very hard -- you have to code for all these possible combinations in order to be reasonably certain of having a reliable product.</p>
	
<p>So how do you write an application which can read in all these different possible permutations of the TIFF format? Well, there are some basic guidelines to follow, which will make your life easier. The most important of these is: <i>never make an assumption</i>.</p>

<p><heading refname="hard" type="major" toc="yes">Writing TIFF files</heading>
The first thing I want to do is show you how to write a TIFF file out. We'll then get onto how to read a TIFF file back into your program.</p>
	
<p><heading refname="infrastructure-write" type="minor" toc="yes">Infrastructure for writing</heading>
It is traditional for bitmaps to be represented inside your code with an array of chars. This is because on most operating systems, a char maps well to one byte. In the block of code below, we will setup libtiff, and create a simple buffer which contains an image which we can then write out to disc.</p>

<code type="section">
<heading refname="infrastructure-write-code" type="code" toc="no">Setting up the infrastructure</heading>
#include <stdio.h>
#include <tiffio.h>

int
main (int argc, char *argv[])
{
  char buffer[32 * 9];
}
</code>

<p>The code above is pretty simple. All you need to use libtiff is to include the tiffio.h header file. To compile this, use the command <code type="inline">gcc foo.c -o foo -ltiff -lm</code>. The <code type="inline">-ltiff</code> is a command which will include the library named libtiff, which needs to be in your library path. Once you have started specifing libraries explicitly, you also need to add <code type="inline">-lm</code>, which is the mathematics library. The char buffer that we have defined here is going to be our black and white image, so we should define one of those next...</p>

<p><heading refname="write" type="minor" toc="yes">Writing the image</heading>
To make up for how boring that example was, I am now pleased to present you with possibly the worst picture of the Sydney Harbour Bridge ever drawn. In the example below, the image is already in the image buffer, and all we have to do is save it to the file on disc. The example first opens a tiff image in write mode, and then places the image into that file.</p>

<code type="section">
<heading refname="write-code" type="code" toc="no">The writing code</heading>
#include <stdio.h>
#include <tiffio.h>

int main(int argc, char *argv[]){
  // Define an image
  char buffer[25 * 144] = { /* boring hex omitted */ };
  TIFF *image;
  int count;

  // Open the TIFF file
  if((image = TIFFOpen("output.tif", "w")) == NULL){
    printf("Could not open output.tif for writing\n");
    exit(42);
  }

  // We need to set some values for basic tags before we can add any data
  TIFFSetField(image, TIFFTAG_IMAGEWIDTH, 25 * 8);
  TIFFSetField(image, TIFFTAG_IMAGELENGTH, 144);
  TIFFSetField(image, TIFFTAG_BITSPERSAMPLE, 1);
  TIFFSetField(image, TIFFTAG_SAMPLESPERPIXEL, 1);
  TIFFSetField(image, TIFFTAG_ROWSPERSTRIP, 144);

  TIFFSetField(image, TIFFTAG_COMPRESSION, COMPRESSION_CCITTFAX4);
  TIFFSetField(image, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISWHITE);
  TIFFSetField(image, TIFFTAG_FILLORDER, FILLORDER_MSB2LSB);
  TIFFSetField(image, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);

  TIFFSetField(image, TIFFTAG_XRESOLUTION, 150.0);
  TIFFSetField(image, TIFFTAG_YRESOLUTION, 150.0);
  TIFFSetField(image, TIFFTAG_RESOLUTIONUNIT, RESUNIT_INCH);
  
  // Write the information to the file
  TIFFWriteEncodedStrip(image, 0, buffer, 25 * 144);

  // Close the file
  TIFFClose(image);
}

</code>






<!-- FIGURE WITH HEADING:  PLACE HEADING INSIDE FIGURE TAG WITH TYPE="FIGURE".  DO NOT SURROUND FIGURE WITH PARAGRAPH TAGS.  THE TOC ATTRIBUTE DETERMINES IF THIS HEADING IS INCLUDED IN THE TOC.   DEFAULT IS TOC="NO".   ALWAYS CODE THE ALT= ATTRIBUTE FOR A FIGURE.  ALWAYS CODE CORRECT HEIGHT AND WIDTH FOR FIGURE-->
<figure>
<heading refname="figure1" type="figure" toc="no">[Figure x.   Caption for sample figure]</heading>
<img src="xxx.jpg" width="500" height="200" alt="[Sample figure; code correct height and width"/>
</figure>

<p>[Refer to figure using the reference name (refname) assigned to the figure, as follows: <a href="#figure1">Figure 1</a>. ]</p>

<!-- SIDEBAR WITH HEADING:  PLACE HEADING INSIDE SIDEBAR TAG WITH TYPE="SIDEBAR".  DO NOT SURROUND SIDEBAR WITH PARAGRAPH TAGS.  THE TOC ATTRIBUTE DETERMINES IF THIS HEADING IS INCLUDED IN THE TOC.   DEFAULT IS TOC="NO".   IF NEEDED, YOU CAN ADJUST THE WIDTH OF THE SIDEBAR USING THE WIDTH= ATTRIBUTE OF THE SIDEBAR TAG.  SPECIFY A PERCENTAGE.-->
<sidebar>
<heading refname="" type="sidebar" toc="no">[Sidebar heading]</heading>
[Insert the text for the sidebar here.  The default for the sidebar is width="30%".  To widen the sidebar, code the width attribute on the sidebar tag (specify a percentage).
<p>Start using paragraph tags with the second paragraph of the sidebar.]</p>
</sidebar>

<!-- THIRD-LEVEL HEADING:  PRECEDE ALL THIRD-LEVEL HEADINGS WITH A PARAGRAPH TAG.  FOLLOW THE HEADING WITH A BREAK TAG.-->
<p><b>[Third-level heading]</b><br />
[The third-level heading above is created using bold tags and is followed by a break tag to separate it from the paragraph text.]</p>

<p><heading refname="conclusion" type="major" toc="yes">Conclusion</heading>
In this article I have shown you how to write and read some simple black and white images using libtiff. There are of course more issues that can be dealt with to have the perfect code, but being aware of the issues is the first step.</p>




<!-- RESOURCE LIST WITH HEADINGS:  PLACE HEADINGS INSIDE RESOURCELIST TAG WITH TYPE="RESOURCELIST".  DO NOT SURROUND LIST WITH PARAGRAPH TAGS, BUT USE PARAGRAPH TAGS AROUND RESOURCELIST HEADINGS.-->
<resourcelist>
<ul>
<li>The <a href="http://www.libtiff.org">libtiff</a> website is a good place to download the libtiff source. It is also quite likely there is a binary package for your choosen operating system.</li>
<li>If all else fails, then the <a href="http://partners.adobe.com/asn/developer/pdfs/tn/TIFF6.pdf">Adobe TIFF specification</a> can be useful.</li>
</ul>
<p><heading refname="" type="resourcelist" toc="no">[Sample resource list heading]</heading></p>
<ul>
<li>[First resource item and link with a heading]</li>
<li>[Second resource item and link with a heading]</li>
</ul>
</resourcelist>

</article>

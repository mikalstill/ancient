<?xml version="1.0" encoding="UTF-8"?>
<article ratings="auto" toc="auto">

   <seriestitle>[Optional series title]</seriestitle>
   <papertitle>TIFF imaging with libtiff</papertitle>
   <subtitle>Black and white</subtitle>
   <author company="TOWER Software Engineering" email="mikal@stillhq.com" jobtitle="Senior Software Engineer" name="Michael Still">Michael has been working in the image processing field for several years, including a couple of years managing and dveloping large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as being the maintainer of the comp.text.pdf USENET frequently asked questions document. You can contact Michael at <a href="mailto:mikal@stillhq.com">mikal@stillhq.com</a>.</author>

   <date month="February" year="2002"></date>
   <zone name="linux"></zone>
   <pdf url="ftp://www6.software.ibm.com/software/developer/library/[xxx.pdf]" size="xxKB"></pdf>
   <zip url="ftp://www6.software.ibm.com/software/developer/library/xxx.zip"></zip>

   <meta name="KEYWORDS" content="tiff libtiff image imaging raster bitmap black white" />	
   <meta name="LASTUPDATE" content="20020211 MBS"/>
        
   <relatedlist>
   <a href="">[Link 1 to related content]</a>
   <a href="">[Link 2 to related content]</a>
   </relatedlist>			
		
   <abstract>TIFF is an extremely common, but quite complex raster image format. Libtiff is a standard implementation of the TIFF specification, which is free and works on many operating systems. This article discusses some of the pitfalls of TIFF, and guides the reader through use of the libtiff library. This article provides examples on how to use libtiff for your black and white imaging needs.</abstract>

<p>TIFF (Tagged Image File Format) is a raster image format which was originally produced by <a href="http://www.adobe.com">Adobe</a>. Raster image formats are those which store the picture as a bitmap describing the state of pixels, as opposed to recording the length and locations of primatives such as lines and curves. Libtiff is one of the standard implementations of the TIFF specification, and is in wide use today because of its speed, power and easy source availability.</p>

<p>This article focuses on black and white TIFF images, there ins't enough space in the article to cover color images as well. These will be covered in another article in a later edition of DeveloperWorks.</p>

<p><heading refname="hard" type="major" toc="yes">Coding for TIFF can be hard</heading>	
Most file format specifications define some basic rules for the representation of the file. For instance, PNG<CHECKTHIS> (a compeditor to TIFF) documents are always big endian. TIFF doesn't mandate things like this though, here is a list of some of the seemingly basic things that it doesn't define:</p>

<ul>
  <li>The byte order -- big endian, or little endian
  <li>The fill order of the bit within the image bytes -- most significant bit first, or least significant
  <li>The meaning of a given pixel value for black and white -- is 0 black, or white?
  <li>...and so on
</ul>

<p>This means that creating a TIFF can be very easy, because it is rare to have to do any conversion of the data that you already have. It does mean, on the other hand, that being able to read in random tiff created by other applications can be very hard -- you have to code for all these possible combinations in order to be reasonably certain of having a reliable product.</p>
	
<p>So how do you write an application which can read in all these different possible permutations of the TIFF format? Well, there are some basic guidelines to follow, which will make your life easier. The most important of these is: <i>never make an assumption</i>.</p>

<p><heading refname="write" type="major" toc="yes">Writing TIFF files</heading>
The first thing I want to do is show you how to write a TIFF file out. We'll then get onto how to read a TIFF file back into your program.</p>
	
<p><heading refname="infrastructure-write" type="minor" toc="yes">Infrastructure for writing</heading>
It is traditional for bitmaps to be represented inside your code with an array of chars. This is because on most operating systems, a char maps well to one byte. In the block of code below, we will setup libtiff, and create a simple buffer which contains an image which we can then write out to disc.</p>

<code type="section">
<heading refname="infrastructure-write-code" type="code" toc="no">Setting up the infrastructure</heading>
#include <stdio.h>
#include <tiffio.h>

int
main (int argc, char *argv[])
{
  char buffer[32 * 9];
}
</code>

<p>The code above is pretty simple. All you need to use libtiff is to include the tiffio.h header file. To compile this, use the command <code type="inline">gcc foo.c -o foo -ltiff -lm</code>. The <code type="inline">-ltiff</code> is a command which will include the library named libtiff, which needs to be in your library path. Once you have started specifing libraries explicitly, you also need to add <code type="inline">-lm</code>, which is the mathematics library. The char buffer that we have defined here is going to be our black and white image, so we should define one of those next...</p>

<p><heading refname="write" type="minor" toc="yes">Writing the image</heading>
To make up for how boring that example was, I am now pleased to present you with possibly the worst picture of the Sydney Harbour Bridge ever drawn. In the example below, the image is already in the image buffer, and all we have to do is save it to the file on disc. The example first opens a tiff image in write mode, and then places the image into that file.</p>

<p>Please note, that for clarity I have omitted the actual hex for the image, this is available in the download version of this code for those who are interested.</p>

<code type="section">
<heading refname="write-code" type="code" toc="no">The writing code</heading>
#include <stdio.h>
#include <tiffio.h>

int main(int argc, char *argv[]){
  // Define an image
  char buffer[25 * 144] = { /* boring hex omitted */ };
  TIFF *image;

  // Open the TIFF file
  if((image = TIFFOpen("output.tif", "w")) == NULL){
    printf("Could not open output.tif for writing\n");
    exit(42);
  }

  // We need to set some values for basic tags before we can add any data
  TIFFSetField(image, TIFFTAG_IMAGEWIDTH, 25 * 8);
  TIFFSetField(image, TIFFTAG_IMAGELENGTH, 144);
  TIFFSetField(image, TIFFTAG_BITSPERSAMPLE, 1);
  TIFFSetField(image, TIFFTAG_SAMPLESPERPIXEL, 1);
  TIFFSetField(image, TIFFTAG_ROWSPERSTRIP, 144);

  TIFFSetField(image, TIFFTAG_COMPRESSION, COMPRESSION_CCITTFAX4);
  TIFFSetField(image, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISWHITE);
  TIFFSetField(image, TIFFTAG_FILLORDER, FILLORDER_MSB2LSB);
  TIFFSetField(image, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);

  TIFFSetField(image, TIFFTAG_XRESOLUTION, 150.0);
  TIFFSetField(image, TIFFTAG_YRESOLUTION, 150.0);
  TIFFSetField(image, TIFFTAG_RESOLUTIONUNIT, RESUNIT_INCH);
  
  // Write the information to the file
  TIFFWriteEncodedStrip(image, 0, buffer, 25 * 144);

  // Close the file
  TIFFClose(image);
}
</code>

<p>There are some interesting things to note in this example. The most interesting of these is that the output image will not display using the xview command on my linux machine. In fact, I couldn't find an example of a group 4 fax compressed black and white image which would display using that program. See the sidebar for more detail.</p>

<sidebar>
<heading refname="" type="sidebar" toc="no">Problems with xview</heading>
Xview is part of the xloadimage package written by Jim Frost, which comes with X windows.
<p>It's a good example of how hard it can be to handle TIFF images well. I am currently working on a patch to submit to Jim which will resolve this problem. If you have trouble viewing the output of the sample code, then try using some other program, like the gimp.</p>
</sidebar>

<p>The sample code shows the basics of using the libtiff API. The following interesting points should be noted...</p>

<ul>
<li>The buffers presented to and returned from libtiff each contain 8 pixels in a single byte. This means that you have to be able to extract the pixels you are interested in. The masks, and the right and left shift operators come in handy here.
<li>The TIFFOpen function is very similar to the fopen function we are all familiar with.
<li>We need to set the value for quite a few fields before we can start writing the image out. These fields give libtiff information about the size and shape of the image, as well as the way that data will be compresed within the image. These fields need to be set before you can start handing image data to libtiff.
<li>TIFFWriteEncodedStrip is the function call which actually inserts the image into the file. This call inserts uncompressed image data into the file. This means that libtiff will compress the image data for you before writing it to the file. If you have already compressed data, then have a look at the TIFFWriteRawStrip instead.
<li>Finally, we close the file with TIFFClose.
</ul>

<sidebar>
<heading refname="" type="sidebar" toc="no">More information about the libtiff function calls</heading>
If you need more information about any of the libtiff function calls mentioned in this article, then checkout the extensive man pages which come with the library. Remember that case is important with man pages, so you need to get the case in the function names right -- it's TIFFOpen, not tiffopen.
</sidebar>

<p>In case you're curious, <a href="#figure1">here is a copy of the picture</a> (I've had to cheat and turn it into a JPEG, because most web browsers don't support TIFF)...</p>

<figure>
<heading refname="write-figure" type="figure" toc="no">Figure 1. The Sydney Harbour Bridge, by Michael Still</heading>
<img src="figure1.jpg" width="200" height="144" alt="Sydney Harbour Bridge, 200 x 144"/>
</figure>

<p><heading refname="read" type="major" toc="yes">Reading TIFF files</heading>
Reading TIFF files reliably is much harder than writing them. Unfortunately, I don't have enough space in this article to discuss all of the important issues. Some of them will need to be left to later articles. There are also plenty of pages on the web which discuss the issues involved. Some of my favourites are included in the references section at the end of this article.</p>

<p>The issue that complicates reading black and white TIFF images the most is the several different storage schemes which are possible within the TIFF file itself. libtiff doesn't hold your hand much with these schemes, so you have to be able to handle them yourself. The two schemes TIFF supports are single stripped images, stripped images, and tiled images.</p>

<ul>
<li>A single strip image is as the name suggests -- a special case of a stripped image. In this case, all of the bitmap is stored in one large block. I have experienced reliability issues with images which are single strip on Windows machines. The general recommendation is that no one strip should take more than 8 kilobytes uncompressed which with black and white images limits us to 65,536 pixels in a single strip.
<li>A multiple strip image is where horizontal blocks of the image are stored together. More than one stip is joined vertically to make the entire bitmap. <a href="#figure2">Figure 2</a> shows this concept.
<li>A tiled image is like your bathroom wall, it is composed of tiles. This representation is show in <a href="#figure3">Figure 3</a>, and is useful for extremely large images -- this is especially true when you might only want to manipulate a small portion of the image at any one time.
</ul>

<figure>
<heading refname="stip-figure" type="figure" toc="no">Figure 2. The Sydney Harbour Bridge, in strips</heading>
<img src="figure1.jpg" width="200" height="144" alt="Sydney Harbour Bridge in strips, 200 x 144"/>
</figure>

<figure>
<heading refname="tile-figure" type="figure" toc="no">Figure 3. The Sydney Harbour Bridge, in tiles</heading>
<img src="figure1.jpg" width="200" height="144" alt="Sydney Harbour Bridge in tiles, 200 x 144"/>
</figure>



















<!-- THIRD-LEVEL HEADING:  PRECEDE ALL THIRD-LEVEL HEADINGS WITH A PARAGRAPH TAG.  FOLLOW THE HEADING WITH A BREAK TAG.-->
<p><b>[Third-level heading]</b><br />
[The third-level heading above is created using bold tags and is followed by a break tag to separate it from the paragraph text.]</p>

<p><heading refname="conclusion" type="major" toc="yes">Conclusion</heading>
In this article I have shown you how to write and read some simple black and white images using libtiff. There are of course more issues that can be dealt with to have the perfect code, but being aware of the issues is the first step.</p>




<resourcelist>
<ul>
<li>The <a href="http://www.libtiff.org">libtiff</a> website is a good place to download the libtiff source. It is also quite likely there is a binary package for your choosen operating system.</li>
<li>If all else fails, then the <a href="http://partners.adobe.com/asn/developer/pdfs/tn/TIFF6.pdf">Adobe TIFF specification</a> can be useful.</li>
<li>The <a href="http://gopher.std.com/homepages/jimf/xloadimage.html">xloadimage</a> web page might be of interest.
</ul>






<p><heading refname="" type="resourcelist" toc="no">[Sample resource list heading]</heading></p>
<ul>
<li>[First resource item and link with a heading]</li>
<li>[Second resource item and link with a heading]</li>
</ul>
</resourcelist>

</article>

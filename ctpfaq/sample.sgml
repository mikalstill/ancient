<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<book><bookinfo><title>The Complete FreeBSD</title><author><firstname>Greg</firstname><surname>Lehey</surname></author><copyright><year>2001</year><holder>Greg Lehey</holder></copyright></bookinfo>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<chapter id="CFBSD-nchintro"><title>Introduction</title>

<para>FreeBSD is a state of the art operating system derived from AT&amp;T's <emphasis>UNIX</emphasis>
operating system.
<footnote>

<para>FreeBSD no longer contains any AT&amp;T proprietary code, so it may be distributed
freely.  See page <xref linkend="CFBSD-history"/> for more details.
</para>
</footnote>
It runs on the following platforms:
</para>
<itemizedlist>
<listitem>

<para>Personal computers based on the Intel i386 CPU architecture, including the 386,
486 and Pentium families of processors, and compatible CPUs from AMD and Cyrix.
</para>
</listitem>
<listitem>

<para>The
Compaq/Digital Alpha processor.
</para>
</listitem>
<listitem>

<para>In addition, significant development efforts are going towards porting FreeBSD
to other hardware, notably the MIPS R4000 series and the Sun Sparc.
</para>
</listitem>
</itemizedlist>

<para>This book only describes the released versions of FreeBSD for Intel and Alpha
processors.
</para>
<sect1>
<title>How to use this book</title>

<para>This book is divided into five parts:
</para>
<itemizedlist>
<listitem>

<para>The first part, chapters <xref linkend="CFBSD-nchintro"/> to <xref linkend="CFBSD-nchports"/>, tells you how to install
FreeBSD and what to do if things go wrong.
</para>
</listitem>
<listitem>

<para>Chapters <xref linkend="CFBSD-nchxsetup"/> to <xref linkend="CFBSD-nchemulate"/> introduce you to life with FreeBSD,
including setting up optional features, building custom kernels and keeping up
to date with FreeBSD.
</para>
</listitem>
<listitem>

<para>Chapters <xref linkend="CFBSD-nchnetintro"/> to <xref linkend="CFBSD-nchmicronet"/> introduce you to FreeBSD's rich
network support.
</para>
</listitem>
<listitem>

<para><indexterm><primary>man</primary><secondary>pages</secondary></indexterm>
Starting on page <xref linkend="CFBSD-partii"/> you'll find selected <emphasis>man pages</emphasis>, the definitive
documentation for most of the system.  I have chosen those pages most likely to
be needed before the system is installed, or while upgrading.  Once the system
is running, it's easier to read them on-line.
</para>
</listitem>
<listitem>

<para>The appendices start on page <xref linkend="CFBSD-first-appendix"/> and include a large amount of
reference material.
</para>
</listitem>
</itemizedlist>

<para>In more detail, we'll discuss the following subjects:
</para>
<itemizedlist>
<listitem>

<para>In the rest of this chapter, we'll look at what FreeBSD is, what you need to run
it, and what resources are available:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>On page <xref linkend="CFBSD-features"/> we'll look at FreeBSD's features.
</para>
</listitem>
<listitem>

<para>Starting on page <xref linkend="CFBSD-history"/> we'll look at how FreeBSD came to be.
</para>
</listitem>
<listitem>

<para>On page <xref linkend="CFBSD-unixclones"/> we'll compare FreeBSD to other free UNIX-like operating
systems.
</para>
</listitem>
<listitem>

<para>On page <xref linkend="CFBSD-docco"/> we'll look at other sources of information about FreeBSD.
</para>
</listitem>
<listitem>

<para>On page <xref linkend="CFBSD-FreeBSD-community"/>, we'll look at the world-wide FreeBSD community.
</para>
</listitem>
<listitem>

<para>On page <xref linkend="CFBSD-support"/> we'll consider what kinds of support are available for
FreeBSD.
</para>
</listitem>
<listitem>

<para>Finally, on page <xref linkend="CFBSD-bsdd"/> we'll look at the BSD's emblem, the dæmon on the cover
of this book.
</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>

<para><xref linkend="CFBSD-chconcepts"/>, discusses the installation requirements and theoretical
background of installing FreeBSD.  You don't <emphasis>really</emphasis> need to read this
chapter, but it'll make you feel a whole lot more confident if you do.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chthirded"/>, describes the changes that have taken place in FreeBSD since the
introduction of version 3.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chquickinstall"/>, presents a quick installation overview.  If you're
reasonably experienced, this may be all you need to install FreeBSD.  Otherwise,
read on...
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chinstall"/>, we'll walk through a typical installation.  Read this chapter
if you are installing FreeBSD on a disk by itself.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chshareinstall"/>, we'll look at the differences you will encounter if you
install FreeBSD on a system which already contains another operating system.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chproblems"/>, discusses what to do if you run into problems during or after
installation.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chports"/>, describes the thousands of free software packages which you can
optionally install on a FreeBSD system.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chxsetup"/>, tells you how to set up XFree86, the Intel 386 architecture
implementation of the industry standard X11 Windowing System.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chxtheory"/>, we'll look at the theory behind getting X11 working.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chunixref"/>, presents a number of aspects of FreeBSD which are of interest
to newcomers (particularly from a Microsoft environment), in particular the
concepts of <emphasis>users</emphasis> and <emphasis>processes</emphasis>.  We'll also consider the basics
of using the <emphasis>shell</emphasis>, as well as the importance of timekeeping.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chstarting"/>, describes how to start and stop a FreeBSD system and all the
things you can do to customize it.  In particular, we'll look at the more common
configuration files and what they should contain.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chfilesys"/>, contains information about the FreeBSD directory structure and
device names.  You'll find the section on device names (starting on page
<xref linkend="CFBSD-devices"/>) interesting even if you're an experienced UNIX hacker.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chdisks"/>, describes how to format and integrate hard disks, and how to handle
disk errors.
</para>
</listitem>
<listitem>

<para>FreeBSD provides professional, reliable data backup services as part of the base
system.  Don't ever let yourself lose data because of inadequate backup
provisions.  Read all about it in <xref linkend="CFBSD-chtapes"/>.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chprinters"/>, describes the BSD spooling system and how to use it both on
local and networked systems.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chdesktop"/>, describes the user's viewpoint of FreeBSD.  UNIX has come a long
way in the last few years&mdash;make yourself comfortable.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chbuild"/>, discusses how to build a customized version of FreeBSD.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chcurrent"/>, we'll discuss how to ensure that your system is always running
the most appropriate version of FreeBSD.
</para>
</listitem>
<listitem>

<para>FreeBSD can run software written for a number of other operating systems.  Read
about it in <xref linkend="CFBSD-chemulate"/>.
</para>
</listitem>
<listitem>

<para>Starting at <xref linkend="CFBSD-chnetintro"/>, we'll look at the Internet and the more important
services.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chnetsetup"/>, describes how to set up local networking.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chisp"/>, discusses the issues in selecting an Internet Service Provider (ISP)
and establishing a presence on the Internet.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chmodems"/>, discusses serial hardware and the prerequisites for PPP and SLIP
communications.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chppp"/>, we look at FreeBSD's two PPP implementations and what it takes to
set them up.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chslip"/>, we look at two older serial communication protocols.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chdns"/>, we'll consider the use of names on the Internet.
</para>
</listitem>
<listitem>

<para>Security is an increasing problem on the Internet.  In <xref linkend="CFBSD-chfirewall"/>, we'll
look at some things we can do to improve it.  We'll also look at <emphasis>IP
aliasing</emphasis>, since it goes hand-in-hand with firewalls.
</para>
</listitem>
<listitem>

<para>Networks sometimes become <emphasis>notwork</emphasis>s.  In <xref linkend="CFBSD-chnetdebug"/>, we'll see what
we can do to solve network problems.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-chnfs"/>, describes Sun's classic system for sharing file systems between
networked computers.
</para>
</listitem>
<listitem>

<para>We'll look at the basic network access programs in <xref linkend="CFBSD-chbasics"/>.
</para>
</listitem>
<listitem>

<para>Despite the World Wide Web, traditional two-way personal communication is still
very popular.  We'll look at it in <xref linkend="CFBSD-chemail"/>.
</para>
</listitem>
<listitem>

<para>Most people think the World Wide Web <emphasis>is</emphasis> the Internet.  We'll look at
both client and server access in <xref linkend="CFBSD-chwww"/>.
</para>
</listitem>
<listitem>

<para>Computers can send faxes a lot more cheaply and flexibly than fax machines.
We'll look at how to do that with FreeBSD in <xref linkend="CFBSD-chfax"/>.
</para>
</listitem>
<listitem>

<para>Before Microsoft and Novell discovered the Internet, they created a number of
less powerful networking systems, some of which are still in use.  We'll look at
them in <xref linkend="CFBSD-chmicronet"/>.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-terminology"/>, explains some of the terms used in this book.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-appcommands"/>, we'll look at Microsoft's MS-DOS commands and how to perform
similar functions with FreeBSD.
</para>
</listitem>
<listitem>

<para><xref linkend="CFBSD-biblio"/>, suggests some books for further reading.
</para>
</listitem>
<listitem>

<para>Finally, <xref linkend="CFBSD-licenses"/>, contains the licence agreements under which FreeBSD
software is distributed.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>FreeBSD features</title>

<para><anchor id="CFBSD-features"/>
As we have seen, FreeBSD runs on Intel and compatible processors.  It is derived
from ``Berkeley UNIX'', the flavour of UNIX developed by the Computer Systems
Research Group at the University of California at Berkeley and previously
released as the <emphasis>Berkeley Software Distribution</emphasis> (BSD) of UNIX.
</para>
<note>

<para>For copyright reasons, FreeBSD may not be called UNIX.  You be the judge of how
much difference this makes.
</para>
</note>

<para>FreeBSD provides you with
many advanced features previously available only on much more expensive
computers, including:
</para>
<itemizedlist>
<listitem>

<para>FreeBSD on the Intel platform is a <emphasis>32-bit operating system</emphasis>.  Unlike some
commercial so-called ``32 bit operating systems'', it contains no 16-bit code
whatsoever.  The Intel i386 architecture runs significantly faster in 32 bit
mode than in 16 bit mode, so this translates to a significantly higher
performance.
</para>
</listitem>
<listitem>

<para>On the Alpha platform, FreeBSD is a 64 bit operating system.
</para>
</listitem>
<listitem>

<para><indexterm><primary>preemptive</primary><secondary>multitasking</secondary></indexterm>
<indexterm><primary>multitasking</primary></indexterm>
FreeBSD uses <emphasis>preemptive multitasking</emphasis> with dynamic priority adjustment to
ensure smooth and fair sharing of the computer between applications and users.
</para>
</listitem>
<listitem>

<para><indexterm><primary>multiuser</primary></indexterm>
FreeBSD is a <emphasis>multi-user system</emphasis>: many people can use a FreeBSD system
simultaneously for unrelated purposes.  The system shares peripherals such as
printers and tape drives properly between all users on the system.
</para>
</listitem>
<listitem>

<para><indexterm><primary>TCP/IP</primary></indexterm>
FreeBSD provides complete <emphasis>TCP/IP networking</emphasis> including SLIP, PPP, NFS and
NIS support.  This means that your FreeBSD machine can interoperate easily with
other systems and also act as an enterprise server, providing vital functions
such as NFS (remote file access) and e-mail services, or putting your
organization on the Internet with WWW, ftp, routing and firewall (security)
services.  In addition, the Ports Collection includes software for communicating
with proprietary protocols&mdash;see <xref linkend="CFBSD-chmicronet"/> for more details.
</para>
</listitem>
<listitem>

<para><indexterm><primary>memory</primary><secondary>protection</secondary></indexterm>
<emphasis>Memory protection</emphasis> ensures that neither applications nor users can
interfere with each other.  If an application crashes, it cannot affect other
running applications.
</para>
</listitem>
<listitem>

<para><indexterm><primary>X</primary><secondary>Window System</secondary></indexterm>
<indexterm><primary>X11R6</primary></indexterm>
<indexterm><primary>graphical</primary><secondary>user interface</secondary></indexterm>
<indexterm><primary>GUI</primary></indexterm>
<indexterm><primary>XFree86</primary></indexterm>
FreeBSD includes the <emphasis>XFree86</emphasis> implementation of the industry standard
<emphasis>X Window System</emphasis> (<emphasis>X11R6</emphasis>) <emphasis>graphical user interface</emphasis>
(<emphasis>GUI</emphasis>).
</para>
</listitem>
<listitem>

<para><indexterm><primary>binary</primary><secondary>compatibility</secondary></indexterm>
<indexterm><primary>compatibility</primary><secondary>SCO</secondary></indexterm>
<indexterm><primary>compatibility</primary><secondary>BSD/OS</secondary></indexterm>
<indexterm><primary>compatibility</primary><secondary>Linux</secondary></indexterm>
<indexterm><primary>compatibility</primary><secondary>NetBSD</secondary></indexterm>
<indexterm><primary>compatibility</primary><secondary>386BSD</secondary></indexterm>
<indexterm><primary>SCO</primary><secondary>compatibility</secondary></indexterm>
<indexterm><primary>BSD/OS</primary><secondary>compatibility</secondary></indexterm>
<indexterm><primary>NetBSD</primary><secondary>compatibility</secondary></indexterm>
<indexterm><primary>386BSD</primary><secondary>compatibility</secondary></indexterm>
<indexterm><primary>Linux</primary><secondary>compatibility</secondary></indexterm>
FreeBSD can run most programs built for SCO UNIX and UnixWare, Solaris on the
i386 platform, BSD/OS, NetBSD, 386BSD, and Linux.
</para>
</listitem>
<listitem>

<para>The FreeBSD ports and packages collection includes over two thousand
ready-to-run applications.
</para>
</listitem>
<listitem>

<para>Thousands of additional and easy-to-port applications are available on the
Internet.  FreeBSD is source code compatible with most popular commercial UNIX
systems and thus most applications require few, if any, changes to compile.
Most freely available software was developed on BSD-like systems.  As a result,
FreeBSD is one of the easiest platforms you can port to.
</para>
</listitem>
<listitem>

<para><indexterm><primary>virtual</primary><secondary>memory</secondary></indexterm>
<indexterm><primary>memory</primary><secondary>virtual</secondary></indexterm>
Demand paged <emphasis>virtual memory</emphasis> (<emphasis>VM</emphasis>) and ``merged VM/buffer cache''
design efficiently satisfies applications with large appetites for memory while
still maintaining interactive response to other users.
</para>
</listitem>
<listitem>

<para><indexterm><primary>shared</primary><secondary>libraries</secondary></indexterm>
<indexterm><primary>libraries</primary><secondary>shared</secondary></indexterm>
<emphasis>Shared libraries</emphasis> (the UNIX equivalent of Microsoft's DLLs) provide for
efficient use of disk space and memory.
</para>
</listitem>
<listitem>

<para>The base system contains a full complement of C, C++ and Fortran development
tools.  Many additional languages for advanced research and development are also
available in the ports and packages collection.
</para>
</listitem>
<listitem>

<para><indexterm><primary>source</primary><secondary>code</secondary></indexterm>
FreeBSD comes with <emphasis>source code</emphasis> for the entire system, so you have the
greatest degree of control over your environment.
</para>
</listitem>
<listitem>

<para><indexterm><primary>online</primary><secondary>documentation</secondary></indexterm>
<indexterm><primary>documentation</primary><secondary>online</secondary></indexterm>
<indexterm><primary>man</primary><secondary>pages</secondary></indexterm>
<indexterm><primary>online</primary><secondary>handbook</secondary></indexterm>
<indexterm><primary>handbook</primary><secondary>online</secondary></indexterm>
Extensive <emphasis>online documentation</emphasis>, including traditional <emphasis>man pages</emphasis> and
a hypertext-based <emphasis>online handbook</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>FreeBSD is based on the 4.4BSD-Lite release from the Computer Systems Research
Group (CSRG) at the University of California at Berkeley, and carries on the
distinguished tradition of BSD systems development.  Building on the excellent
base provided by CSRG, the FreeBSD Project has spent many thousands of hours
fine tuning the system for maximum performance and reliability in real-life load
situations.  FreeBSD's features, performance and reliability compare very
favourably with those of commercial operating systems.
</para>

<para>The applications to which FreeBSD can be put are truly limited only by your own
imagination.  From software development to factory automation, inventory control
to azimuth correction of remote satellite antennae: with FreeBSD, you can do
just about anything that you could do with a commercial UNIX product.  FreeBSD
benefits significantly from thousands of high quality applications developed by
research centers and universities around the world, often available at little or
no cost.  Commercial applications are also available and appearing in greater
numbers every day.
</para>

<para>Because the source code for FreeBSD itself is generally available, the system
can easily be customized for special applications or projects, in ways not
generally possible with operating systems from commercial vendors.  You can
easily start out small with an inexpensive 386 class PC and upgrade as your
enterprise grows.  Here is just a sampling of some of the applications in which
people currently use FreeBSD:
</para>

<para></para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Internet</primary><secondary>Services</secondary></indexterm>
<emphasis>Internet Services</emphasis>: the Internet grew up around Berkeley UNIX.  The
original TCP/IP implementation, released in 1982, was based on 4.2BSD, and
nearly every current TCP/IP implementation has borrowed from it.  FreeBSD
includes this implementation, the most mature TCP/IP available at any price.
This makes it an ideal platform for a variety of Internet services such as FTP
servers, World Wide Web servers, Gopher servers, Electronic Mail servers, USENET
News servers, and Bulletin Board Systems.  Need a new router?  A DNS name
server?  A firewall to keep people out of your internal network?  FreeBSD can
easily turn that unused 386 or 486 PC sitting in the corner into an advanced
router with sophisticated packet filtering capabilities.
</para>
</listitem>
<listitem>

<para><emphasis>Education:</emphasis> Are you a student of computer science or a related engineering
field?  There is no better way of learning about operating systems, computer
architecture and networking than the hands on, under the hood experience that
FreeBSD can provide.  A number of freely available CAD, mathematical and graphic
design packages also make it highly useful to those whose primary interest in a
computer is to get <emphasis>other</emphasis> work done.
</para>
</listitem>
<listitem>

<para><emphasis>Research:</emphasis> With source code for the entire system available, FreeBSD is an
excellent platform for research in operating systems as well as other branches
of computer science.  FreeBSD's freely available nature also makes it possible
for remote groups to collaborate on ideas or shared development without having
to worry about special licensing agreements or limitations on what may be
discussed in open forums.
</para>
</listitem>
<listitem>

<para><indexterm><primary>X</primary><secondary>Window workstation</secondary></indexterm>
<emphasis>X Window workstation:</emphasis> FreeBSD makes an excellent choice for an
inexpensive X terminal solution, either using the freely available XFree86
server or one of the excellent commercial servers provided by XI Graphics,
Inc.
<footnote>

<para><indexterm><primary>XI</primary><secondary>Graphics</secondary></indexterm>
See <emphasis>http://www.xig.com</emphasis> for further information about XI Graphics.
</para>
</footnote>
Unlike an X terminal, FreeBSD allows many applications to be run locally, if
desired, thus relieving the burden on a central server.  FreeBSD can even boot
``diskless'', making individual workstations even cheaper and easier to
administer.
</para>
</listitem>
<listitem>

<para><indexterm><primary>software</primary><secondary>development</secondary></indexterm>
<emphasis>Software Development:</emphasis> The basic FreeBSD system comes with a full
complement of development tools included the renowned GNU C/C++ compiler and
debugger.
</para>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>A little history</title>

<para><anchor id="CFBSD-history"/>
FreeBSD is a labour of love: big commercial companies produce operating systems
and charge lots of money for them.  The FreeBSD team produces a
professional-quality operating system and gives it away.  That's not the only
difference.
</para>

<para><indexterm><primary>QDOS</primary></indexterm>
<indexterm><primary>Quick</primary><secondary>and Dirty Operating System</secondary></indexterm>
In 1981, when IBM introduced their Personal Computer, the microprocessor
industry was still in its infancy.  The PC had a minimum of 16 kB and a maximum
of 64 kB on-board memory.  UNIX wouldn't run on this hardware, so Microsoft, who
at the time marketed their own version of UNIX, went looking for something
simpler.  The ``operating system'' they chose was correspondingly primitive: a
clone of Digital Resarch's successful CP/M operating system, written by Tim
Patterson of Seattle Computer Products and originally called <emphasis>QDOS</emphasis>
(<emphasis>Quick and Dirty Operating System</emphasis>).
At the time, it seemed just the
thing: it would run just fine without a hard disk (in fact, the original PC
didn't <emphasis>have</emphasis> a hard disk, not even as an option), and it didn't use up
too much memory.  The only thing that they really had to do was to change the
name.  Since the operating system was for IBM, they named it PC-DOS after
DOS/360, an operating system of the mid-60s.  Microsoft marketed its version
under the name MS-DOS.
</para>

<para><indexterm><primary>CSRG</primary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>UNIX</secondary></indexterm>
By this time, a little further down the West Coast of the USA, the Computer
Systems Research Group (<emphasis>CSRG</emphasis>)
of the University of California at
Berkeley had just modified AT&amp;T's UNIX operating system to run on the new DEC
VAX 11/780 machine, which sported virtual memory, and had turned their attention
to implementing some new protocols for the ARPANET: the so-called <emphasis>Internet
Protocols</emphasis>.  The version of UNIX that they had developed was now sufficiently
different from AT&amp;T's system that it had been dubbed <emphasis>Berkeley UNIX</emphasis>.
</para>

<para><indexterm><primary>Fast</primary><secondary>File System</secondary></indexterm>
<indexterm><primary>UNIX</primary><secondary>File System</secondary></indexterm>
As time went on, both MS-DOS and UNIX evolved.  Before long MS-DOS was modified
to handle hard disks&mdash;not well, but it handled them, and for the PC users, it
was so much better than what they had before that they ignored the
inefficiencies.  After all, the PC gave you your own hard disk on your desk, and
you didn't have to share it with all the other people in the department.
Microsoft even tried to emulate the UNIX directory structure, but only succeeded
in implementing the concept of nested directories.  At Berkeley, they were
developing a higher performance disk subsystem, the <emphasis>Fast File System</emphasis>,
now known as the <emphasis>UNIX File System</emphasis>.
</para>

<para>By the late 80s, it was evident that Microsoft no longer intended to
substantially enhance MS-DOS.  New processors with support for multitasking and
virtual memory had replaced the old Intel 8088 processor of the IBM PC, but they
still ran MS-DOS by emulating the 8088 processor, which was now completely
obsolete.  The 640 kB memory limit of the original PC, which once appeared
bigger than anybody would ever need, became a serious problem.  In addition,
people wanted to do more than one thing at a time with their computers.
</para>

<para>A solution to both problems was obvious: move to the 32 bit address mode of the
new Intel 80386 processor and introduce real multitasking, which operating
systems on larger machines had had for decades.  Of course, these larger
machines were only physically larger.  The average PC of 1990 had more memory,
more disk and more processing power than just about any of the large computers
of the 70s.  Nevertheless, Microsoft still hasn't solved these problems for its
desktop ``operating system'', Windows 95.
</para>

<para><indexterm><primary>Research</primary><secondary>Version</secondary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>Software Distribution</secondary></indexterm>
<indexterm><primary>System</primary><secondary>V</secondary></indexterm>
<indexterm><primary>Santa</primary><secondary>Cruz Operation</secondary></indexterm>
UNIX, on the other hand, was a relatively mature operating system at the time
when the PC was introduced.  As a result, Microsoft-based environments have had
little influence on the development of UNIX.  UNIX development was determined by
other factors: changes in legal regulations in the USA between 1977 and 1984
enabled AT&amp;T first to license UNIX to other vendors, noticably Microsoft, who
announced XENIX in 1981, and then to market it itself.  AT&amp;T developed System
III in 1982, and System V in 1983.  The differences between XENIX and System V
were initially small, but they grew: by the mid-80s, there were four different
versions of UNIX: the <emphasis>Research Version</emphasis>, used only inside AT&amp;T, the
<emphasis>Berkeley Software Distribution</emphasis> (BSD) from Berkeley, the commercial
<emphasis>System V</emphasis> from AT&amp;T, and XENIX, which no longer interested Microsoft, and
was marketed by the company which had developed it, the <emphasis>Santa Cruz
Operation</emphasis>, or <emphasis>SCO</emphasis>.
</para>

<para><indexterm><primary>USL</primary></indexterm>
<indexterm><primary>UNIX</primary><secondary>Systems
 </secondary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>Software Design
 </secondary></indexterm>
<indexterm><primary>BSDI</primary></indexterm>
One casualty of UNIX's maturity was the CSRG in Berkeley.  UNIX was too mature
to be considered an object of research, and the writing was on the wall: the
CSRG would close down.  Some people decided to port Berkeley UNIX to the
PC&mdash;after all, SCO had done it years ago.  In the Berkeley tradition, however,
they wanted to give it away.  The industry's reaction was not friendly.  In
1992, AT&amp;T's subsidiary <emphasis>USL</emphasis> (<emphasis>UNIX Systems Laboratories</emphasis>) filed a
lawsuit against <emphasis>Berkeley Software Design Inc.</emphasis> (<emphasis>BSDI</emphasis>), the
manufacturer of the BSD/386 and (later) the BSD/OS operating systems, both very
similar to FreeBSD, for alleged distribution of AT&amp;T source code in violation of
licence agreements.  They subsequently extended the case to the University of
California at Berkeley.  The suit was settled out of court, and the exact
conditions were not all disclosed.  The only one that became public was that
BSDI would migrate their source base to the newer 4.4BSD-Lite sources, a thing
that they were preparing to do in any case.  Although not involved in the
litigation, it was suggested to FreeBSD that they should also move to
4.4BSD-Lite, which was done with the release of FreeBSD version 2.0 in late
1994.
</para>

<para>Now, in the late 1990s, FreeBSD is the best-known of the BSD operating systems,
one that many consider to follow in the tradition of the CSRG.  I can think of
no greater honour for the development team.  It was developed on a shoestring
budget, yet it manages to outperform commercial operating systems by an order of
magnitude.
</para>

<para>Things have changed elsewhere as well.  In 1992, AT&amp;T sold USL to Novell Inc.,
who had introduced a product based on System V.4 called UnixWare.  Although
UnixWare has much better specifications than SCO's old System V.3 UNIX, it was
never a success, and Novell finally sold their UNIX operation to SCO, who now
markets both systems.  Most FreeBSD users don't see that either system has any
significant advantage over FreeBSD, especially since FreeBSD can run
applications designed for either SCO system.
</para>
</sect1>
<sect1>
<title>Other free UNIX-like operating systems</title>

<para><anchor id="CFBSD-unixclones"/>
FreeBSD isn't the only free UNIX-like operating system available&mdash;it's not
even the best-known one.  The best-known free UNIX-like operating system is
undoubtedly Linux, but there are also a number of other BSD-derived operating
systems.  We'll look at them first:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>386/BSD</primary></indexterm>
<emphasis>386/BSD</emphasis> was the original free BSD operating system, introduced by
William F. Jolitz in 1992.  It never progressed beyond a test stage: instead,
two derivative operating systems arose, FreeBSD and NetBSD.  As far as anybody
can tell, 386/BSD is dead.
</para>
</listitem>
<listitem>

<para><indexterm><primary>NetBSD</primary></indexterm>
<emphasis>NetBSD</emphasis> is an operating system which, to the casual observer, is almost
identical to FreeBSD.  The main differences are in the fact that NetBSD runs on
just about any hardware, whereas FreeBSD concentrates on mainly Intel hardware.
FreeBSD tries harder to be easy to understand for a beginner.  For a comparison
of FreeBSD and NetBSD, somewhat biased towards NetBSD, and now also somewhat
dated, see <emphasis>http://www.cons.org/cracauer/bsd-net-vs-free.html</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>OpenBSD</primary></indexterm>
<emphasis>OpenBSD</emphasis> is a spinoff of NetBSD which focuses on security.  You can find
more information at <emphasis>http://www.openbsd.org</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>You might get the impression that there are lots of different, incompatible BSD
versions.  In fact, they're all very similar.
</para>
<sect2>
<title>FreeBSD and Linux</title>

<para>Linux is a clone of UNIX written by Linus Torvalds, a student in Helsinki,
Finland.  At the time, the BSD sources were not freely available, and so Linus
wrote his own version of UNIX.
</para>

<para>Linux is a superb example of how a few dedicated, clever people can produce an
operating system that is better than well-known commercial systems developed by
a large number of trained software engineers.  It is better even than a number
of commercial UNIX systems.
</para>

<para>Obviously, I don't think Linux is as good as FreeBSD, or I wouldn't be writing
this book, but the differences between FreeBSD and Linux are more a matter of
philosophy rather than of concept.  Here are a few contrasts:
<table frame='all'><title>Differences between FreeBSD and Linux</title>
center,tab(#) ;
 lw40  lw40 .

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>  FreeBSD is a direct descendent of the original UNIX, though it contains no residual AT&amp;T code. </entry><entry> Linux is a clone and never contained any AT&amp;T code
</entry></row>
<row><entry>  FreeBSD is a complete operating system, maintained by a central group of software developers.  There is only one distribution of FreeBSD. </entry><entry> Linux is a kernel, personally maintained by Linus Torvalds.  The non-kernel programs supplied with Linux are part of a <emphasis>distribution</emphasis>, of which there are several.
</entry></row>
<row><entry>  FreeBSD aims to be a stable production environment. </entry><entry> Linux is still a ``bleeding edge'' development environment, though many distributions aim to make it more suitable for production use.
</entry></row>
<row><entry>  As a result of the centralized development style, FreeBSD is straightforward and easy to install. </entry><entry> The ease of installation of Linux depends on the ``distribution''.  If you switch from one distribution of Linux to another, you'll have to learn a new set of installation tools.
</entry></row>
<row><entry>  FreeBSD is still relatively unknown, since its distribution was restricted for a long time due to the AT&amp;T lawsuits. </entry><entry> Linux did not have any lawsuits to contend with, so for a long time it was the only free UNIX-type system available.
</entry></row>
<row><entry>  As a result of the lack of knowledge of FreeBSD, not much commercial software is available for it. </entry><entry> A growing amount of commercial software is becoming available for Linux.
</entry></row>
<row><entry>  As a result of the smaller user base, FreeBSD is less likely to have drivers for brand-new boards than Linux. </entry><entry> Just about any new board will soon have a driver for Linux.
</entry></row>
<row><entry>  Because of the lack of commercial applications and drivers, FreeBSD will run most Linux programs, whether commercial or not.  It's also relatively simple to port Linux drivers to FreeBSD. </entry><entry> Linux appears not to need to be able to run FreeBSD programs or drivers.
</entry></row>
<row><entry>  FreeBSD has a large number of afficionados who are prepared to flame anybody who dares suggest that it's not better than Linux. </entry><entry> Linux has a large number of afficionados who are prepared to flame anybody who dares suggest that it's not better than FreeBSD.
</entry></row>
</tbody></tgroup></table>
In summary, Linux is also a very good operating system.  For many, it's better
than FreeBSD.  It's a pity that so many people on both sides are prepared to
flame
<footnote>

<para>To quote Eric Raymond's ``The New Hacker's Dictionary'':
</para>

<para>:flame: 1. /vi./ To post an email message intended to insult and provoke.
2. /vi./ To speak incessantly and/or rabidly on some relatively uninteresting
subject or with a patently ridiculous attitude.  3. /vt./ Either of senses 1 or
2, directed with hostility at a particular person or people.  4. /n./ An
instance of flaming.  When a discussion degenerates into useless controversy,
one might tell the participants ``Now you're just flaming'' or ``Stop all that
flamage!'' to try to get them to cool down (so to speak).
</para>
</footnote>
each other.  There are signs that both sides are learning to appreciate each
other, and a number of people are now running both systems.
<!--  XXX http://keystone.westminster.edu/~fullermd/bsdvlin.htm -->
</para>
</sect2>
</sect1>
<sect1>
<title>Other documentation on FreeBSD</title>

<para><anchor id="CFBSD-docco"/>
People occasionally complain that there are so few books on
FreeBSD&mdash;currently, this is about the only one in the English language, and it
can't do everything.  That looks like a pretty meagre offering, even if you do
like this book.
</para>

<para>This impression is incorrect.  In fact, FreeBSD users have access to probably
more top-quality documentation than just about any other operating system.
Remember that word UNIX\(rg.  Sure, the lawyers tell us that we can't refer to
FreeBSD as UNIX, because UNIX belongs to the Open Group.  That doesn't make the
slightest difference to the fact that just about any book on UNIX will apply
more directly to FreeBSD than any other flavour of UNIX.  Why is this?
</para>

<para>Commercial UNIX vendors have a problem, and FreeBSD doesn't help them: why
should people buy their products when you can get it free from the FreeBSD
Project (or, for that matter, from other free UNIX-like operating systems such
as NetBSD, OpenBSD and Linux)?  One obvious reason would be ``value-added
features''.  So they add features or fix weak points in the system, put a
copyright on the changes, and help lock their customers in to their particular
implementation.  As long as the changes are really useful, this is legitimate,
but it does make the operating system less compatible with ``standard UNIX'',
and the books about standard UNIX are less applicable.
</para>

<para>In addition, many books are written by people with an academic background.  In
the UNIX world, this means that they are more likely than the average user to
have been exposed to BSD.  Many general UNIX books handle primarily BSD,
possibly with an additional chapter on the commercial System V version.
</para>

<para>In <xref linkend="CFBSD-biblio"/>, you'll find a list of books which I find particularly worthwhile.
I'd like to single out some which I find particularly good, and which I
frequently use myself:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>online</primary><secondary>handbook</secondary></indexterm>
<indexterm><primary>handbook</primary><secondary>online</secondary></indexterm>
<anchor id="CFBSD-handbook"/>
<indexterm><primary>Live</primary><secondary>Filesystem</secondary></indexterm>
The FreeBSD <emphasis>online handbook</emphasis> contains a lot of information specifically
about FreeBSD, including a deeper discussion of many topics in this book.  It is
available on the World Wide Web at <emphasis>http://www.FreeBSD.org/handbook.html</emphasis>,
and it is also available on each FreeBSD system in the directory
<emphasis>/usr/share/doc/handbook</emphasis>.  Before installation, you can access it from the
<emphasis>Live Filesystem</emphasis> CD-ROM.  We'll look at how to do that in the next
section.
</para>
</listitem>
<listitem>

<para><indexterm><primary>FAQ</primary></indexterm>
<indexterm><primary>Frequently</primary><secondary>Asked Questions</secondary></indexterm>
<indexterm><primary>/usr/share/doc/FAQ</primary></indexterm>
<indexterm><primary>VIEW</primary></indexterm>
The FreeBSD <emphasis>FAQ</emphasis> (<emphasis>Frequently Asked Questions</emphasis>) is just what it
says it is: a list of questions that people frequently ask about FreeBSD, with
answers of course.  It is located in the directory <emphasis>/usr/share/doc/FAQ</emphasis>.  If
you run MS-DOS, you can view it before installation with the <emphasis>VIEW</emphasis>
program.  Check the CD-ROM booklet for the location, which could change.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Peek</primary><secondary>Jerry</secondary></indexterm>
<indexterm><primary>O'Reilly</primary><secondary>Tim</secondary></indexterm>
<indexterm><primary>Loukides</primary><secondary>Mike</secondary></indexterm>
<emphasis>UNIX Power Tools</emphasis>, by Jerry Peek, Tim O'Reilly, and Mike Loukides, is a
superb collection of interesting information, including a CD-ROM.  Recommended
for everybody, from beginners to experts.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Abrahams</primary><secondary>Paul W.</secondary></indexterm>
<indexterm><primary>Larson</primary><secondary>Bruce R.</secondary></indexterm>
<emphasis>UNIX for the Impatient</emphasis>, by Paul W. Abrahams and Bruce R. Larson, is more
similar to this book, but it includes a lot more material on specific products,
such as shells and the <emphasis>Emacs</emphasis> editor.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Nemeth</primary><secondary>Evi</secondary></indexterm>
<indexterm><primary>Snyder</primary><secondary>Garth</secondary></indexterm>
<indexterm><primary>Seebass</primary><secondary>Scott</secondary></indexterm>
<indexterm><primary>Hein</primary><secondary>Trent R.</secondary></indexterm>
The <emphasis>UNIX System Administration Handbook</emphasis>, by Evi Nemeth, Garth Snyder,
Scott Seebass, and Trent R. Hein, is one of the best books on systems
administration I have seen.  It covers six different UNIX systems, including
BSD/OS, which is very close to FreeBSD.
</para>
</listitem>
<listitem>

<para>There are a large number of active Internet groups which deal with FreeBSD.
Read about them in the online handbook.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Reading the handbook</title>

<para><indexterm><primary>lynx</primary><secondary>command</secondary></indexterm>
If you're running X, you can use a browser like <emphasis>netscape</emphasis> to read the
handbook.  If you don't have X running yet, use <emphasis>lynx</emphasis>.  Both of these
programs are included on the CD-ROM.  To install them, enter:
</para>
<programlisting>
# <command>pkg_add /cdrom/packages/All/netscape-communicator-4.5.tgz</command>
<emphasis>or</emphasis>
# <command>pkg_add /cdrom/packages/All/lynx-2.8.1.1.tgz</command>
</programlisting>

<para>The numbers after the name (<emphasis>4.5</emphasis> and <emphasis>2.8.1.1</emphasis>) may change after
this book has been printed.  Use <emphasis>ls</emphasis> to list the names if you can't find
these particular versions.
</para>

<para>Note that <emphasis>lynx</emphasis> is not a complete substitute for <emphasis>netscape</emphasis>: since
it is text-only, it is not capable of displaying the large majority of web pages
correctly.  It will suffice for reading most of the handbook, however.  See
page
<indexterm><primary>pkg_add</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pkg_add</secondary></indexterm>
for more information on <emphasis>pkg_add</emphasis>.
</para>

<para>In either case, you start the browser with the name of the handbook:
</para>
<programlisting>
$ <command>lynx /usr/share/doc/handbook/handbook.html</command>
$ <command>netscape /usr/share/doc/handbook/handbook.html &amp;</command>
</programlisting>

<para>You enter the <emphasis>&amp;</emphasis> after the invocation of <emphasis>netscape</emphasis> to free up the
window in which you invoke it: <emphasis>netscape</emphasis> opens its own window.
</para>

<para>You can look at the FAQ in the same way&mdash;just substitute the name
<emphasis>FAQ/freebsd-faq.html</emphasis> for <emphasis>handbook/handbook.html</emphasis>.
</para>

<para>If you haven't installed the handbook, you can still access it from the Live
Filesystem CD-ROM.  Assuming the CD-ROM is mounted on <emphasis>/cdrom</emphasis>, choose the
directory <emphasis>/cdrom/usr/share/doc/handbook/handbook.html</emphasis>.
</para>

<para><indexterm><primary>ghostscript</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ghostscript</secondary></indexterm>
<indexterm><primary>dvips</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>dvips</secondary></indexterm>
Alternatively, you can print out the handbook.  This is a little more difficult,
and of course you'll lose the hypertext references, but you may prefer it in
this form.  To format the handbook for printing, you'll need a PostScript
printer or <emphasis>ghostscript</emphasis>.  See page <xref linkend="CFBSD-PostScript"/> for more details of how
to print PostScript.
</para>

<para>You can download handbook from
<emphasis>ftp://ftp.FreeBSD.ORG/pub/FreeBSD/doc/handbook.ps.gz</emphasis>.  Use <emphasis>ftp</emphasis>
(page <xref linkend="CFBSD-ftp"/>) to transfer the document.
</para>
</sect2>
<sect2>
<title>The online manual</title>

<para><anchor id="CFBSD-man"/>
<indexterm><primary>man</primary><secondary>command</secondary></indexterm>
<indexterm><primary>man</primary><secondary>page</secondary></indexterm>
<indexterm><primary>command</primary><secondary>man</secondary></indexterm>
The most comprehensive documentation on FreeBSD is in the form of <emphasis>man
pages</emphasis>.  Nearly every program on the system comes with a short reference
manual explaining the basic operation and various arguments.
</para>

<para>When online, you view the man pages with the command <emphasis>man</emphasis>.  For example, to
learn more about the command <emphasis>ls</emphasis>, type:
</para>
<programlisting>
$ <command>man ls </command>
LS(1)                      FreeBSD Reference Manual                      LS(1)

<command>NAME</command>
     ls - list directory contents

<command>SYNOPSIS</command>
     ls [-<command>ACFLRTacdfiloqrstu1</command>] [ file ... ]

<command>DESCRIPTION</command>
     For each operand that names a file of a type other than directory, <command>ls</command>
     displays its name as well as any requested, associated information.  For
     each operand that names a file of type directory, ls displays the names.
<emphasis>(etc)</emphasis>
</programlisting>

<para>In this particular example, with the exception of the first line, the text in
<command>constant width bold</command> is not input, it's the way it appears on the screen.
</para>

<para>The online manual is divided up into sections numbered:
</para>
<itemizedlist>
<listitem>

<para>User commands
</para>
</listitem>
<listitem>

<para>System calls and error numbers
</para>
</listitem>
<listitem>

<para>Functions in the C libraries
</para>
</listitem>
<listitem>

<para>Device drivers
</para>
</listitem>
<listitem>

<para>File formats
</para>
</listitem>
<listitem>

<para>Games and other diversions
</para>
</listitem>
<listitem>

<para>Miscellaneous information
</para>
</listitem>
<listitem>

<para>System maintenance and operation commands
</para>
</listitem>
<listitem>

<para>Kernel interface documentation
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>chmod</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chmod</secondary></indexterm>
In some cases, the same topic may appear in more than one section of the on-line
manual.  For example, there is a user command <emphasis>chmod</emphasis> and a system call
<emphasis>chmod()</emphasis>.  In this case, you can tell the man command which you want by
specifying the section number:
</para>
<programlisting>
$ <command>man 1 chmod </command>
</programlisting>

<para><indexterm><primary>chmod(1)</primary></indexterm>
<indexterm><primary>chmod(2)</primary></indexterm>
This will display the manual page for the user command chmod.  References to a
particular section of the on-line manual are traditionally placed in parentheses
in written documentation.  For example, <emphasis>chmod(1)</emphasis> refers to the user
command <emphasis>chmod</emphasis>, and <emphasis>chmod(2)</emphasis> means the system call.
</para>

<para><indexterm><primary>apropos</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>apropos</secondary></indexterm>
This is fine if you know the name of the command and forgot how to use it, but
what if you can't recall the command name?  You can use man to search for
keywords in the command descriptions by using the <emphasis>-k</emphasis> option, or by
starting the program <emphasis>apropos</emphasis>:
</para>
<programlisting>
$ <command>man -k mail </command>
$ <command>apropos mail </command>
</programlisting>

<para>Both of these commands do the same thing: they show the names of the man pages
that have the keyword <emphasis>mail</emphasis> in their descriptions.
</para>

<para>Alternatively, you may browse through <emphasis>/usr/bin</emphasis> and see all these file
names, but you don't have any idea what they do.  To find out, enter one of the
lines:
</para>
<programlisting>
$ <command>cd /usr/bin; man -f * </command>
$ <command>cd /usr/bin; whatis * </command>
</programlisting>

<para>Both of these commands do the same thing: they print out a one-line summary of
the purpose of the program:
</para>
<programlisting>
$ <command>cd /usr/bin; man -f * </command>
a2p(1)           - Awk to Perl translator
addftinfo(1)     - add information to troff font files for use with groff
apply(1)         - apply a command to a set of arguments
apropos(1)       - search the whatis database for strings
<emphasis>\&amp;...etc</emphasis>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>GNU <emphasis>info</emphasis> </title>

<para><indexterm><primary>info</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>info</secondary></indexterm>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
The Free Software Foundation has its own on-line hypertext browser called
<emphasis>info</emphasis>.  Many FSF programs come with either no man page at all, or with an
excuse for a man page (<emphasis>gcc</emphasis>, for example).  To read the online
documentation, you need to browse the <emphasis>info</emphasis> files with the <emphasis>info</emphasis>
program, or from <emphasis>Emacs</emphasis> with the <emphasis>info</emphasis> mode.  To start <emphasis>info</emphasis>,
simply type:
</para>
<programlisting>
$ <command>info </command>
</programlisting>

<para>In <emphasis>Emacs</emphasis>, enter <keycap>CTRL-h i</keycap> or <keycap>ALT-X</keycap> <emphasis>info</emphasis>.  Whichever way
you start <emphasis>info</emphasis>, you can get brief introduction by typing <emphasis>h</emphasis>, and a
quick command reference by typing <emphasis>?</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>The FreeBSD community</title>

<para><anchor id="CFBSD-FreeBSD-community"/>
FreeBSD was developed by a world-wide group of developers.  It could not have
happened without the Internet.  Most of the key players have never even met each
other in person: the main communication is via the Net.  If you have any kind of
Internet connection, you can participate as well.  If you don't have an Internet
connection, it's about time you got one.  The connection doesn't have to be
complete: if you can receive email, you can participate.  On the other hand,
FreeBSD includes all the software you need for a complete Internet connection,
not the very limited subset that most PC-based ``Internet'' packages offer you.
</para>
</sect1>
<sect1>
<title>Support</title>

<para><anchor id="CFBSD-support"/>
<indexterm><primary>Support</primary></indexterm>
<indexterm><primary>Installation</primary><secondary>support</secondary></indexterm>
As it says in the copyright, FreeBSD is supplied as-is, without any support
liability.  If you're on the Net, you're not alone, however.  Liability is one
thing, but there are plenty of people prepared to help you, most for free, some
for fee.  A good place to start is with the mailing lists
<emphasis>FreeBSD-newbies@FreeBSD.org</emphasis> and <emphasis>freebsd-questions@FreeBSD.org</emphasis>.
In conversation they are typically abbreviated to <emphasis>-newbies</emphasis> and
<emphasis>-questions</emphasis> respectively.
To sign up, send a mail message to <emphasis>majordomo@FreeBSD.org</emphasis> with the text
</para>
<programlisting>
subscribe FreeBSD-newbies
<emphasis>or</emphasis>
subscribe FreeBSD-questions
</programlisting>

<para>You'll get a reply back saying that the request must be authenticated: it'll
look something like this:
</para>
<programlisting>
Please be sure to read the charters before subscribing or sending
mail to any FreeBSD mailing list for an explanation of which topics
are relevant for a given list and what types of postings are and
are not allowed.  They may be found at:

        http://www.freebsd.org/handbook/eresources.html#ERESOURCES-MAIL

Someone (possibly you) has requested that your email address be added
to or deleted from the mailing list "freebsd-newbies@FreeBSD.ORG".

If you really want this action to be taken, please send the following
commands (exactly as shown) back to "Majordomo@FreeBSD.ORG":

        auth 7e06ee31 subscribe freebsd-newbies grog@example.org

If you do not want this action to be taken, simply ignore this message
and the request will be disregarded.

If your mailer will not allow you to send the entire command as a single
line, you may split it using backslashes, like so:

        auth 7e06ee31 subscribe freebsd-newbies \e
        grog@example.org

If you have any questions about the policy of the list owner, please
contact "freebsd-newbies-approval@FreeBSD.ORG".

Thanks!

Majordomo@FreeBSD.ORG
</programlisting>

<para>Just reply to that message, removing all the text except the <emphasis>auth</emphasis> line:
</para>
<programlisting>
        auth 7e06ee31 subscribe freebsd-newbies grog@example.org
</programlisting>

<para>Send this message to <emphasis>majordomo@FreeBSD.org</emphasis> (which is what you do if you
just reply), not to the list itself.  You'll get another reply back:
</para>
<programlisting>
Welcome to the freebsd-newbies mailing list!

Please save this message for future reference.  Thank you.

If you ever want to remove yourself from this mailing list,
you can send mail to &lt;Majordomo@FreeBSD.ORG&gt; with the following
command in the body of your email message:

    unsubscribe freebsd-newbies

or from another account, besides grog@example.org:

    unsubscribe freebsd-newbies grog@example.org

If you ever need to get in contact with the owner of the list,
(if you have trouble unsubscribing, or have questions about the
list itself) send email to &lt;owner-freebsd-newbies@FreeBSD.ORG&gt; .
This is the general rule for most mailing lists when you need
to contact a human.

 Here's the general information for the list you've subscribed to,
 in case you don't already have it:

FREEBSD-NEWBIES

Welcome to FreeBSD!
This list is a gathering place for people new to FreeBSD.
Please feel free to share your experiences with others on this list.

Support questions should be sent to freebsd-questions@freebsd.org
(NOT to the newbies list please)

Full info and FAK   http://www.welearn.com.au/freebsd/newbies/
Resource list       http://www.FreeBSD.org/projects/newbies.html
</programlisting>

<para>As the welcome message says, <emphasis>-newbies</emphasis> is a discussion group for people
new to FreeBSD; it's not intended for real technical problems.  Use
<emphasis>-questions</emphasis> for that.
</para>

<para>When submitting questions to <emphasis>-questions</emphasis>, remember that people are under
no obligation to answer your question.  Make them want to answer it: submit the
question in a clear, understandable manner.  For more details, see
<emphasis>http://www.lemis.com/questions.html</emphasis>.  You may also like to check out the
FreeBSD World Wide Web (WWW) site at <emphasis>http://www.FreeBSD.org</emphasis>, in particular
the support page at <emphasis>http://www.FreeBSD.org/support.html</emphasis>.
</para>

<para>In addition, Walnut Creek CDROM supplies limited basic installation support for
purchasers of the Walnut Creek CDROM edition of FreeBSD.  Here's how to contact
Walnut Creek CDROM:
</para>
<itemizedlist>
<listitem>

<para>By phone.  Call +1 925 603 1234
<footnote>

<para>If you live in North America, you may not recognize the <emphasis>+1</emphasis>.  This is the
international dialing code for North America; replace the <emphasis>+</emphasis> symbol with
your national prefix code for international calls.  For example, in most parts
of Europe you replace the <emphasis>+</emphasis> with <emphasis>00</emphasis>; in Australia, you replace
it with <emphasis>0011</emphasis>, so the complete number becomes <emphasis>0011 1 925 603
1234</emphasis>.
</para>
</footnote>
</para>
</listitem>
<listitem>

<para>By fax.  Fax to +1 925 674 0821.
</para>
</listitem>
<listitem>

<para>By email.  Send email to <emphasis>support@cdrom.com</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>Remember, too, that if all else fails you can return your CD-ROM to Walnut Creek
CDROM for an unconditional refund.  If you do have to go to this step, please
let us know what went wrong.  You'll get your refund either way, but if you have
problems with FreeBSD, we want to know why and how we can improve the product.
</para>
<sect2>
<title>Reporting bugs</title>

<para>If you find something wrong with FreeBSD, we want to know about it.  There are
two ways to report a bug:
</para>
<itemizedlist>
<listitem>

<para>Report it via the World Wide Web at <emphasis>http://www.FreeBSD.org/send-pr.html</emphasis>.
</para>
</listitem>
<listitem>

<para>Use the <emphasis>send-pr</emphasis> program to send it as a mail message.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>The Berkeley d&aelig;gmon</title>

<para><anchor id="CFBSD-bsdd"/>
<indexterm><primary>Branagan</primary><secondary>Linda</secondary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>d&aelig;gmon</secondary></indexterm>
<indexterm><primary>d&aelig;gmon</primary><secondary>Berkeley</secondary></indexterm>
<indexterm><primary>daemon</primary><secondary>Berkeley</secondary></indexterm>
<indexterm><primary>Kolstad</primary><secondary>Rob</secondary></indexterm>
<indexterm><primary>McKusick</primary><secondary>Kirk</secondary></indexterm>
The little d&aelig;gmon on the cover of this book symbolizes BSD.  It is included
with kind permission of Marshall Kirk McKusick, one of the leading members of
the former Computer Sciences Research Group at the University of California at
Berkeley, and owner of the d&aelig;gmon's copyright.
</para>

<para>The d&aelig;gmon has occasionally given rise to a certain amount of confusion.  In
fact, it's a joking reference to processes which run in the background&mdash;see
<xref linkend="CFBSD-chunixref"/>, page
for a description.  The outside world occasionally sees things differently, as
the following story indicates:
<!--  XXX.ft CW -->
Newsgroups: alt.humor.best-of-usenet
Subject: [comp.org.usenix] A Great Daemon Story
From: Rob Kolstad &lt;kolstad@bsdi.com&gt;
Newsgroups: comp.org.usenix
Subject: A Great Daemon Story
Linda Branagan is an expert on d&aelig;gmons.  She has a T-shirt that sports the
d&aelig;gmon in tennis shoes that appears on the cover of the 4.3BSD manuals and
<emphasis>The Design and Implementation of the 4.3BSD UNIX Operating System</emphasis> by
S. Leffler, M. McKusick, M. Karels, J. Quarterman, Addison-Wesley Publishing
Company, Reading, MA 1989.
She tells the following story about wearing the 4.3BSD d&aelig;gmon T-shirt:
Last week I walked into a local ``home style cookin' restaurant/watering hole''
in Texas to pick up a take-out order.  I spoke briefly to the waitress behind
the counter, who told me my order would be done in a few minutes.
So, while I was busy gazing at the farm implements hanging on the walls, I was
approached by two ``natives.''  These guys might just be the original Texas
rednecks.
``Pardon us, ma'am.  Mind if we ask you a question?''
Well, people keep telling me that Texans are real friendly, so I nodded.
``Are you a Satanist?''
Well, at least they didn't ask me if I liked to party.
``Uh, no, I can't say that I am.''
``Gee, ma'am.  Are you sure about that?'' they asked.
I put on my biggest, brightest Dallas Cowboys cheerleader smile and said, ``No,
I'm positive.  The closest I've ever come to Satanism is watching Geraldo.''
``Hmmm.  Interesting.  See, we was just wondering why it is you have the lord of
darkness on your chest there.''
I was this close to slapping one of them and causing a scene&mdash;then I stopped
and noticed the shirt I happened to be wearing that day.  Sure enough, it had a
picture of a small, devilish-looking creature that has for some time now been
associated with a certain operating system.  In this particular representation,
the creature was wearing sneakers.
They continued: ``See, ma'am, we don't exactly appreciate it when people show
off pictures of the devil.  Especially when he's lookin' so friendly.''
These idiots sounded terrifyingly serious.
Me: ``Oh, well, see, this isn't really the devil, it's just, well, it's
sort of a mascot.
Native: ``And what kind of football team has the devil as a mascot?''
Me: ``Oh, it's not a team.  It's an operating&mdash;uh, a kind of computer.''
I figured that an ATM machine was about as much technology as these guys could
handle, and I knew that if I so much as uttered the word ``UNIX'' I would only
make things worse.
Native: ``Where does this satanical computer come from?''
Me: ``California.  And there's nothing satanical about it really.''
Somewhere along the line here, the waitress noticed my predicament&mdash;but these
guys probably outweighed her by 600 pounds, so all she did was look at me
sympathetically and run off into the kitchen.
Native: ``Ma'am, I think you're lying.  And we'd appreciate it if you'd
leave the premises now.''
Fortunately, the waitress returned that very instant with my order, and they
agreed that it would be okay for me to actually pay for my food before I left.
While I was at the cash register, they amused themselves by talking to each
other.
Native #1: ``Do you think the police know about these devil computers?''
Native #2: ``If they come from California, then the FBI oughta know
about 'em.''
They escorted me to the door.  I tried one last time: ``You're really blowing
this all out of proportion.  A lot of people use this `kind of computers.'
Universities, researchers, businesses.  They're actually very useful.''
Big, big, <emphasis>big</emphasis> mistake.  I should have guessed at what came next.
Native: ``Does the government use these devil computers?''
Me: ``Yes.''
Another <emphasis>big</emphasis> boo-boo.
Native: ``And does the government pay for 'em?  With our tax dollars?''
I decided that it was time to jump ship.
Me: ``No.  Nope.  Not at all.  Your tax dollars never entered the picture at
all.  I promise.  No sir, not a penny.  Our good Christian congressmen would
never let something like that happen.  Nope.  Never.  Bye.''
Texas.  What a country.
</para>

<para>In fact, the d&aelig;gmon tradition goes back quite a way.  As recently as 1996, the
following message went through the <emphasis>FreeBSD-chat</emphasis> mailing list:
<!-- XXX.ft CW -->
To: "Jonathan M. Bresler" &lt;jmb@freefall.freebsd.org&gt;
Cc: obrien@antares.aero.org (Mike O'Brien),
        joerg_wunsch@uriah.heep.sax.de,
        chat@FreeBSD.org, juphoff@tarsier.cv.nrao.edu
Date: Tue, 07 May 1996 16:27:20 -0700
Sender: owner-chat@FreeBSD.org
&gt;         details and gifs PLEASE!
	If you insist. <emphasis>:-)</emphasis>
<indexterm><primary>Salus</primary><secondary>Peter</secondary></indexterm>
<indexterm><primary>Ferentz</primary><secondary>Mel</secondary></indexterm>
        Sherman, set the Wayback Machine for around 1976 or so (see Peter Salus'
<emphasis>A Quarter Century of UNIX</emphasis> for details), when the first really national
UNIX meeting was held in Urbana, Illinois.  This would be after the ``forty
people in a Brooklyn classroom'' meeting held by Mel Ferentz (yeah I was at that
too) and the more-or-less simultaneous West Coast meeting(s) hosted by SRI, but
before the UNIX Users Group was really incorporated as a going concern.
<indexterm><primary>Thompson</primary><secondary>Ken</secondary></indexterm>
<indexterm><primary>Ritchie</primary><secondary>Dennis</secondary></indexterm>
<indexterm><primary>Foglio</primary><secondary>Phil</secondary></indexterm>
<indexterm><primary>O'Brien</primary><secondary>Mike</secondary></indexterm>
	I knew Ken Thompson and Dennis Ritchie would be there.  I was living in
Chicago at the time, and so was comic artist Phil Foglio, whose star was just
beginning to rise.  At that time I was a bonded locksmith.  Phil's roommate had
unexpectedly split town, and he was the only one who knew the combination to the
wall safe in their apartment.  This is the only apartment I've ever seen that
had a wall safe, but it sure did have one, and Phil had some stuff locked in
there.  I didn't hold out much hope, since safes are far beyond where I was (and
am) in my locksmithing sphere of competence, but I figured ``no guts no glory''
and told him I'd give it a whack.  In return, I told him, he could do some
T-shirt art for me.  He readily agreed.
	Wonder of wonders, this safe was vulnerable to the same algorithm that
Master locks used to be susceptible to.  I opened it in about 15 minutes of
manipulation.  It was my greatest moment as a locksmith and Phil was overjoyed.
I went down to my lab and shot some Polaroid snaps of the PDP-11 system I was
running UNIX on at the time, and gave it to Phil with some descriptions of the
visual puns I wanted: pipes, demons with forks running along the pipes, a ``bit
bucket'' named <emphasis>/dev/null</emphasis>, all that.
	What Phil came up with is the artwork that graced the first decade's
worth of ``UNIX T-shirts'', which were made by a Ma and Pa operation in a
Chicago suburb.  They turned out transfer art using a 3M color copier in their
basement.  Hence, the PDP-11 is reversed (the tape drives are backwards) but
since Phil left off the front panel, this was hard to tell.  His trademark
signature was photo-reversed, but was recopied by the T-shirt people and
``re-forwardized'', which is why it looks a little funny compared to his real
signature.
	Dozens and dozens of these shirts were produced.  Bell Labs alone
accounted for an order of something like 200 for a big picnic.  However, only
four (4) REAL originals were produced: these have a distinctive red collar and
sleeve cuff.  One went to Ken, one to Dennis, one to me, and one to my
then-wife.  I now possess the latter two shirts.  Ken and Dennis were presented
with their shirts at the Urbana conference.
<indexterm><primary>Stettner</primary><secondary>Armando</secondary></indexterm>
	People ordered these shirts direct from the Chicago couple.  Many years
later, when I was living in LA, I got a call from Armando Stettner, then at DEC,
asking about that now-famous artwork.  I told him I hadn't talked to the
Illinois T-shirt makers in years.  At his request I called them up.  They'd
folded the operation years ago and were within days of discarding all the old
artwork.  I requested its return, and duly received it back in the mail.  It
looked strange, seeing it again in its original form, a mirror image of the
shirts with which I and everyone else were now familiar.
	I sent the artwork to Armando, who wanted to give it to the Ultrix
marketing people.  They came out with the Ultrix poster that showed a nice shiny
Ultrix machine contrasted with the chewing-gum-and-string PDP-11 UNIX people
were familiar with.  They still have the artwork, so far as I know.
	I no longer recall the exact contents of the letter I sent along with
the artwork. I did say that as far as I knew, Phil had no residual rights to the
art, since it was a `work made for hire', though nothing was in writing (and
note this was decades before the new copyright law).  I do not now recall if I
explicitly assigned all rights to DEC.  What is certain is that John Lassiter's
d&aelig;gmon, whether knowingly borrowed from the original, or created by parallel
evolution, postdates the first horde of UNIX d&aelig;gmons by at least a decade and
probably more.  And if Lassiter's d&aelig;gmon looks a lot like a Phil Foglio
creation, there's a reason.
        I have never scanned in Phil's artwork; I've hardly ever scanned in
anything, so I have no GIFs to show.  But I have some very very old UNIX
T-shirts in startlingly good condition.  Better condition than I am at any rate:
I no longer fit into either of them.
Mike O'Brien
creaky antique
</para>

<para>Note the date of this message: it's quite recent.  Mike has since scanned the
original teeshirt, and it may be made available.  Remember, you read it here
first.
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchconcepts"><title>Before you install</title>

<para>FreeBSD will run on just about any modern PC.  You can skip this chapter and
move to <xref linkend="CFBSD-chquickinstall"/>, and you'll have a very good chance of success.
Nevertheless, it will make things easier if you know the contents of this
chapter before you start.  If you do run into trouble, this chapter will give
you the background information you need to solve the trouble quickly and simply.
</para>
<sect1>
<title>Hardware requirements</title>

<para><anchor id="CFBSD-hardware-requirements"/>
<anchor id="CFBSD-memory-requirements"/>
To run FreeBSD, you will need the following absolute minimum hardware:
</para>
<itemizedlist>
<listitem>

<para>PC with 80386 CPU, or Alpha-based machine with SRM firmware.
</para>
</listitem>
<listitem>

<para>4 MB memory (Intel) or 24 MB (Alpha?)
</para>
</listitem>
<listitem>

<para>Any display board
</para>
</listitem>
<listitem>

<para>80 MB free disk space (Intel).  Nobody has tried an installation on an Alpha
machine with less than 500 MB, though it's certainly possible to reduce this
value significantly.
</para>
</listitem>
</itemizedlist>

<para><figure><title>Absolute minimum hardware for FreeBSD</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>When I say <emphasis>absolute</emphasis> minimum, I mean it.  You can run FreeBSD <xref linkend="CFBSD-Fver"/> in
4 MB memory, but you will require at least 5 MB in order to install it.  You
can't do very much with such a minimal system, but for some purposes it might be
adequate.  For any kind of reasonable response time, you should use at least 8
MB of memory.  Before you go to the trouble to even try such a minimal
installation, consider the cost of another 4 MB of memory.  And you can pick up
better machines than this second-hand for $50.  Is the hassle worth it?
</para>

<para>To get full benefits from FreeBSD, you should be running the X Window system.
This uses more memory.  Consider 16 MB a usable minimum here, though thanks to
FreeBSD's virtual memory system, this is not such a hard limit as it is with
some other systems.
</para>
<note>

<para>The speed of a virtual memory based system such as FreeBSD depends at least as
much on memory performance as on processor performance.  If you have, say, a
486DX-33 and 8 MB of memory, upgrading memory to 16 MB will probably buy you
more performance than upgrading the motherboard to a Pentium 100 and keeping the
8 MB memory.  This applies for a usual mix of programs, in particular, programs
that don't perform number crunching.
</para>
</note>

<para>Consider the following the minimum for getting useful work done with FreeBSD and
X:
</para>
<itemizedlist>
<listitem>

<para>PC with 80486DX/2-66, or Alpha-based machine
</para>
</listitem>
<listitem>

<para>16 MB memory (i386) or 32 MB (Alpha).
</para>
</listitem>
<listitem>

<para>SVGA display board with 2 MB memory, 1024x768
</para>
</listitem>
<listitem>

<para>Mouse
</para>
</listitem>
<listitem>

<para>200 MB free disk space
</para>
</listitem>
</itemizedlist>

<para><figure><title>Recommended small FreeBSD and X11 system</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<note>

<para>Your mileage may vary.  During the review phase of this book, one of the
reviewers pointed out that he was very happy with his machine, which has a
486-33 processor, 16 MB main memory, and 1 MB memory on his display board.  He
says that it runs a lot faster than his Pentium 100 at work, which runs
Microsoft.  If your hardware doesn't measure up to the recommended
specification, don't be discouraged: try it out anyway.
</para>
</note>

<para>Beyond this minimum, FreeBSD supports a large number of other hardware
components.  FreeBSD is a 32 bit operating system, and it cannot use the 16 bit
drivers commonly supplied with PC extension boards.  If FreeBSD doesn't know
about the board, you probably won't be able to use it.
</para>
<sect2>
<title>Compaq/Digital Alpha machines</title>

<para><indexterm><primary>Processor</primary><secondary>AXP</secondary></indexterm>
<indexterm><primary>AXP</primary><secondary>Processor</secondary></indexterm>
<indexterm><primary>Processor</primary><secondary>Alpha</secondary></indexterm>
<indexterm><primary>Alpha</primary><secondary>architecture</secondary></indexterm>
<indexterm><primary>Console</primary><secondary>firmware</secondary></indexterm>
<indexterm><primary>SRM</primary><secondary>Console firmware</secondary></indexterm>
<indexterm><primary>Console</primary><secondary>firmware</secondary></indexterm>
<indexterm><primary>ARC</primary><secondary>Console firmware</secondary></indexterm>
<anchor id="CFBSD-alpha-concepts"/>
Since version 3.0, FreeBSD supports computers based on the Compaq (previously
Digital) <emphasis>AXP</emphasis> processor, commonly called <emphasis>Alpha</emphasis>.  FreeBSD requires
the same <emphasis>SRM</emphasis> console firmware as Digital UNIX.  It will not work with
the ARC firmware used with Microsoft NT.  The SRM firmware runs the machine in
64 bit mode, which is required to run FreeBSD, while the <emphasis>ARC</emphasis> firmware
sets 32 bit mode.  If your system is currently running Digital UNIX, then you
should be able to use the existing SRM console.  You can get firmware updates
from <emphasis>ftp://ftp.digital.com/pub/Digital/Alpha/firmware</emphasis>.  The easiest way to
access it is via a web browser at
<emphasis>http://gatekeeper.dec.com/pub/Digital/Alpha/firmware/</emphasis>.  Be careful to
transfer in binary mode.
</para>

<para>Note that the SRM firmware is board-specific, so take care to choose the correct
file that matches your exact system: near enough is not good enough.
Unfortunately, some Alpha systems do not support the SRM firmware.  You cannot
run FreeBSD on these systems.
</para>

<para>The SRM console commands differ from one version to another.  The commands
supported by your version are described in the hardware manual that was shipped
with your system.  The console <emphasis>help</emphasis> command lists all supported console
commands.  If your system has been set to boot automatically, you must type
<keycap>Ctrl-C</keycap> to interrupt the boot process and get to the SRM console prompt
(<emphasis>&gt;&gt;&gt;</emphasis>).  If the system is not set to boot automatically, it will display
the SRM console prompt after performing system checks.
</para>

<para>All SRM console versions support the <emphasis>set</emphasis> and <emphasis>show</emphasis> commands which
operate on environment variables that are stored in non-volatile memory.  The
<emphasis>show</emphasis> command lists all environment variables, including those that are
read-only.
</para>

<para>Alpha's SRM is picky about which hardware it supports.  For example, it
recognizes NCR SCSI boards, but it doesn't recognize Adaptec boards.  There are
reports of some Alphas not booting with particular video boards.  The
<emphasis>GENERIC</emphasis> kernel configuration (<emphasis>/usr/src/sys/alpha/conf/GENERIC</emphasis>)
shows what the kernel supports, but that doesn't mean that the SRM supports all
the devices.  In addition, the SRM support varies from one machine to the next,
so there's a danger that what's described here won't work for you.
</para>

<para>In the rest of this chapter, we'll look primarily at the i386 architecture.
Differences for Alpha include:
</para>
<itemizedlist>
<listitem>

<para>The disk layout for SRM is different from the layout for Microsoft.  SRM looks
for its bootstrap where Microsoft keeps its partition table.  This means that
you cannot share a disk between FreeBSD and Microsoft on an Alpha.
</para>
</listitem>
<listitem>

<para>Most SRM-based Alpha machines don't support IDE drives, so you're limited to
SCSI.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Laptops</title>

<para><indexterm><primary>laptop</primary></indexterm>
<indexterm><primary>Hosokawa</primary><secondary>Tatsumi</secondary></indexterm>
FreeBSD will also run on most laptops; the considerations above apply for
laptops as well.  The generic kernel does not support all laptops optimally: if
you have a laptop, you should check Tatsumi Hosokawa's Mobile Computing page at
<emphasis>http://www.jp.FreeBSD.org/PAO/</emphasis>.
</para>
</sect2>
<sect2>
<title>Drivers</title>

<para><indexterm><primary>kernel
</primary></indexterm>
<indexterm><primary>driver</primary></indexterm>
The generic FreeBSD kernel
<footnote>

<para><indexterm><primary>kernel</primary></indexterm>
The <emphasis>kernel</emphasis> is the core program of the operating system, and is resident in
memory at all times.  To start the operating system, you load the kernel into
memory and run it.
</para>
</footnote>
contains support in the form of <emphasis>drivers</emphasis> for most common hardware, but
some less common drivers have been omitted.  If you have a supported product
which is not in the generic kernel, you have two options:
</para>
<itemizedlist>
<listitem>

<para>You may be able to use a <emphasis>Kernel Loadable Module</emphasis> (<emphasis>kld</emphasis>).  A kld is
a kernel component which can be loaded (and in some cases unloaded) while the
kernel is running.
</para>
</listitem>
<listitem>

<para>If no kld exists for your product, you will need to build a special
kernel&mdash;we'll look at what this entails in <xref linkend="CFBSD-chbuild"/>.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/dev</primary></indexterm>
Table <xref linkend="CFBSD-generic-supported-hardware"/> shows the hardware which the i386 generic
kernel supports.  New hardware support is being added all the time, so this
table can't be definitive.  Look in the file <emphasis>/stand/help/hardware.hlp.gz</emphasis>,
from which this table was derived, or, even better, in the configuration file
<emphasis>/usr/src/sys/i386/conf/LINT</emphasis> or <emphasis>/usr/src/sys/alpha/conf/LINT</emphasis> for
authoritative information for your release of FreeBSD.
<anchor id="CFBSD-supported-hardware"/>
<table frame='all'><title>Hardware supported by FreeBSD</title>
center,box,tab(#) ;
| lfCWp8 | cfCWp8 | cfCWp8 | cfCWp8 | cfCWp8 | lw45 | .
Device#Port#IRQ#DRQ#IOMem#Description
=

<tgroup cols='191' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> fdc0</entry><entry>3f0</entry><entry>6</entry><entry>2</entry><entry></entry><entry> Floppy disk controller  wdc0</entry><entry>1f0</entry><entry>14</entry><entry></entry><entry></entry><entry> IDE/MFM/RLL disk controller  wdc1</entry><entry>170</entry><entry>15</entry><entry></entry><entry></entry><entry> IDE/MFM/RLL disk controller  ncr0</entry><entry></entry><entry></entry><entry></entry><entry></entry><entry> NCR PCI SCSI controller  bt0</entry><entry>330</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> Buslogic SCSI controller  uha0</entry><entry>330</entry><entry>\s+4\(bu\s0</entry><entry>6</entry><entry>\s+4\(bu\s0</entry><entry> Ultrastore 14f  aha0</entry><entry>330</entry><entry>\s+4\(bu\s0</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry> Adaptec 154x SCSI controller  ahb0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> Adaptec 174x SCSI controller  ahc0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> Adaptec 274x/284x/294x SCSI controller  amd0</entry><entry></entry><entry></entry><entry></entry><entry></entry><entry> Tekram DC-390(T) / AMD 53c974 PCI SCSI  aic0</entry><entry>340</entry><entry>11</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> Adaptec 152x/AIC-6360 SCSI controller  nca0</entry><entry>1f88</entry><entry>10</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> ProAudioSpectrum cards  sea0</entry><entry>\s+4\(bu\s0</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry>c8000</entry><entry> Seagate ST01/02 8 bit controller  wt0</entry><entry>300</entry><entry>5</entry><entry>1</entry><entry>\s+4\(bu\s0</entry><entry> Wangtek and Archive QIC-02/QIC-36  mse0</entry><entry>23c</entry><entry>5</entry><entry></entry><entry></entry><entry> Microsoft Bus Mouse  psm0</entry><entry>60</entry><entry>12</entry><entry></entry><entry></entry><entry> PS/2 Mouse (disabled by default)  mcd0</entry><entry>300</entry><entry>10</entry><entry></entry><entry></entry><entry> Mitsumi CD-ROM  matcd0</entry><entry>230</entry><entry></entry><entry></entry><entry></entry><entry> Matsushita/Panasonic CD-ROM  scd0</entry><entry>230</entry><entry></entry><entry></entry><entry></entry><entry> Sony CD-ROM  sio0</entry><entry>3f8</entry><entry>4</entry><entry></entry><entry></entry><entry> Serial Port 0 (COM1)  sio1</entry><entry>2f8</entry><entry>3</entry><entry></entry><entry></entry><entry> Serial Port 1 (COM2)  lpt0</entry><entry>\s+4\(bu\s0</entry><entry>7</entry><entry></entry><entry></entry><entry> Printer Port 0  lpt1</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry></entry><entry></entry><entry> Printer Port 1  de0</entry><entry></entry><entry></entry><entry></entry><entry></entry><entry> DEC DC21x40 PCI based cards (including 21140 100bT cards)  ed0</entry><entry>280</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry>d8000</entry><entry> WD &amp; SMC 80xx; Novell NE1000 &amp; NE2000; 3Com 3C503; HP PC Lan+  ed1</entry><entry>300</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry>d8000</entry><entry> Same as ed0  eg0</entry><entry>310</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> 3Com 3C505  ep0</entry><entry>300</entry><entry>10</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry> 3Com 3C509  ex0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry></entry><entry> Intel EtherExpress Pro/10 cards  fe0</entry><entry>300</entry><entry>\s+4\(bu\s0</entry><entry></entry><entry></entry><entry> Allied-Telesis AT1700, RE2000 and Fujitsu FMV-180 series cards.  fxp0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry></entry><entry>\s+4\(bu\s0</entry><entry> Intel EtherExpress Pro/100B  ie0</entry><entry>360</entry><entry>7</entry><entry>\s+4\(bu\s0</entry><entry>d0000</entry><entry> AT&amp;T StarLAN 10 and EN100; 3Com 3C507; NI5210  ix0</entry><entry>300</entry><entry>10</entry><entry>\s+4\(bu\s0</entry><entry>d0000</entry><entry> Intel EtherExpress cards  le0</entry><entry>300</entry><entry>5</entry><entry>\s+4\(bu\s0</entry><entry>d0000</entry><entry> Digital Equipment EtherWorks 2 and EtherWorks 3  lnc0</entry><entry>280</entry><entry>10</entry><entry></entry><entry>\s+4\(bu\s0</entry><entry> Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)  vx0</entry><entry>\s+4\(bu\s0</entry><entry>\s+4\(bu\s0</entry><entry></entry><entry>\s+4\(bu\s0</entry><entry> 3Com 3c59x / 3c9xx  ze0</entry><entry>300</entry><entry>5</entry><entry></entry><entry>d8000</entry><entry> IBM/National Semiconductor PCMCIA Ethernet Controller  zp0</entry><entry>300</entry><entry>10</entry><entry></entry><entry>d8000</entry><entry> 3Com 3c589 Etherlink III PCMCIA Ethernet Controller
</entry></row>
</tbody></tgroup></table>
The device name in this table is the name by which the device is known to the
kernel.  It usually corresponds to a name in the <emphasis>/dev</emphasis> directory, but
network interfaces such as Ethernet boards do not have device nodes.  See
<xref linkend="CFBSD-chfilesys"/> for some other exceptions.
</para>

<para>If a field is marked with a bullet (<emphasis>\s+4\(bu\s0</emphasis>), the driver is capable
of determining the board settings by itself.  If the field is empty, this board
does not use this particular feature at all.  In addition to these controllers,
the source distribution contains drivers for a number of other controllers, as
shown in the following table.  There are a number of reasons for not including
these drivers in the generic kernel: they may still be experimental, or they
take up too much space in the kernel, or they may conflict with other devices.
When configuring a driver for a kernel build, you need to specify the addresses,
so I have not included any information here.  See the discussion of the
<emphasis>LINT</emphasis> configuration in <xref linkend="CFBSD-chbuild"/>, page
for further details.
<table frame='all'><title>Additional drivers supplied in source</title>
center,box,tab(#) ;
| lfCWp9 | lw75 | .
\s10Driver name#Description
=

<tgroup cols='29' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> ctx</entry><entry> Cortex-I frame grabber  cx</entry><entry> Cronyx/Sigma multiport sync/async  cy</entry><entry> Cyclades high-speed serial driver  el</entry><entry> 3Com 3C501  fea</entry><entry> DEV DEFEA EISA FDDI adater  fpa</entry><entry> DEC DEFPA PCI FDDI adapter  gp</entry><entry> National Instruments AT-GPIB and AT-GPIB/TNT board  gsc</entry><entry> Genius GS-4500 hand scanner  gus</entry><entry> Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX  gusxvi</entry><entry> Gravis Ultrasound 16-bit PCM  joy</entry><entry> Joystick  labpc</entry><entry> National Instrument's Lab-PC and Lab-PC+  meteor</entry><entry> Matrox Meteor frame-grabber card  mpu</entry><entry> Roland MPU-401 stand-alone card  mse</entry><entry> Logitech &amp; ATI InPort bus mouse ports  mss</entry><entry> Microsoft Sound System  nic</entry><entry> Dr Neuhaus NICCY 3008, 3009 &amp; 5000 ISDN cards  opl</entry><entry> Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum  pas</entry><entry> ProAudioSpectrum PCM and MIDI  pca</entry><entry> PCM audio (<emphasis>/dev/audio</emphasis>) through your PC speaker  psm</entry><entry> PS/2 mouse port  rc</entry><entry> RISCom/8 multiport card  sb</entry><entry> SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum  sbmidi</entry><entry> SoundBlaster 16 MIDI interface  sbxvi</entry><entry> SoundBlaster 16  spigot</entry><entry> Creative Labs Video Spigot video-acquisition board  uart</entry><entry> Stand-alone 6850 UART for MIDI  wds</entry><entry> Western Digital WD7000 IDE
</entry></row>
</tbody></tgroup></table>
</para>

<para></para>
</sect2>
<sect2>
<title>Supported hardware&mdash;Alpha architecture</title>

<para><indexterm><primary>Alpha</primary><secondary>supported hardware</secondary></indexterm>
FreeBSD/alpha supports the following alpha platforms:
</para>

<para>UDB, Multia, AXPpci33, Noname
EB164, PC164, PC164LX, PC164SX
EB64+, Aspen Alpine, etc.
AlphaStation 200, 250, 255, 400
AlphaStation 500, 600
Digital Personal Workstation 433, 500, 600
DEC3000/300 family (netboot only)
DEC3000/[4-9]00 family (netboot only)
</para>

<para>You need the SRM console firmware for your platform. In some cases, it is
possible to switch between AlphaBIOS (or ARC) firmware and SRM. In others it
will be necessary to download new firmware from
<emphasis>ftp.digital.com/pub/DEC/Alpha/firmware</emphasis>
</para>

<para>You need a dedicated disk for FreeBSD/alpha.  Currently FreeBSD can't share a
disk with another operating system.  This disk must be attached to a SCSI
controller which is supported by the SRM firmware (currently NCR or SYMBIOS and
Qlogic ISP).
</para>
</sect2>
</sect1>
<sect1>
<title>The CD-ROM distribution</title>

<para><anchor id="CFBSD-cdrom-distribution"/>
<indexterm><primary>Installation</primary><secondary>CD-ROM</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Installation</secondary></indexterm>
<indexterm><primary>Live</primary><secondary>File System CD-ROM</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Live File System</secondary></indexterm>
Walnut Creek CDROM distributes FreeBSD <xref linkend="CFBSD-Fver"/> on four CD-ROMs:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>Installation Boot CD, packages, X11</emphasis> CD-ROM.  It contains everything
you need to install the system itself.
</para>
</listitem>
<listitem>

<para><indexterm><primary>CD-ROM</primary><secondary>CVS Repository</secondary></indexterm>
<indexterm><primary>CVS</primary><secondary>Repository</secondary></indexterm>
The <emphasis>Live filesystem, CVS Repository, web pages</emphasis> CD-ROM.
</para>
</listitem>
<listitem>

<para>The <emphasis>Packages/ports</emphasis> CD-ROM.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Docs</primary><secondary>and Extras</secondary></indexterm>
The <emphasis>Distribution tarballs and packages (overflow)</emphasis> CD-ROM.
</para>
</listitem>
</itemizedlist>

<para>All are mastered in ISO 9660 with Rock Ridge extensions (see page <xref linkend="CFBSD-RockRidge"/>
for an explanation of these terms).  We'll look at them in the following
sections.
</para>
<sect2>
<title>CD-ROM 1: Installation</title>

<para>The Installation CD-ROM contains everything you need to install FreeBSD on your
system.  It supplies two categories of installable software:
</para>
<itemizedlist>
<listitem>

<para>System software is stored as <emphasis>gzip</emphasis>ped <emphasis>tar</emphasis> archives in the
directories <emphasis>bin</emphasis>, <emphasis>catpages</emphasis>, <emphasis>compat1x</emphasis>, <emphasis>compat20</emphasis>,
<emphasis>compat21</emphasis>, <emphasis>des</emphasis>, <emphasis>dict</emphasis>, <emphasis>doc</emphasis>, <emphasis>games</emphasis>, <emphasis>info</emphasis>,
<emphasis>manpages</emphasis> and <emphasis>proflibs</emphasis>.  To facilitate transport to and installation
from floppy, the archives have been divided into chunks of 240,640 bytes.  For
example, the only required set is in the files <emphasis>bin/bin.aa</emphasis> to
<emphasis>bin/bin.cx</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>packages/All</primary></indexterm>
The directory <emphasis>packages/All</emphasis> contains ported, installable software
packages as <emphasis>gzip</emphasis>ped <emphasis>tar</emphasis> archives.  They are designed to be
installed directly on a running system, so they have not been divided into
chunks.  Due to size restrictions on the CD-ROM, this directory does not contain
all the packages: some of them are on the fourth CD-ROM.
</para>

<para><emphasis>packages/All</emphasis> contains well over 1000 packages.  To make it easier for you
to find your way around them, symbolic links to appropriate packages have been
placed in the directories <emphasis>archivers</emphasis>, <emphasis>astro</emphasis>, <emphasis>audio</emphasis>,
<emphasis>benchmarks</emphasis>, <emphasis>cad</emphasis>, <emphasis>chinese</emphasis>, <emphasis>comms</emphasis>, <emphasis>converters</emphasis>,
<emphasis>databases</emphasis>, <emphasis>devel</emphasis>, <emphasis>editors</emphasis>, <emphasis>emulators</emphasis>, <emphasis>games</emphasis>,
<emphasis>german</emphasis>, <emphasis>graphics</emphasis>, <emphasis>japanese</emphasis>, <emphasis>korean</emphasis>, <emphasis>lang</emphasis>,
<emphasis>mail</emphasis>, <emphasis>math</emphasis>, <emphasis>mbone</emphasis>, <emphasis>misc</emphasis>, <emphasis>net</emphasis>, <emphasis>news</emphasis>,
<emphasis>perl5</emphasis>, <emphasis>plan9</emphasis>, <emphasis>print</emphasis>, <emphasis>russian</emphasis>, <emphasis>security</emphasis>,
<emphasis>shells</emphasis>, <emphasis>sysutils</emphasis>, <emphasis>tcl75</emphasis>, <emphasis>tcl76</emphasis>, <emphasis>tcl80</emphasis>,
<emphasis>textproc</emphasis>, <emphasis>tk41</emphasis>, <emphasis>tk42</emphasis>, <emphasis>tk80</emphasis>, <emphasis>vietnamese</emphasis> and
<emphasis>www</emphasis>.  Don't get the impression that these are different packages&mdash;they
are really pointers to the packages in <emphasis>All</emphasis>.  You will find a list of the
currently available packages in the file <emphasis>/usr/ports/INDEX</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>Table
lists the files in the main directory of the installation CD-ROM.
<table frame='all'><title>The installation CD-ROM</title>
center,box,tab(#) ;
| lfI | lw64 | .
File#Contents
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>VIEW</primary></indexterm>
<row><entry> 00_index.txt</entry><entry> A description of some of the files on the CD-ROM.
</entry></row>
<row><entry> ABOUT.TXT</entry><entry> A brief description of FreeBSD.
</entry></row>
<row><entry> ERRATA.TXT</entry><entry> A list of last-minute changes.  <emphasis>Read</emphasis> this file.  It can save you a lot of headaches.
</entry></row>
<row><entry> HARDWARE.TXT</entry><entry> A list of supported hardware.
</entry></row>
<row><entry> INSTALL.TXT</entry><entry> Information about installing FreeBSD.
</entry></row>
<row><entry> LAYOUT.TXT</entry><entry> A description of the CD-ROM layout.
</entry></row>
<row><entry> README.TXT</entry><entry> The traditional first file to read.  It describes how to use the other files.
</entry></row>
<row><entry> RELNOTES.TXT</entry><entry> Release notes.
</entry></row>
<row><entry> TRANS.TBL</entry><entry> Translation table for Rock Ridge, of no interest to anybody else.
</entry></row>
<row><entry> TROUBLE.TXT</entry><entry> Information on what to do if you run into trouble.
</entry></row>
<row><entry> UPGRADE.TXT</entry><entry> Notes on upgrading from older versions of FreeBSD.
</entry></row>
<row><entry> XF86333</entry><entry> Directory containing the XFree86 <xref linkend="CFBSD-Xver"/> distribution.  The release number may change in future releases of FreeBSD.
</entry></row>
<row><entry> bin</entry><entry> Installation directory: the binary distribution of the system.  This is the only required directory for installation.  See <xref linkend="CFBSD-chinstall"/>, for more detail.
</entry></row>
<!-- XXX -->
<row><entry>
</entry></row>
<row><entry> book</entry><entry> Information relating to this book, including the complete text in ASCII.
</entry></row>
<row><entry> catpages</entry><entry> Pre-formatted man pages.  See page <xref linkend="CFBSD-man"/> for more detail.
</entry></row>
<row><entry> cdrom.cfg</entry><entry> Machine-readable file describing the CD-ROM contents for the benefit of Microsoft programs.
</entry></row>
<row><entry> cdrom.inf</entry><entry> Machine-readable file describing the CD-ROM contents for the benefit of Microsoft programs.
</entry></row>
<row><entry> commerce</entry><entry> Commercial and shareware software for FreeBSD.  Some of these packages are demos, others are supplied with restricted licenses.  Read the file <emphasis>README</emphasis> in each subdirectory for more information.
</entry></row>
<row><entry> compat1x</entry><entry> Directory containing libraries to maintain compatibility with version 1.X of FreeBSD.
</entry></row>
<row><entry> compat20</entry><entry> Directory containing libraries to maintain compatibility with version 2.0 of FreeBSD.
</entry></row>
<row><entry> compat21</entry><entry> Directory containing libraries to maintain compatibility with version 2.1 of FreeBSD.
</entry></row>
<row><entry> des</entry><entry> Encryption software.  Until recently, this software could be distributed only in the USA and Canada.
</entry></row>
<row><entry> dict</entry><entry> Installation directory: dictionaries.
</entry></row>
<row><entry> doc</entry><entry> Installation directory: documentation.
</entry></row>
<row><entry> filename.txt</entry><entry> A list of all the files on this CD-ROM.
</entry></row>
<row><entry> floppies</entry><entry> A directory containing installation floppy disk images.
</entry></row>
<row><entry> games</entry><entry> Installation directory: games.
</entry></row>
<row><entry> info</entry><entry> Installation directory: GNU info documents.
</entry></row>
<row><entry> kernel</entry><entry> The boot kernel.
</entry></row>
<row><entry> makeflp.bat</entry><entry> A Microsoft <emphasis>.BAT</emphasis> file for copying floppy images to floppy.
</entry></row>
<row><entry> manpages</entry><entry> A directory containing the man pages for installation.
</entry></row>
<row><entry> packages</entry><entry> A directory containing installable versions of the Ports Collection.  See page <xref linkend="CFBSD-install-package"/>.
</entry></row>
<row><entry> ports</entry><entry> The sources for the  Ports Collection.  See <xref linkend="CFBSD-chports"/>, page <xref linkend="CFBSD-ports-collection"/>.
</entry></row>
<row><entry> proflibs</entry><entry> A directory containing profiled libraries, useful for identifying performance problems when programming.
</entry></row>
<row><entry> setup.exe</entry><entry> An Microsoft install program for installing from a running Microsoft system.
</entry></row>
<row><entry> setup.hlp</entry><entry> Help file for <emphasis>setup.exe</emphasis>.
</entry></row>
<row><entry> src</entry><entry> A directory containing the system source files.
</entry></row>
<row><entry> tools</entry><entry> A directory containing Microsoft tools to prepare for installation.
</entry></row>
<row><entry> utils</entry><entry> More Microsoft utilities.
</entry></row>
<row><entry> view.exe</entry><entry> An Microsoft based CD-ROM browser program.  See page <xref linkend="CFBSD-VIEW"/>.
</entry></row>
<row><entry> view.pif</entry><entry> \&amp;<emphasis>.PIF</emphasis> file for <emphasis>view.exe</emphasis>.
</entry></row>
<row><entry> xperimnt</entry><entry> A number of packages which are under development and were not ready for integration into FreeBSD at the time of release.
</entry></row>
</tbody></tgroup></table>
</para>
</sect2>
<sect2>
<title>CD-ROM 2: Live File System, CVS Repository, web pages</title>

<para><indexterm><primary>Live</primary><secondary>File System CD-ROM</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Live File System</secondary></indexterm>
Although the installation CD-ROM contains everything you need to install
FreeBSD, the format isn't what you'd like to handle every day.  The second
CD-ROM in the distribution, the <emphasis>Live File System</emphasis> CD-ROM, solves this
problem: it contains substantially the same data stored in file system format in
much the same way as you would install it on a hard disk.  You can access the
files directly from this CD-ROM.
</para>

<para>The second disk also contains the ``CVS Repository''.  The repository is the
master source tree of all source code, including all update information.  We'll
look at it in more detail in <xref linkend="CFBSD-chcurrent"/>, page <xref linkend="CFBSD-repository"/>.  This disk also
contains a snapshot of the Web pages at <emphasis>www.FreeBSD.org</emphasis> (directory
<emphasis>www</emphasis>).
</para>
</sect2>
<sect2>
<title>CD-ROMs 3 and 4: The Ports Collection</title>

<para><indexterm><primary>Ports</primary><secondary>Collection</secondary></indexterm>
An important part of FreeBSD is the <emphasis>Ports Collection</emphasis>, which comprises over
2000 popular programs.  The Ports Collection automates the process of porting
software to FreeBSD.  A combination of various programming tools already
available in the base FreeBSD installation allows you to simply type
<emphasis>make</emphasis> for a given package.  The ports mechanism does the rest, so you
need only enough disk space to build the ports you want.
<indexterm><primary>Ports</primary><secondary>Collection</secondary></indexterm>
We'll look at the Ports Collection in more detail in Chapter <xref linkend="CFBSD-nchports"/>.
The files are spread over 3 CD-ROMs:
</para>
<itemizedlist>
<listitem>

<para>You'll find the <emphasis>ports</emphasis>, the instructions for building the packages, on
CD-ROM 1.
</para>
</listitem>
<listitem>

<para>The base sources for the Ports Collection fill more than one CD-ROM, even though
we were not able to include all sources due to copyright restrictions: some
source files are freely distributable on the net, but may not be distributed on
CD-ROM.  Of the rest, most are on CD-ROM 3, with an overflow into CD-ROM 4.
</para>

<para>Don't worry about the missing sources: if you're connected to the Internet, the
Ports Collection will automatically retrieve the sources from an Internet server
when you type <emphasis>make</emphasis>.
</para>
</listitem>
<listitem>

<para>The <emphasis>packages</emphasis>, the precompiled binaries of the ports, are spread between
CD-ROM 1, which includes the most popular ones, and CD-ROM 4.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>PC hardware</title>

<para>In this section, we'll look at the information you need to understand in order
to install FreeBSD on the i386 architecture.  In particular, we'll look at the
following topics:
</para>
<itemizedlist>
<listitem>

<para>How FreeBSD supports hardware, and what to do if your hardware doesn't
correspond to the system's expectations.
</para>
</listitem>
<listitem>

<para>How FreeBSD and other PC operating systems handle disk space, and how to set up
your disk for FreeBSD, starting on page
</para>
</listitem>
<listitem>

<para>How to share your disk with another operating system, starting on page
</para>
</listitem>
</itemizedlist>

<para>Some of this information also applies to the Alpha architecture.  In particular,
though, an installation on an Alpha machine is a dedicated installation: you
can't share it with other operating systems.
</para>
</sect1>
<sect1>
<title>How the system detects hardware</title>

<para><indexterm><primary>probing</primary></indexterm>
When the system starts, each driver in the kernel examines the system to find
any hardware which it might be able to control.  This examination is called
<emphasis>probing</emphasis>.  Depending on the driver, the probe may be clever enough to
recognize its hardware no matter how it has been set up, or it may expect the
hardware to be set up in a specific manner in order to find it.  If the driver
only looks at specific settings, you have three possibilities:
</para>
<itemizedlist>
<listitem>

<para>You can set the board to match what the driver expects, typically by setting
jumpers or using a vendor supplied diagnostic program to set on-board
configuration memory.
</para>
</listitem>
<listitem>

<para><indexterm><primary>UserConfig</primary></indexterm>
You can use <emphasis>UserConfig</emphasis> to tell the addresses to the driver when booting
the system.  UserConfig is a part of the kernel which allows  interactive
modification of the system configuration at boot time&mdash;we'll look at it in more
detail in <xref linkend="CFBSD-chinstall"/>, on page
</para>
</listitem>
<listitem>

<para>You can build a kernel to use the current board parameters.
</para>
</listitem>
</itemizedlist>

<para>There are four main parameters that you may need to set for PC controller
boards:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>port</primary><secondary>address</secondary></indexterm>
The <emphasis>port address</emphasis> is the address of the first of possibly several control
registers which the driver uses to communicate with the board.  It is normally
specified in hexadecimal, for example <emphasis>0x320</emphasis>.
</para>
<note>

<para>If you come from a Microsoft background, you might be more comfortable with the
notation <emphasis>320H</emphasis>.  The notation <emphasis>0x320</emphasis> comes from the C programming
language.  You'll see a lot of it in UNIX.
</para>
</note>

<para>Each board needs its own address or range of addresses.  The ISA architecture
does not supply many addresses, and one of the most frequent causes of problems
when installing a board is that the port addresses overlap with those of another
board.
</para>

<para>Beware of boards with a large number of registers.  Typical port addresses end
in (hexadecimal) <emphasis>0</emphasis>.  Don't rely on being able to take any unoccupied
address ending in <emphasis>0</emphasis>, though: some boards, such as Novell NE2000
compatible Ethernet boards, occupy up to 32 registers&mdash;in our example, from
<emphasis>0x320</emphasis> to <emphasis>0x33f</emphasis>.  Note also that a number of addresses, such as
the serial and parallel ports, often end in <emphasis>8</emphasis>.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-IRQ"/>
<indexterm><primary>interrupt</primary><secondary>requests</secondary></indexterm>
<indexterm><primary>IRQ</primary></indexterm>
Boards use an <emphasis>Interrupt Request</emphasis>, also referred to as <emphasis>IRQ</emphasis>, to get the
attention of the driver when a specific event happens.  For example, when a
serial interface reads a character, it will generate an interrupt to tell the
driver to collect the character.  Interrupt requests can sometimes be shared,
depending on the driver and the hardware.  There are even fewer interrupt
requests than port addresses: a total of 15, of which a number are reserved by
the motherboard.  You can usually expect to be able to use IRQs 3, 4, 5, 7, 9,
10, 11, 12, 14 and 15, though some motherboards use IRQ 15 for power saving
hardware.  IRQ 2 is special: due to the design of the original IBM PC/AT, it is
the same thing as IRQ 9.  FreeBSD refers to this interrupt as IRQ 9.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Direct</primary><secondary>Memory Access</secondary></indexterm>
<indexterm><primary>DMA</primary></indexterm>
<indexterm><primary>DMA</primary><secondary>Request</secondary></indexterm>
<indexterm><primary>DMA</primary><secondary>Acknowledge</secondary></indexterm>
<indexterm><primary>DMA</primary><secondary>Channel</secondary></indexterm>
Some high-speed devices perform <emphasis>Direct Memory Access</emphasis>, also known as
<emphasis>DMA</emphasis>, to transfer data to or from memory without CPU intervention.  In
order to transfer data, they assert a <emphasis>DMA Request</emphasis> (DRQ) and wait for the
bus to reply with a <emphasis>DMA Acknowledge</emphasis> (DACK).  The combination of DRQ and
DACK is sometimes called a <emphasis>DMA Channel</emphasis>.  The ISA architecture supplies 7
DMA channels, numbered 0 to 3 (8 bit) and and 5 to 7 (16 bit).  The floppy
driver uses DMA channel 2.  DMA channels may not be shared.
</para>
</listitem>
<listitem>

<para><indexterm><primary>memory</primary><secondary>I/O</secondary></indexterm>
<indexterm><primary>I/O</primary><secondary>memory</secondary></indexterm>
<indexterm><primary>IOmem</primary></indexterm>
Finally, controllers may have on-board memory which is usually located at
addresses between <emphasis>0xa0000</emphasis> and <emphasis>0xeffff</emphasis>.  This is sometimes
referred to as <emphasis>I/O memory</emphasis> or <emphasis>IOmem</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>Disks</title>

<para><anchor id="CFBSD-disk-hardware"/>
<indexterm><primary>IDE</primary></indexterm>
<indexterm><primary>modified</primary><secondary>frequency modulation</secondary></indexterm>
<indexterm><primary>MFM</primary></indexterm>
<indexterm><primary>RLL</primary></indexterm>
<indexterm><primary>encoding</primary><secondary>run length limited</secondary></indexterm>
<indexterm><primary>run</primary><secondary>length limited encoding</secondary></indexterm>
A number of different disks are used on current PCs:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>ST-506</primary></indexterm>
<indexterm><primary>cable</primary><secondary>control</secondary></indexterm>
<indexterm><primary>cable</primary><secondary>data</secondary></indexterm>
<indexterm><primary>control</primary><secondary>cable</secondary></indexterm>
<indexterm><primary>data</primary><secondary>cable</secondary></indexterm>
<emphasis>ST-506</emphasis> disks are the oldest.  You can tell them by the fact that they
have two cables: a <emphasis>control cable</emphasis> which usually has connections for two
disks, and a thinner <emphasis>data cable</emphasis> which is not shared with any other disk.
They're just about completely obsolete by now, but FreeBSD still supports them
with the <emphasis>wd</emphasis> driver.  These disks are sometimes called by their
modulation format, <emphasis>Modified Frequency Modulation</emphasis> or <emphasis>MFM</emphasis>.  A
variant of MFM which offers about 50% more storage is <emphasis>RLL</emphasis> or <emphasis>Run
Length Limited</emphasis> modulation.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ESDI</primary></indexterm>
<indexterm><primary>Enhanced</primary><secondary>Small Device Interface</secondary></indexterm>
<indexterm><primary>AT</primary><secondary>Attachment</secondary></indexterm>
<indexterm><primary>ATA</primary></indexterm>
<emphasis>ESDI</emphasis> (<emphasis>Enhanced Small Device Interface</emphasis>) disks were designed to
work around some of the limitations of ST-506 drives.  They also use the same
cabling as ST-506, but they are not hardware compatible, though most ESDI
controllers understand ST-506 commands.  They are now also obsolete, but the
<emphasis>wd</emphasis> driver supports them, too.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-504m-limit"/>
<indexterm><primary>IDE</primary></indexterm>
<indexterm><primary>Integrated</primary><secondary>Device Electronics</secondary></indexterm>
<anchor id="CFBSD-EIDE"/>
<indexterm><primary>EIDE</primary></indexterm>
<indexterm><primary>enhanced</primary><secondary>IDE</secondary></indexterm>
<emphasis>IDE</emphasis> (<emphasis>Integrated Device Electronics</emphasis>), now frequently called
<emphasis>ATA</emphasis> (<emphasis>AT Attachment</emphasis>), is the current low-cost PC disk interface.
The disks (still a maximum of 2) are connected by a single 40-conductor flat
cable.  From a software viewpoint, they are upwards compatible with the ST-506
drives.  Most modern disks are so-called <emphasis>EIDE</emphasis> (<emphasis>Enhanced IDE</emphasis>)
drives.  The original IDE disks are were limited by the BIOS standard to a size
of 504 MB (1024 * 16 * 63 * 512, or 528,482,304 bytes).  EIDE drives exceed this
limit, but to do so they play funny games to hide the fact from Microsoft.  FreeBSD
<xref linkend="CFBSD-Fver"/> uses a new driver for all IDE disks.
</para>

<para><indexterm><primary>programmed</primary><secondary>I/O</secondary></indexterm>
<indexterm><primary>PIO</primary></indexterm>
<anchor id="CFBSD-use-DMA"/>
A problem with older IDE controllers was that they used <emphasis>programmed I/O</emphasis>
or <emphasis>PIO</emphasis> to perform the transfer.  In this mode, the CPU is directly
involved in the transfer to or from the disk.  Older controllers transferred a
byte at a time, but more modern controllers can transfer in units of 32 bits.
Either way, disk transfers use a large amount of CPU time with programmed I/O,
and it's difficult to achieve the transfer rates of modern IDE drives, which can
be as high as 10 MB/s.  During such transfers, the system appears to be
unbearably slow: it ``grinds to a halt''.
</para>

<para>To solve this problem, modern chipsets offer DMA transfers, which almost
completely eliminate CPU overhead.  FreeBSD supports DMA with most modern
chipsets.  If your chipset supports DMA, you should enable it.  See page
<xref linkend="CFBSD-IDE-DMA"/> for details of how to do this.
</para>

<para>Another factor influencing IDE performance is the fact that an IDE controller
can only perform one transfer at a time.  If you have two disks on a controller,
and you want to access both, the controller serializes the requests so that a
request to one drive completes before the other started.  This results in worse
performance than on a SCSI chain, which does not have this restriction.  If you
have two disks and two controllers, it's better to put one disk on each
controller.
</para>
</listitem>
<listitem>

<para><indexterm><primary>SCSI</primary></indexterm>
<indexterm><primary>Small</primary><secondary>Computer Systems Interface</secondary></indexterm>
<indexterm><primary>host</primary><secondary>adapter</secondary></indexterm>
<indexterm><primary>wide</primary><secondary>SCSI</secondary></indexterm>
<emphasis>SCSI</emphasis> is the <emphasis>Small Computer Systems Interface</emphasis>.  It is used for
disks, tapes, CD-ROMs and also other devices such as scanners and printers.  The
SCSI controller is more correctly called a <emphasis>host adapter</emphasis>.  SCSI devices are
connected by a single flat cable, usually with 50 conductors, which connects a
total of 8 devices, including at least one host adapter.  A newer standard, Wide
SCSI, supports up to 16 devices and has a wider cable.  Some SCSI devices have
subdevices, for example CD-ROM changers.
</para>

<para>SCSI drives have a reputation for much higher performance than IDE.  This is
mainly due to the fact that nearly all SCSI host adapters support DMA, whereas
in the past IDE controllers usually used programmed I/O.  In addition, SCSI host
adapters can perform transfers from multiple units at the same time, whereas IDE
controllers can only perform one transfer at a time.  Typical SCSI drives are
still faster than IDE drives, but the difference is nowhere near as large as it
used to be.
</para>
</listitem>
</itemizedlist>

<para>On the Alpha architecture, only SCSI drives are completely supported.  It should
be possible to use IDE drives as well once the system is running, but you can't
boot from them.
</para>

<para>Before you install FreeBSD, you need to decide how you want to use the disk
space available to you.  If desired, FreeBSD will coexist with other operating
systems.  In this section, we'll look at the way data is laid out on disk, and
what we need to do to create FreeBSD file systems on disk.
</para>
<sect2>
<title>PC BIOS and disks</title>

<para><indexterm><primary>read/write</primary><secondary>head</secondary></indexterm>
<indexterm><primary>head</primary><secondary>read/write</secondary></indexterm>
The basics of disk drives are relatively straightforward: data is stored on one
or more rotating disks with a magnetic coating similar in function to the
coating on an audio tape.  Unlike a tape, however, disk heads do not touch the
surface: the rotating disk produces an air pressure against the head which keeps
it floating very close to the surface.  The disk transfers data to and from the
disk via (usually) one <emphasis>read/write head</emphasis> for each surface.  People
frequently talk about the number of heads, not the number of surfaces, though
strictly speaking this is incorrect: if there are two heads per surface (to
speed up access), you're still interested in the number of surfaces, not the
number of heads.
</para>

<para><indexterm><primary>track</primary></indexterm>
<indexterm><primary>sectors</primary></indexterm>
<indexterm><primary>cylinder</primary></indexterm>
While transferring data, the heads are stationary, so data is written on disks
in a number of circular <emphasis>tracks</emphasis>.  Logically, each track is divided into a
number of <emphasis>sectors</emphasis>, which nowadays almost invariably contain 512 bytes.
A single positioning mechanism moves the heads from one track to another, so at
any one time all the tracks under the current head position can be accessed
without repositioning.  This group of tracks is called a <emphasis>cylinder</emphasis>.
</para>

<para><indexterm><primary>Logical</primary><secondary>Block Addressing</secondary></indexterm>
<anchor id="CFBSD-LBA"/>
<indexterm><primary>LBA</primary></indexterm>
<indexterm><primary>CHS</primary></indexterm>
To access older drives, such as ST-506 (MFM and RLL) drives, you needed to tell
the drive which cylinder, head and sector to address.  This mode of addressing
is thus called <emphasis>CHS</emphasis> addressing.  Even today, BIOS setup routines give you
the option of specifying information about disk drives in terms of the numbers
of cylinders, heads and sectors, and some insist on it.  In fact, modern disk
drives no longer have a fixed number of sectors per track, and they address
blocks sequentially, so-called <emphasis>Logical Block Addressing</emphasis> or <emphasis>LBA</emphasis>.
CHS addressing has an additional problem: the ST-506 hardware definition allows
up to 1024 cylinders, 16 heads, and 63 sectors, which limits the addressibility
of the drive to 504 MB.
</para>

<para>SCSI drives are a different matter: the BIOS doesn't know anything about them.
They are always addressed as a sequential list of sectors.  It's up to the host
adapter (or, in the case of dumb host adapters such as the Seagate ST02, the
driver software) to interrogate the drive and find out how much space is on it.
Typically, the host adapter will have a BIOS which interrogates the drive and
finds its dimensions.  The values it determines may not be correct: the
Microsoft 1 GB address limit (see page <xref linkend="CFBSD-1GB-limit"/>) might bite you.  Check
your controller documentation for details.
</para>
</sect2>
<sect2>
<title>Logical and physical disk drives</title>

<para><anchor id="CFBSD-partitions"/>
<indexterm><primary>disk</primary><secondary>drives</secondary></indexterm>
<indexterm><primary>disk</primary><secondary>drives</secondary></indexterm>
<indexterm><primary>logical</primary><secondary>disk drives</secondary></indexterm>
<indexterm><primary>physical</primary><secondary>disk drives</secondary></indexterm>
The PC world makes a distinction between <emphasis>logical disk drives</emphasis> and
<emphasis>physical disk drives</emphasis>.  Physical disks are easy enough to understand, of
course, but the term <emphasis>logical drive</emphasis> needs some explanation.  It refers to
a subdivision of a physical disk to which you can refer as if it were a disk by
itself.
</para>

<para><indexterm><primary>partitions</primary></indexterm>
<indexterm><primary>partition</primary><secondary>table</secondary></indexterm>
Microsoft divides a disk into up to four <emphasis>partitions</emphasis>, headed by a <emphasis>partition
table</emphasis>.  FreeBSD uses the term <emphasis>partition</emphasis> differently, as we will see,
so it refers to Microsoft's partitions as <emphasis>slices</emphasis>.
<indexterm><primary>slice</primary><secondary>defined</secondary></indexterm>
<anchor id="CFBSD-define-slice"/>
</para>
<note>

<para>This double usage of the word <emphasis>partition</emphasis> is really confusing.  In this
book, I follow BSD usage, but I will continue to refer to the partition table by
that name.
</para>
</note>

<para>Partitioning offers the flexibility that other operating systems need, so it has
been adopted by all operating systems that run on the PC platform.  Figure
<xref linkend="CFBSD-MS-partition-table"/> shows a disk with all four slices allocated.
</para>

<para>h = .2i
dh = .02i
dw = 2i
boxht = .4i
move right 2.35i
down
[
        [
                boxwid = dw
          M:    box ht .15i "Master Boot Record"
          P:    box ht .15i "Partition Table"
          A:    box ht boxht
          B:    box ht boxht
          C:    box ht boxht
          D:    box ht boxht
		"Partition (slice) 1" at A above
		"<emphasis>/dev/da0s1</emphasis>" at A below
		"Partition (slice) 2" at B above
		"<emphasis>/dev/da0s2</emphasis>" at B below
		"Partition (slice) 3" at C above
		"<emphasis>/dev/da0s3</emphasis>" at C below
		"Partition (slice) 4" at D above
		"<emphasis>/dev/da0s4</emphasis>" at D below
                ]
]
</para>

<para><figure><title>Partition table</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>partition</primary><secondary>table</secondary></indexterm>
<indexterm><primary>partition</primary><secondary>active</secondary></indexterm>
The <emphasis>Partition Table</emphasis> is the most important data structure.  It contains
information about the size, location and type of the slices (Microsoft partitions).
In Microsoft, one of these slices may be designated as <emphasis>active</emphasis>: at system
startup time, its bootstrap record will be used to start the system.
</para>

<para><indexterm><primary>master</primary><secondary>boot record</secondary></indexterm>
<indexterm><primary>MBR</primary></indexterm>
Although it is not as important as the partition table, the <emphasis>Master Boot
Record</emphasis> (<emphasis>MBR</emphasis>) is located at the very beginning of the disk to make
it easier for the system BIOS to find it at boot time.  It contains code
necessary to find the correct slice from which to boot, so normally you need it
only on the first disk in the system.  The MBR and the partition table take up
the first sector on disk.
</para>

<para><indexterm><primary>Microsoft</primary><secondary>partition</secondary></indexterm>
<indexterm><primary>primary</primary><secondary>Microsoft partition</secondary></indexterm>
<indexterm><primary>extended</primary><secondary>Microsoft partition</secondary></indexterm>
Microsoft designates one slice as the <emphasis>primary Microsoft partition</emphasis>, the
<emphasis>C:</emphasis> drive.  Another slice may be designated as an <emphasis>extended Microsoft
partition</emphasis>, which contains the other ``drives'' (all together in one slice).
</para>

<para><indexterm><primary>file</primary><secondary>systems</secondary></indexterm>
<indexterm><primary>swap</primary><secondary>partition</secondary></indexterm>
<indexterm><primary>UNIX</primary><secondary>partitions</secondary></indexterm>
<indexterm><primary>partitions</primary><secondary>UNIX</secondary></indexterm>
<indexterm><primary>da0</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>da0</secondary></indexterm>
UNIX systems have their own form of partitioning, which predates Microsoft and is
not compatible with the Microsoft method.  As a result, all versions of PC UNIX
which can coexist with Microsoft implement their own partitioning within a single
slice (Microsoft partition).  BSD systems define up to 8 partitions per slice.
They can be used for the following purposes:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>file</primary><secondary>system</secondary></indexterm>
A partition can be a <emphasis>file system</emphasis>, a structure in which UNIX stores files.
</para>
</listitem>
<listitem>

<para><indexterm><primary>swap</primary><secondary>partition</secondary></indexterm>
It can be used as a <emphasis>swap partition</emphasis>.  FreeBSD uses virtual memory: the
total addressed memory in the system can exceed the size of physical memory, so
we need space on disk to store memory pages which don't fit into physical
memory.
</para>
</listitem>
<listitem>

<para>The partition may not be within the slice at all: it may refer to other parts of
the physical disk.  In this case, it will probably overlap other partitions, and
you can't use it for file systems or swap space.  For obvious reasons, the
partitions which represent file systems and swap space (<emphasis>a</emphasis>, <emphasis>b</emphasis>,
and <emphasis>d</emphasis> through <emphasis>h</emphasis>) should not overlap.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>character</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>character</secondary></indexterm>
In order to understand the naming, you need to understand how UNIX treats disks.
As we have seen, you can think of a disk as a large number of sequential blocks
of data.  Looking at it like this doesn't give you a file system&mdash;it's more
like treating it as a tape.  UNIX calls this kind of access <emphasis>raw</emphasis> access.
You'll also hear the term <emphasis>character device</emphasis>.
</para>

<para>Normally, of course, you want files on your disk: you don't care where they are,
you just want to be able to open them and manipulate them.  This involves a
whole lot more work than raw devices.
<indexterm><primary>block</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>block</secondary></indexterm>
The standard term for disks is <emphasis>block device</emphasis>.  You can recognize block
and character devices in an <emphasis>ls -l</emphasis> listing by the letters <emphasis>b</emphasis> and
<emphasis>c</emphasis> at the beginning of the permissions.  For example:
</para>
<programlisting>
$ <command>ls -l /dev/rwd0s1a   /dev/wd0s1a</command>
crw-r-----  1 root  operator    3, 131072 Oct 31 19:59 /dev/rwd0s1a
brw-r-----  1 root  operator    0, 131072 Oct 31 19:59 /dev/wd0s1a
</programlisting>

<para>Let's look more carefully at how BSD names its partitions:
</para>
<itemizedlist>
<listitem>

<para>Like all other devices, the device entries are stored in the directory
<emphasis>/dev</emphasis>.
</para>
</listitem>
<listitem>

<para>If the partition is raw (character), the name starts with the letter <emphasis>r</emphasis>.
If it isn't, there is no prefix.
</para>
</listitem>
<listitem>

<para>Next comes the name of the driver.  As we have seen, FreeBSD has drivers for IDE
and friends (<emphasis>wd</emphasis>), SCSI disks (<emphasis>da</emphasis>) and floppy disks (<emphasis>fd</emphasis>).
With our first SCSI disks, we now have the names <emphasis>/dev/rda</emphasis> and
<emphasis>/dev/da</emphasis>.
</para>
<note>

<para>The abbreviation <emphasis>wd</emphasis> arose because the most popular of the original MFM
controllers were made by Western Digital.  Others claim, however, that it's an
abbreviation for ``Winchester Disk''.  The name <emphasis>da</emphasis> comes from the CAM
standard and is short for <emphasis>direct access</emphasis>.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Next comes the unit number, generally a single digit.  For example, the first
SCSI disk on the system would normally be called <emphasis>/dev/da0</emphasis>.
</para>
<note>

<para>Generally, the numbers are assigned during the boot probes, but you can reserve
numbers for SCSI disks if you want.  This prevents the absence of a single disk
from changing the numbers of all subsequent drives.  See page <xref linkend="CFBSD-wiring"/> for
more details.
</para>
</note>

<para>This gives us the names <emphasis>/dev/rda0</emphasis> and <emphasis>/dev/da0</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>slice</primary><secondary>name</secondary></indexterm>
<indexterm><primary>strict</primary><secondary>slice name</secondary></indexterm>
Next comes the partition information.  The so-called <emphasis>strict slice name</emphasis>
is specified by adding the letter <emphasis>s</emphasis> (for <emphasis>slice</emphasis>) and the slice
number (1 to 4) to the disk name.  BSD systems name partitions by appending the
letters <emphasis>a</emphasis> to <emphasis>h</emphasis> to the disk name.  Thus, the first partition of
the first slice of our disk above (which would typically be a root file system)
would be called <emphasis>/dev/rda0s1a</emphasis> and <emphasis>/dev/da0s1a</emphasis>.  Partition <emphasis>c</emphasis>
is an exception: by convention, it represents the whole BSD disk (in this case,
the slice in which FreeBSD resides).
</para>

<para><indexterm><primary>compatibility</primary><secondary>slice name</secondary></indexterm>
<indexterm><primary>slice</primary><secondary>name</secondary></indexterm>
Other versions of BSD use a more relaxed terminology for the partition name:
they omit the slice information.  Instead of calling the root file system
<emphasis>/dev/da0s1a</emphasis>, they refer to it as <emphasis>/dev/da0a</emphasis>.  FreeBSD supports this
method as well&mdash;it's called <emphasis>compatibility slice naming</emphasis>, and it's the
form you'll see most frequently.
</para>
</listitem>
</itemizedlist>

<para>Table
gives you an overview of the devices which FreeBSD defines for a single physical
disk <emphasis>/dev/da0</emphasis>:
<anchor id="CFBSD-disk-partitions"/>
<table frame='all'><title>Disk partition terminology</title>
center,box,tab(#) ;
| lfCWp9 | lw64 | .
\s10Slice name#Usage
=

<tgroup cols='46' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> /dev/rda0</entry><entry> Whole disk, raw access  /dev/rda0s1</entry><entry> First slice (Microsoft ``partition''), raw access  /dev/rda0s1a</entry><entry> First slice (Microsoft ``partition''), partition a, raw access  /dev/rda0s1b</entry><entry> First slice (Microsoft ``partition''), partition b, raw access  /dev/rda0s1d</entry><entry> First slice (Microsoft ``partition''), partition d, raw access  /dev/rda0s1e</entry><entry> First slice (Microsoft ``partition''), partition e, raw access  /dev/rda0s1f</entry><entry> First slice (Microsoft ``partition''), partition f, raw access  /dev/rda0s1g</entry><entry> First slice (Microsoft ``partition''), partition g, raw access  /dev/rda0s1h</entry><entry> First slice (Microsoft ``partition''), partition h, raw access  /dev/rda0s2</entry><entry> Second slice (Microsoft ``partition''), raw access  /dev/rda0s3</entry><entry> Third slice (Microsoft ``partition''), raw access  /dev/rda0s4</entry><entry> Fourth slice (Microsoft ``partition''), raw access  /dev/rda0s5</entry><entry> First drive in extended Microsoft partition, raw access  /dev/rda0s6</entry><entry> Second drive in extended Microsoft partition, raw access  /dev/rda0s7</entry><entry> Third drive in extended Microsoft partition, raw access  /dev/rda0a</entry><entry> First partition of BSD slice, usually root file system, raw access  /dev/rda0b</entry><entry> Second partition of BSD slice, usually swap space, raw access  /dev/rda0c</entry><entry> Whole BSD slice, raw access  /dev/rda0d</entry><entry> Additional file system, raw access  /dev/rda0e</entry><entry> <emphasis>/usr</emphasis> file system, raw access  /dev/rda0f</entry><entry> Additional file system, raw access  /dev/rda0g</entry><entry> Additional file system, raw access  /dev/rda0h</entry><entry> Additional file system, raw access  /dev/da0s1</entry><entry> First slice (Microsoft ``partition'')  /dev/da0s1a</entry><entry> First slice (Microsoft ``partition''), partition a  /dev/da0s1b</entry><entry> First slice (Microsoft ``partition''), partition b  /dev/da0s1d</entry><entry> First slice (Microsoft ``partition''), partition d  /dev/da0s1e</entry><entry> First slice (Microsoft ``partition''), partition e  /dev/da0s1f</entry><entry> First slice (Microsoft ``partition''), partition f  /dev/da0s1g</entry><entry> First slice (Microsoft ``partition''), partition g  /dev/da0s1h</entry><entry> First slice (Microsoft ``partition''), partition h  /dev/da0s2</entry><entry> Second slice (Microsoft ``partition'')  /dev/da0s3</entry><entry> Third slice (Microsoft ``partition'')  /dev/da0s4</entry><entry> Fourth slice (Microsoft ``partition'')  /dev/da0s5</entry><entry> First drive in extended Microsoft partition  /dev/da0s6</entry><entry> Second drive in extended Microsoft partition  /dev/da0s7</entry><entry> Third drive in extended Microsoft partition  /dev/da0a</entry><entry> First partition of BSD slice, usually root file system  /dev/da0b</entry><entry> Second partition of BSD slice, usually swap space  /dev/da0c</entry><entry> Whole BSD slice  /dev/da0d</entry><entry> Additional file system  /dev/da0e</entry><entry> <emphasis>/usr</emphasis> file system  /dev/da0f</entry><entry> Additional file system  /dev/da0g</entry><entry> Additional file system  /dev/da0h</entry><entry> Additional file system
</entry></row>
</tbody></tgroup></table>
In the interests of space, I haven't included the names of possible FreeBSD
partitions in slices 1, 2, and 3.
</para>

<para></para>

<para>h = .2i
dh = .02i
dw = 1.7i
move right .5i
down
[
	boxht = h; boxwid = 1.8i
	box ht .15i "Master Boot Record"
        box ht .15i "Partition Table"
    P1: box ht .4i
    P2: box ht .4i
    P3: box ht .4i

	move right 1.6i from P1.ne
	boxwid = 2i
	down
     C: box ht .25i "Microsoft <emphasis>C:</emphasis> drive"
	move .1i
     D: box ht .25i "Microsoft <emphasis>D:</emphasis> drive <emphasis>/dev/da0s5</emphasis>"
     E: box ht .25i "Microsoft <emphasis>E:</emphasis> drive <emphasis>/dev/da0s6</emphasis>"

	move .25i
    FA: box ht .2i "disk label and bootstrap"
        box ht .2i "<emphasis>/dev/da0s3a</emphasis>: <emphasis>/</emphasis> file system"
        box ht .2i "<emphasis>/dev/da0s3b</emphasis>: swap"
        box ht .2i "<emphasis>/dev/da0s3d</emphasis>"
	box ht .2i "<emphasis>/dev/da0s3e</emphasis>: <emphasis>/usr</emphasis> file system"
        box ht .2i "<emphasis>/dev/da0s3f</emphasis>"
        box ht .2i "<emphasis>/dev/da0s3g</emphasis>"
        box ht .2i "<emphasis>/dev/da0s3h</emphasis>"

	arrow from P1.e to C.w
	arrow from P2.e to D.w
	arrow from P3.e to FA.w
	move up .08i from P1.c	"Slice 1 - Microsoft primary"
	move down .08i from P1.c  "<emphasis>/dev/da0s1</emphasis>"
	move up .08i from P2.c	"Slice 2 - Microsoft extended"
	move down .08i from P2.c  "<emphasis>/dev/da0s2</emphasis>"
	move up .08i from P3.c	"Slice 3 - FreeBSD"
	move down .08i from P3.c  "<emphasis>/dev/da0s3</emphasis>"
	]
</para>

<para><figure><title>Partition table with FreeBSD file system</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
Figure <xref linkend="CFBSD-shared-partitions"/> shows a typical layout on a system with a single
SCSI disk, shared between Microsoft and FreeBSD.  You'll note that partition
<emphasis>/dev/da0s3c</emphasis> is missing from the FreeBSD slice, since it isn't a real
partition.  Like the Microsoft partition table, the disk label contains information
necessary for FreeBSD to manage the FreeBSD slice, such as the location and the
lengths of the individual partitions.  The bootstrap is needed to load the
kernel into memory.  If you install the FreeBSD boot manager, it uses the slice
which was active at the time of installation, even when booting from other
slices.  This is not the only way things could have been done, but it makes life
easier, since the size of the MBR is limited.  If you remove FreeBSD from your
system, you will need to either replace the MBR or to create a dummy FreeBSD
slice with a bootstrap record only.
</para>
<note>

<para><indexterm><primary>FDISK</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>Master</primary><secondary>Boot Record</secondary></indexterm>
<indexterm><primary>MBR</primary></indexterm>
If you need to replace the MBR, and you no longer have FreeBSD installed, you
can use the MS-DOS <emphasis>FDISK</emphasis> command to do this:
	<emphasis>C: </emphasis><command>FDISK /MBR</command>
</para>
</note>

<para>This command doesn't change the partition table: it only writes the Master Boot
Record.
<!--  .H 3 "Partition table or no partition table?" -->
<!--  Often, this subdivision seems to be overkill.  If you only want to run FreeBSD -->
<!--  on the disk, you need a master boot record, a partition table with only one -->
<!--  partition, and this partition is further subdivided into eight partitions, which are -->
<!--  really just another name for partition.  So what good is the partition table? -->
<!--  None.  You can do without it.  You only need a partition table if you're going -->
<!--  to share the disk between FreeBSD and other operating systems. -->
</para>
</sect2>
</sect1>
<sect1>
<title>Making the file systems</title>

<para><anchor id="CFBSD-make-fs"/>
Armed with this knowledge, we can now proceed to make some decisions about how
to install our systems.  First, we need to answer a number of questions:
</para>
<itemizedlist>
<listitem>

<para>Do we want to share this disk with any other operating system?
</para>
</listitem>
<listitem>

<para>If so, do we have data on this disk which we want to keep?
</para>
</listitem>
</itemizedlist>

<para></para>

<para><indexterm><primary>FDISK</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
If you already have another system installed on the disk, it is best to use that
system's tools for manipulating the partition table.  FreeBSD does not normally
have difficulty with partition tables created by other systems, so you can be
reasonably sure that the other system will understand what it has left.  If the
other system is Microsoft, and you have a slice which you don't need, you use the
MS-DOS <emphasis>FDISK</emphasis> program to free up enough space for you to install FreeBSD.
If you don't have a slice to delete, you can use the <emphasis>FIPS</emphasis> program to
create one&mdash;see <xref linkend="CFBSD-chinstall"/>, page
</para>

<para><indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
<anchor id="CFBSD-fdisk"/>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
If for some reason you can't use MS-DOS <emphasis>FDISK</emphasis>, for example because you're
installing FreeBSD by itself, FreeBSD also supplies a program called
<emphasis>fdisk</emphasis> which manipulates the partition table.  Normally you will invoke
it indirectly via the <emphasis>sysinstall</emphasis> program&mdash;see page
<xref linkend="CFBSD-building-partition-table"/>.
</para>
</sect1>
<sect1>
<title>Using a boot manager</title>

<para><indexterm><primary>boot</primary><secondary>manager</secondary></indexterm>
If you choose to share your disk between FreeBSD and another operating system,
you need to make an additional decision every time you boot the machine: which
operating system do you want to run?  FreeBSD helps you make this decision with
<emphasis>booteasy</emphasis>, a so-called <emphasis>Boot Manager</emphasis>, which is installed in the
Master Boot Record.  If you install <emphasis>booteasy</emphasis>, it will prompt you for the
system to install every time you boot the system, for example:
</para>
<programlisting>
F1  .  .  .  BSD
F2  .  .  .  DOS
F5  .  .  .  Disk 2

Default: F1
</programlisting>

<para>When you boot the system, it records what slice you booted from, and offers it
as a default the next time you boot&mdash;in this case, it suggests <keycap>F1</keycap> for
FreeBSD.  If you don't respond within 10 seconds, it will accept this default
automatically and boot the system accordingly.
</para>

<para>If you're only running one system on the disk, the boot manager will still work,
but it just holds you up.  When you come to specify the choice of MBR, you
should specify a standard MBR, which will just boot from the currently active
slice.  See <xref linkend="CFBSD-chinstall"/>, page
for further details.
</para>
</sect1>
<sect1>
<title>Interaction with Microsoft</title>

<para><anchor id="CFBSD-DOS-interaction"/>
If you're coming from a Microsoft or a similar operational environment, you
might find things strange at first.  In particular, you'll probably want to
share programs and data between the two systems.  You can do this if you have an
i386 architecture machine, but not with the Alpha.  In the following sections,
we'll examine what you can and can't do.
</para>
<sect2>
<title>Sharing a disk with Microsoft</title>

<para>If you wish, you can install both Microsoft and FreeBSD on the same disk, subject
to space constraints. We will go into great depth about how to do this in
<xref linkend="CFBSD-chshareinstall"/>, page
</para>
</sect2>
<sect2>
<title>Using compressed MS-DOS file systems from FreeBSD</title>

<para><indexterm><primary>Stacker</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>DoubleSpace</primary><secondary>MS-DOS command</secondary></indexterm>
If you are using a utility such as <emphasis>Stacker</emphasis>\(tm or
<emphasis>DoubleSpace</emphasis>\(tm, FreeBSD will only be able to use whatever portion of
the file system you leave uncompressed.  The rest of the file system will show up
as one large file with a funny name.  Don't let this confuse you: this file is
<emphasis>not</emphasis> superfluous, it's everything you have.
</para>

<para>Your best choice here is to leave one Microsoft partition uncompressed and use it
for communications between Microsoft and FreeBSD.
</para>
</sect2>
<sect2>
<title>Running Microsoft binaries under FreeBSD</title>

<para><indexterm><primary>pcemu</primary></indexterm>
FreeBSD has very limited support for running Microsoft binaries.  Work is in
progress, but at the moment only two packages are available, both in the Ports
Collection:
</para>
<itemizedlist>
<listitem>

<para><emphasis>pcemu</emphasis> runs under the X Window System and emulates an 8088 and enough
BIOS services to run MS-DOS text mode applications.
</para>
</listitem>
<listitem>

<para><indexterm><primary>WINE</primary></indexterm>
<indexterm><primary>Windows</primary><secondary>Emulator</secondary></indexterm>
<emphasis>WINE</emphasis> (<emphasis>Windows Emulator</emphasis>) can run some Windows applications.  It's
still more experimental than usable.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Disk size limitations</title>

<para>Disk storage capacity has grown by an order of magnitude in the last few years.
As it did so, a number of limits became apparent:
</para>
<itemizedlist>
<listitem>

<para>The first was the BIOS <emphasis>504 MB limit</emphasis> on IDE disks, imposed by their
similarity with ST-506 disks, and discussed on page <xref linkend="CFBSD-504m-limit"/>.  Microsoft
and other vendors work around this problem in much the same way as FreeBSD:
after starting, they load their own driver and disable the BIOS, so they can
address disks up to (normally) 8 GB with no problems.  The only problem is
booting: you must boot from the first 504 MB.  If your BIOS has this limitation,
you will not be able to boot FreeBSD reliably from a root file system on an IDE
if it goes beyond this limit.  See below for one solution.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-1GB-limit"/>
The next limit was the 1 GB limit, which affected some older SCSI host adapters.
Although SCSI drives always use LBA addressing internally, the BIOS needed to
simulate CHS addressing for Microsoft.  Early BIOSes were limited to 64 heads,
32 sectors and 1024 tracks (64 \(mu 32 \(mu 1024 \(mu 512 = 1 GB).  This
wouldn't be such a problem, except that modern Adaptec controllers offer a 1 GB
compatibility option.  Don't use it: it's only needed for systems which were
installed with the old mapping.
</para>
</listitem>
<listitem>

<para>After that, it's logical that the next limit should come at 2 GB.  There are
several different problems here.  The only one which affects FreeBSD appears to
be a bug in some IDE controllers, which don't work beyond this limit.  All of
these are old, and IDE controllers don't cost anything, so if you are sure you
have this problem, you can solve it by replacing the controller.  In the
process, make sure you get one which supports DMA.
</para>

<para>Other systems, including UNIX System V, have problems with this limit because
2\u\s-431\s0\d is the largest number which can be represented in a 32 bit signed
integer.  FreeBSD does not have this limitation, since file sizes are
represented in 64 bit quantities.
</para>
</listitem>
<listitem>

<para>At 4 GB, some IDE controllers have problems because they convert this to a CHS
mapping with 256 heads, which doesn't work: the largest number is 255.  Again,
if you're sure this is the cause of problems you may be having, a new controller
can help.
</para>
</listitem>
<listitem>

<para>Finally, at 8 GB, the CHS system runs out of steam.  It can't describe more than
1024 cylinders, 255 heads or 63 sectors.  Beyond this size, you must use LBA
addressing&mdash;if your BIOS supports it.
</para>
</listitem>
</itemizedlist>

<para>Most of these problems don't affect FreeBSD directly, but FreeBSD uses the
system BIOS to load the first bootstrap, so it is bound by the restrictions of
the BIOS and the controller.  If you have the choice, use LBA addressing.
Unfortunately, you can't do so if the disk already contains software which uses
CHS addressing.
</para>

<para>What do you do if you have an old-style BIOS with the 504 MB limit, a 2 GB IDE
disk and you want to allocate 1.3 GB for Microsoft and 700 MB for FreeBSD?
Clearly, whichever way round you put the slices, you can't get them both in the
first 504 MB.  In this case, you should allocate a reasonably sized primary
partition for Microsoft, for example 400 MB, then your FreeBSD slice, then a
Microsoft extended partition for the remaining 900 MB, as shown in figure
<anchor id="CFBSD-EIDE-layout"/>
</para>

<para>h = .2i
dh = .02i
dw = 2i
move right .5i
down
[
        [
                boxht = h; boxwid = dw
          M:    box ht .15i "Master Boot Record"
          P:    box ht .15i "Partition Table"
          A:    box ht .4i
          B:    box ht .7i
          C:    box ht 1.1i
		"<emphasis>C:</emphasis>" at A
		"<keycap>Microsoft primary partition</keycap>" at A.e+(.9i,0)  ljust
		"<keycap>FreeBSD slice</keycap>" at B.e+(.9i,-.125i)  ljust
		"<emphasis>D:</emphasis>, <emphasis>E</emphasis>, etc." at C
		"<keycap>Extended Microsoft partition</keycap>" at C.e+(.9i,0)  ljust

		line dotted from B.nw-(0,.2) right boxwid
		line dotted from B.nw-(0,.4) right boxwid
		"root file system" at B.n-(0,.075)
		"swap partition" at B.n-(0,.3)
		"/usr file system" at B.n-(0,.55)

	   A1:	arrow from A.se+(.2i,0) to A.se+(.02,0); move right .4i; "400 MB" ljust
	   A2:	arrow from B.se+(.2i,0) to B.se+(.02,0); move right .4i; "1.1 GB" ljust
	   A3:	arrow from A.se+(.2i,-.25) to A.se+(.02,-.25); move right .4i;
		"504 MB (after end of root file system)" ljust
	   A4:	arrow from C.se+(.2i,0) to C.se+(.02,0); move right .4i; "2.0 GB" ljust

                ]
]
</para>

<para><figure><title>Sharing a disk between Microsoft and FreeBSD</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
Make particularly sure that the <emphasis>end</emphasis> of the root partition falls within
the first 504 MB.  There is no way to ensure that the kernel and bootstrap will
be at the beginning of the partition.
</para>

<para>Other things to consider are:
</para>
<itemizedlist>
<listitem>

<para>If you have other software already installed on the disk, and you want to keep
it, <emphasis>do</emphasis> not change the drive geometry.  If you do so, you will no longer
be able to run the other software.
</para>
</listitem>
<listitem>

<para>Use LBA addressing if your hardware supports it.
</para>
</listitem>
<listitem>

<para>If you have to use CHS, and you don't have any other software on the drive, use
the drive geometry specified on the disk itself or in the manual, if you're
lucky enough to get a manual with the disk.  Many BIOSes remap the drive
geometry in order to get Microsoft to agree to work with the disk, but this can
break FreeBSD disk mapping.  Check that the partition editor has these values,
and change them if necessary.
</para>
</listitem>
<listitem>

<para>If all else fails, install Microsoft in a small slice at the start of the disk.
This will create a valid partition table for the drive, and the installation
software will understand it.  Once you have started the installation process,
the Microsoft partition has fulfilled its purpose, and you can delete it again.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchquickinstall"><title>Quick Installation</title>

<para><anchor id="CFBSD-quick-install"/>
In chapters <xref linkend="CFBSD-nchinstall"/> to <xref linkend="CFBSD-nchxsetup"/>, we'll go into a lot of detail about
how to install the system.  Maybe this is too much detail for you.  If you're an
experienced UNIX user, you should be able to get by with significantly less
reading.  This chapter presents checklists for some of the more usual kinds of
installation.  Each of them refer you to the corresponding detailed descriptions
in chapters <xref linkend="CFBSD-nchinstall"/> through <xref linkend="CFBSD-nchxsetup"/>.
</para>

<para>On page <xref linkend="CFBSD-exclusive-install"/> we'll look at the simplest installation, where
FreeBSD is the only system on the disk.  Starting on page <xref linkend="CFBSD-shared-disk"/> we'll
look at sharing the disk with Microsoft, and on page <xref linkend="CFBSD-X-install-checklist"/>
we'll look at how to install XFree86.  You may find it convenient to photocopy
these pages and to mark them up as you go along.
</para>
<sect1>
<title>Making things easy for yourself</title>

<para>It is probably easier to install FreeBSD than any other PC operating system,
including Microsoft products.  Well, anyway, most of the time.  Some people
spend days trying to install FreeBSD, and finally give up.  That happens with
Microsoft's products as well, but unfortunately it happens more often with
FreeBSD.
</para>

<para>Now you're probably saying, ``That doesn't make sense.  First you say it's
easier to install, then you say it's more likely to fail.  What's the real
story?''
</para>

<para>As you might expect, the real story is quite involved.  In <xref linkend="CFBSD-chconcepts"/>, I
went into some of the background.  Before you start, let's look at what you can
do to make the installation as easy as possible:
</para>
<itemizedlist>
<listitem>

<para>Use known, established hardware.  New hardware products frequently have
undocumented problems.  You can be sure that they work under Microsoft, because
the manufacturer has tested them in that environment.  In all probability, he
hasn't tested them under any flavour of UNIX, let alone FreeBSD.  Usually the
problems aren't serious, and the FreeBSD team will solve them pretty quickly,
but if you get the hardware before the software is ready, you'll be the guinea
pig.
</para>
</listitem>
<listitem>

<para>Perform a standard installation.  The easiest way to install FreeBSD is by
booting from a floppy disk and installing on an empty hard disk from the CD-ROM.
If you proceed as discussed in <xref linkend="CFBSD-chinstall"/>, you shouldn't have any difficulty.
</para>
</listitem>
<listitem>

<para><indexterm><primary>FIPS</primary></indexterm>
If you need to share your hard disk with another operating system, it's easier
to install both systems from scratch.  If you do already have a Microsoft system
on the disk, you can use <emphasis>FIPS</emphasis> (see page <xref linkend="CFBSD-FIPS"/>), to make space for it,
but this requires more care.
</para>
</listitem>
<listitem>

<para><indexterm><primary>RTFM</primary></indexterm>
If you run into trouble, <emphasis>RTFM</emphasis>.
<footnote>

<para>Hackerspeak for ``Read The Manual''&mdash;the <keycap>F</keycap> is usually silent.
</para>
</footnote>
I've gone to a lot of trouble to anticipate the problems you might encounter,
and there's a good chance that you will find something here to help.
</para>
</listitem>
<listitem>

<para>If you do all this, and it still doesn't work, see page <xref linkend="CFBSD-support"/> for ways of
getting external help.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>FreeBSD alone on the disk</title>

<para><anchor id="CFBSD-exclusive-install"/>
To install FreeBSD from CD-ROM on a disk alone, go through the following steps:
</para>
<itemizedlist>
<listitem>

<para>If your BIOS supports direct booting from CD-ROM, boot from CD-ROM.  Otherwise,
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>Create two boot floppies by copying the images <emphasis>/cdrom/kern.flp</emphasis> and
<emphasis>/cdrom/mfsroot.flp</emphasis> to 3\(12<emphasis>"</emphasis> diskettes.  Refer to page
<xref linkend="CFBSD-create-floppies"/> for more details.
</para>
</listitem>
<listitem>

<para>Insert the CD-ROM in the drive before booting.
</para>
</listitem>
<listitem>

<para>Boot from the <emphasis>kern.flp</emphasis> floppy.  After loading, insert the
<emphasis>mfsroot.flp</emphasis> floppy when the system prompts you to do so, then press
<keycap>Enter</keycap>.
</para>
<note>

<para>If you have a larger floppy, such as 2.88 MB or LS-120, you can copy the image
<emphasis>/cdrom/boot.flp</emphasis> to it and boot from it.  In this case you don't need to
change disks.
</para>
</note>

<para></para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>

<para>Select the <emphasis>Novice</emphasis> installation, even if you're an experienced UNIX
hacker.  Refer to page <xref linkend="CFBSD-floppy-boot"/>.
</para>
</listitem>
<listitem>

<para>In the partition editor, delete any existing Microsoft slices, and allocate a
single FreeBSD slice which takes up the entire disk.  Don't use a true partition
entry; you don't need compatibility.  Refer to pages
<xref linkend="CFBSD-building-partition-table"/> and <xref linkend="CFBSD-dangerously-dedicated"/>.
</para>
</listitem>
<listitem>

<para>On exiting from the partition editor, select the <emphasis>Standard</emphasis> MBR.  Refer to
page <xref linkend="CFBSD-select-mbr"/>.
</para>
</listitem>
<listitem>

<para>In the disk label editor, delete any existing UNIX partitions.  If you're not
too worried about the exact size of the partitions, select automatically
generated disk labels.  Refer to page <xref linkend="CFBSD-automatic-labels"/>.
</para>
</listitem>
<listitem>

<para>Alternatively, if you want to specify your file systems yourself, start on the
basis of a root file system with 50 MB, a swap partition with 256 MB, and
allocate the rest of the space on the disk to the <emphasis>/usr</emphasis> file system.
Refer to page <xref linkend="CFBSD-disklabel-editor"/>.
</para>

<para>Note particularly that, if you don't create a <emphasis>/var</emphasis> file system, as I'm
recommending here, you'll need to create a symlink later on.
</para>
</listitem>
<listitem>

<para>Choose the distributions you want.  Refer to page <xref linkend="CFBSD-select-distribution"/>.
</para>
</listitem>
<listitem>

<para>Select CD-ROM as installation medium.  Refer to page <xref linkend="CFBSD-select-medium"/>.
</para>
</listitem>
<listitem>

<para>If you intend to run the X11 windowing system, select the installation now.
It's easier than doing it after the system is up and running.  Refer to
page <xref linkend="CFBSD-xinstall"/>.
</para>
</listitem>
<listitem>

<para>Give final confirmation.  The system will be installed.  Refer to page
<xref linkend="CFBSD-commit"/>.
</para>
</listitem>
<listitem>

<para>After installation, set up at least a user ID for yourself.  Refer to page
<xref linkend="CFBSD-logging-in"/>.
</para>
</listitem>
<listitem>

<para>Do you have a separate <emphasis>/usr</emphasis> file system and no <emphasis>/var</emphasis> file system?
Then create a directory <emphasis>/usr/var</emphasis> and make sure that you make
<emphasis>/var</emphasis> point to <emphasis>/usr/var</emphasis>&mdash;see page <xref linkend="CFBSD-symlink-var"/> for further
details.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>Installing XFree86</title>

<para><anchor id="CFBSD-X-install-checklist"/>
As mentioned above, it's much easier to install and configure the XFree86
software during the initial software installation than after you have FreeBSD up
and running.  If your system is already up and running, however, perform the
following steps, which assume the the XFree86 3.3.1 distribution.  If you are
installing a different distribution, change the name XF86331 accordingly.
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>XF86331</primary></indexterm>
Log in as <emphasis>root</emphasis>, <emphasis>cd</emphasis> to <emphasis>/usr</emphasis>, and extract all the archives
in <emphasis>/cdrom/dists/XF86331</emphasis> with <emphasis>tar</emphasis>.  If you're using <emphasis>sh</emphasis> or
similar, do this with:
</para>
<programlisting>
# <command>cd /usr</command>
# <command>for i in /cdrom/dists/XF86331/X331*.tgz; do</command>
# <command>  tar xzf $i</command>
# <command>done</command>
</programlisting>

<para>If you're using <emphasis>csh</emphasis> or <emphasis>tcsh</emphasis>, do it with:
</para>
<programlisting>
% <command>cd /usr</command>
% <command>foreach i (/cdrom/dists/XF86331/X331*.tgz)</command>
% <command>  tar xzf $i</command>
% <command>end</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Identify the type and memory size of your video board, and the type and serial
port name of your mouse.
</para>
</listitem>
<listitem>

<para>Select the name of an X server which will work with your video board.  Refer to
page <xref linkend="CFBSD-server-table-page"/> for further details.  Look at the list of servers in
table <xref linkend="CFBSD-server-table"/> on page <xref linkend="CFBSD-server-table-page"/>
<indexterm><primary>X</primary></indexterm>
and create a link between the one you want to use and <emphasis>/usr/X11R6/bin/X</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xf86config</primary><secondary>command</secondary></indexterm>
Run <emphasis>xf86config</emphasis> to create a configuration file.  Refer to page
<xref linkend="CFBSD-xf86config"/> for further details.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>FreeBSD shared with Microsoft</title>

<para><anchor id="CFBSD-shared-disk"/>
To install FreeBSD on a disk on which Microsoft is already installed, go through
the following steps:
</para>
<itemizedlist>
<listitem>

<para><emphasis>Make</emphasis> a backup! There's every possibility of erasing your data, and
there's absolutely no reason why you should take the risk.
</para>
</listitem>
<listitem>

<para>If you have an IDE disk larger than 504 MB, you may run into problems.  Refer to
page <xref linkend="CFBSD-EIDE"/> for further details.
</para>

<para>If you haven't read the documentation in Chapter <xref linkend="CFBSD-nchconcepts"/>, consider
performing the next couple of steps using <emphasis>VIEW</emphasis>, which can show you the
on-line documentation and start the programs for you.  Refer to page <xref linkend="CFBSD-VIEW"/>
for more information about <emphasis>VIEW</emphasis>.
</para>
</listitem>
<listitem>

<para>Repartition your disk with <emphasis>FIPS</emphasis>.  Refer to page <xref linkend="CFBSD-FIPS"/>.  You can start
<emphasis>FIPS</emphasis> directly or via the <emphasis>VIEW</emphasis> program.
</para>
</listitem>
<listitem>

<para>Insert the CD-ROM in the drive before booting.
</para>
</listitem>
<listitem>

<para>Boot the FreeBSD system.  If your Microsoft system is configured in a
FreeBSD-friendly manner, you can boot directly from Microsoft using the program
<emphasis>INSTALL.BAT</emphasis> for most CD-ROMs, or <emphasis>INST_IDE.BAT</emphasis> for IDE CD-ROM
drives.  You can also start either of these programs from the <emphasis>VIEW</emphasis>
program.
</para>
</listitem>
<listitem>

<para>If the direct boot doesn't work, it's probably due to your Microsoft
configuration.  It's not worth trying to reconfigure your Microsoft system to
make it work: it's easier to boot from CD-ROM or boot floppy, as described above
on page <xref linkend="CFBSD-exclusive-install"/> and in more detail on page <xref linkend="CFBSD-create-floppies"/>.
</para>
</listitem>
<listitem>

<para>Select the <emphasis>Novice</emphasis> installation, even if you're an experienced UNIX
hacker.  Refer to page <xref linkend="CFBSD-floppy-boot"/>.
</para>
</listitem>
<listitem>

<para>In the partition editor, delete <emphasis>only</emphasis> the second primary Microsoft slice.
The first primary Microsoft partition contains your Microsoft data, and if there
is an extended Microsoft partition, it will also contain your Microsoft data.
Then create a FreeBSD slice in the space that has been freed.  Refer to page
<xref linkend="CFBSD-building-partition-table"/>.
</para>
</listitem>
<listitem>

<para>On exiting from the partition editor, select the <emphasis>BootMgr</emphasis> MBR.  Refer to
page <xref linkend="CFBSD-select-mbr"/>.
</para>
</listitem>
<listitem>

<para>In the disk label editor, select the FreeBSD slice.  If you proceeded as above,
it should be empty, but if it contains existing UNIX partitions, delete them.
If you're not too worried about the exact size of the partitions, select
automatically generated disk labels.  Refer to page <xref linkend="CFBSD-automatic-labels"/>.
</para>
</listitem>
<listitem>

<para>Before leaving the disk label editor, also select mount points for your DOS
partitions if you intend to mount them under FreeBSD.  Refer to page
<xref linkend="CFBSD-dos-mount-point"/>.
</para>
</listitem>
<listitem>

<para>Alternatively, if you want to specify your file systems yourself, start on the
basis of a root file system with 50 MB, a swap partition with 256 MB, and
allocate the rest of the space on the disk to the <emphasis>/usr</emphasis> file system.
Refer to page <xref linkend="CFBSD-disklabel-editor"/>.
</para>

<para>Note particularly that, if you don't create a <emphasis>/var</emphasis> file system, you'll
need to create a symlink later on.
</para>
</listitem>
<listitem>

<para>Choose the distributions you want.  Refer to page <xref linkend="CFBSD-select-distribution"/>.
</para>
</listitem>
<listitem>

<para>Select CD-ROM as the installation medium.  Refer to page <xref linkend="CFBSD-select-medium"/>.
</para>
</listitem>
<listitem>

<para>If you intend to run the X window system, select the installation now.  It's
much easier than doing it after the system is up and running.  Refer to page
<xref linkend="CFBSD-xinstall"/>.
</para>
</listitem>
<listitem>

<para>Confirm installation.  The system will be installed.  Refer to page <xref linkend="CFBSD-commit"/>.
</para>
</listitem>
<listitem>

<para>After installation, set up at least a user ID for yourself.  Refer to page
<xref linkend="CFBSD-logging-in"/>.
</para>
</listitem>
<listitem>

<para>Do you have a separate <emphasis>/usr</emphasis> file system and no <emphasis>/var</emphasis> file system?
Then create a directory <emphasis>/usr/var</emphasis> and make sure that you make
<emphasis>/var</emphasis> point to <emphasis>/usr/var</emphasis>&mdash;see page <xref linkend="CFBSD-symlink-var"/> for further
details.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchshareinstall"><title>Shared OS Installation</title>

<para>In the previous chapter, we looked at how to install FreeBSD on a disk by
itself.  Unfortunately, you might not be able to afford this luxury: you may
only have one disk, and you need to use other operating systems as well.
</para>
<note>

<para>Before you start the installation, read this chapter carefully.  It's easy to
make a mistake, and one of the most frequent results of mistakes is the total
loss of all data on the hard disk.
</para>
</note>

<para>In this chapter, we'll look at what you need to do to share a disk between
FreeBSD and another operating system.  In most cases, you will share your disk
with a Microsoft platform, but most of this chapter applies to other operating
systems as well.  You may want to refer to the discussion of Microsoft and FreeBSD
disk layouts on page
The first question is: is there enough space on the disk for FreeBSD?  How much
you need depends on what you want to do with FreeBSD, of course, but for the
sake of example we'll take 120 MB as a ballpark figure.  In the following
section, we'll consider what to do if you need to change your partitions.  If
you already have enough space for a FreeBSD partition (for example, if you have
just installed Microsoft specifically for sharing with FreeBSD, and thus have
not filled up the disk), continue reading on page
</para>
<sect1>
<title>Repartitioning with FIPS</title>

<para><indexterm><primary>FIPS</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<anchor id="CFBSD-FIPS"/>
Typically, if you've been running Microsoft on your machine, it will occupy the
entire disk.  If you need all this space, of course, there's no way to install
another operating system as well.  Frequently, though, you'll find that you have
enough free space in the partition.  Unfortunately, that's not where you want
it: you want a new partition with this much space.  There are a number of ways
of getting this space:
</para>
<itemizedlist>
<listitem>

<para>You can reinstall the software.  This approach is common in the Microsoft world,
but FreeBSD users try to avoid it.
</para>
</listitem>
<listitem>

<para>You can use <emphasis>FIPS</emphasis> shrink a Microsoft partition, leaving space for
FreeBSD.  <emphasis>FIPS</emphasis> is a public domain utility, and it is included on the
FreeBSD CD-ROM.  Unfortunately, it cannot shrink more recent Microsoft file
systems.
</para>
</listitem>
<listitem>

<para>If you can't use <emphasis>FIPS</emphasis>, use a commercial utility like <emphasis>PartitionMagic</emphasis>.
This is not included on the CD-ROMs, and we won't discuss it further.
</para>
</listitem>
</itemizedlist>

<para>In the rest of the section, we'll look at how to shrink a partition with
<emphasis>FIPS</emphasis>.  If you do it with PartitionMagic, the details are different, but
the principles are the same.  In particular:
</para>
<note>

<para>Before repartitioning your disk, make a backup.  You can shoot yourself in the
foot with this method, and the result will almost invariably be loss of data.
</para>
</note>

<para><indexterm><primary>DEFRAG</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>Norton</primary><secondary>disk tools</secondary></indexterm>
If you've been running Microsoft on your system for any length of time, the data
in the partition will be spread all around the partition.  If you just truncate
the partition, you'll lose a lot of data, so you first need to move all the data
to the beginning of the partition.  Fortunately, MS-DOS 6.x (part of the
``Windows'' environment) supplies such a tool, called <emphasis>DEFRAG</emphasis>.
Alternatively, you can use a third-party defragmenter such as the one supplied
with the Norton Disk tools.  Before proceeding, consider a few gotchas:
</para>
<itemizedlist>
<listitem>

<para>The new Microsoft partition needs to be big enough to hold all the data.  If you
make it exactly the size of the data, it will effectively be full, and you won't
be able to write anything to it.
</para>
</listitem>
<listitem>

<para>The second partition is also a Microsoft partition.  To install FreeBSD on it, you
need to delete it and create a new FreeBSD partition.
</para>
</listitem>
<listitem>

<para>Most older BIOSes require the root file system in the FreeBSD partition to end
before cylinder 1024, otherwise the installation will complete correctly, but
you won't be able to boot from it.  See the diagram on page <xref linkend="CFBSD-EIDE-layout"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>MSCDEX</primary><secondary>Microsoft driver</secondary></indexterm>
<emphasis>FIPS</emphasis> may result in configuration problems with your Microsoft machine.
Since it adds a partition, any automatically assigned partitions which follow
will have a different drive letter.  In particular, this could mean that your
CD-ROM drive will ``move''.  After you delete the second Microsoft partition and
change it into a FreeBSD partition, it will ``move'' back again.
</para>
</listitem>
</itemizedlist>

<para>For further information, read the <emphasis>FIPS</emphasis> documentation in
<emphasis>/cdrom/tools/srcs/fips/fips.doc</emphasis>.  In particular, note these limitations:
</para>
<itemizedlist>
<listitem>

<para><emphasis>FIPS</emphasis> works only with Hard Disk BIOSes that use interrupt <emphasis>0x13</emphasis>
for low level hard disk access.  This is generally not a problem.
</para>
</listitem>
<listitem>

<para><emphasis>FIPS</emphasis> splits only partitions with 16 bit FATs.  Older versions of
Microsoft use 12 bit FATs, which are too small to be worth splitting.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Linux</primary></indexterm>
<emphasis>FIPS</emphasis> splits only Microsoft partitions.  The partition table and boot
sector must conform to the MS-DOS 3.0+ conventions.  This is marked by the
system indicator byte in the partition table, which must have the value 4 (16
bit sector number) or 6 (32 bit sector number).  In particular, it will
<emphasis>not</emphasis> split Linux partitions.
</para>
</listitem>
<listitem>

<para><emphasis>FIPS</emphasis> does not yet work on extended Microsoft partitions.
</para>
</listitem>
<listitem>

<para><emphasis>FIPS</emphasis> needs one free partition entry, so it will not work if you already
have four partitions.
</para>
</listitem>
<listitem>

<para><emphasis>FIPS</emphasis> will not reduce the original partition to a size of less than 4085
clusters, because this would involve rewriting the 16 bit FAT to a 12 bit FAT.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Repartitioning&mdash;an example</title>

<para>In this section, we'll go through the mechanics of repartitioning a disk.  We'll
start with a Western Digital Caviar 2200 disk, the same one we used for the
example on page
This time it starts off with a complete MS-DOS 6.21 system.
</para>

<para><indexterm><primary>CHKDSK</primary><secondary>MS-DOS program</secondary></indexterm>
<indexterm><primary>SCANDISK</primary><secondary>MS-DOS program</secondary></indexterm>
First, run <emphasis>CHKDSK</emphasis> or <emphasis>SCANDISK</emphasis> on the partition you want to
split.  If you have Norton Disk Doctor or something similar, you can use it
instead.  Make sure no ``dead'' clusters remain on the disk.
</para>

<para><indexterm><primary>RESTORRB</primary><secondary>MS-DOS program</secondary></indexterm>
Next, prepare a bootable floppy.  When you start <emphasis>FIPS</emphasis>, you will be given
the opportunity to write backup copies of your root and boot sector to a file on
drive <emphasis>A:</emphasis>.  These will be called <emphasis>ROOTBOOT.00<emphasis>x</emphasis></emphasis>, where <emphasis>x</emphasis>
represents a digit from <emphasis>0</emphasis> to <emphasis>9</emphasis>.  If anything goes wrong while
using <emphasis>FIPS</emphasis>, you can restore the original configuration by booting from
the floppy and running <emphasis>RESTORRB</emphasis>.
</para>
<note>

<para><indexterm><primary>ROOTBOOT</primary><secondary>file</secondary></indexterm>
If you use <emphasis>FIPS</emphasis> more than once (this is normally not necessary, but it
might happen), your floppy will contain more than one <emphasis>ROOTBOOT</emphasis> file.
<emphasis>RESTORRB</emphasis> lets you choose which configuration file to restore.  The file
<emphasis>RESTORRB.000</emphasis> contains your original configuration.  Try not to confuse
the versions.
</para>
</note>

<para>Before starting <emphasis>FIPS</emphasis> you <emphasis>must</emphasis> defragment your disk in order to
ensure that the space to be used for the new partition is free.  This is not as
straightforward as it seems:
</para>
<itemizedlist>
<listitem>

<para>Most defragmentation programs don't move the windows swap file.  You have to
uninstall it (in the <emphasis>386enhanced</emphasis> part of the Windows Control Panel) and
reinstall it after using <emphasis>FIPS</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>IMAGE</primary><secondary>MS-DOS program</secondary></indexterm>
<indexterm><primary>MIRROR</primary><secondary>MS-DOS program</secondary></indexterm>
Programs like <emphasis>IMAGE</emphasis> or <emphasis>MIRROR</emphasis> store a hidden system file with a
pointer to your mirror files in the last sector of the hard disk.  You
<emphasis>must</emphasis> delete this file before using <emphasis>FIPS</emphasis>.  It will be recreated the
next time you run <emphasis>MIRROR</emphasis>.  To delete it, in the root directory enter:
</para>
<programlisting>
C&gt; <command>attrib -r -s -h image.idx			<emphasis>for IMAGE<emphasis>
C&gt; </emphasis></emphasis></command><command>attrib -r -s -h mirorsav.fil			<emphasis>for MIRROR
</emphasis></command></programlisting>

<para>Then delete the file.
</para>
</listitem>
</itemizedlist>

<para>If <emphasis>FIPS</emphasis> does not offer as much disk space for creation of the new
partition as you expect, this may mean that:
</para>
<itemizedlist>
<listitem>

<para>You still have too much data in the remaining partition.  Consider making the
new partition smaller or deleting some of the data.  If you delete data, you
must run <emphasis>FIPS</emphasis> again.
</para>
</listitem>
<listitem>

<para>There are hidden files in the space of the new partition that have not been
moved by the defragmentation program.  Make sure to which program they belong.
If a file is a swap file of some program (for example NDOS) it is possible that
it can be safely deleted (and will be recreated automatically later when the
need arises).  See your manual for details.
</para>

<para>If the file belongs to some sort of copy protection, you must uninstall the
program to which it belongs and reinstall it after repartitioning.
</para>
</listitem>
</itemizedlist>

<para></para>
<note>

<para>If you are running early versions of MS-DOS (before 5.0), or another operating
system, such as Linux or OS/2, or you are using programs like Stacker,
SuperStor, or Doublespace, read the FIPS documentation for other possible
problems.
</para>
</note>

<para></para>
<sect3>
<title>Running FIPS</title>

<para>After defragmenting your Microsoft partition, you can run <emphasis>FIPS</emphasis>.  In
<emphasis>VIEW</emphasis>, select <emphasis>tools</emphasis>, then <emphasis>fips</emphasis>.  It's easier to do it from
the command line:
</para>
<programlisting>
<!--  For some reason, this next line formats differently for the complete -->
<!--  book and for the individual chapter. -->
C&gt; </emphasis><command>R:</command>							<emphasis>change to CD-ROM
R&gt; <command>cd \etools</emphasis>					<emphasis>make sure you're in the tools directory</command>
R&gt; </emphasis><command>fips</command>						<emphasis>and start the FIPS program
<emphasis>\&amp;... a lot of copyright information omitted</emphasis>
Press any key					<emphasis>do what the computer says</emphasis>
Which Drive (1=0x80/2=0x81)?
</programlisting>

<para>The message <emphasis>Which Drive</emphasis> may seem confusing, since it refers to Microsoft
internal numbering.  Don't worry about it: if you want to partion the first
physical drive in the system, (<emphasis>C:</emphasis>), enter <emphasis>1</emphasis>, otherwise enter
<emphasis>2</emphasis>.  Like MS-DOS, <emphasis>FIPS</emphasis> handles only two hard disks.
</para>

<para>If you start <emphasis>FIPS</emphasis> under Windows or DESQview, it will complain and tell
you to boot from a floppy disk.  It won't stop you from continuing, but it is a
Bad Idea to do so.
</para>

<para>Next, <emphasis>FIPS</emphasis> reads the root sector of the hard disk and displays the
partition table:
</para>
<programlisting>
     |        |     Start      |      |      End       | Start  |Number of|
Part.|bootable|Head Cyl. Sector|System|Head Cyl. Sector| Sector |Sectors  |  MB
-----+--------+----------------+------+----------------+--------+---------+----
1    |    yes |   0    0      1|   06h|  11  987     34|       0|   414960|  212
2    |     no |   0    0      0|   00h|   0    0      0|       0|        0|   0
3    |     no |   0    0      0|   00h|   0    0      0|       0|        0|   0
4    |     no |   0    0      0|   00h|   0    0      0|       0|        0|   0
</programlisting>

<para>This shows that only first partition is occupied, that it is bootable, and that
it occupies the whole disk (212 MB, from Cylinder 0, Head 0, Sector 1 to
Cylinder 987, Head 11, Sector 34).  Don't worry about the ``bootable'' flag
here&mdash;we'll deal with that in the FreeBSD installation.  First, <emphasis>FIPS</emphasis>
does some error checking and then reads and displays the boot sector of the
partition:
</para>
<programlisting>
Checking Rootsector ... OK
Press any Key			<emphasis>do what it says</emphasis>
Bytes per sector: 512
Sectors per cluster: 8
Reserved sectors: 1
Number of FATs: 2
Number of rootdirectory entries: 512
Number of sectors (short): 0
Media descriptor byte: f8h
Sectors per FAT: 145
Sectors per track: 35
Drive heads: 12
Hidden sectors: 63
Number of sectors (long): 414960
Physical drive number: 80h
Signature: 29h
</programlisting>

<para>After further checking, <emphasis>FIPS</emphasis> asks you if you want to make a backup
floppy.  Enter your formatted floppy in drive <emphasis>A:</emphasis> and make the backup.
Next, you see:
</para>
<programlisting>
Enter start cylinder for new partition (263 - 987):
Use the cursor keys to choose the cylinder, &lt;enter&gt; to continue
Old partition      Cylinder       New Partition
   53.9 MB          263            148.7 MB
</programlisting>

<para>Use the <keycap>Cursor Left</keycap> and <keycap>Cursor Right</keycap> keys to adjust the cylinder
number at which the new partition starts.  You can also use the keys <keycap>Cursor
Up</keycap> and <keycap>Cursor Down</keycap> to change in steps of ten cylinders.  <emphasis>FIPS</emphasis>
updates the bottom line of the display to show the new values selected.
Initially, <emphasis>FIPS</emphasis> chooses the smallest possible Microsoft partition, so
you can only increase the size of the old partition (with the <keycap>Cursor Right</keycap>
key).  When you're happy with the sizes, press <keycap>Enter</keycap> to move on to the
next step.
</para>
<note>

<para>Be very sure you're happy before you continue.  If you make the first partition
too small, there is no way to make it larger again.  On the other hand, if you
make it too large, you can split it again and then use fdisk or MS-DOS
FDISK to remove the superfluous partitions.
</para>
</note>

<para>In this example, we choose the following combination:
</para>
<programlisting>
Old partition      Cylinder       New Partition
   82.0 MB          400            120.6 MB
<emphasis>(pressed </emphasis><keycap>Enter<emphasis>
     |        |     Start      |      |      End       | Start  |Number of|
Part.|bootable|Head Cyl. Sector|System|Head Cyl. Sector| Sector |Sectors  |  MB
-----+--------+----------------+------+----------------+--------+---------+----
1    |    yes |   0    0      1|   06h|  11  399     34|       0|   167965|  53
2    |     no | 400    0      0|   06h|  11  987     34|       0|   246960| 120
3    |     no |   0    0      0|   00h|   0    0      0|       0|        0|   0
4    |     no |   0    0      0|   00h|   0    0      0|       0|        0|   0

Do you want to continue or reedit the partition table (c/r)? </emphasis></keycap><command>c</command>
</programlisting>

<para><indexterm><primary>CONFIG.SYS</primary></indexterm>
<indexterm><primary>AUTOEXEC.BAT</primary></indexterm>
<indexterm><primary>MIRROR</primary><secondary>MS-DOS program</secondary></indexterm>
<indexterm><primary>IMAGE</primary><secondary>MS-DOS program</secondary></indexterm>
<indexterm><primary>CHKDSK</primary><secondary>MS-DOS program</secondary></indexterm>
In order for the partition to be recognized, reboot immediately.  Make sure to
disable all programs that write to your disk in <emphasis>CONFIG.SYS</emphasis> and
<emphasis>AUTOEXEC.BAT</emphasis> before rebooting.  It might be easier to to rename the
files or to boot from floppy.  Be particularly careful to disable programs like
<emphasis>MIRROR</emphasis> and <emphasis>IMAGE</emphasis>, which might get confused if the partitioning
is not to their liking.  After rebooting, use <emphasis>CHKDSK</emphasis> or Norton Disk
Doctor to make sure the first partition is OK.  If you don't find any errors,
you may now reboot with your normal <emphasis>CONFIG.SYS</emphasis> and <emphasis>AUTOEXEC.BAT</emphasis>.
Start some programs and make sure you can still read your data.
</para>

<para>After that, you have two valid Microsoft partitions on your disk.  Read the next
section to install FreeBSD on the second one.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Installing FreeBSD on a second partition</title>

<para><anchor id="CFBSD-2-partitions"/>
In this section we'll discuss how to install FreeBSD on the second partition of
a hard disk which contains a valid image in the first partition, either because
you installed it that way or because you have just used <emphasis>FIPS</emphasis> to make it
that way.  The first step is to boot the FreeBSD as described on page
Follow the installation as discussed there until you get to the step <emphasis>Building
a partition table</emphasis> on page
</para>

<para>When you enter the partition editor, you will see something like:
</para>
<programlisting>
<command>D</command>isk name:      <command>wd0</command>                                      <emphasis>FDISK Partition Editor</emphasis>
BIOS Geometry:  989 cyls/12 heads/35 sectors

     Offset       Size        End     Name      PType     Desc  Subtype    Flags

          0         35         34        -          6   unused        0
         35     167965     167999    wd0s1          2      fat        6   =
     168000     246960     414959    wd0s2          2      fat        6   =
     414960        420     415379        -          2   unused        0

The following commands are supported (in upper or lower case):
A = Use Entire Disk    B = Bad Block Scan     C = Create Partition
D = Delete Partition   G = Set BIOS Geometry  S = Set Bootable
U = Undo All Changes   Q = Finish             W = Write Changes

The currently selected partition is displayed in <command>reverse video</command>
Use F1 or ? to get more help, arrow keys to move.
</programlisting>

<para>This display shows the two Microsoft partitions, <emphasis>wd0s1</emphasis> and <emphasis>wd0s2</emphasis>. To
install FreeBSD, you need to remove one of them.  <emphasis>Be</emphasis> very careful to remove
the correct partition.  It's always the second of the two partitions, in this
case <emphasis>wd0s2</emphasis>.  We remove the partition with the <emphasis>d</emphasis> command.  After
this, our display looks like:
</para>
<programlisting>
          0         35         34        -          6   unused        0
         35     167965     167999    wd0s1          2      fat        6   =
     168000     247380     415379        -          2   unused        0
</programlisting>

<para>The next step is to allocate a FreeBSD partition with the <emphasis>C</emphasis> command.
The menu asks us the size of the partition, and suggests a value of 247380
sectors, the complete size of the unused area at the end.  We can edit this
value if we wish, but in this case it's what we want, so we just press ENTER.
Now the display looks like this:
</para>
<programlisting>
          0         35         34        -          6   unused        0
         35     167965     167999    wd0s1          2      fat        6   =
     168000     247380     415379    wd0s2          3   freebsd     165   C
</programlisting>

<para><indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
The new partition uses the rest of the disk, including the last 420 sectors
which Microsoft rejected, and it has a partition type 3 (extended partition) and
subtype 165 (<emphasis>0xa5</emphasis>), which identifies it as a FreeBSD partition.
</para>

<para>All we need to do now is to mark the partition active or bootable, by pressing
<emphasis>s</emphasis>.  The <emphasis>a</emphasis> flag appears at the end of the partition line:
</para>
<programlisting>
          0         35         34        -          6   unused        0
         35     167965     167999    wd0s1          2      fat        6   =
     168000     247380     415379    wd0s2          3   freebsd     165   CA
</programlisting>

<para>After this, we select a boot method as described on page
Since we have two operating systems on the disk, we select the <emphasis>BootMgr</emphasis>
option.
</para>

<para><indexterm><primary>slice</primary><secondary>disk</secondary></indexterm>
<indexterm><primary>partition</primary><secondary>disk</secondary></indexterm>
At this point, we need to change our terminology.  So far, we have been using
Microsoft terminology, and we have talked of partitions.  FreeBSD calls these same
divisions of the disk <emphasis>slices</emphasis>.  That wouldn't be bad in itself, but it also
uses the term <emphasis>partition</emphasis> to refer to the contents of the slice.  See page
for further details.
</para>

<para>Our next step is to select FreeBSD partitions within the FreeBSD slice.  We have
already discussed this on page
so we'll look at it more briefly here.  As we saw on page
<indexterm><primary>/usr</primary></indexterm>
we will typically need a root file system, a <emphasis>/usr</emphasis> file system and swap
space.  When we select <emphasis>Label</emphasis>, we get the following screen:
</para>
<programlisting>
                         FreeBSD Disklabel Editor

<command>Disk: wd0  Partition name: wd0s2   Free: 247380 blocks (120MB)</command>


Part    Mount             Size Newfs   Part    Mount             Size Newfs
----    -----             ---- -----   ----    -----             ---- -----
wd0s1   &lt;none&gt;            82MB DOS
</programlisting>

<para><emphasis>Be</emphasis> careful here.  The partition shown in the list is the active
Microsoft partion, <emphasis>not</emphasis> the FreeBSD partition.  At this point, we have
two choices: decide for ourselves what we want, or let the disk label editor do
it for us.  We looked at automatically generated labels on page
<indexterm><primary>/usr</primary></indexterm>
so we'll just look at the manual generation here.  If we enter <emphasis>c</emphasis> to
create a disk partition, the disk label editor prompts us for details of the
partition.  Let's assume that we've decided that, for this disk, we want a 20 MB
root file system, 32 MB swap and the rest for <emphasis>/usr</emphasis>.  We hit <emphasis>c</emphasis> and
get a prompt window asking how much we want, suggesting the whole disk.  We
replace this with <emphasis>20m</emphasis> (the trailing <emphasis>m</emphasis> says the the value is in
units of megabytes), and get another question asking whether this is a file
system or swap space.  We choose <emphasis>file system</emphasis> and get a further prompt
asking where to mount it.  We enter <emphasis>/</emphasis>, and come back to the display,
which now shows:
</para>
<programlisting>
Part    Mount             Size Newfs   Part    Mount             Size Newfs
----    -----             ---- -----   ----    -----             ---- -----
wd0s1   &lt;none&gt;            82MB DOS
wd0s2a  /                 20MB UFS Y
</programlisting>

<para>Next we define the swap space.  This time we specify 32 MB, and that it should
be swap space.  Now the display looks like:
</para>
<programlisting>
Part    Mount             Size Newfs   Part    Mount             Size Newfs
----    -----             ---- -----   ----    -----             ---- -----
wd0s1   &lt;none&gt;            82MB DOS
wd0s2a  /                 20MB UFS Y
wd0s2b  &lt;none&gt;            32MB SWAP
</programlisting>

<para><indexterm><primary>/usr</primary></indexterm>
Finally, we create the <emphasis>/usr</emphasis> file system.  This time we accept the offer
of everything available, and end up with:
</para>
<programlisting>
Part    Mount             Size Newfs   Part    Mount             Size Newfs
----    -----             ---- -----   ----    -----             ---- -----
wd0s1   &lt;none&gt;            82MB DOS
wd0s2a  /                 20MB UFS Y
wd0s2b  &lt;none&gt;            32MB SWAP
wd0s2e  /usr              68MB UFS Y
</programlisting>

<para>After this point, we can continue at Section <emphasis>Selecting distributions</emphasis> on
page
The rest of the installation is the same as for a dedicated disk.

</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: draft 4th edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchinstall"><title>Installing FreeBSD</title>

<para><anchor id="CFBSD-install-start"/>
So now you're ready to install FreeBSD on your system.  In this chapter, we'll
look at how to install FreeBSD.  If you run into trouble, I'll refer you back to
the page of Chapter <xref linkend="CFBSD-nchconcepts"/> which discusses this topic.  If you want to
install FreeBSD on the same disk as Microsoft or another operating system, you
should have already read <xref linkend="CFBSD-chshareinstall"/>.
</para>

<para>The following discussion relates primarily to installation on the i386
architecture.  Support for the AXP (``Alpha'') processor is very new, and it
will change.  The current support is described on page <xref linkend="CFBSD-alpha-install"/>.
</para>
<sect1>
<title>Installing FreeBSD on the Intel i386 architecture</title>

<para><anchor id="CFBSD-sw-prepare"/>
To install FreeBSD you need the software in a form which the installation
software understands.  You may also need a boot diskette.  The choices you have
are, in order of decreasing attractiveness:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>El</primary><secondary>Torito</secondary></indexterm>
CD-ROM.  This is by far the easiest way to install FreeBSD.  If your system BIOS
supports the <emphasis>El Torito</emphasis>
<footnote>

<para>El Torito is a chain of Tex-Mex restaurants in California and other US states.
The story goes that the original concept was hacked out on the back of a
serviette one evening after a meal at El Torito.  All modern BIOSes support the
El Torito standard.
</para>
</footnote>
CD-ROM boot standard, or you have a running Microsoft system on the machine on which
you want to install FreeBSD, you may not even need a boot diskette.
</para>
</listitem>
<listitem>

<para>Over the network.  You have the choice of <emphasis>ftp</emphasis> or NFS connection.
</para>
</listitem>
<listitem>

<para>From a locally mounted disk partition, either FreeBSD (if you have already
installed it) or Microsoft.
</para>
</listitem>
<listitem>

<para>From tape in <emphasis>tar</emphasis> format.  This was once considered an installation
option, but I don't know of any tape installations done in the last few years,
and it's possible that it no longer works.
</para>
</listitem>
<listitem>

<para>From floppy disk.  This is only for masochists or people who really have almost
no hardware: depending on the extent of the installation, you will need up to
200 disks, and at least one of them is bound to have an I/O error.  And don't
forget that a CD-ROM drive costs a lot less than 200 floppies.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Booting from CD-ROM</title>

<para>Finally floppy disks are becoming obsolete, and with modern hardware you can
perform a FreeBSD installation without even having a floppy drive on your
computer: all you need is a CD-ROM drive and a BIOS which understands the <emphasis>El
Torito</emphasis> standard.  If you do, you don't need to do any preparation at all
beyond putting the CD-ROM in the drive and setting your BIOS to boot from it.
Continue reading on page <xref linkend="CFBSD-boot-install-kernel"/>
</para>
</sect2>
<sect2>
<title>Preparing a boot floppy</title>

<para><anchor id="CFBSD-make-floppy"/>
<indexterm><primary>boot</primary><secondary>floppy</secondary></indexterm>
<indexterm><primary>floppies/boot.flp</primary></indexterm>
<indexterm><primary>boot</primary><secondary>disk</secondary></indexterm>
If you can't boot from CD-ROM, you will need to boot from floppy disk.  If you
are using 1.44 MB floppies, you will need two of them, the <emphasis>Kernel Disk</emphasis>
and the <emphasis>MFS Root Disk</emphasis> to boot the installation programs.  If you are
using 2.88 MB floppies or a LS-120 disk, you can copy the single <emphasis>Boot
Disk</emphasis>, which is 2.88 MB long.  The images of these floppies are on the CD-ROM
distribution in the files <emphasis>floppies/kern.flp</emphasis>, <emphasis>floppies/mfsroot.flp</emphasis>
and <emphasis>floppies/boot.flp</emphasis> respectively.  If you have your CD-ROM mounted on
a Microsoft system, they will be called <emphasis>FLOPPIES\eKERN.FLP</emphasis>,
<emphasis>FLOPPIES\eMFSROOT.FLP</emphasis> and <emphasis>FLOPPIES\eBOOT.FLP</emphasis> respectively.  The
bootstrap does not recover bad blocks, so the floppy must be 100% readable.
</para>

<para>The way you get the boot disk image onto a real floppy depends on the operating
system you use.  If you are using any flavour of UNIX, just perform something
like
</para>
<programlisting>
# <command>dd if=/cdrom/floppies/kern.flp of=/dev/fd0c bs=36b</command>
<emphasis>change the floppy</emphasis>
# <command>dd if=/cdrom/floppies/mfsroot.flp of=/dev/fd0c bs=36b</command>
</programlisting>

<para><indexterm><primary>rfd0c</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>rfd0c</secondary></indexterm>
This assumes that your software is on CD-ROM, and that it is mounted on the
directory <emphasis>/cdrom</emphasis>.  It also assumes that your floppy drive is called
<emphasis>/dev/fd0c</emphasis> (this is the FreeBSD name, which is also used by other BSD
systems&mdash;see page
for an overview).  If you're using Linux, the device name would be
<emphasis>/dev/fd0</emphasis> or <emphasis>/dev/fd1</emphasis>.
</para>

<para>Some versions of UNIX, particularly older System V variants, may complain about
the option <emphasis>bs=36b</emphasis>.  If this happens, just leave it out.  It might take
up to 10 minutes to write the floppy, but it will work, and it will make you
appreciate FreeBSD all the more.
</para>

<para><indexterm><primary>VIEW.EXE</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<anchor id="CFBSD-VIEW"/>
<indexterm><primary>MAKEFLP.BAT</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>floppies/boot.flp</primary></indexterm>
If you have to create the boot floppy from Microsoft, use the program
<emphasis>Makeflp.bat</emphasis> which is on the home directory of the first CD-ROM.  Simply
select the icon.  In this directory you will also find the program can use
<emphasis>View.exe</emphasis>, a self-documenting menu-driven utility which is located in the
root directory of the CD-ROM, to perform all preparation necessary from
Microsoft.  Again, simply select the icon <emphasis>View.exe</emphasis> and follow the
instructions.
</para>
</sect2>
<sect2>
<title>Creating floppies for a floppy installation</title>

<para><anchor id="CFBSD-create-floppies"/>
Installation from floppy disk is definitely the worst choice you have.  You will
need 14 floppies for the minimum installation, and up to 200 for the complete
installation.  The chance of one of them being bad is high.  Most problems on a
floppy install can be traced to bad media, or differences in alignment between
the media and the drive in which they are used, so:
</para>
<note>

<para>Before starting, format all floppies in the drive you intend to use, even if
they are preformatted.
</para>
</note>

<para></para>

<para><indexterm><primary>floppies/boot.flp</primary></indexterm>
<indexterm><primary>RAWRITE.EXE</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>dd</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>dd</secondary></indexterm>
The first two floppies you'll need are the Kernel floppy and the MFS Root
floppy, which were described in the previous section.
</para>

<para>In addition, you will need at minimum as many floppies as it takes to hold all
files in the <emphasis>bin</emphasis> directory, which contains the binary distribution.
Read the file <emphasis>LAYOUT.TXT</emphasis> paying special attention to the ``Distribution
format'' section which describes which files you need.
</para>

<para>If you're creating the floppies on a FreeBSD machine, you can put  <emphasis>ufs</emphasis>
file systems on the floppies instead:
</para>
<programlisting>
# <command>fdformat -f 1440 fd0.1440</command>
# <command>disklabel -w -r fd0.1440 floppy3</command>
# <command>newfs -t 2 -u 18 -l 1 -i 65536 /dev/fd0</command>
</programlisting>

<para>Next, copy the files to the floppies.  The distribution files are split into
chunks conveniently sized so that 5 of them will fit on a conventional 1.44MB
floppy.  Go through all your floppies, packing as many files as will fit on each
one, until you've got all the distributions you want packed up in this fashion.
Each distribution should go into its own subdirectory on the floppy, for example
<emphasis>A:\BIN\BIN.INF</emphasis>, <emphasis>A:\BIN\BIN.AA</emphasis>, <emphasis>A:\BIN\BIN.AB</emphasis> etc.
</para>

<para>Make very sure to put the file <emphasis>bin.inf</emphasis> on the first floppy, since it is
needed to find out how many floppies to read.
</para>
</sect2>
<sect2>
<title>Installing via FTP</title>

<para><indexterm><primary>installing</primary><secondary>from Internet</secondary></indexterm>
<anchor id="CFBSD-ftp-install"/>
The fun way to install FreeBSD is via the Internet, but it's not always the best
choice.  There's a lot of data to transfer, and unless you have a really
high-speed, non-overloaded connection to the server, it could take forever.  On
the other hand, of course, if you have your own private server (like another
UNIX machine with the sources on it), and the system on which you want to
install FreeBSD doesn't have a CD-ROM drive, these conditions are fulfilled, and
this could be for you.  Before you decide, though, read about the alternative of
NFS installation below: if you don't have an FTP server with the files already
installed, it's a lot easier to set up an NFS installation.
</para>

<para>There are two FTP installation modes you can use:
</para>
<itemizedlist>
<listitem>

<para>Regular <emphasis>FTP</emphasis> mode does not work through most firewalls but will often work
best with older <emphasis>ftp</emphasis> servers that do not support passive mode.  Use this
mode if your connection hangs with passive mode.
</para>
</listitem>
<listitem>

<para><indexterm><primary>FTP</primary><secondary>passive</secondary></indexterm>
If you need to pass through firewalls that do not allow incoming connections,
try <emphasis>passive FTP</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>Whichever mode of installation and whichever remote machine you choose, you need
to have access to the remote machine.  The easiest and most common way to ensure
access is to use anonymous FTP.  If you're installing from another FreeBSD
machine, read how to install anonymous FTP on page <xref linkend="CFBSD-anonymous-ftp"/>.  This
information is also generally correct for other UNIX systems.
</para>
<sect3>
<title>Setting up the ftp server</title>

<para><indexterm><primary>\*[Fver]-RELEASE</primary></indexterm>
<indexterm><primary>/usr/ftp</primary></indexterm>
To set up the ftp server, the system from which you load the software, you must
load the software into the public FTP directory.  On BSD systems, this will be
the home directory of user <emphasis>ftp</emphasis>, which in FreeBSD defaults to
<emphasis>/usr/ftp</emphasis>.  The name of the directory is the name of the release, which in
this example we'll assume to be <emphasis><xref linkend="CFBSD-Fver"/>-RELEASE</emphasis>.
<!--  .ad l -->
<!--  .nh -->
You can put this directory in a subdirectory of <emphasis>/usr/ftp</emphasis>, for example
<emphasis>/usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE</emphasis>,
<!--  .hy -->
<!--  .ad -->
but the only optional part in this example is the parent directory
<emphasis>FreeBSD</emphasis>.
</para>

<para>This directory has a slightly different structure from the CD-ROM distribution.
To set it up, assuming you have your distribution CD-ROM mounted on
<emphasis>/cdrom</emphasis>, and that you are installing in the directory
<emphasis>/usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE</emphasis>, perform the following steps:
</para>
<programlisting>
# <command>cd /usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE</command>
# <command>mkdir floppies</command>
# <command>cd floppies</command>
# <command>cp /cdrom/floppies/* .</emphasis>			<emphasis>don't omit the </emphasis></command><command>.<emphasis> at the end<emphasis>
# </emphasis></command><command>cd /cdrom					<emphasis>the distribution directory on CD-ROM<emphasis>
# </emphasis></emphasis></command><command>tar cf - [b-d]* g* man* po* pr* [s-z]* | (cd /usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE; tar xvf -)</command>
</programlisting>

<para>This copies all the directories of <emphasis>/cdrom</emphasis> into
<emphasis>/usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE</emphasis> except for <emphasis>packages</emphasis>, a total of about
180 MB.  If you have enough space for the <emphasis>packages</emphasis> file as well (about
500 MB more), you can simplify the last line to:
</para>
<programlisting>
# <command>tar cf - . | (cd /usr/ftp/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE; tar xvf -)</command>
</programlisting>

<para>For a minimal installation, you need only the directory <emphasis>bin</emphasis>, about 16
MB.  To just install <emphasis>bin</emphasis> rather than all of the distribution, change the
last line of the example above to
</para>
<programlisting>
# <command>mkdir bin</command>
# <command>cp /cdrom/bin/* bin</command>
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Installing via NFS</title>

<para><anchor id="CFBSD-nfs-install-setup"/>
If you're installing from a CD-ROM drive on another system in the local network,
you will probably find an installation via FTP too complicated for your liking.
Installation is a lot easier if the other system supports NFS.  Before you
start, make sure you have the CD-ROM mounted on the remote machine, and that the
remote machine is exporting the file system (in System V terminology, exporting
is called <emphasis>sharing</emphasis>).  When prompted for the name of the directory,
specify the name of the directory on which the CD-ROM is mounted.  For example,
if the CD-ROM is mounted on directory <emphasis>/cdrom</emphasis> on the system
<emphasis>presto.example.org</emphasis>, enter <command>presto.example.org:/cdrom</command>.  That's all
there is to it!
</para>
<note>

<para>Older versions of FreeBSD stored the distribution on a subdirectory <emphasis>dists</emphasis>.
Newer versions store it in the root directory of the CD-ROM.
</para>
</note>

<para></para>
</sect2>
<sect2>
<title>Installing from a Microsoft partition</title>

<para>On the Intel architecture it's also possible to install from a primary Microsoft
partition on the first disk.  At the moment, it's not possible to install from
extended partitions.  To prepare for installation from an Microsoft partition,
copy the files from the distribution into a directory called <emphasis>\eFREEBSD</emphasis>.
For example, to do a minimal installation of FreeBSD from Microsoft using files
copied from a CD-ROM mounted on <emphasis>E:</emphasis>, you might do something like this:
</para>
<programlisting>
C&gt; <command>MKDIR C:\eFREEBSD</command>
C&gt; <command>XCOPY /S E:\eBIN C:\eFREEBSD\eBIN</command>
C&gt; <command>XCOPY /S E:\eFLOPPIES C:\eFREEBSD\eFLOPPIES</command>
</programlisting>

<para><indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>boot.flp</primary></indexterm>
You need the directory <emphasis>FLOPPIES</emphasis> because that's where <emphasis>sysinstall</emphasis>
looks for the <emphasis>boot.flp</emphasis>, the first image in every installation.
</para>

<para><indexterm><primary>The</primary><secondary><emphasis>bin</emphasis> directory</secondary></indexterm>
The only required directory is <emphasis>bin</emphasis>.  You can include as many other
directories as you want, but be sure to maintain the directory structure.  In
other words, if you also wanted to install <emphasis>XF86312</emphasis> and <emphasis>manpages</emphasis>,
you would copy them to <emphasis>C:\eFREEBSD\eXF86312</emphasis> and
<emphasis>C:\eFREEBSD\eMANPAGES</emphasis>.
</para>
</sect2>
<sect2>
<title>Installing from tape</title>

<para><indexterm><primary>installing</primary><secondary>from tape</secondary></indexterm>
<anchor id="CFBSD-tape-install"/>
It's theoretically possible to install FreeBSD from tape, but it probably hasn't
been done in the last few years, and it's quite possible that you'll run into
trouble.  If you're installing from tape, you need a tape written in <emphasis>tar</emphasis>
format with a block size of 5120 bytes (10 sectors).  Don't use <emphasis>tar</emphasis>'s
default value of 10240 bytes or 20 sectors.  Since the install program reads the
entire tape onto disk, you will need a <keycap>big</keycap> disk.  As a further
restriction, you can install only from the first tape unit in the system.
</para>
</sect2>
<sect2>
<title>Installing from a FreeBSD partition</title>

<para><indexterm><primary>installing</primary><secondary>from disk partition</secondary></indexterm>
<anchor id="CFBSD-unix-partition-install"/>
If you already have a copy of the FreeBSD distribution on the disk on which you
are installing, you can use this option.  Unfortunately, it doesn't work if the
partition is on another disk.  We're still working on this one&mdash;consider it an
experimental option.
</para>
</sect2>
</sect1>
<sect1>
<title>Booting the install kernel</title>

<para><anchor id="CFBSD-boot-install-kernel"/>
No matter which installation medium you choose, the first step in installing
FreeBSD is to start a minimal version of the operating system.  The simplest way
is to boot directly from the installation CD-ROM, if your system BIOS supports
it.  If your system doesn't support this kind of boot, you have the choice of
booting directly from CD-ROM floppy or from a running Microsoft system.
</para>

<para>In the following sections, we'll look at a real-life installation on a real
machine.  When you install FreeBSD on your machine, a number of things will be
different, depending on the hardware you're running and the way you're
installing the software.  Nevertheless, you should be able to recognize what is
going on.
</para>
<sect2>
<title>Booting from CD-ROM</title>

<para>Booting from CD-ROM is mainly a matter of setting up your system BIOS and
possibly your SCSI BIOS.  Typically, you perform one of the following
procedures:
</para>
<itemizedlist>
<listitem>

<para>If you're booting from an IDE CD-ROM, you enter your system BIOS setup routines
and set the <emphasis>Boot sequence</emphasis> parameter to select CD-ROM booting ahead of
hard disk booting, and possibly also ahead of floppy disk booting.  A typical
sequence might be <emphasis>CDROM,C,A</emphasis>.
</para>
</listitem>
<listitem>

<para>On most machines, if you're booting from a SCSI CD-ROM, you also need a host
adapter which supports CD-ROM boot.  Set up the system BIOS to boot in the
sequence, say, <emphasis>SCSI,A,C</emphasis>.  On typical host adapters (such as the Adaptec
2940 series), you set the adapter to enable CD-ROM booting, and set the ID of
the boot device to the ID of the CD-ROM drive.
</para>
</listitem>
</itemizedlist>

<para>These settings are probably not what you want to use for normal operation.  If
you leave the settings like this, and there is a bootable CD-ROM in your CD-ROM
drive, it always boots from that CD-ROM rather than from the hard disk.  After
installation, change the parameters back again to boot from hard disk before
CD-ROM.  See your system documentation for further details.
</para>
</sect2>
<sect2>
<title>Booting from floppy</title>

<para><indexterm><primary>booting</primary><secondary>from floppy</secondary></indexterm>
<anchor id="CFBSD-floppy-boot"/>
If you are installing from tape or CD-ROM, <emphasis>put the medium in the drive</emphasis>
before booting.  The installation may fail if you boot before inserting the
medium.
</para>

<para><indexterm><primary>/dev/fd0</primary></indexterm>
<indexterm><primary>A:</primary><secondary>drive</secondary></indexterm>
Boot the system in the normal manner: insert the kernel diskette in
<emphasis>/dev/fd0</emphasis>, the first floppy drive (which Microsoft calls <emphasis>A:</emphasis>), and
reset the computer or turn power on.  After the PC has gone through its hardware
tests, it will boot the FreeBSD install kernel from the floppy.
</para>
</sect2>
<sect2>
<title>Installing from a running Microsoft system</title>

<para>If the disk on which you plan to install FreeBSD contains Microsoft, and you're
installing from CD-ROM, you can usually boot directly from MS-DOS.  This will
work whether you plan to overwrite the Microsoft partition, or whether you plan
to install to another slice or another disk on the same system.  To boot this
way, reboot your system in MS-DOS mode, change to the CD-ROM volume (<emphasis>E:</emphasis>
in this example) and start <emphasis>INSTALL</emphasis> or <emphasis>VIEW</emphasis>:
</para>
<programlisting>
C&gt; </emphasis><command>E:</command>			<emphasis>change to CD-ROM
E&gt; <command>cd \e</emphasis>		<emphasis>make sure you're in the root directory</command>
E&gt; </emphasis><command>install</command>		<emphasis>and start the INSTALL program
</programlisting>

<para>Don't try this from Microsoft Windows&mdash;the installation will fail with the
message <emphasis>not enough memory</emphasis>.  The boot will progress in the same way as if
you had booted from floppy.  The advantage of starting <emphasis>VIEW</emphasis> is that you
get more documentation: ultimately <emphasis>VIEW</emphasis> will start <emphasis>INSTALL</emphasis> to
boot the system.
</para>

<para><emphasis>INSTALL</emphasis> doesn't always work.  It depends on what drivers or TSRs are in
your system.  There's no reason to try changing your Microsoft configuration to
get it to work: it's a lot easier just to boot from floppy, which we looked at
on page <xref linkend="CFBSD-make-floppy"/>.
</para>
</sect2>
<sect2>
<title>The boot process</title>

<para>The boot process itself is very similar to the normal boot process described on
page <xref linkend="CFBSD-bootup"/>.  There are a couple of differences:
</para>
<itemizedlist>
<listitem>

<para>At the beginning, you will see the message:
</para>
<programlisting>
Copyright (c) 1992-2000 The FreeBSD Project.
Copyright (c) 1979, 1980, 1983, 1986, 1988, 1989, 1991, 1992, 1993, 1994
	The Regents of the University of California. All rights reserved.
FreeBSD 4.1-RELEASE #1: Mon Aug 21 16:51:39 GMT 2000
    grog@daemon.lemis.com:/usr/src/sys/compile/BOOTMFS
Timecounter "i8254"  frequency 1193182 Hz
Timecounter "TSC"  frequency 467729955 Hz
CPU: Pentium II/Pentium II Xeon/Celeron (467.73-MHz 686-class CPU)
  Origin = "GenuineIntel"  Id = 0x665  Stepping = 5
  Features=0x183fbff&lt;FPU,VME,DE,PSE,TSC,MSR,PAE,MCE,CX8,APIC,SEP,MTRR,PGE,MCA,CMOV,PAT,PSE36,MMX,FXSR&gt;
real memory  = 134217728 (131072K bytes)
</programlisting>

<para>If the system stops at this point, it probably means that you have memory
problems (either not enough memory or defective memory).
</para>
</listitem>
<listitem>

<para>If you're booting from a two-floppy set, the loader will issue the following
prompt after loading the kernel:
</para>
<programlisting>
Please insert MFS root floppy and press enter:
</programlisting>

<para>When you do that, it continues with the probes.
</para>
</listitem>
<listitem>

<para>After the probes (page <xref linkend="CFBSD-device-probe"/>) you always go into the UserConfig menu:
</para>
<programlisting>
<command>B                       Kernel Configuration Menu


         Skip kernel configuration and continue with installation </command>
         Start kernel configuration in full-screen visual mode
         Start kernel configuration in CLI mode


Here you have the chance to go into kernel configuration mode, making
any changes which may be necessary to properly adjust the kernel to
match your hardware configuration.

If you are installing FreeBSD for the first time, select Visual Mode
(press Down-Arrow then ENTER).

If you need to do more specialized kernel configuration and are an
experienced FreeBSD user, select CLI mode.

If you are <command>certain</command> that you do not need to configure your kernel
then simply press ENTER or Q now.
</programlisting>

<para>In order to be able to install the machine, the system must recognize your
hardware.  If you have modern PCI hardware, this shouldn't be a problem, but IDE
hardware frequently needs to be jumpered to individual IRQ and I/O address
settings.  What happens if you want to install via the network and your IDE
Ethernet board is set up differently from the way the kernel expects?  The
driver doesn't notice it, and it won't be until quite some time later that you
will find that the installation can't work.  That's what <emphasis>UserConfig</emphasis> (the
kernel configuration editor) is for, and why you get the chance to run it at
this point in the installation.  See page <xref linkend="CFBSD-modify-boot-config"/> for an example
of how to tell the kernel about your hardware configuration.
</para>

<para>If your hardware configuration matches what the generic kernel expects (see page
<xref linkend="CFBSD-supported-hardware"/>), or if your hardware is all PCI, just press <keycap>ENTER</keycap>.
The kernel will continue with the <emphasis>device probes</emphasis> (see page
<xref linkend="CFBSD-device-probe"/>).  In case of doubt, assume that everything will be OK.  It
might be easier to restart the installation than work your way through the
menus.
</para>

<para>Shortly after you leave UserConfig, the screen will be cleared and you will see
the main <emphasis>sysinstall</emphasis> menu (in colour, if your system supports it).
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Using sysinstall</title>

<para><anchor id="CFBSD-sysinstall-main"/>
<indexterm><primary>sysinstall</primary><secondary>using</secondary></indexterm>
<indexterm><primary>FAQ/Text</primary></indexterm>
</para>

<para><figure><title>Main installation menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<!--  XXX .pageref \*[main-installation-menu] "on page \*[main-installation-menu]" -->
Figure <xref linkend="CFBSD-main-installation-menu"/> shows the main <emphasis>sysinstall</emphasis> menu.
<emphasis>sysinstall</emphasis> includes on-line help at all stages.  Simply press <keycap>F1</keycap>
and you will get appropriate help.  Also, if you haven't been here before, the
<emphasis>Doc</emphasis> menu gives you a large part of the appropriate information from the
handbook.
</para>
<sect2>
<title>Kinds of installation</title>

<para><indexterm><primary>standard</primary><secondary>installation</secondary></indexterm>
<indexterm><primary>express</primary><secondary>installation</secondary></indexterm>
<indexterm><primary>custom</primary><secondary>installation</secondary></indexterm>
<indexterm><primary>installation</primary><secondary>standard</secondary></indexterm>
<indexterm><primary>installation</primary><secondary>express</secondary></indexterm>
<indexterm><primary>installation</primary><secondary>custom</secondary></indexterm>
To get started, you select one of <emphasis>Standard</emphasis>, <emphasis>Express</emphasis> or
<emphasis>Custom</emphasis>.  The names imply that the <emphasis>Standard</emphasis> installation is the
best way to go, the <emphasis>Express</emphasis> installation is for people in a hurry, and
<emphasis>Custom</emphasis> installation is for you if you want to specify exactly what is to
be done.
</para>

<para>In fact, the names are somewhat misleading.  There isn't really that much
difference between the three forms of installation.  They all perform the same
steps:
</para>
<itemizedlist>
<listitem>

<para>Possibly set up options.
</para>
</listitem>
<listitem>

<para>Set up disk partitions, which we'll discuss in the next section.
</para>
</listitem>
<listitem>

<para>Set up file systems and swap space within a FreeBSD slice, which we start on
page
</para>
</listitem>
<listitem>

<para>Choose what you want to install, which we discuss on page
</para>
</listitem>
<listitem>

<para>Choose where you want to install it from.  We'll look at this on page
</para>
</listitem>
<listitem>

<para>Actually install the software.  We'll treat this on page
</para>
</listitem>
</itemizedlist>

<para>We looked at disk partitions and file systems on page <xref linkend="CFBSD-partitions"/>.  We'll
look at the other points when we get to them.
</para>

<para>So what's the difference?
</para>
<itemizedlist>
<listitem>

<para>The Standard installation takes you through these steps in sequence.  Between
each step, you get a pop-up window which tells you what is going to happen next.
</para>
</listitem>
<listitem>

<para>The Express installation also takes you through these steps in sequence.  The
main difference is that you don't get the pop-up window telling you what is
going to happen next.  This can save a little time.  If you do want the
information, similar information is available with the F1 key.
</para>
</listitem>
<listitem>

<para>The Custom installation returns you to its main menu after each step.  It's up
to you to select the next step.  You can also select another step, or go back to
a previous one.  Like the Express installation, you don't get the pop-up
information window, but you can get more information with the F1 key.
</para>
</listitem>
</itemizedlist>

<para>The big problem with Standard and Express installations is that they don't let
you back up: if you pass a specific step and discover you want to change
something, you have to abort the installation and start again.  With the Custom
installation, you can simply go back and change it.  As a result, I recommend
the Custom installation.  In the following discussion, you won't see too much
difference: the menus are the same for all three installation forms.
</para>

<para><figure><title>Custom Installation options</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
</sect1>
<sect1>
<title>Setting installation options</title>

<para>The first item on the menu is to set installation options.  You only have this
option if you're using the Custom installation, and in fact there's probably not
too much you'll want to change.
</para>

<para><figure><title>Custom Installation options</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
About the only thing of interest might be the editor <emphasis>ec</emphasis>, which is a
compromise between a simple editor for beginners and more complicated editors
like <emphasis>vi</emphasis>.  If you're planning to edit anything during the installation, for
example the file <emphasis>/etc/exports</emphasis>, which we'll look at on page
<xref linkend="CFBSD-etc-exports"/>, you may prefer to set an editor with which you are familiar.
Select the fields by moving the cursor to the line and pressing the space bar.
</para>
</sect1>
<sect1>
<title>Creating space on disk</title>

<para><indexterm><primary>partition</primary><secondary>table</secondary></indexterm>
<indexterm><primary>disks</primary><secondary>creating file systems</secondary></indexterm>
<indexterm><primary>disks</primary><secondary>creating space</secondary></indexterm>
<anchor id="CFBSD-building-partition-table"/>
The first installation step is to set up space for FreeBSD on the disk.  We
looked at the technical background in <xref linkend="CFBSD-chconcepts"/>, page
In this section, we'll use the term <emphasis>partition</emphasis> to refer to a slice or
Microsoft partition, since that's the usual terminology, even if it's a little
confusing.
</para>

<para><indexterm><primary>partition</primary></indexterm>
Even if your disk is correctly partitioned, select <emphasis>Partition</emphasis>: the
installation routines need to enter this screen in order to read the partition
information from the disk.  If you like what you see, you can leave again
immediately with <emphasis>q</emphasis> (quit), but you must first enter this menu.  If you
have more than one disk connected to your machine, you will next be asked to
choose the drives that you want to use for FreeBSD:
</para>

<para><figure><title>Disk selection menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>ad0</primary></indexterm>
This screen shows entries for each drive that <emphasis>sysinstall</emphasis> has detected;
in this example, the system has one ATA (IDE) drive, <emphasis>ad0</emphasis>, and one SCSI
drive, <emphasis>da0</emphasis>.  You only get this screen if you have at least two drives
connected to your machine; otherwise <emphasis>sysinstall</emphasis> automatically goes to
the next screen.
</para>

<para>If you intend to use more than one disk for FreeBSD, you have the choice of
setting up all disks now, or setting the others up after the system is up and
running.  We'll look at the latter option in <xref linkend="CFBSD-chdisks"/>, on page
As you'll see there, it's <emphasis>much</emphasis> easier to do it now.
</para>

<para>To select the disk on which you want to install FreeBSD, move the cursor to the
appropriate line and press the space bar.  The screen you get will probably have
contents like this:
</para>

<para><figure><title>Partition editor menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
Table
explains the meanings of the columns in this display.  This display shows the
current partition table on our Western Digital Caviar 2200 disk drive, one of
the smallest disks that you could use to install FreeBSD on.  The first
partition contains the Master Boot Record, which is exactly one sector long, and
the bootstrap, which can be up to 15 sectors long.  The partitioning tools use
the complete first track: note that the geometry information from BIOS says that
it has 35 sectors per track.
<table frame='all'><title>fdisk information</title>
box,center,tab(#) ;
| lfCWp9w8 | lw66 | .
\s10Column#description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>fat</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>file</primary><secondary>allocation table</secondary></indexterm>
<row><entry> Offset</entry><entry> the number of the first sector in the partition
</entry></row>
<row><entry> Size</entry><entry> the length of the partition in sectors
</entry></row>
<row><entry> End</entry><entry> the number of the last sector in the partition
</entry></row>
<row><entry> Name</entry><entry> where present, this is the name by which FreeBSD knows the partition.  In this example, only the second entry has a name.
</entry></row>
<row><entry> Ptype</entry><entry> the partition type.  Partition type 6 is the Master Boot Record, which is exactly one track long (note that the header says that this drive has 63 sectors per track).  Type 2 is a regular partition.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fat</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>File</primary><secondary>Allocation Table</secondary></indexterm>
<row><entry>  Subtype Desc </entry><entry> These describe the type of partition numerically and in text.  <emphasis>fat</emphasis> stands for <emphasis>File Allocation Table</emphasis>, which is a central part of the Microsoft disk space allocation strategy.  In more general terms, we can say that the first partition is a Microsoft file system.
</entry></row>
<row><entry> Flags</entry><entry>can be one or more of the following characters:
</entry></row>
<row><entry>
</entry></row>
<row><entry> </entry><entry><emphasis>=</emphasis>  The partition is correctly aligned
</entry></row>
<row><entry> </entry><entry> <emphasis>&gt;</emphasis>  The partition finishes after cylinder 1024, which can cause problems for Microsoft.  </entry><entry><emphasis>A</emphasis>  This is the active (bootable) partition.
</entry></row>
<row><entry> </entry><entry><emphasis>B</emphasis>  The partition employs BAD144 bad-spot handling.
</entry></row>
<row><entry> </entry><entry><emphasis>C</emphasis>  This is a FreeBSD compatibility partition.
</entry></row>
<row><entry> </entry><entry><emphasis>R</emphasis>  This partition contains a root file system.
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>

<para><anchor id="CFBSD-death-to-Microsoft"/>
In our case, the Microsoft file system uses up the whole disk except for the
last track, 630 sectors (315 kB) at the end of the disk.  Clearly there's not
much left to share.  We could shorten the Microsoft partition with
<emphasis>FIPS</emphasis>&mdash;see <xref linkend="CFBSD-chshareinstall"/>, page
if that's what you want to do&mdash;but in this example we choose to remove it.
</para>
<note>

<para>Don't forget that if you remove a partition, you lose all the data in it.  If
the partition contains anything you want to keep, make sure you have a legible
backup.
</para>
</note>

<para>We remove the partition with the <emphasis>d</emphasis> command.  After this, our display
looks like:
</para>
<programlisting>
0   40088160   40088159        -      6     unused        0
</programlisting>

<para>The next step is to allocate a FreeBSD partition with the <emphasis>C</emphasis> command.
There are two ways to do this: if we want to have more than one partition on the
drive (for example, if we
share the disk with another operating system), we will use the <emphasis>c</emphasis>
(create) command.  We'll look at that in <xref linkend="CFBSD-chshareinstall"/>, page
<xref linkend="CFBSD-createpartition"/>.  In our case, though, we want to use the entire disk for
FreeBSD, so we choose the <emphasis>a</emphasis> option:
</para>

<para><figure><title>Partition editor menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
If you answer <emphasis>Yes</emphasis> to this question, you will get a display effectively
the same as in Figure <xref linkend="CFBSD-partition-editor-menu"/>: the only difference will be
that the <emphasis>Desc</emphasis> field will now show <emphasis>freebsd</emphasis> instead of <emphasis>fat</emphasis>.
If you select <emphasis>No</emphasis>, you will get the following display:
</para>

<para><figure><title>Partition editor menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
This layout gives you slightly more space: it omits the partition table and the
630 sectors of waste space at the end.
</para>

<para>So why should you ever want to do it the other way?  There's a lot of discussion
in the FreeBSD community about this issue.  The problem is that the partition
table doesn't only contain partition information, it also describes the geometry
of the disk to the BIOS.  Some BIOSes have great difficulty with disks which
don't contain a partition table.  As a result, you may not be able to boot from
a disk which is partitioned in this way.  Some people use the somewhat
emotionally charged term <emphasis>dangerously dedicated</emphasis> to refer to a drive
partitioned in this way.
</para>

<para>How often is this a problem?  I have never experienced problems with this kind
of partition; others report problems, and it's likely that there are particular
problems in this area with laptops.  But it only affects the boot disk: FreeBSD
doesn't have any problems with dedicated disks, so you can always use this
method for drives other than the boot disk.
</para>

<para><indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
<indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>boot</primary><secondary>selector</secondary></indexterm>
<indexterm><primary>MBR</primary></indexterm>
<indexterm><primary>master</primary><secondary>boot record</secondary></indexterm>
<anchor id="CFBSD-bootmgr"/>
That's all we need to do here: we leave <emphasis>fdisk</emphasis> with the <emphasis>q</emphasis>
command.
</para>
<note>

<para>Don't use the <emphasis>W</emphasis> (Write Changes) command here.  It's intended for use
only once the system is up and running.
</para>
</note>

<para>If we have selected a partition table, the next screen asks what kind of <emphasis>boot
selector</emphasis> (in other words, <emphasis>MBR</emphasis>) we want:
</para>

<para><figure><title>Partition editor menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>BootMgr</primary></indexterm>
You don't get this screen if you dedicate the entire disk to FreeBSD, by
answering <emphasis>No</emphasis> to the question about a true partition entry.  Since we
plan to have only one operating system on this disk, we select <emphasis>Standard</emphasis>.
If we were sharing with, say, Microsoft, we could choose <emphasis>BootMgr</emphasis>
instead.
<anchor id="CFBSD-select-mbr"/>
<table frame='all'><title>MBR choices</title>
box,center,tab(#) ;
lfCWp9 | lw66 .
\s10Choice#Description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>booteasy</primary></indexterm>
<row><entry> BootMgr</entry><entry> Install the FreeBSD boot manager in the MBR.  This will enable you choose which partition to boot every time you start the system.
</entry></row>
<row><entry> Standard</entry><entry> Use a standard MBR.  You will only be able to boot from the active partition.
</entry></row>
<row><entry> None</entry><entry> Don't change the MBR.  This is useful if you already have another boot manager installed.
</entry></row>
</tbody></tgroup></table>
</para>
<sect2>
<sect3>
<title>Where we are now</title>

<para>At this point in the installation, we have told <emphasis>sysinstall</emphasis> the overall
layout of the disk or disks you intend to use for FreeBSD, and whether or how
you intend to share them with other operating systems.  The next step is to
specify how you want to use the FreeBSD partitions.
</para>
</sect3>
</sect2>
<sect2>
<title>Specifying disk labels</title>

<para><indexterm><primary>disk</primary><secondary>label</secondary></indexterm>
<anchor id="CFBSD-disklabel-editor"/>
<indexterm><primary>/usr</primary></indexterm>
In the next step we tell the installation program what to put in our FreeBSD
partition.  By default, <emphasis>sysinstall</emphasis> gives you three file systems: the
root file system <emphasis>/</emphasis>, <emphasis>/usr</emphasis> and <emphasis>/var</emphasis>.  See <xref linkend="CFBSD-chdisks"/>, page
for the reasoning behind the file system layout.  When we select <emphasis>Label</emphasis>, we
get the following screen:
</para>

<para><figure><title>Label editor menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<sect3>
<title>What size partitions?</title>

<para>In our example, we have 20 GB of space to divide up.  How should we do it?  You
don't have to worry about this issue, since <emphasis>sysinstall</emphasis> will do it for
you if you ask it, but we'll see below why this might not be the best choice.
In this section we'll consider how UNIX file systems have changed over the
years, and we'll look at the issues in file system layout nowadays.
</para>

<para>When UNIX was young, disks were tiny.  By the time of the Third Edition of UNIX,
in 1972, the system disk was a Digital RF-11, a fixed head disk with 512 kB.  It
was no longer possible to keep the entire system on this disk, so a second file
system became essential.  It was mounted on a Digital RK03 with 2 MB of
storage.  To quote from a paper published in the <emphasis>Communications of the
ACM</emphasis> in July 1974:
</para>
<note>

<para>In our installation, for example, the root directory resides on the fixed-head
disk, and the large disk drive, which contains user's files, is mounted by the
system initialization program...
</para>
</note>

<para></para>

<para>As time went on, UNIX got bigger, but so did the disks.  By the early 80s, disks
were large enough to put <emphasis>/</emphasis> and <emphasis>/usr</emphasis> on the same disk, and it
would have been possible to merge <emphasis>/</emphasis> and <emphasis>/usr</emphasis>, but they didn't.
Since that time, an additional file system, <emphasis>/var</emphasis>, has come into common use
for frequently changed data.  This is what <emphasis>sysinstall</emphasis> does by default:
</para>

<para><figure><title>Default disk partition sizes</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
It's relatively simple to estimate the size of the root file system, and
<emphasis>sysinstall</emphasis>'s value of 50 MB is fine.  But what about <emphasis>/var</emphasis>?  20 MB
isn't worth the trouble any more.  In fact, both file systems put together would
be lost in the 19 GB of <emphasis>/usr</emphasis> file system.  Why do we still do things
this way?  Let's look at the advantages and disadvantages:
</para>
<itemizedlist>
<listitem>

<para>If you write to a file system, a system crash can have serious consequences for
the data integrity of that file system.
</para>
</listitem>
<listitem>

<para>If you have a crash and lose the root file system, recovery can be difficult.
</para>
</listitem>
<listitem>

<para>If a file system fills up, it can cause lots of trouble.  Most messages about
file systems on the <emphasis>FreeBSD-questions</emphasis> mailing list are complaining about
file systems filling up.  If you have a large number of small file systems, the
chances are higher that one will fill up while space remains on another.
</para>
</listitem>
<listitem>

<para>In single-user mode, only the root file system is mounted.  With the classical
layout, this means that the only programs you can run are those in <emphasis>/bin</emphasis>
and <emphasis>/sbin</emphasis>.  In order to run any other programs, you must first mount the
file system on which they are located.
</para>
</listitem>
<listitem>

<para>It's nice to keep your personal files separate from the system files.  That way
you can upgrade a system much more easily.
</para>
</listitem>
<listitem>

<para>It's very difficult to calculate the sizes of some file systems.  For example,
on some systems <emphasis>/var</emphasis> can be very small, maybe only 2 or 3 MB.  It's
hardly worth making a separate file system for that much data.  On the other
hand, other systems, such as ftp or web servers, may have a <emphasis>/var</emphasis> system
of 50 or 100 GB.  How do you choose the correct size for your system?
</para>
</listitem>
<listitem>

<para>When doing backups, it's a good idea to be able to get a file system on a single
tape.
</para>
</listitem>
</itemizedlist>

<para>In the early days of UNIX, system crashes were relatively common, and the damage
they did to the file systems was relatively serious.  Times have changed, and
nowadays file system damage is relatively seldom, particularly on file systems
that have little activity.  On the other hand, disk drives have grown beyond
most peoples' wildest expectations.  The first edition of this book, only five
years ago, showed how to install on a 200 MB drive.  The smallest disk drives in
current production are 10 GB in size, more than will fit on many tapes.
</para>

<para>As a result of these considerations, I have changed my recommendations.  In
earlier editions of this book, I recommended to put a small root file system and
a <emphasis>/usr</emphasis> file system on the first (or only) disk on the system.
<emphasis>/var</emphasis> was to be a symbolic link to <emphasis>/usr/var</emphasis>.
</para>

<para>This is still a valid layout, but it has a couple of problems:
</para>
<itemizedlist>
<listitem>

<para>In the example we're looking at, <emphasis>/usr</emphasis> is about 19 GB in size.  Not many
people have backup devices which can write this much data on a single medium.
</para>
</listitem>
<listitem>

<para>Many people had difficulty with the symbolic link to <emphasis>/usr/var</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>As a result, I now recommend:
</para>
<itemizedlist>
<listitem>

<para>Make a single root file system of between 2 and 4 GB.
</para>
</listitem>
<listitem>

<para>Do not have separate <emphasis>/usr</emphasis> or <emphasis>/var</emphasis> file systems.
</para>
</listitem>
<listitem>

<para>Use the rest of the space on disk for a <emphasis>/home</emphasis> file system, as long as
it's possible to back it up on a single tape.  Otherwise make multiple file
systems.  <emphasis>/home</emphasis> is the normal directory for user files.
</para>
</listitem>
</itemizedlist>

<para>This layout allows for easy backup of the file systems, and it also allows for
easy upgrading to a new system version: you just need to replace the root file
system.  It's not perfect, though: on a web server you probably wouldn't want to
put <emphasis>/var</emphasis> on the root file system.
XXX

It
seems that the issue here was reliability: the system was laid out in such a way
that the system could still come up in single user mode if <emphasis>/</emphasis> was
undamaged, so it made sense to have a small root file system, on which little
data was written, and a larger <emphasis>/usr</emphasis> file system which included file
systems which changed more frequently.
</para>

<para>In fact, this never quite happened.  UNIX has a directory <emphasis>/tmp</emphasis> for small
quantities of temporary data, and a very large number of systems put this
directory on the root file system.

1.  If you have a crash, the fsck time can be considerable.  I don't
    know if it's any worse than fsck'ing several smaller file systems
    with the same total size, however.

2.  Backing up and restoring can be a challenge.  I've tended to say
    "don't make your file systems larger than your tapes", but there
    are exceptions, especially if you can back up at the subdirectory
    level.  For the same reason, multi-reel backups can be
    counterproductive.  If for some reason you accidentally delete a
    file and need to restore it from tape, you may find it takes 8
    hours or longer, reading through tapes you don't need to look at.

        1) if you fill up 1 partition, you still have space elsewhere
        2) if a partition for some reason gets scrogged, the others
        will still work.
        On many systems, /usr can be read-only for all practical purposes,
        with /usr/tmp on a writable system.



In the examples above, we've made severe compromises to get the system on the
tiny disk.  We've assumed that we can get the root file system in 20 MB, and
that 32 MB of swap space is a good value.  In fact, most modern disks are an
order of magnitude larger than this disk.  What do we use?
</para>

<para>We've already seen how big to make <emphasis>/usr</emphasis>: it's the rest of the disk.  The
root file system is kept separate mainly for reasons of superstition: in the old
days, when systems were less reliable, it was a good idea to keep the root file
system separate in order to recover a crashed file system. Since it's uncommon
to write to the root file system, it's also relatively unlikely that it will be
damaged during a crash.  Nowadays crashes are very rare, and FreeBSD provides
other methods of crash recovery (see page <xref linkend="CFBSD-recovery"/>), so the separate root
file system is not really necessary.  In this case it might be a better idea to
have only one file system and swap.
</para>

<para>If you do have a separate root file system, it doesn't need to be very big, but
the size is increasing.  A better size would be 30 MB.  If you're doing kernel
development, you'll probably want to put in a couple of debug kernels at 10 MB
apiece, so you could easily justify an 80 MB root file system in such cases.
</para>
</sect3>
<sect3>
<title>How much swap space?</title>

<para><indexterm><primary>swap</primary><secondary>space</secondary></indexterm>
<anchor id="CFBSD-how-much-swap"/>
Apart from files, you should also have at least one swap partition on your disk.
It's very difficult to predict how much swap space you need.  The
<emphasis>automatic</emphasis> option gave us 522 MB, slightly more than twice the size of
physical memory.  Maybe you can get by with 64 MB.  Maybe you'll need 2 GB.  How
do you decide?
</para>

<para>It's almost impossible to know in advance what your system will require.  Here
are some considerations:
</para>
<itemizedlist>
<listitem>

<para>Swap space is needed for all pages of virtual memory which contain data that is
not locked in memory and which can't be recreated automatically.  This is the
majority of virtual memory in the system.
</para>
</listitem>
<listitem>

<para>Some people use rules of thumb like ``2.5 times the size of physical memory, or
64 MB, whichever is bigger''.  These rules work only by making assumptions about
your workload.  If you're using more than 2.5 times as much swap space as
physical memory, performance will suffer.
</para>
</listitem>
<listitem>

<para>Known memory hogs are X11 and integrated graphical programs such as NetScape and
StarOffice.  If you use these, you will probably need more swap space.  Older
UNIX-based hogs such as Emacs and the GNU C compiler (<emphasis>gcc</emphasis>) are not in
the same league.
</para>
</listitem>
<listitem>

<para>You can add additional swap partitions on other disks.  This has the additional
advantage of balancing the disk load if your machine swaps a lot.
</para>
</listitem>
<listitem>

<para>About the only ways to change the size of a swap partition are to add another
partition or to reinstall the system, so if you're not sure, a little bit more
won't do any harm, but too little can really be a problem.
</para>
</listitem>
<listitem>

<para>If your system panics, and memory dumping is enabled, it will write the contents
of memory to the swap partition.  This will obviously not work if your swap
partition is smaller than main memory.  Under these circumstances, the system
refuses to dump, but it's not impossible that a bug might cause the dump to
write beyond the bounds of the swap partition, probably causing irreperable
damage to your <emphasis>/usr</emphasis> partition.
</para>
</listitem>
<listitem>

<para>Even with light memory loads, the virtual memory system slowly pages out data in
preparation for a possible sudden demand for memory.  This means that it can be
more responsive to such requests.  As a result, you should have at least as much
swap as memory.
</para>
</listitem>
</itemizedlist>

<para>A couple of examples might make this clearer:
</para>
<itemizedlist>
<listitem>

<para>I used to run <emphasis>X</emphasis>, <emphasis>StarOffice</emphasis>, <emphasis>Netscape</emphasis> and a whole lot of
other memory-hungry applications on an old 486 with 16 MB.  Sure, it's really
slow, especially when changing from one application to another, but it works.
Since there's not much memory, it uses a lot of swap.
</para>

<para><indexterm><primary>command</primary><secondary>pstat</secondary></indexterm>
<indexterm><primary>pstat</primary><secondary>command</secondary></indexterm>
To view the current swap usage, use <emphasis>pstat</emphasis>.  Here's a typical view of this
machine's swap space:
</para>
<programlisting>
$ <command>pstat -s</command>
Device          1024-blocks     Used    Avail Capacity  Type
/dev/da0s1b          122880    65148    57668    53%    Interleaved
</programlisting>

<para></para>
</listitem>
<listitem>

<para>I now run much more stuff on an AMD Athlon with 256 MB of memory.  I've got lots
of swap space, but what I see is:
</para>
<programlisting>
$ <keycap> pstat -s</keycap>
Device          1024-blocks     Used    Avail Capacity  Type
/dev/ad0s1b          524020    22328   501692     4%    Interleaved
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para>It's not so important that the Athlon is using less swap: it's using 9% of its
memory in swap, whereas the 486 is using 4 times its memory.  In a previous
edition of this book, I had the example of a Pentium with 96 MB of memory, which
used 43 MB of swap.  Look at it from a different point, and it makes more sense:
swap makes up for the lack of real memory, so the 486 is using a total of 80 MB
of memory, the Pentium is using 140 MB, and the Athlon is using 280 MB.  In
other words, there is a tendency to be able to say ``the more main memory you
have, the less swap you need''.
</para>

<para>If, however, you look at it from the point of view of acceptable performance,
you will hear things like ``you need at least one-third of your virtual memory
in real memory''.  That makes sense from a performance point of view, assuming
all processes are relatively active.  And, of course, it's another way of saying
``take twice as much swap as real memory''.
</para>

<para>In summary: be generous in allocating swap space.  In this example, we have a
tiny disk, so we're forced to use a small swap partition.  If you have the
choice, use more.  If you really can't make up your mind, take 512 MB of swap
space.
</para>

<para><indexterm><primary>UNIX</primary><secondary>File System</secondary></indexterm>
<indexterm><primary>Mount</primary></indexterm>
<indexterm><primary>Newfs</primary></indexterm>
<indexterm><primary>UFS</primary></indexterm>
For the file systems, the column <emphasis>Mount</emphasis> now shows the mount points, and
<emphasis>Newfs</emphasis> contains the letters <emphasis>UFS</emphasis> for <emphasis>UNIX File System</emphasis>,
and the letter <emphasis>Y</emphasis>, indicating that we need to create a new file system
before we can use it.
At this point, we have two choices: decide for ourselves what we want, or let
the disk label editor do it for us.  Let's look at both ways:
</para>
</sect3>
<sect3>
<title>Creating the file systems</title>

<para>With these considerations in mind, we'll divide up the disk in the following
manner:
</para>
<itemizedlist>
<listitem>

<para>4 GB for the root file system, which includes <emphasis>/usr</emphasis> and <emphasis>/var</emphasis>.
</para>
</listitem>
<listitem>

<para>512 MB swap space.
</para>
</listitem>
<listitem>

<para>The rest of the disk for the <emphasis>/home</emphasis> file system.
</para>
</listitem>
</itemizedlist>

<para>To create a file system, we press <emphasis>c</emphasis>.  We get a prompt window asking for
the size of the file system, and offering the entire space.  We enter the size
of the root file system:
</para>

<para>When we press ENTER, we see another prompt asking for the kind of partition.  We
select <emphasis>A File System</emphasis>:
</para>

<para>When we press ENTER, we see another prompt asking for the mount point for the
file system.  We enter <emphasis>/</emphasis> for the root file system, after which the
display looks like:
</para>

<para>After we press ENTER again, the display shows:
</para>

<para>Next, we repeat the operation for the swap partition and the <emphasis>/home</emphasis> file
system, entering the appropriate values each time.  We don't change the value
offered for the length of <emphasis>/home</emphasis>: we just use all the remaining space.
At the end we have:
</para>

<para></para>
</sect3>
<sect3>
<title>Second time through</title>

<para>If you have already started an installation and aborted it for some reason after
creating the file systems, things will look a little different when you get
here.  The label editor will find the partitions, but it won't know the name of
the mount points, so the text under <emphasis>Mount</emphasis> will be <emphasis>&lt;none&gt;</emphasis>.  Under
<emphasis>Newfs</emphasis>, you will find an asterisk (<emphasis>*</emphasis>) instead of the text
<emphasis>UFS Y</emphasis>.  The label editor has found the partitions, but it doesn't know
where to mount the file systems.  Before you can use them, you <emphasis>must</emphasis> tell
the label editor the types and mount points of the UFS partitions.  To do this:
</para>
<itemizedlist>
<listitem>

<para>Position the cursor on each of the partitions in turn.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/home
</primary></indexterm>
<indexterm><primary>Mount</primary></indexterm>
<indexterm><primary>Newfs</primary></indexterm>
Press <emphasis>m</emphasis> (Mount).  A prompt window will pop up asking you to specify the
mount point.  Enter the name of the mount point, in this example, first
<emphasis>/</emphasis>, then press return.  The label editor will enter the name of the mount
point under <emphasis>Mount</emphasis>, and under <emphasis>Newfs</emphasis> it will enter <emphasis>UFS
N</emphasis>&mdash;it knows that this is a UFS file system, so it will just check its
consistency, not overwrite it.  Repeat this procedure for <emphasis>/home</emphasis>, and
you're done.
<anchor id="CFBSD-dos-mount-point"/>
If you are sharing your disk with another system, you can also use this method
to specify mount points for your Microsoft file systems.  Simply select the Microsoft
partition and specify the name of a mount point.
</para>
</listitem>
<listitem>

<para><indexterm><primary>command</primary><secondary>fsck</secondary></indexterm>
<indexterm><primary>fsck</primary><secondary>command</secondary></indexterm>
Unless you are very sure that the file system is valid, and you really want to
keep the data in the partitions, press <emphasis>t</emphasis> to specify that the file system
should be created.  The <emphasis>UFS N</emphasis> will change to <emphasis>UFS Y</emphasis>.  If you
leave the <emphasis>N</emphasis> there, the commit phase will check the integrity of the file
system with <emphasis>fsck</emphasis> rather than creating a new one.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
<sect3>
<title>Where we are now</title>

<para>When you get to this point in the installation, you have told <emphasis>sysinstall</emphasis>
everything it needs to know about the layout of the disk or disks you intend to
use for FreeBSD.  Next, you tell it what you want to put on the disks.
</para>
</sect3>
</sect2>
<sect2>
<title>Selecting distributions</title>

<para><indexterm><primary>distributions</primary><secondary>selecting</secondary></indexterm>
<anchor id="CFBSD-select-distribution"/>
The next step is to decide what to install.  Figure <xref linkend="CFBSD-select-distribution-menu"/>
<!--  XXX fix refs .pageref \*[select-distribution-menu-page]  "on page \*[select-distribution-menu-page] " -->
shows us the menu we get when we enter <emphasis>Distributions</emphasis>.  A complete
installation of FreeBSD will use about 1 GB of space, so there's little reason
to choose anything else.  We position the cursor on the line <emphasis>All</emphasis>, as
shown, and press the space bar.
</para>

<para><figure><title>Distribution selection menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<note>

<para>Why press the space bar when so far we have been pressing ENTER?  Because in
this particular menu, ENTER will return you to the upper level menu or simply
continue to the media selection menu, depending on the type of installation
you're doing.  It's one of the strangenesses of <emphasis>sysinstall</emphasis>.
</para>
</note>

<para>The next menu is
XXXX  See what's up with crypto.
</para>

<para>Next, you see the message:
</para>

<para>We'll look at the Ports Collection in <xref linkend="CFBSD-chports"/>.  You don't have to install
them now, and it takes much more time than you would expect from the amount of
space that it takes: the Ports Collection consists of about 140,000 very small
files, and copying them to disk can take as long as the rest of the installation
put together.
</para>

<para>Whatever you answer to this question, you are returned to the distribution menu
of figure <xref linkend="CFBSD-select-distribution-menu"/>.  Press ENTER again, and you're done
selecting your distributions.
</para>
<note>

<para>Earlier versions of <emphasis>sysinstall</emphasis> asked you questions about XFree86 at this
point.  Nowadays we do that after completing the installation.
</para>
</note>

<para></para>

<para><figure><title>Installation medium menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<sect3>
<title>Where we are now</title>

<para>Now <emphasis>sysinstall</emphasis> knows the layout of the disk or disks you intend to use
for FreeBSD, and what to put on them.  Next, you specify where to get the data
from.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Selecting the installation medium</title>

<para><indexterm><primary>installation</primary><secondary>medium</secondary></indexterm>
<anchor id="CFBSD-select-medium"/>
<indexterm><primary>menu</primary><secondary>media</secondary></indexterm>
The next thing we need to specify is where we will get the data from.  Where you
go now depends on your installation medium.  Figure <xref linkend="CFBSD-medium-menu"/> shows the
<emphasis>Media</emphasis> menu.  If you're installing from anything except an FTP server or
NFS, you just need to select your medium and then commit the installation, which
we look at on page
</para>
<sect2>
<title>Installing via FTP</title>

<para>Figure <xref linkend="CFBSD-ftp-server-menu"/>
<!-- XXX .pageref \*[ftp-server-menu-page] "on page \*[ftp-server-menu-page]" -->
shows the menu you get when you select <emphasis>FTP</emphasis> or <emphasis>FTP Passive</emphasis>.
</para>

<para><figure><title>Selecting FTP server</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>/usr/ftp</primary></indexterm>
<indexterm><primary>/pub/FreeBSD/\*[Fver]-RELEASE</primary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<anchor id="CFBSD-install-set-hostname"/>
To see the remainder of the sites, use the <keycap>PageDown</keycap> key.  We want to
install from <emphasis>presto</emphasis>, a system on the local network.  <emphasis>presto</emphasis> isn't
on this list, of course, so we select <emphasis>URL</emphasis>.  Another menu appears, asking
for an ftp pathname in the URL form <emphasis>ftp://<emphasis>hostname<emphasis>/<emphasis>pathname</emphasis></emphasis>.
<emphasis>hostname</emphasis> is the name of the system, in this case
<emphasis>presto.example.org</emphasis>, and <emphasis>pathname</emphasis> is the path relative to the
anonymous ftp directory, which on FreeBSD systems is usually <emphasis>/usr/ftp</emphasis>.
The install program knows its version number, and it attaches it to the name you
supply.
</para>
<note>

<para>You can change the version number from the options menu, for example in order to
install a snapshot of a newer release of FreeBSD.
</para>
</note>

<para>In this case, we're installing version <xref linkend="CFBSD-Fver"/> of FreeBSD, and it's in the
directory <emphasis>/pub/FreeBSD/<xref linkend="CFBSD-Fver"/>-RELEASE</emphasis>.  <emphasis>sysinstall</emphasis> knows the
<emphasis><xref linkend="CFBSD-Fver"/>-RELEASE</emphasis>, so we enter only
<emphasis>ftp://presto.example.org/pub/FreeBSD</emphasis>.  The next menu asks us to configure
our network.  This is the same menu which we would normally fill out at the end
of the installation&mdash;see page
for details.
</para>

<para>This information will be used to set up the machine after installation, so it
pays to fill out this information correctly.  You don't have to fill in
everything, though: for example, you won't need a gateway to access
<emphasis>presto</emphasis> from <emphasis>freebie</emphasis>, since they're both on the same local net.
</para>

<para>After entering this information, you continue with <emphasis>Commit</emphasis> (below).
</emphasis></emphasis></para>
</sect2>
<sect2>
<title>Installing via NFS</title>

<para>We considered the prerequisites for NFS installation on page
<xref linkend="CFBSD-nfs-install-setup"/>.  All you need to do at this point is to give this
information to <emphasis>sysinstall</emphasis>, as shown in figure <xref linkend="CFBSD-nfs-install-menu"/>.  After
entering this information, <emphasis>sysinstall</emphasis> will ask you to configure an
interface.  This is the same procedure which you would otherwise do after
installation&mdash;see page <xref linkend="CFBSD-net-setup"/>.  After performing this configuration,
you continue with <emphasis>Commit</emphasis> (below).
</para>

<para><figure><title>Specifying NFS file system</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
<sect2>
<title>Installing from floppy disk</title>

<para><anchor id="CFBSD-brain-dead-floppy-install"/>
Installation from floppy disk is definitely the worst choice you have.  You will
need lots of floppies, and the chance of one of them being bad is high.  We
looked at how to prepare floppies for installation in <xref linkend="CFBSD-chconcepts"/>, page
<indexterm><primary>floppy</primary></indexterm>
The installation itself is straightforward enough: select <emphasis>Floppy</emphasis> and
follow the prompts.
</para>
<sect3>
<title>Where we are now</title>

<para>Now <emphasis>sysinstall</emphasis> knows everything it needs to install the software.  It's
just waiting for you to tell it to go ahead.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Performing the installation</title>

<para><anchor id="CFBSD-commit"/>
So far, everything we have done has had no effect on the disk drives.  If you
change your mind at this point, you can just abort the installation, and the
data on your disks will be unchanged.
</para>

<para>That changes completely in the next step, which we call <emphasis>committing</emphasis> the
installation.  Now is the big moment.  We've set up our partitions, decided what
we want to install and from where.  Now we do it.
</para>

<para>If you are installing with the Custom installation, you need to select
<emphasis>Commit</emphasis> explicitly.  The Standard installation asks you if you want to
proceed:
</para>
<programlisting>
Last Chance!  Are you SURE you want continue the installation?

If you're running this on an existing system, we STRONGLY
encourage you to make proper backups before proceeding.
We take no responsibility for lost disk contents!
</programlisting>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
When you answer <emphasis>yes</emphasis>, <emphasis>sysinstall</emphasis> does what we've been preparing
for:
</para>
<itemizedlist>
<listitem>

<para>It creates the partitions and disk partitions.
</para>
</listitem>
<listitem>

<para>It creates the file system structures in the file system partitions, or it
checks them, depending on what you chose in the label editor.
</para>
</listitem>
<listitem>

<para>It mounts the file systems and swap space.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>/dev/ttyv1</primary></indexterm>
At this point, two other virtual terminals become available.  <emphasis>/dev/ttyv1</emphasis>
shows you what's going on behind the scenes.  You can switch to it with
<keycap>ALT-F2</keycap>.  Right at the beginning you'll see a whole lot of error messages
as <emphasis>sysinstall</emphasis> tries to initialize every device it can think of.  Don't
worry about them, they're normal.  To get back to the install screen, press
<keycap>ALT-F1</keycap>.
</para>

<para><indexterm><primary>/dev/ttyv3</primary></indexterm>
In addition, after <emphasis>sysinstall</emphasis> mounts the root file system, it starts an
interactive shell on <emphasis>/dev/ttyv3</emphasis>.  You can use it if something goes wrong,
or simply to watch what's going on while you're installing.  You switch to it
with <keycap>ALT-F4</keycap>.
</para>

<para>After reading in all the files, <emphasis>sysinstall</emphasis> displays further information
messages:
</para>
<programlisting>
Remaking all devices..  Please wait!

Making slice entries

Fixing permissions..
</programlisting>

<para>And we're done!
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
</para>
<sect2>
<sect3>
<title>Where we are now</title>

<para>When we get here, the software has been installed on the disk, but we still need
to customize some information to match our environment.  We'll look at this in
the following sections.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Network services</title>

<para><indexterm><primary>network</primary><secondary>services</secondary></indexterm>
Figure <xref linkend="CFBSD-network-services"/>
<!--  XXX .pageref \*[network-services-page] "on page \*[network-services-page]" -->
shows the Network Services Menu.  You don't see this menu in the Standard and
Express installations: after setting up your network interfaces,
<emphasis>sysinstall</emphasis> presents you with various items from the Network Services
Menu.  The Custom installation presents you with the menu itself.
</para>

<para><figure><title>Network services menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
The first step should always be to set up the network interfaces, so this is
where you find yourself if you are performing a Standard or Express installation.
</para>
<sect2>
<title>Setting up network interfaces</title>

<para><indexterm><primary>network</primary><secondary>interfaces</secondary></indexterm>
<anchor id="CFBSD-net-setup"/>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
Figure <xref linkend="CFBSD-network-setup-menu"/>
<!--  XXX .pageref \*[network-setup-menu-page] "on page \*[network-setup-menu-page]" -->
shows the network setup menu.  If you installed via FTP or NFS, you will already
have set up your network interfaces, and <emphasis>sysinstall</emphasis> won't ask the
questions again.
</para>

<para><figure><title>Network setup menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
The only real network board on this list is <emphasis>ep0</emphasis>, the Ethernet board.  The
others are standard hardware which can also be used as network interfaces.  In
our case, we choose the Ethernet board.  The next menu asks us to set the
internet parameters.  Figure <xref linkend="CFBSD-network-config-menu"/>
<!--  XXX .pageref \*[network-config-menu-page] "on page \*[network-config-menu-page]" -->
shows the network configuration menu after filling in the values.
</para>

<para><figure><title>Network configuration menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
You need to specify the local host name and the domain name separately.  The
names and addresses correspond to the example network that we will look at in
<xref linkend="CFBSD-chnetintro"/>, on page <xref linkend="CFBSD-reference-net-page"/>.  We have chosen to call this
machine <emphasis>presto</emphasis>, and the domain is <emphasis>example.org</emphasis>.  In other words, the
full name of the machine is <emphasis>presto.example.org</emphasis>.  Its IP address is
<emphasis>223.147.37.2</emphasis>.  In this configuration, all access to the outside world
goes via <emphasis>gw.example.org</emphasis>, which has the IP address <emphasis>223.147.37.5</emphasis>.
The name server is located on the same host, <emphasis>presto.example.org</emphasis>.  Since
the name server isn't running when this information is needed, we specify all
addresses in numeric form.
</para>

<para>What happens if you don't have a domain name?  Well, the simple answer is ``go
out and get one''&mdash;see page <xref linkend="CFBSD-domainreg"/>.  But in the meantime, don't fake
it.  Just leave the fields empty.
</para>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
As is usual for a class C network, the net mask is <emphasis>255.255.255.0</emphasis>.  You
don't need to fill in this information&mdash;if you leave this field without
filling it in, <emphasis>sysinstall</emphasis> will insert it for you.  Normally, as in this
case, you wouldn't need any additional options to <emphasis>ifconfig.</emphasis>
</para>
</sect2>
<sect2>
<title>Other network options</title>

<para>You don't need to specify  any of the remaining configuration options during
configuration.  See the online handbook for further details.
</para>
</sect2>
</sect1>
<sect1>
<title>Machine configuration</title>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
The final part of the installation deals with optional setup items.  You don't
need to do any of this right now, but if this is the first time you have
installed FreeBSD, you will probably want to at least add a user.
<!--   XXX Add user  -->
If you're like me, you'll also have a couple of favourite programs that you want
to install, probably including XFree86.  The Express and Standard installations
walk you through these points, while figure <xref linkend="CFBSD-final-config-menu"/>
<!--  XXX .pageref \*[final-config-menu-page] "on page \*[final-config-menu-page]" -->
shows you the menu that Custom installation presents.
</para>

<para><figure><title>Final configuration menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect1>
<sect1>
<title>Rebooting the new system</title>

<para>Finally, it's done.  You exit the main menu by selecting <emphasis>Quit</emphasis>.  Before
you answer the question asking for confirmation, remember to remove the boot
diskette&mdash;otherwise you'll end up rebooting from the floppy instead.  If you
have booted from CD-ROM, either remove the CD-ROM, or reset the boot
configuration in the BIOS before rebooting.
</para>

<para>After that, the system will reboot.  The results look much the same as before,
but this time, instead of going in to the <emphasis>sysinstall</emphasis> menu, it continues to
start up the machine and give you a login prompt.  We're done!
</para>
<sect2>
<title>Where to put <emphasis>/var</emphasis> and <emphasis>/tmp</emphasis> </title>

<para><anchor id="CFBSD-symlink-var"/>
<indexterm><primary>/var</primary></indexterm>
<indexterm><primary>/usr/var</primary></indexterm>
<indexterm><primary>/var</primary></indexterm>
<indexterm><primary>/usr/var</primary></indexterm>
Now the installation is completed, but you may still have some housekeeping to
do.  Did you include a <emphasis>/var</emphasis> file system on your disk?  In the example,
we didn't. If we don't specify anything else, <emphasis>/var</emphasis> will end up on the
root file system, which isn't enormous.  If we leave things like that, there's a
very good chance that the root file system will fill up.  We solve this problem
by creating a directory <emphasis>/usr/var</emphasis> and a symbolic link <emphasis>/var</emphasis> which
points to <emphasis>/usr/var</emphasis>:
</para>
<programlisting>
# <command>mkdir /usr/var</emphasis>					<emphasis>create a new directory</command>
# <command>cd /var</emphasis>							<emphasis>move to the old /var directory</command>
# <command>tar cf - . | (cd /usr/var; tar xf - )</emphasis>	<emphasis>copy its contents</command>
# <command>cd /</emphasis>							<emphasis>get out of the directory</command>
# <command>rm -rf /var</emphasis>						<emphasis>and remove it</command>
# <command>ln -s /usr/var /var</emphasis>				<emphasis>now link to the new directory</command>
</programlisting>

<para>After performing these steps, you might see messages like:
</para>
<programlisting>
Jan  9 13:15:00 myname syslogd: /var/run/utmp: no such file or directory
</programlisting>

<para><indexterm><primary>syslogd</primary></indexterm>
<indexterm><primary>System</primary><secondary>Log d&aelig;gmon</secondary></indexterm>
<indexterm><primary>d&aelig;gmon</primary><secondary>System Log</secondary></indexterm>
<emphasis>syslogd</emphasis> is the System Log d&aelig;gmon.
<footnote>

<para>See page <xref linkend="CFBSD-daemon"/> for a description of d&aelig;gmons.
</para>
</footnote>
Don't worry about these messages.  If you're intending to restart the system
soon, just wait until then and the messages will go away.  Otherwise you can
restart <emphasis>syslogd</emphasis>:
</para>
<programlisting>
# <command>ps waux | grep syslogd</emphasis>				<emphasis>look for the syslog d&aelig;gmon</command>
root	152 11.0  1.6	 176  476   v0	D+     1:16M   0:00.15 grep syslogd
root	 58  0.0  1.1	 184  332   ??	Ds     1:13    0:00:57 syslogd
# <command>kill -9 58</emphasis>						<emphasis>stop the PID of syslogd</command>
# </emphasis><command>syslogd</command>							<emphasis>and start it again
</programlisting>

<para>The PID of the <emphasis>syslogd</emphasis> is the second field on the line which ends with
just <emphasis>syslogd</emphasis>.  The first line is the process which is looking for the
text <emphasis>syslogd</emphasis>.  See <xref linkend="CFBSD-chunixref"/>, page
for more information on stopping processes.
</para>

<para><indexterm><primary>/tmp</primary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<indexterm><primary>/var/tmp</primary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
Programs should not write large files to <emphasis>/tmp</emphasis>; if a program needs to
create a large temporary file, it should create it in <emphasis>/var/tmp</emphasis>.
Unfortunately, the location of the temporary files is not usually in your hands.
It would be tempting to also replace <emphasis>/tmp</emphasis> with a symbolic link to
<emphasis>/var/tmp</emphasis>, but the system handles <emphasis>/tmp</emphasis> and <emphasis>/var/tmp</emphasis>
slightly differently: after a reboot, it removes all files from <emphasis>/tmp</emphasis>, but
it leaves the files in <emphasis>/var/tmp</emphasis>.  You can solve this problem by creating a
directory <emphasis>/usr/tmp</emphasis> and creating a link to it.
</para>

<para>Perform the following steps in single-user mode (see <xref linkend="CFBSD-chunixref"/>, page
for a description of single user mode and how to get into it).
</para>
<programlisting>
# <command>mkdir /usr/tmp</emphasis>					<emphasis>create a new directory</command>
# <command>rm -rf /tmp</emphasis>						<emphasis>and remove the old /tmp</command>
# <command>ln -s /usr/tmp /tmp</emphasis>				<emphasis>now link to the new directory</command>
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Installing FreeBSD on a Compaq AXP (Alpha) system</title>

<para><indexterm><primary>installing</primary><secondary>on Alpha</secondary></indexterm>
<indexterm><primary>Alpha</primary><secondary>installing on</secondary></indexterm>
<anchor id="CFBSD-alpha-install"/>
FreeBSD <xref linkend="CFBSD-Fver"/> includes support for the AXP (Alpha) processor architecture,
but it's not yet of the same standard as for the i386 architecture.  The
following instructions are preliminary: before following them, read the booklet
that came with the CD-ROMs: it's possible that there have been some last-minute
changes.  If all else fails, you can find the latest installable version of
FreeBSD for the alpha at <emphasis>ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/alpha/</emphasis>
or on a mirror site.
</para>

<para>In principle, you perform the same steps to install FreeBSD on the Alpha
architecture that you perform for the Intel architecture.  See page
<xref linkend="CFBSD-alpha-concepts"/> for some differences.
</para>

<para>The easiest type of installation is from CD-ROM.  If you have a supported CD-ROM
drive and a FreeBSD installation CD for Alpha from Walnut Creek CDROM, you can
start the installation by building a set of FreeBSD boot floppy from the files
<emphasis>floppies/kern.flp</emphasis> and <emphasis>floppies/mfsroot.flp</emphasis> as described for the
Intel architecture on page <xref linkend="CFBSD-make-floppy"/>.  Use the CD-ROM marked ``Alpha
installation''.  From the SRM console prompt, insert the <emphasis>kern.flp</emphasis> floppy
and type the following command to start the installation:
</para>
<programlisting>
&gt;&gt;&gt;<command>boot dva0</command>
</programlisting>

<para>Insert the <emphasis>mfsroot.flp</emphasis> floppy when prompted and you will end up at the
first screen of the install program.  You can then continue as for the Intel
architecture on page <xref linkend="CFBSD-boot-install-kernel"/>.
</para>

<para>To install over the net, fetch the floppy images from the FTP site, boot as
above, then proceed as for the Intel architecture.
</para>

<para>Once the install procedure has finished, you will be able to start FreeBSD/alpha
by typing something like this to the SRM prompt:
</para>
<programlisting>
&gt;&gt;&gt;<command>boot dkc0</command>
</programlisting>

<para>This instructs the firmware to boot the specified disk. To find the SRM names of
disks in your machine, use the show device command:
</para>
<programlisting>
&gt;&gt;&gt;<command>show device</command>
dka0.0.0.4.0               DKA0           TOSHIBA CD-ROM XM-57  3476
dkc0.0.0.1009.0            DKC0                       RZ1BB-BS  0658
dkc100.1.0.1009.0          DKC100             SEAGATE ST34501W  0015
dva0.0.0.0.1               DVA0
ewa0.0.0.3.0               EWA0              00-00-F8-75-6D-01
pkc0.7.0.1009.0            PKC0                  SCSI Bus ID 7  5.27
pqa0.0.0.4.0               PQA0                       PCI EIDE
pqb0.0.1.4.0               PQB0                       PCI EIDE
</programlisting>

<para>This example comes from a Digital Personal Workstation 433au and shows three
disks attached to the machine. The first is a CD-ROM called <emphasis>dka0</emphasis> and the
other two are disks and are called <emphasis>dkc0</emphasis> and <emphasis>dkc100</emphasis> respectively.
</para>

<para>You can specify which kernel file to load and what boot options to use
with the <emphasis>-file</emphasis> and <emphasis>-flags</emphasis> options to boot:
</para>
<programlisting>
&gt;&gt;&gt;<command>boot -file kernel.old -flags s</command>
</programlisting>

<para>To make FreeBSD/alpha boot automatically, use these commands:
</para>
<programlisting>
&gt;&gt;&gt;<command>set boot_osflags a</command>
&gt;&gt;&gt;<command>set bootdef_dev dkc0</command>
&gt;&gt;&gt;<command>set auto_action BOOT</command>
</programlisting>

<para></para>
</sect1>
<sect1>
<title>Upgrade installation</title>

<para><anchor id="CFBSD-upgrade-install"/>
As the name implies, upgrade installations are intended to help you upgrade from
an earlier version of FreeBSD.  This kind of installation is still being
developed, and it is possible that all sorts of things can go wrong.  If you
want to use it, make sure you have backed up your old system before you start,
and read carefully the warning messages that appear.  If things do go wrong, you
can always reinstall and then restore your backups.
</para>
</sect1>
<sect1>
<title>Changing configuration</title>

<para><indexterm><primary>configuration</primary><secondary>changing</secondary></indexterm>
<anchor id="CFBSD-reconfig"/>
Once your system is up and running, you're bound to find something that you want
to change.  The online handbook gives more information on this, but it's good to
know that you can start <emphasis>sysinstall</emphasis> after the system is running: it's
called <emphasis>/stand/sysinstall</emphasis>.  For an alternative way to configure additional
disks, see <xref linkend="CFBSD-chdisks"/>, page <xref linkend="CFBSD-second-disk"/>.
</para>
</sect1>
<sect1>
<title>Installing additional software</title>

<para><anchor id="CFBSD-pkg_add"/>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
<indexterm><primary>bash</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>bash</secondary></indexterm>
<indexterm><primary>less</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>less</secondary></indexterm>
<indexterm><primary>pine</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pine</secondary></indexterm>
Once your system is up and running, you may find that things you expect are
missing.  Where's <emphasis>Emacs</emphasis>?  Where's <emphasis>bash</emphasis>?  Where's <emphasis>less</emphasis>?
They're all there, and just about everything else is as well.  We'll look at how
to install them in <xref linkend="CFBSD-chports"/>, starting on page <xref linkend="CFBSD-ports-collection"/>.
</para>
</sect1>
<sect1>
<title>How to uninstall FreeBSD</title>

<para><indexterm><primary>uninstall</primary></indexterm>
<indexterm><primary>removing</primary><secondary>FreeBSD from disk</secondary></indexterm>
What, you want to remove FreeBSD?  Why would you want to do that?
</para>

<para>Seriously, if you decide you want to completely remove FreeBSD from the system,
this is no longer a FreeBSD issue, it's an issue of whatever system you use to
replace it.  For example, on page <xref linkend="CFBSD-death-to-Microsoft"/> we saw how to remove a
Microsoft partition and replace it with FreeBSD; no Microsoft software was
needed to remove it.
XXX
    What I do is make /tmp a softlink to /var/tmp, and make /var/tmp its
    own partition.

    I turn softupdates on on all my partitions, including root (you can do
    that now)

    I do NOT use MFS or MD for /tmp, nor do I leave it on /.  I keep it as
    a separate partition and combine it with /var/tmp because both /tmp
    and /var/tmp tend to be used interchangeably anyway, and /tmp
    (or /var/tmp) is the most likely of all your partitions to get filled
    up accidently and you don't want that interfering with other things if
    it happens.  Many things use /tmp, so you can wind up with megabytes in
    it which makes it unsuitable for use with MD and inefficient when used
    with MFS.

    Typically I configure my paritions as follows:

        /               128MB
        swap            (2x main memory, 128MB minimum)
        /var            128MB (minimum, more if using machine for mail/printing)
        /var/tmp        128MB (minimum, more if using machine multiuser)
        /usr            2G
        /home           remainder of disk

        /tmp softlink to /var/tmp
        /compat softlink to /usr/compat

    Even though '/' per say only needs 64MB, having 128MB there is useful.
    I've seen 64MB / partitions 'fill up' with softupdates turned on when
    doing an installworld (because softupdates doesn't delete the files
    being replaced fast enough), and I tend to keep debug kernels sitting
    around in / as well.

    I make /usr big (2G) in order to accomodate ports, since /usr/local
    is part of /usr.

    The ordering of the partitions is also carefully arranged.  The lower
    sector numbers are the 'faster' sectors on a disk, closer to the outer
    rim of the disk where transfer rates are much faster.  So I put swap
    there along with the smaller partitions, and put /usr and /home later
    since those partitions are big enough that you really don't get a
    uniform performance benefit anyway.

                                                -Matt (Dillon)
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchxsetup"><title>Setting up X11</title>

<para><anchor id="CFBSD-xinstall"/>
FreeBSD <xref linkend="CFBSD-Fver"/> comes with XFree86
version <xref linkend="CFBSD-Xver"/>.<xref linkend="CFBSD-Xupdate"/>,
a port of X11R6 that supports several versions of Intel-based UNIX.
This chapter describes how to set up your XFree86 server.  It is based on
material supplied with the FreeBSD release, specifically the files
<emphasis>README.FreeBSD</emphasis> and <emphasis>README.Config</emphasis> in the directory
<emphasis>/usr/X11R6/lib/X11/doc</emphasis>.  If you find any discrepancy, the material in
those files will be more up-to-date than this description.  In addition, the
file <emphasis>/usr/X11R6/lib/X11/doc/RELNOTES</emphasis> contains OS-independent information
about the <xref linkend="CFBSD-Xver"/> release.
</para>

<para>X uses a lot of memory.  In order to run X, your system should have an absolute
minimum of 8 MB of memory, but performance will be painful with so little
memory.  A more practical minimum is 16 MB, and you can improve performance by
adding much more memory.  If you use X intensively, you will continue seeing
performance improvement by increasing to as much as 128 MB of RAM.
</para>
<sect1>
<title>For the impatient</title>

<para>There's lots of useful information in the rest of this chapter, but maybe you're
not interested in information right now.  You just want to get your X server up
and running.  However, be warned:
</para>
<note>

<para>An incorrect installation can burn out your monitor or your video board.
</para>
</note>

<para>Read page
for further details.
</para>

<para>However, if you know you're in spec, and you have a standard Super VGA board and
a good multifrequency monitor, then you can probably get things up and running
without reading this
chapter.  Read the section on X installation in
<xref linkend="CFBSD-chquickinstall"/>, page
If things don't work, come back here and read on.
</para>
</sect1>
<sect1>
<title>Installing XFree86</title>

<para>The easiest way to install XFree86 is with the <emphasis>sysinstall</emphasis> program,
either when you're installing the system, or later by starting the program
<emphasis>/stand/sysinstall</emphasis>.  See <xref linkend="CFBSD-chinstall"/>, page
for details of how to install the software.  In the rest of this chapter, we'll
look at what makes up the distribution, and on page
we'll look at how to configure X once it has been installed.
</para>
</sect1>
<sect1>
<title>The XFree86 distribution</title>

<para><indexterm><primary>XF86333</primary></indexterm>
XFree86 is distributed as a bewildering number of archives in the directory
<emphasis>/cdrom/XF86333</emphasis>.  In the following section, we'll take a look at what you
should install.  Don't worry too much, though: if you can't decide what to pick
and you have 200MB of disk space free, it's safe to unpack everything.
</para>

<para>At a minimum you need to unpack the archives in the following table and at least
one server that matches your VGA board.  You'll need 10Mb for the minimum required
run-time binaries only, and between 1.7 and 3 MB for the server.
<!--  Current contents of /cdrom/1/XF86332 -->
<!--  X3329set.tgz  Japanese setup -->
<!--  X332jdoc.tgz Japanese docs -->
<!--  X332jset.tgz -->
<!--  X332prt.tgz  Sample server? -->
<!--  X332set.tgz XF86setup -->
<!--  X332vfb.tgz  -->
<table frame='all'><title>Required components of XFree86</title>
box, center, tab(#) ;
| lfI |  lw55 | .
Archive#Description
=
X333bin.tgz#T{
All the executable X client applications and shared librariess
T}
X333fnts.tgz#T{
The misc and 75 dpi fonts
T}
X333lib.tgz#T{
Data files and libraries needed at runtime
T}
X3331upd.tgz#T{
Update number <xref linkend="CFBSD-Xupdate"/> to the XFree86 release.
T}
</tbody></tgroup></table>
The file <emphasis>X3331upd.tgz</emphasis> updates XFree86 from the base release (<xref linkend="CFBSD-Xver"/>)
to release <xref linkend="CFBSD-Xver"/>.<xref linkend="CFBSD-Xupdate"/>.  Each incremental update includes the contents
of any previously released updates (in this case there are none).  You must
extract these updates after extracting the base release, since they contain
replacements for files in the other archives.  The archives on the FreeBSD
<xref linkend="CFBSD-Fver"/> CD-ROM include update <xref linkend="CFBSD-Xupdate"/> of XFree86 <xref linkend="CFBSD-Xver"/>.  They are not
the same as the XFree86 <xref linkend="CFBSD-Xver"/> archives on <emphasis>ftp://ftp.XFree86.org/</emphasis>.
</para>
<sect2>
<title>The X Server</title>

<para><indexterm><primary>X</primary></indexterm>
In addition to the archives above, you need at least one server, which will take
up about 3 MB of disk.  The choice depends primarily on what kind of display
board you have.  The default server name is <emphasis>/usr/X11R6/bin/X</emphasis>, and it is a
link to a specific server binary <emphasis>/usr/X11R6/bin/XF86_<emphasis>xxxx</emphasis></emphasis>.  You'll
find the server archives for the standard PC architecture in
<emphasis>/cdrom/XF86333/Servers</emphasis>, and the servers for the Japanese PC98 architecture
in <emphasis>/cdrom/XF86333/PC98-Servers</emphasis>:
<table frame='all'><title>XFree86 servers for standard PC architecture</title>
box, center, tab(#) ;
| lfI |  lw62 | .
Archive#Description
=
X3338514.tgz#T{
8-bit colour for IBM 8514 and true compatibles.
T}
X333AGX.tgz#T{
8 and 16-bit colour for AGX and XGA boards.
T}
X333I128.tgz#T{
8 and 16-bit colour for I128 boards.
T}
X333Ma32.tgz#T{
8 and 16-bit colour for ATI Mach32 boards.
T}
X333Ma64.tgz#T{
8, 16 and 32-bit colour for ATI Mach64 boards.
T}
X333Ma8.tgz#T{
8-bit colour for ATI Mach8 boards.
T}
X333Mono.tgz#T{
1-bit monochrome for VGA, Super-VGA, Hercules, and others.
T}
X333P9K.tgz#T{
8, 16, and 32-bit colour for Weitek P9000 boards (Diamond Viper).
T}
X333S3.tgz#T{
8, 16 and 32-bit colour for S3 boards.
T}
X333S3V.tgz#T{
8 and 16-bit colour for S3 ViRGE boards.
T}
X333SVGA.tgz#T{
&gt;=8-bit colour for Super-VGA cards.
T}
X333VG16.tgz#T{
4-bit colour for VGA and Super-VGA cards
T}
X333W32.tgz#T{
8-bit colour for ET4000/W32, /W32i, /W32p and ET6000 cards.
T}
</tbody></tgroup></table>
<table frame='all'><title>XFree86 servers for Japanese PC98 architecture</title>
box, center, tab(#) ;
| lfI |  lw65 | .
Archive#Description
=
X3339GAN.tgz#T{
8-bit colour for PC98 GA-98NB/WAP boards
T}
X3339GA9.tgz#T{
8, 16 and 32-bit colour for PC98 S3 GA-968 boards
T}
X3339480.tgz#T{
8-bit colour for PC98 PEGC
T}
X3339NKV.tgz#T{
8-bit colour for PC98 NEC-CIRRUS/EPSON NKV/NKV2 boards
T}
X3339WBS.tgz#T{
8-bit colour for PC98 WAB-S boards
T}
X3339WEP.tgz#T{
8-bit colour for PC98 WAB-EP boards
T}
X3339WSN.tgz#T{
8-bit colour for PC98 WSN-A2F boards
T}
X3339EGC.tgz#T{
4-bit colour for PC98 EGC
T}
X3339TGU.tgz#T{
8 and 16-bit colour for PC98 Trident Cyber9320/9680 boards
T}
X3339NS3.tgz#T{
8 and 16-bit colour for PC98 NEC S3 boards
T}
X3339SPW.tgz#T{
8 and 16-bit colour for PC98 S3 PW/PCSKB boards
T}
X3339LPW.tgz#T{
8 and 16-bit colour for PC98 S3 PW/LB boards
T}
</tbody></tgroup></table>
Each of these servers includes a manual page which contains details of supported
chipsets and server-specific configuration options.
</para>

<para>A number of archives are provided for X programmers:
<table frame='all'><title>XFree86 programmer's files</title>
box, center, tab(#) ;
lfI | lw57 .
Archive#Description
=
X333prog.tgz#T{
config, <emphasis>lib*.a</emphasis> and <emphasis>*.h</emphasis> files needed for
compiling clients.
T}
X333ctrb.tgz#T{
Contributed sources.
T}
X333lk98.tgz#T{
The ``link kit'' for building servers, Japanese PC98 version.
T}
<!--  XXX X3333lk98.tgz#T{ -->
<!--  XXX Update archive for the ``link kit'', Japanese PC98 version. -->
<!--  XXX T} -->
X333lkit.tgz#T{
The ``link kit'' for building servers, normal architecture version.
T}
<!--  XXX X3333lkit.tgz#T{ -->
<!--  XXX Update archive for the ``link kit'', normal architecture version. -->
<!--  XXX T} -->
X333src-1.tgz#T{
Part 1 of the complete sources
T}
X333src-2.tgz#T{
Part 2 of the complete sources
T}
X333src-3.tgz#T{
Part 3 of the complete sources
T}
</tbody></tgroup></table>
You'll need <emphasis>X333prog.tgz</emphasis> if you intend to install ports of X software.
</para>

<para>Finally, XFree86 includes a number of optional parts:
<table frame='all'><title>XFree86 documentation</title>
box, center, tab(#) ;
lfI | lw57 .
Archive#Description
=
X333doc.tgz#T{
READMEs
T}
X333jdoc.tgz#T{
READMEs in Japanese
T}
X333ps.tgz#T{
READMEs in PostScript
T}
X333html.tgz#T{
READMEs in HTML
T}
X333man.tgz#T{
man pages
T}
</tbody></tgroup></table>
<table frame='all'><title>XFree86 setup programs</title>
box, center, tab(#) ;
lfI | lw67 .
Archive#Description
=
<indexterm><primary>X333cfg.tgz</primary></indexterm>
X333cfg.tgz#T{
Customizable <emphasis>xinit</emphasis> and <emphasis>xdm</emphasis> runtime configuration files.
T}
X333set.tgz#T{
The <emphasis>XF86Setup</emphasis> utility, a graphical version of the <emphasis>xf86config</emphasis>
utility that we will look at on page <xref linkend="CFBSD-xf86config"/>.
T}
X333jset.tgz#T{
The <emphasis>XF86Setup</emphasis> utility, Japanese version, for the normal PC architecture.
T}
<!--  XXX X3339set.tgz#T{ -->
<!--  XXX The <emphasis>XF98Setup</emphasis> utility, Japanese version.  This corresponds to -->
<!--  XXX <emphasis>XF86Setup</emphasis>, but is intended for the Japanese PC98 architecture. -->
<!--  XXX T} -->
</tbody></tgroup></table>
<emphasis>XF86Setup</emphasis> is a graphical mode setup program for XFree86, and you may
prefer it to the standard setup program <emphasis>xf86config</emphasis>.  You don't need any
special archives for <emphasis>xf86config</emphasis>: it's included in <emphasis>X333bin.tgz</emphasis>.
</para>

<para>The first time you install, you will need <emphasis>X333cfg.tgz</emphasis> to create your
initial configuration files.  Don't use it when upgrading: it overwrites your
configuration files.
<table frame='all'><title>Additional fonts</title>
box, center, tab(#) ;
lfI | lw57 .
Archive#Description
=
X333f100.tgz#T{
100dpi fonts
T}
X333fscl.tgz#T{
Speedo and Type1 fonts
T}
X333fnon.tgz#T{
Japanese, Chinese and other non-english fonts
T}
X333fcyr.tgz#T{
Cyrillic fonts
T}
</tbody></tgroup></table>
Unlike the X servers described above, the archives for the following servers are
all in the main directory <emphasis>/cdrom/disk/XF86333</emphasis>:
<table frame='all'><title>Miscellaneous servers</title>
box, center, tab(#) ;
lfI | lw67 .
Archive#Description
=
X333fsrv.tgz#T{
The font server
T}
X333nest.tgz#T{
A nested server running as a client window on another display.
T}
X333prt.tgz#T{
The X print server.
T}
X333vfb.tgz#T{
The Virtual Framebuffer X server, which renders into memory or an <emphasis>mmap</emphasis>ped
file.
T}
</tbody></tgroup></table>
<indexterm><primary>xdm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>DES</primary></indexterm>
Earlier versions
of FreeBSD
also supplied a separate <emphasis>xdm</emphasis> archive due to export restrictions on the
encryption software included in <emphasis>xdm</emphasis>.  FreeBSD
<xref linkend="CFBSD-Fver"/>
handles encryption in shared libraries now, so that <emphasis>xdm</emphasis> no longer
contains <emphasis>DES</emphasis>, and has been included in the standard archives.
</para>

<para>In addition, earlier versions of XFree86 included the archives
<emphasis>X333pex.tgz</emphasis>, with software for 3D applications, and <emphasis>X333lbx.tgz</emphasis>, the
low bandwidth X proxy server and libraries.  The files in these archives are now
included in the appropriate places in the other archives.  You no longer need to
install them explicitly.
</para>
</sect2>
</sect1>
<sect1>
<title>Installing XFree86 manually</title>

<para>If you don't use <emphasis>sysinstall</emphasis> to install X, you need to perform a number
of steps:
</para>
<itemizedlist>
<listitem>

<para>First, create the directories and unpack the required archives.
</para>
</listitem>
<listitem>

<para>Choose and install an X server.
</para>
</listitem>
<listitem>

<para>Install any updates.
</para>
</listitem>
<listitem>

<para>Set up the environment to be able to access X.
</para>
</listitem>
<listitem>

<para>Find a virtual terminal in which to run X.
</para>
</listitem>
<listitem>

<para>Configure X for your hardware.
</para>
</listitem>
</itemizedlist>

<para>This sounds like a lot of work, but if you approach it methodically, it's not
too bad.  In the rest of the chapter, we'll look at each step in turn.
</para>
<sect2>
<title>Unpacking the archives</title>

<para>You must unpack the archives as <emphasis>root</emphasis>, since a number of the executables
are set-user-id (they run as <emphasis>root</emphasis> even when started by other users).  If
you unpack the server as an ordinary user, it may abort when you try to run it.
You must also use a <emphasis>umask</emphasis> value of <emphasis>022</emphasis> (permissions
<emphasis>rwxr-xr-x</emphasis>), because the X server requires special permissions.  See page
<xref linkend="CFBSD-umask"/> for an explanation of <emphasis>umask</emphasis>.
</para>
<programlisting>
$ <command>su</command>
Password:
# <command>umask 022</command>
</programlisting>

<para>If you don't have enough space in the <emphasis>/usr</emphasis> file system, create a directory
on another partition and symlink it to <emphasis>/usr</emphasis>.  For example, if you have a
file system <emphasis>/home</emphasis> with adequate space, you could do:
</para>
<programlisting>
# <command>cd /home</command>
# <command>mkdir X11R6</command>
# <command>ln -s /home/X11R6 /usr/X11R6</command>
</programlisting>

<para>Next, decide which archives you want to install.
<indexterm><primary>xinitrc</primary></indexterm>
<indexterm><primary>xdm</primary></indexterm>
<indexterm><primary>X333xdcf.tgz</primary></indexterm>
<indexterm><primary>X333fscl.tgz</primary></indexterm>
For a minimal installation, choose <emphasis>/cdrom/XF86333/X333bin.tgz</emphasis>,
<emphasis>/cdrom/XF86333/X333fnts.tgz</emphasis>, <emphasis>/cdrom/XF86333/X333lib.tgz</emphasis>,
<emphasis>/cdrom/XF86333/X333cfg.tgz</emphasis>, and finally any updates, in this case
<emphasis>/cdrom/XF86333/X3331upd.tgz</emphasis>.  If you have already configured X for your
hardware, omit <emphasis>/cdrom/XF86333/X333cfg.tgz</emphasis>.
</para>

<para>If you are using sh, unpack like this:
</para>
<programlisting>
# <command>mkdir -p /usr/X11R6</command>
# <command>cd /usr/X11R6</command>
<!--  XXX -->
# <command>for i in bin fnts lib cfg 1upd; do</command>
# <command>  tar xzf /cdrom/XF86333/X333$i.tgz</command>
# <command>done</command>
</programlisting>

<para>If you are using csh, enter:
</para>
<programlisting>
% <command>mkdir -p /usr/X11R6</command>
% <command>cd /usr/X11R6</command>
<!--  XXX -->
% <command>foreach i (bin fnts lib cfg 1upd)</command>
? <command>  tar xzf /cdrom/XF86333/X333$i.tgz</command>
? <command>end</command>
</programlisting>

<para>If you're installing update archives, it's very important that the last name in
the list is the abbreviation of the name of the update (<emphasis>1upd</emphasis>): this
update archive contains replacements for files in the other archives.  This also
makes it complicated if you want to install everything: you can't just write
<emphasis>/cdrom/XF86333/X333*.tgz</emphasis>, since that would install the update
(<emphasis>1upd</emphasis>) before most of the other archives.  Instead, you need to spell it
out:
</para>
<programlisting>
# <command>mkdir -p /usr/X11R6</command>
# <command>cd /usr/X11R6</command>
# <command>for i in 9set bin cfg contrib doc f100 fcyr fnon fnts fscl fsrv \e
&gt;          html jdoc jset lib lkit man nest prog prt ps set \e
&gt;          src-1 vfb 1upd; do</command>
# <command>  tar xzf /cdrom/XF86333/X333$i.tgz</command>
# <command>done</command>
</programlisting>

<para>If you are using csh, enter:
</para>
<programlisting>
% <command>mkdir -p /usr/X11R6</command>
% <command>cd /usr/X11R6</command>
% <command>foreach i (9set bin cfg contrib doc f100 fcyr fnon fnts fscl fsrv \e
             html jdoc jset lib lkit man nest prog prt ps set \e
             src-1 vfb 1upd; do</command>
? <command>  tar xzf /cdrom/XF86333/X333$i.tgz</command>
? <command>end</command>
</programlisting>

<para>As with the minimal install, make sure that the abbreviation for the update
archive <emphasis>1upd</emphasis> comes last.
</para>

<para>The prompts during the command (<emphasis>#</emphasis> and <emphasis>&gt;</emphasis>, or <emphasis>%</emphasis>, nothing
and <emphasis>?</emphasis>) are typical.  Depending on your shell, you may get other prompts.
</para>
</sect2>
<sect2>
<title>Installing the server</title>

<para>Choose a server archive corresponding to your VGA board.  If table
on page
doesn't give you enough information, check the server man pages,
<emphasis>/usr/X11R6/man/man1/XF86_*</emphasis>, which list the VGA chip sets supported by each
server.  For example, if you have an ET4000 based board you will use the
XF86_SVGA server.  In this case you would enter:
</para>
<programlisting>
# <command>cd /usr/X11R6</command>
# <command>tar xzf /cdrom/XF86333/Server/X333SVGA.tgz</emphasis>	<emphasis>substitute your server name here</command>
</programlisting>

<para>If you are using csh, enter:
</para>
<programlisting>
% <command>cd /usr/X11R6</command>
% <command>tar xzf /cdrom/XF86333/Server/X333SVGA.tgz</emphasis>	<emphasis>substitute your server name here</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Setting up the environment</title>

<para><indexterm><primary>X</primary></indexterm>
<indexterm><primary>XF86_SVGA</primary></indexterm>
Next, you may wish to create a symbolic link <emphasis>/usr/X11/bin/X</emphasis> that points
to the server that matches your video board.  In this example, it's the
<emphasis>XF86_SVGA</emphasis> server:
</para>
<programlisting>
# <command>cd /usr/X11R6/bin</emphasis>						<emphasis>change to bin directory</command>
# <command>rm X</emphasis>								<emphasis>remove the current server</command>
# <command>ln -s XF86_SVGA X</emphasis>						<emphasis>and create a link to the new server</command>
</programlisting>

<para>X needs this symbolic link in order to be able to work correctly, but you have
the option of setting it when you run <emphasis>xf86config</emphasis>&mdash;see below.
<indexterm><primary>profile</primary></indexterm>
<indexterm><primary>csh.login</primary></indexterm>
</para>

<para>Next, check that the directory <emphasis>/usr/X11R6/bin</emphasis> is in the default path for
<emphasis>sh</emphasis> in <emphasis>/etc/profile</emphasis> and for <emphasis>csh</emphasis> in <emphasis>/etc/csh.login</emphasis>,
and add it if it is not.  It's best to do this with an editor, but if you want
to take a short cut, you can enter:
</para>
<programlisting>
# <command>echo 'set path = ($path /usr/X11R6/bin)' &gt;&gt;/etc/csh.login</command>
# <command>echo 'PATH=$PATH:/usr/X11R6/bin' &gt;&gt;/etc/profile</command>
</programlisting>

<para>Alternatively, make sure everybody who uses X puts <emphasis>/usr/X11R6/bin</emphasis> in their
shell's <emphasis>PATH</emphasis> variable.
</para>

<para><indexterm><primary>ldconfig</primary></indexterm>
<indexterm><primary>ld.so</primary></indexterm>
Next, invoke <emphasis>ldconfig</emphasis> to put the shared libraries in <emphasis>ld.so</emphasis>'s
cache:
</para>
<programlisting>
# <command>ldconfig -m /usr/X11R6/lib</command>
</programlisting>

<para>You can omit invoking <emphasis>ldconfig</emphasis> if you plan to reboot before using X.
</para>

<para><indexterm><primary>X333f100.tgz</primary></indexterm>
</para>
<note>

<para><indexterm><primary>mkfontdir</primary></indexterm>
You don't need to uncompress the font files, but if you do, you must run
<emphasis>mkfontdir</emphasis> in the corresponding font directory; otherwise your server will
abort with the message ``could not open default font `fixed'\^''.
</para>
</note>

<para></para>
</sect2>
<sect2>
<title>Assigning a virtual terminal to X</title>

<para><anchor id="CFBSD-getty-setup"/>
<indexterm><primary>getty</primary><secondary>command</secondary></indexterm>
Next, make sure you have a spare virtual console which is running a <emphasis>getty</emphasis>.
First check how many virtual consoles you have:
</para>
<programlisting>
# <command>dmesg | grep virtual</command>
sc0: VGA color &lt;16 virtual consoles, flags=0x0&gt;
</programlisting>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
Then check <emphasis>/etc/ttys</emphasis> to make sure there is at least one virtual terminal
(<emphasis>ttyv<emphasis>xx</emphasis></emphasis> device) which doesn't have a <emphasis>getty</emphasis> enabled.  Look for
the keyword <emphasis>off</emphasis>:
</para>
<programlisting>
# <command>grep ttyv /etc/ttys</command>
ttyv0  "/usr/libexec/getty Pc" cons25  on secure
ttyv1  "/usr/libexec/getty Pc" cons25  on secure
ttyv2  "/usr/libexec/getty Pc" cons25  on secure
ttyv3  "/usr/libexec/getty Pc" cons25  <command>off</command> secure
</programlisting>

<para>In this case, <emphasis>/dev/ttyv3</emphasis> is available, if your kernel has least 4 VTs.
If not, either disable a getty in <emphasis>/etc/ttys</emphasis> by changing <emphasis>on</emphasis> to
<emphasis>off</emphasis>, or build another kernel with more virtual terminals&mdash;see
<xref linkend="CFBSD-chbuild"/>, page
for details of how to set the kernel parameter <emphasis>MAXCONS</emphasis>.
</para>
</sect2>
<sect2>
<title>Configuring X for Your Hardware</title>

<para><indexterm><primary>XF86Config</primary></indexterm>
<anchor id="CFBSD-configuring-X"/>
<anchor id="CFBSD-xf86config"/>
After installing the X software, you will need to customize the file
<emphasis>/usr/X11R6/lib/X11/XF86Config</emphasis>, which tells the X server about your
hardware and how you want to run it.
</para>
<note>

<para><indexterm><primary>XF86Config</primary></indexterm>
<indexterm><primary>reconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>XConfig</primary></indexterm>
The format of <emphasis>XF86Config</emphasis> has changed since version 2 of XFree86.  If you
are upgrading from version 2, use the <emphasis>reconfig</emphasis> utility to perform a
partial translation of the old <emphasis>XConfig</emphasis> file to the new format.  You'll
still need to make some changes manually.
</para>
<programlisting>
# <command>reconfig &lt; Xconfig &gt; XF86Config</command>
</programlisting>

<para><indexterm><primary>XF86Config</primary></indexterm>
<indexterm><primary>XF86Config.eg</primary></indexterm>
The man page <emphasis>XF86Config(5)</emphasis> and the file
<emphasis>/usr/X11R6/lib/X11/XF86Config.eg</emphasis> will help you complete the changes.
</para>
</note>

<para><indexterm><primary>XF86Config</primary></indexterm>
In order to set up <emphasis>XF86Config</emphasis>, you'll need the following hardware
information:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/dev/ttyd0</primary></indexterm>
<indexterm><primary>/dev/ttyd1</primary></indexterm>
<indexterm><primary>/dev/mse0</primary></indexterm>
<indexterm><primary>/dev/psm0</primary></indexterm>
Your mouse type, the bit rate if it's a serial mouse, and the name of the device
to which it is connected.  This will typically be <emphasis>/dev/ttyd0</emphasis> or
<emphasis>/dev/ttyd1</emphasis> for a serial mouse, <emphasis>/dev/psm0</emphasis> for a PS/2 mouse, or
<emphasis>/dev/mse0</emphasis> for a bus mouse.
</para>
</listitem>
<listitem>

<para>The type of the video board and the amount of display memory.  If it's a no-name
board, establish what VGA chip set it uses.
</para>
</listitem>
<listitem>

<para>The parameters of your monitor: vertical and horizontal frequency.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Identifying the hardware</title>

<para>How do you decide what your hardware is?  The manufacturer <emphasis>should</emphasis> tell
you, but very often the information you get about your display board and monitor
is pitiful: ``Super VGA board with 76 Hz refresh rate and 16,777,216 colors''.
This tells you the maximum pixel depth (24 bits: the number of colours is
2\u\s-3(pixel depth)\s0\d), but it doesn't tell you <emphasis>anything</emphasis> else about
the display board.  As we'll see in <xref linkend="CFBSD-chxtheory"/>, the real parameters you need
to know are the maximum horizontal frequency, the dot clock range, the chip set
and the amount of display memory.
</para>

<para>You could be unlucky trying to get some of this information, but you can get
some with the <emphasis>SuperProbe</emphasis> program.  It should always be able to tell you
the chip set and the amount of memory on board.
</para>
<note>

<para>Occasionally SuperProbe can crash your system.  Make sure you are not doing
anything important when you run it.
</para>
</note>

<para>Running <emphasis>SuperProbe</emphasis> looks like this:
</para>
<programlisting>
# <command>SuperProbe</command>
<emphasis>(warnings and acknowledgements omitted)</emphasis>
First video: Super-VGA
        Chipset: Tseng ET4000 (Port Probed)
        Memory:  1024 Kbytes
        RAMDAC:  Generic 8-bit pseudo-color DAC
                 (with 6-bit wide lookup tables (or in 6-bit mode))
</programlisting>

<para><emphasis>SuperProbe</emphasis> is very finicky about running at all, and you'll often get
messages like:
</para>
<programlisting>
SuperProbe: Cannot be run while an X server is running
SuperProbe: If an X server is not running, unset $DISPLAY and try again
SuperProbe: Cannot open video
</programlisting>

<para>In other words, even if no X server is running, <emphasis>SuperProbe</emphasis> won't work if
you have the environment variable <emphasis>DISPLAY</emphasis> set.  How do you unset it?
With Bourne-style shells, you enter:
</para>
<programlisting>
# <command>unset DISPLAY</command>
</programlisting>

<para>In the C shell, you enter:
</para>
<programlisting>
% <command>unsetenv DISPLAY</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Running xf86config</title>

<para><indexterm><primary>xf86config</primary><secondary>command</secondary></indexterm>
The easy way to create your configuration file is with one of the utilities
<emphasis>xf86config</emphasis> (note the lower case name) or <emphasis>XF86Setup</emphasis>.  Both leads
you through the configuration step by step.  <emphasis>xf86config</emphasis> runs in
character mode, while <emphasis>XF86Setup</emphasis> runs in a graphical mode.
<emphasis>XF86Setup</emphasis> can have problems with unusual hardware, so I personally
prefer <emphasis>xf86config</emphasis>.
</para>

<para>You can also use <emphasis>sysinstall</emphasis>, but this doesn't change much:
<emphasis>sysinstall</emphasis> just starts <emphasis>xf86config</emphasis> for you, and it's easier to
start it directly.  In this section, we'll use an example to illustrate
<emphasis>xf86config</emphasis> configuration: we're installing X for an ancient Diamond
SpeedStar with 1 MB of display memory, a Logitech MouseMan mouse, and an ADI
MicroScan 5AP monitor.  The mouse is connected to the system via the first
serial port, <emphasis>/dev/ttyd0</emphasis>.
</para>

<para>To run <emphasis>xf86config</emphasis>, type in the name.  If <emphasis>/usr/X11R6/bin</emphasis> is
included in your <emphasis>PATH</emphasis> environment variable (see page <xref linkend="CFBSD-PATH"/>), you just
need to type <emphasis>xf86config</emphasis>:
</para>
<programlisting>
# <command>/usr/X11R6/bin/xf86config</command>
This program will create a basic XF86Config file, based on menu selections you
make.

The XF86Config file usually resides in /usr/X11R6/lib/X11 or /etc. A sample
XF86Config file is supplied with XFree86; it is configured for a standard
VGA card and monitor with 640x480 resolution. This program will ask for a
pathname when it is ready to write the file.

You can either take the sample XF86Config as a base and edit it for your
configuration, or let this program produce a base XF86Config file for your
configuration and fine-tune it. Refer to /usr/X11R6/lib/X11/doc/README.Config
for a detailed overview of the configuration process.

For accelerated servers (including accelerated drivers in the SVGA server),
there are many chipset and card-specific options and settings. This program
does not know about these. On some configurations some of these settings must
be specified. Refer to the server man pages and chipset-specific READMEs.

Before continuing with this program, make sure you know the chipset and
amount of video memory on your video card. SuperProbe can help with this.
It is also helpful if you know what server you want to run.

Press enter to continue, or ctrl-c to abort. <keycap>ENTER</keycap>

First specify a mouse protocol type. Choose one from the following list:

 1.  Microsoft compatible (2-button protocol)
 2.  Mouse Systems (3-button protocol)
 3.  Bus Mouse
 4.  PS/2 Mouse
 5.  Logitech Mouse (serial, old type, Logitech protocol)
 6.  Logitech MouseMan (Microsoft compatible)
 7.  MM Series
 8.  MM HitTablet
 9.  Microsoft IntelliMouse

If you have a two-button mouse, it is most likely of type 1, and if you have
a three-button mouse, it can probably support both protocol 1 and 2. There are
two main varieties of the latter type: mice with a switch to select the
protocol, and mice that default to 1 and require a button to be held at
boot-time to select protocol 2. Some mice can be convinced to do 2 by sending
a special sequence to the serial port (see the ClearDTR/ClearRTS options).

Enter a protocol number: </emphasis><command>6</command>			<emphasis>Logitech MouseMan

You have selected a Logitech MouseMan type mouse. You might want to enable
ChordMiddle which could cause the third button to work.

Please answer the following question with either 'y' or 'n'.
Do you want to enable ChordMiddle? <command>n</command>
</programlisting>

<para>You definitely want to enable the third button on your mouse, since many X
clients use it.  With a genuine Logitech mouse, however, you don't need to
enable <emphasis>ChordMiddle</emphasis> in order to use the button.  If you find that the
third button doesn't work when you start X, you can enable <emphasis>ChordMiddle</emphasis>
by editing the configuration file&mdash;it's much easier and less error-prone than
re-running <emphasis>XF86Setup</emphasis>.  See page <xref linkend="CFBSD-XF86Config-Pointer-section"/> for details
of how to edit the configuration file.
</para>

<para>Continuing,
</para>
<programlisting>

If your mouse has only two buttons, it is recommended that you enable
Emulate3Buttons.

Please answer the following question with either 'y' or 'n'.
Do you want to enable Emulate3Buttons? <command>n</command>

Now give the full device name that the mouse is connected to, for example
/dev/tty00. Just pressing enter will use the default, /dev/mouse.

Mouse device: <command>/dev/ttyd1</command>
</programlisting>

<para>Be very careful about this entry: you must specify the correct name for the
device to which the mouse is connected.  <emphasis>xf86config</emphasis> is not specific to
FreeBSD, and the suggested example is just plain wrong for FreeBSD.  Use the
names <emphasis>/dev/ttyd0</emphasis> through <emphasis>/dev/ttyd3</emphasis> for serial mice,
<emphasis>/dev/psm0</emphasis> for PS/2 mice or <emphasis>/dev/mse0</emphasis> for a bus mouse.  See page
<xref linkend="CFBSD-XF86Config-Pointer-section"/> for more details.
</para>

<para>Continuing, we see:
</para>
<programlisting>
Beginning with XFree86 3.1.2D, you can use the new X11R6.1 XKEYBOARD
extension to manage the keyboard layout. If you answer 'n' to the following
question, the server will use the old method, and you have to adjust
your keyboard layout with xmodmap.

Please answer the following question with either 'y' or 'n'.
Do you want to use XKB? <command>y</command>

The following dialogue will allow you to select from a list of already
preconfigured keymaps. If you don't find a suitable keymap in the list,
the program will try to combine a keymap from additional information you
are asked then. Such a keymap is by default untested and may require
manual tuning. Please report success or required changes for such a
keymap to XFREE86@XFREE86.ORG for addition to the list of preconfigured
keymaps in the future.

Press enter to continue, or ctrl-c to abort.

List of preconfigured keymaps:

  1  Standard 101-key, US encoding
  2  Microsoft Natural, US encoding
  3  KeyTronic FlexPro, US encoding
  4  Standard 101-key, US encoding with ISO9995-3 extensions
  5  Standard 101-key, German encoding
  6  Standard 101-key, French encoding
  7  Standard 101-key, Thai encoding
  8  Standard 101-key, Swiss/German encoding
  9  Standard 101-key, Swiss/French encoding
 10  None of the above

Enter a number to choose the keymap.

</emphasis><command>1</command>								<emphasis>Choose the standard US keyboard

Now we want to set the specifications of the monitor. The two critical
parameters are the vertical refresh rate, which is the rate at which the
the whole screen is refreshed, and most importantly the horizontal sync rate,
which is the rate at which scanlines are displayed.

The valid range for horizontal sync and vertical sync should be documented
in the manual of your monitor. If in doubt, check the monitor database
/usr/X11R6/lib/X11/doc/Monitors to see if your monitor is there.

Press enter to continue, or ctrl-c to abort. <keycap>ENTER</keycap>
You must indicate the horizontal sync range of your monitor. You can either
select one of the predefined ranges below that correspond to industry-
standard monitor types, or give a specific range.

It is VERY IMPORTANT that you do not specify a monitor type with a horizontal
sync range that is beyond the capabilities of your monitor. If in doubt,
choose a conservative setting.

    hsync in kHz; monitor type with characteristic modes
 1  31.5; Standard VGA, 640x480 @@ 60 Hz
 2  31.5 - 35.1; Super VGA, 800x600 @@ 56 Hz
 3  31.5, 35.5; 8514 Compatible, 1024x768 @@ 87 Hz interlaced (no 800x600)
 4  31.5, 35.15, 35.5; Super VGA, 1024x768 @@ 87 Hz interlaced, 800x600 @@ 56 Hz
 5  31.5 - 37.9; Extended Super VGA, 800x600 @@ 60 Hz, 640x480 @@ 72 Hz
 6  31.5 - 48.5; Non-Interlaced SVGA, 1024x768 @@ 60 Hz, 800x600 @@ 72 Hz
 7  31.5 - 57.0; High Frequency SVGA, 1024x768 @@ 70 Hz
 8  31.5 - 64.3; Monitor that can do 1280x1024 @@ 60 Hz
 9  31.5 - 79.0; Monitor that can do 1280x1024 @@ 74 Hz
10  31.5 - 82.0; Monitor that can do 1280x1024 @@ 76 Hz
11  Enter your own horizontal sync range

Enter your choice (1-11):
</programlisting>

<para>See <xref linkend="CFBSD-chxtheory"/>, page
for an explanation of the warnings.
</para>

<para>Unfortunately, our monitor isn't mentioned in the file
<emphasis>/usr/X11R6/lib/X11/doc/Monitors</emphasis>, but by chance the manual does specify the
frequency range in the Technical Data section: the horizontal frequency range is
from 30 to 64 kHz, and the vertical frequency range is from 50 to 100 Hz.  The
horizontal frequency range is almost exactly covered by choice 8, but that
setting threatens to go 0.3 kHz higher in frequency than the technical data
state.  Do you want to risk it?  Probably there won't be a problem, since it's
unlikely that the monitor will die at such a small deviation from the specs, and
it's also unlikely that your <emphasis>XF86Config</emphasis> will actually generate a
horizontal frequency between 64.0 and 64.3 kHz.  However, there's no need to
take even this slight risk.  Just specify the real values:
</para>
<programlisting>
Enter your choice (1-11): <command>11</command>

Please enter the horizontal sync range of your monitor, in the format used
in the table of monitor types above. You can either specify one or more
continuous ranges (e.g. 15-25, 30-50), or one or more fixed sync frequencies.

Horizontal sync range: <command>30-64</command>
</programlisting>

<para>Next, we select the vertical frequency range:
</para>
<programlisting>
You must indicate the vertical sync range of your monitor. You can either
select one of the predefined ranges below that correspond to industry-
standard monitor types, or give a specific range. For interlaced modes,
the number that counts is the high one (e.g. 87 Hz rather than 43 Hz).

 1  50-70
 2  50-90
 3  50-100
 4  40-150
 5  Enter your own vertical sync range

Enter your choice: </emphasis><command>3</command>					<emphasis>this time, exactly the range of the monitor
</programlisting>

<para>The next step is to specify identification strings.  You can think out names if
you want, but unless you're juggling a lot of different hardware, you can let
<emphasis>xf86config</emphasis> do it for you:
</para>
<programlisting>
You must now enter a few identification/description strings, namely an
identifier, a vendor name, and a model name. Just pressing enter will fill
in default names.

The strings are free-form, spaces are allowed.
Enter an identifier for your monitor definition: <keycap>ENTER</keycap>
Enter the vendor name of your monitor:  <keycap>ENTER</keycap>
Enter the model name of your monitor:  <keycap>ENTER</keycap>
</programlisting>

<para>Next comes the choice of the video board.  We have an elderly Diamond SpeedStar
Plus with an ET4000 chip, and unknown Ramdac and Clock Chip.  Let's see how we
fare:
</para>
<programlisting>
Now we must configure video card specific settings. At this point you can
choose to make a selection out of a database of video card definitions.
Because there can be variation in Ramdacs and clock generators even
between cards of the same model, it is not sensible to blindly copy
the settings (e.g. a Device section). For this reason, after you make a
selection, you will still be asked about the components of the card, with
the settings from the chosen database entry presented as a strong hint.

The database entries include information about the chipset, what server to
run, the Ramdac and ClockChip, and comments that will be included in the
Device section. However, a lot of definitions only hint about what server
to run (based on the chipset the card uses) and are untested.

If you can't find your card in the database, there's nothing to worry about.
You should only choose a database entry that is exactly the same model as
your card; choosing one that looks similar is just a bad idea (e.g. a
GemStone Snail 64 may be as different from a GemStone Snail 64+ in terms of
hardware as can be).

Do you want to look at the card database? <command>y</command>
  0  2 the Max MAXColor S3 Trio64V+                    S3 Trio64V+
  1  928Movie                                          S3 928
  2  AGX (generic)                                     AGX-014/15/16
  3  ALG-5434(E)                                       CL-GD5434
  4  ASUS 3Dexplorer                                   RIVA128
  5  ASUS PCI-AV264CT                                  ATI-Mach64
  6  ASUS PCI-V264CT                                   ATI-Mach64
  7  ASUS Video Magic PCI V864                         S3 864
  8  ASUS Video Magic PCI VT64                         S3 Trio64
  9  AT25                                              Alliance AT3D
 10  AT3D                                              Alliance AT3D
 11  ATI 3D Pro Turbo                                  ATI-Mach64
 12  ATI 3D Xpression                                  ATI-Mach64
 13  ATI 3D Xpression+ PC2TV                           ATI-Mach64
 14  ATI 8514 Ultra (no VGA)                           ATI-Mach8
 15  ATI All-in-Wonder                                 ATI-Mach64
 16  ATI Graphics Pro Turbo                            ATI-Mach64
 17  ATI Graphics Pro Turbo 1600                       ATI-Mach64

Enter a number to choose the corresponding card definition.
Press enter for the next page, q to continue configuration.
<keycap>ENTER</keycap>
</programlisting>

<para>Dozens of board definitions come in alphabetic order.  Finally we see:
</para>
<programlisting>
108  DSV3325                                           S3 ViRGE
109  DSV3326                                           S3 Trio64V+
110  DataExpert DSV3325                                S3 ViRGE
111  DataExpert DSV3365                                S3 Trio64V+
112  Dell S3 805                                       S3 801/805
113  Dell onboard ET4000                               ET4000
114  Diamond Edge 3D                                   nv1
115  Diamond Multimedia Stealth 3D 2000                S3 ViRGE
116  Diamond Multimedia Stealth 3D 2000 PRO            S3 ViRGE/DX
117  Diamond SpeedStar (Plus)                          ET4000
118  Diamond SpeedStar 24                              ET4000
119  Diamond SpeedStar 24X (not fully supported)       WD90C31
120  Diamond SpeedStar 64                              CL-GD5434
121  Diamond SpeedStar HiColor                         ET4000
122  Diamond SpeedStar Pro (not SE)                    CL-GD5426/28
123  Diamond SpeedStar Pro 1100                        CL-GD5420/2/4/6/8/9
124  Diamond SpeedStar Pro SE (CL-GD5430/5434)         CL-GD5430/5434
125  Diamond SpeedStar64 Graphics 2000/2200            CL-GD5434

Enter a number to choose the corresponding card definition.
Press enter for the next page, q to continue configuration.

<command>117</command>

Your selected card definition:

Identifier: Diamond SpeedStar (Plus)
Chipset:    ET4000
Server:     XF86_SVGA

Press enter to continue, or ctrl-c to abort.<keycap>ENTER</keycap>

Now you must determine which server to run. Refer to the manpages and other
documentation. The following servers are available (they may not all be
installed on your system):

 1  The XF86_Mono server. This a monochrome server that should work on any
    VGA-compatible card, in 640x480 (more on some SVGA chipsets).
 2  The XF86_VGA16 server. This is a 16-color VGA server that should work on
    any VGA-compatible card.
 3  The XF86_SVGA server. This is a 256 color SVGA server that supports
    a number of SVGA chipsets. On some chipsets it is accelerated or
    supports higher color depths.
 4  The accelerated servers. These include XF86_S3, XF86_Mach32, XF86_Mach8,
    XF86_8514, XF86_P9000, XF86_AGX, XF86_W32, XF86_Mach64, XF86_I128 and
    XF86_S3V.

These four server types correspond to the four different "Screen" sections in
XF86Config (vga2, vga16, svga, accel).

 5  Choose the server from the card definition, XF86_SVGA.

Which one of these screen types do you intend to run by default (1-5)?
</programlisting>

<para>The system already chose <emphasis>XF86_SVGA</emphasis> for us.  Do we want to change?  We
would need a good reason.  In this case, we don't have a reason, so we'll keep
the server from the card definition:
</para>
<programlisting>
Which one of these screen types do you intend to run by default (1-5)? <command>5</command>

The server to run is selected by changing the symbolic link 'X'. For example,
'rm /usr/X11R6/bin/X; ln -s /usr/X11R6/bin/XF86_SVGA /usr/X11R6/bin/X' selects
the SVGA server.

Please answer the following question with either 'y' or 'n'.
Do you want me to set the symbolic link? <command>y</command>
</programlisting>

<para>All the programs that start X (<emphasis>xinit</emphasis>, <emphasis>startx</emphasis> and <emphasis>xdm</emphasis>) start
a program <emphasis>/usr/X11R6/bin/X</emphasis>.  This symbolic link makes
<emphasis>/usr/X11R6/bin/X</emphasis> point to your X server.  If you don't have a link, you
won't be able to start X.
</para>
<programlisting>
Now you must give information about your video card. This will be used for
the "Device" section of your video card in XF86Config.

You must indicate how much video memory you have. It is probably a good
idea to use the same approximate amount as that detected by the server you
intend to use. If you encounter problems that are due to the used server
not supporting the amount memory you have (e.g. ATI Mach64 is limited to
1024K with the SVGA server), specify the maximum amount supported by the
server.

How much video memory do you have on your video card:

 1  256K
 2  512K
 3  1024K
 4  2048K
 5  4096K
 6  Other

Enter your choice: <command>3</command>

You must now enter a few identification/description strings, namely an
identifier, a vendor name, and a model name. Just pressing enter will fill
in default names (possibly from a card definition).

Your card definition is Diamond SpeedStar (Plus).

The strings are free-form, spaces are allowed.
Enter an identifier for your video card definition: <keycap>ENTER</keycap>
You can simply press enter here if you have a generic card, or want to
describe your card with one string.
Enter the vendor name of your video card:  <keycap>ENTER</keycap>
Enter the model (board) name of your video card:  <keycap>ENTER</keycap>

Especially for accelerated servers, Ramdac, Dacspeed and ClockChip settings
or special options may be required in the Device section.

The RAMDAC setting only applies to the S3, AGX, W32 servers, and some
drivers in the SVGA servers. Some RAMDAC's are auto-detected by the server.
The detection of a RAMDAC is forced by using a Ramdac "identifier" line in
the Device section. The identifiers are shown at the right of the following
table of RAMDAC types:

  1  AT&amp;T 20C490 (S3 and AGX servers, ARK driver)                att20c490
  2  AT&amp;T 20C498/21C498/22C498 (S3, autodetected)                att20c498
  3  AT&amp;T 20C409/20C499 (S3, autodetected)                       att20c409
  4  AT&amp;T 20C505 (S3)                                            att20c505
  5  BrookTree BT481 (AGX)                                       bt481
  6  BrookTree BT482 (AGX)                                       bt482
  7  BrookTree BT485/9485 (S3)                                   bt485
  8  Sierra SC15025 (S3, AGX)                                    sc15025
  9  S3 GenDAC (86C708) (autodetected)                           s3gendac
 10  S3 SDAC (86C716) (autodetected)                             s3_sdac
 11  STG-1700 (S3, autodetected)                                 stg1700
 12  STG-1703 (S3, autodetected)                                 stg1703


Enter a number to choose the corresponding RAMDAC.
Press enter for the next page, q to quit without selection of a RAMDAC.


</emphasis><command>q</command>							<emphasis>We don't need this

A Clockchip line in the Device section forces the detection of a
programmable clock device. With a clockchip enabled, any required
clock can be programmed without requiring probing of clocks or a
Clocks line. Most cards don't have a programmable clock chip.
Choose from the following list:

 1  Chrontel 8391                                               ch8391
 2  ICD2061A and compatibles (ICS9161A, DCS2824)                icd2061a
 3  ICS2595                                                     ics2595
 4  ICS5342 (similar to SDAC, but not completely compatible)    ics5342
 5  ICS5341                                                     ics5341
 6  S3 GenDAC (86C708) and ICS5300 (autodetected)               s3gendac
 7  S3 SDAC (86C716)                                            s3_sdac
 8  STG 1703 (autodetected)                                     stg1703
 9  Sierra SC11412                                              sc11412
10  TI 3025 (autodetected)                                      ti3025
11  TI 3026 (autodetected)                                      ti3026
12  IBM RGB 51x/52x (autodetected)                              ibm_rgb5xx

Just press enter if you don't want a Clockchip setting.
What Clockchip setting do you want (1-12)? <keycap>ENTER</keycap>

For most configurations, a Clocks line is useful since it prevents the slow
and nasty sounding clock probing at server start-up. Probed clocks are
displayed at server startup, along with other server and hardware
configuration info. You can save this information in a file by running
'X -probeonly 2&gt;output_file'. Be warned that clock probing is inherently
imprecise; some clocks may be slightly too high (varies per run).

At this point I can run X -probeonly, and try to extract the clock information
from the output. It is recommended that you do this yourself and add a clocks
line (note that the list of clocks may be split over multiple Clocks lines) to
your Device section afterwards. Be aware that a clocks line is not
appropriate for drivers that have a fixed set of clocks and don't probe by
default (e.g. Cirrus). Also, for the P9000 server you must simply specify
clocks line that matches the modes you want to use.  For the S3 server with
a programmable clock chip you need a 'ClockChip' line and no Clocks line.

You must be root to be able to run X -probeonly now.

Do you want me to run 'X -probeonly' now?
</programlisting>

<para>This last question is worth thinking about.  You should run <emphasis>X -probeonly</emphasis>
at some point, but it requires some extra work.  We'll take the recommendation
and try it later.
</para>
<programlisting>
Do you want me to run 'X -probeonly' now? <command>n</command>

For each depth, a list of modes (resolutions) is defined. The default
resolution that the server will start-up with will be the first listed
mode that can be supported by the monitor and card.
Currently it is set to:

<anchor id="CFBSD-screen-resolutions"/>
"640x480" "800x600" "1024x768" for 8bpp
"640x480" "800x600" for 16bpp
"640x480" for 24bpp
"640x400" for 32bpp

Note that 16, 24 and 32bpp are only supported on a few configurations.
Modes that cannot be supported due to monitor or clock constraints will
be automatically skipped by the server.

 1  Change the modes for 8pp (256 colors)
 2  Change the modes for 16bpp (32K/64K colors)
 3  Change the modes for 24bpp (24-bit color, packed pixel)
 4  Change the modes for 32bpp (24-bit color)
 5  The modes are OK, continue.

Enter your choice: </emphasis><command>5</command>	<emphasis>accept the defaults

You can have a virtual screen (desktop), which is screen area that is larger
than the physical screen and which is panned by moving the mouse to the edge
of the screen. If you don't want virtual desktop at a certain resolution,
you cannot have modes listed that are larger. Each color depth can have a
differently-sized virtual screen

Please answer the following question with either 'y' or 'n'.
Do you want a virtual screen that is larger than the physical screen? <command>n</command>
</programlisting>

<para>It's difficult to decide whether you want a virtual screen larger than the
physical screen.  I find it extremely disturbing, so I suggest you answer
<command>n</command>.  You might find it useful, especially if your highest resolution is
small.

Now the configuration is complete, and <emphasis>sysinstall</emphasis> just need to write the
configuration file:
</para>
<programlisting>
I am going to write the XF86Config file now. Make sure you don't accidently
overwrite a previously configured one.

Shall I write it to /etc/XF86Config? <command>y</command>

File has been written. Take a look at it before running 'startx'. Note that
the XF86Config file must be in one of the directories searched by the server
(e.g. /usr/X11R6/lib/X11) in order to be used. Within the server press
ctrl, alt and '+' simultaneously to cycle video resolutions. Pressing ctrl,
alt and backspace simultaneously immediately exits the server (use if
the monitor doesn't sync for a particular mode).

For further configuration, refer to /usr/X11R6/lib/X11/doc/README.Config.

</programlisting>

<para>Once you have completed this configuration, you are ready to start X.  We'll
look at how to do that in <xref linkend="CFBSD-chdesktop"/>.  If you run into trouble, or if you're
interested in the background, read <xref linkend="CFBSD-chxtheory"/>.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchports"><title>The Ports Collection</title>

<para><anchor id="CFBSD-ports-collection"/>
<indexterm><primary>porting</primary></indexterm>
The Internet is full of free software which is normally distributed in source
form.  That's the problem: the way from the source archive that you get free
from the Internet to the finished, installed, running program on your
machine&mdash;normally called <emphasis>porting</emphasis>&mdash;can be a long and frustrating one.
See my book <emphasis>Porting UNIX Software</emphasis> for more details of the porting
process.
</para>

<para>In order to get a software package up and running on your system, you need to go
through most of these steps:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>archive</primary></indexterm>
<indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
<indexterm><primary>gzip</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>gzip</secondary></indexterm>
<indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
Get the source files on your machine.  They are usually contained in an
<emphasis>archive</emphasis>, a file containing a number of other files.  Archives used for the
ports collection are generally <emphasis>gzipped tar</emphasis> files, packed with
<emphasis>tar</emphasis> and compressed with <emphasis>gzip</emphasis>, but other formats are also possible.
Whatever the format, you'll typically use <emphasis>ftp</emphasis> to get them to your
machine.
</para>
</listitem>
<listitem>

<para><indexterm><primary>source</primary><secondary>tree</secondary></indexterm>
Unpack the archive into a <emphasis>source tree</emphasis>, using <emphasis>gunzip</emphasis> and <emphasis>tar</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>Configure</emphasis> the package.  Most packages include shell scripts to do this.
Configuration performs a threefold adaptation of the package:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>It adapts it to the system hardware.
</para>
</listitem>
<listitem>

<para>It adapts it to the software environment you're running (in this case, FreeBSD).
</para>
</listitem>
<listitem>

<para>It adapts it to your personal preferences.
</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>

<para><emphasis>Build</emphasis> the package.  For most packages, this involves compiling the
source files and creating executables.
</para>
</listitem>
<listitem>

<para><emphasis>Installing</emphasis> the package.  This involves mainly copying the executables,
configuration files and documentation created by a <emphasis>build</emphasis> to the correct
place in the directory hierarchy.
</para>
</listitem>
<listitem>

<para><emphasis>Configuring</emphasis> the installed software.  This is similar in concept to
package configuration, except that it occurs in the run-time environment.  The
package configuration may perform all the necessary configuration for you.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>Ports</primary><secondary>Collection</secondary></indexterm>
These are a lot of steps, and you'll often find they're laid through a
minefield: one false move, and everything blows up.  To make porting and
installing software easier, the FreeBSD team created a framework called the
<emphasis>Ports Collection</emphasis>.  In addition, the CD-ROM edition of FreeBSD includes a
large number of pre-built packages which just need to be installed.
</para>

<para>In this chapter, we'll consider the following points as they relate to the
FreeBSD ports collection:
</para>
<itemizedlist>
<listitem>

<para>How to install a pre-compiled package.  We'll look at this in the next section.
</para>
</listitem>
<listitem>

<para>What the ports tree is, and how to compile and install (``build'') a package.
We'll look at this on page <xref linkend="CFBSD-build-port"/>.
</para>
</listitem>
<listitem>

<para>How to create and submit a new port, on page <xref linkend="CFBSD-new-port"/>
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>How to install a package</title>

<para><indexterm><primary>installing</primary><secondary>a package</secondary></indexterm>
<indexterm><primary>package</primary><secondary>installing</secondary></indexterm>
<anchor id="CFBSD-install-package"/>
<indexterm><primary>packages</primary><secondary>directory</secondary></indexterm>
In FreeBSD parlance, a package is simply a special archive which contains the
files (usually executable binary files) which are installed when you build and
install a port.  Compared to the full-blown port, packages are much faster to
install&mdash;most take less than a minute.  On the other hand, they don't give you
the choice of configuration that the complete port does.  The first and third
CD-ROMs of the distribution each contain a directory <emphasis>packages</emphasis> with a total
of nearly 1000 pre-compiled software packages, totalling about 1 GB after
compression.  Alternatively, you can find FreeBSD packages on many servers on
the Internet&mdash;check the online handbook for some places to look.
</para>

<para>To help maintain an overview, both ports and packages are divided into
categories.  They are stored in directories named after the category.  See the
file <emphasis>/usr/ports/INDEX</emphasis> for a list.  For example, <emphasis>emacs</emphasis> under
<emphasis>editors</emphasis> is in the file <emphasis>packages/editors/emacs-20.3.tgz</emphasis>.  To
install it, you simply enter:
</para>
<programlisting>
# <command>pkg_add /cdrom/packages/editors/emacs-20.3.tgz</command>
</programlisting>

<para>Alternatively, you can install packages from the <emphasis>/stand/sysinstall</emphasis> Final
Configuration Menu.  We saw this menu on page in figure <xref linkend="CFBSD-final-config-menu"/> on
page <xref linkend="CFBSD-final-config-menu-page"/>.  When you start <emphasis>sysinstall</emphasis> from the
command line, you get to this menu by selecting <emphasis>Index</emphasis>, and then
selecting <emphasis>Configure</emphasis>.
</para>
</sect1>
<sect1>
<title>Building a port</title>

<para><indexterm><primary>building</primary><secondary>a port</secondary></indexterm>
<indexterm><primary>port</primary><secondary>building</secondary></indexterm>
<anchor id="CFBSD-build-port"/>
<indexterm><primary>port</primary><secondary>FreeBSD definition</secondary></indexterm>
The FreeBSD project uses the term <emphasis>port</emphasis> to describe the additional files
needed to adapt a package to build under FreeBSD.  It does <emphasis>not</emphasis> include
the code itself, though many code archives are on the third and fourth CD-ROMs
in the directory <emphasis>/ports/distfiles</emphasis>.
</para>

<para><indexterm><primary>/usr/ports</primary><secondary>directory</secondary></indexterm>
Before you get started with the ports, you need to install the port information
on your system.  The location is fixed: they must be installed in
<emphasis>/usr/ports</emphasis>.
<indexterm><primary>ports</primary><secondary>tree</secondary></indexterm>
This directory tree is frequently called the <emphasis>Ports Tree</emphasis>.  There are a
number of ways to install them.
</para>
<sect2>
<title>Installing ports during system installation</title>

<para><indexterm><primary>ports</primary><secondary>installing</secondary></indexterm>
The simplest way to install the Ports Collection is when you install the system.
You can install it with the base system if you select the <emphasis>Custom</emphasis>
distribution and include the <emphasis>ports collection</emphasis>.
</para>
</sect2>
<sect2>
<title>Install ports from the first CD-ROM</title>

<para>The file <emphasis>ports/ports.tgz</emphasis> on the first CD-ROM is a <emphasis>tar</emphasis> archive
containing all the ports.  If you didn't install it during system installation,
use the following method to install the complete collection (about 40 MB).  Make
sure your CD-ROM is mounted (in this example on <emphasis>/cdrom</emphasis>), and enter:
</para>
<programlisting>
# <command>cd /usr</command>
# <command>tar xzvf /cdrom/ports/ports.tgz</command>
</programlisting>

<para>If you only want to extract a single package, say <emphasis>inn</emphasis>, which is in the
category <emphasis>news</emphasis>, enter:
</para>
<programlisting>
# <command>cd /usr</command>
# <command>tar xzvf /cdrom/ports/ports.tgz  ports/news/inn</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Installing ports from the ports CD-ROM</title>

<para>Alternatively, you can install the files from the ports CD-ROM.  This is not
much of an advantage for installation, but you may find it convenient to browse
through the source trees in the directory <emphasis>ports</emphasis> on the CD-ROM.  Let's
assume you have found a directory <emphasis>/ports/graphics/hpscan</emphasis> on the CD-ROM,
and it is your current working directory.  You can move the data across with the
following:
</para>
<programlisting>
# <command>cd /cdrom/ports/graphics</command>
# <command>mkdir -p /usr/ports/graphics</command>
# <command>tar cf - . | (cd /usr/ports/graphics; tar xvf -)</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Ports via FTP</title>

<para><indexterm><primary>ports</primary><secondary>via FTP</secondary></indexterm>
Of course, maybe you've just heard about this great new port of
<emphasis>xmbase-grok</emphasis>, and you want to get hold of it as soon as possible.  It's
brand new, so it's obviously not on your CD-ROM.
</para>

<para>All ports are kept in subdirectories of the URL
<emphasis>ftp://ftp.FreeBSD.org/pub/FreeBSD</emphasis>.  The directory
<emphasis>ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/ports</emphasis> contains ports for
FreeBSD-CURRENT (see <xref linkend="CFBSD-chcurrent"/>, page <xref linkend="CFBSD-release-tags"/>).  The other
directories are named after the release.  For example, for FreeBSD-3.2, you
would select <emphasis>ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/ports-3.2</emphasis>.  To get
this one, you might perform the following steps:
</para>
<programlisting>
# <command>ftp ftp.freebsd.org</command>
Connected to wcarchive.cdrom.com.
220 wcarchive.cdrom.com FTP server (Version DG-3.1.27 Wed Dec 2 01:29:08 PST 1998) ready.
331 Guest login ok, send your complete e-mail address as password.
\&amp;<emphasis>...lots of blurb omitted</emphasis>
ftp&gt; <command>cd /pub/FreeBSD/ports/ports-3.2/databases</command>
250 CWD command successful.
ftp&gt; <command>ls -ltr</command>
200 PORT command successful.
150 Opening ASCII mode data connection for /bin/ls.
total 36
drwxrwxr-x  2 2035  ftp-Free  512 Apr  9  1996 pkg
drwxrwxr-x  5 2035  ftp-Free  512 Dec 12  1996 typhoon
drwxrwxr-x  4 2035  ftp-Free  512 Jan 28  1997 gdbm
drwxr-xr-x  4 2035  ftp-Free  512 Jun 13 15:13 db
drwxr-xr-x  4 2035  ftp-Free  512 Jun 24 15:15 p5-DBD-Pg
drwxrwxr-x  5 2035  ftp-Free  512 Jun 24 15:15 p5-Pg
drwxr-xr-x  5 2035  ftp-Free  512 Jun 24 15:15 p5-Mysql
drwxrwxr-x  4 2035  ftp-Free  512 Jun 27 01:48 p5-DBI
drwxr-xr-x  4 2035  ftp-Free  512 Jul  2 15:20 p5-DBD-mysql
drwxrwxr-x  6 2035  ftp-Free  512 Jul 14 15:20 msql
drwxrwxr-x  4 2035  ftp-Free  512 Jul 15 15:27 p5-Msql
drwxrwxr-x  6 2035  ftp-Free  512 Jul 17 15:24 postgresql
drwxr-xr-x  6 2035  ftp-Free  512 Jul 18 03:19 mysql
drwxrwxr-x  6 2035  ftp-Free  512 Aug 27 03:21 gnats
drwxr-xr-x  5 root  ftp-Free  512 Aug 30 15:18 xmbase-grok
-rw-rw-r--  1 2035  ftp-Free  442 Sep  2 15:30 Makefile
drwxr-xr-x  5 root  ftp-Free  512 Sep  2 15:31 xmysql
drwxr-xr-x  4 root  ftp-Free  512 Sep  2 15:31 xmysqladmin
226 Transfer complete.
ftp&gt; <command>get xmbase-grok.tar.gz</command>
local: xmbase-grok.tar.gz remote: xmbase-grok.tar.gz
200 PORT command successful.
150 Opening BINARY mode data connection for /usr/bin/tar.
226 Transfer complete.
2390 bytes received in 1.37 seconds (1.71 KB/s)
</programlisting>

<para>Since <emphasis>xmbase-grok</emphasis> is a directory, you tell <emphasis>ftp</emphasis> to automatically
<emphasis>tar</emphasis> and <emphasis>gzip</emphasis> the directory and return you a file
<emphasis>xmbase-grok.tar.gz</emphasis>.  Not all ftp servers support tarring and gzipping,
since gzipping in particular takes up a lot of CPU time.
</para>

<para>Next, you unpack it in your <emphasis>/usr/ports/databases</emphasis> directory:
</para>
<programlisting>
# <command>cd /usr/ports/databases/</command>
# <command>tar xzvf /home/Book/FreeBSD/xmbase-grok.tar.gz </command>
xmbase-grok/
xmbase-grok/files/
xmbase-grok/files/md5
xmbase-grok/pkg/
xmbase-grok/pkg/COMMENT
xmbase-grok/pkg/DESCR
xmbase-grok/pkg/PLIST
xmbase-grok/Makefile
xmbase-grok/patches/
xmbase-grok/patches/patch-aa
xmbase-grok/patches/patch-ab
xmbase-grok/patches/patch-ac
</programlisting>

<para></para>
</sect2>
<sect2>
<title>What's in that port?</title>

<para><anchor id="CFBSD-ports-contents"/>
One problem with the Ports Collection is the sheer number.  It can be difficult
just to find out what they're supposed to do.  If you build all the ports,
you'll be busy for weeks, and there's no way you could read all the
documentation in one lifetime.  Where can you get an overview?  Here are some
suggestions:
</para>
<itemizedlist>
<listitem>

<para>You can print the index with the following commands:
</para>
<programlisting>
# <command>cd /usr/ports</command>
# <command>make print-index | lpr</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>You can search for a specific keyword with the <emphasis>search</emphasis> target.  For
example, to find ports related to <emphasis>Emacs</emphasis>, you might enter:
</para>
<programlisting>
# <command>cd /usr/ports</command>
# <command>make search key=Emacs</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>You can build a series of <emphasis>html</emphasis> pages like this:
</para>
<programlisting>
# <command>cd /usr/ports</command>
# <command>make readmes</command>
</programlisting>

<para>You can then browse them at the URL <emphasis>file:/usr/ports/README.html</emphasis>.
</para>
</listitem>
<listitem>

<para>You can find a printable version in the files <emphasis>/cdrom<xref linkend="CFBSD-skelc"/>/docs</emphasis>:
<table frame='all'><title>Ports overview</title>
box,center,tab(#) ;
lI | lw65 .
File#Content
=
packages-by-category.ps#T{
Packages sorted by category, in PostScript
T}
packages-by-category.txt#T{
Packages sorted by category, in ASCII
T}
packages.ps#T{
Packages sorted alphabetically, in PostScript
T}
packages.txt#T{
Packages sorted alphabetically, in ASCII
T}
interested in the background, read <xref linkend="CFBSD-chxtheory"/>.

</tbody></tgroup></table>
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Ports via CVSup</title>

<para><indexterm><primary>ports</primary><secondary>via CVSup</secondary></indexterm>
If you're using <emphasis>CVSup</emphasis> to keep up to date with the source tree, you have
the option of including the ports tree <emphasis>/usr/ports</emphasis> in the trees you
maintain.  See page <xref linkend="CFBSD-CVSup"/> for more details.
</para>
</sect2>
<sect2>
<title>Getting the source archive</title>

<para>You'll see from the above example that there are not many files in the port.
Most of the files required to build the software are in the original source code
archive, but you don't have it yet!
</para>

<para>Well, that's not a problem.  Part of the function of the ports collection is to
go out on the Net and get them for you.  This is completely automatic: you just
type <emphasis>make</emphasis>, and the build process gets the source archive for you and
builds it.  Of course, you must be connected to the Internet for this to work.
</para>

<para>In any case, are you sure you don't have the sources?  Maybe you do.  As we saw,
most of them are on the third and fourth CD-ROM, in the directory
<emphasis>/\f(CIcdrom<emphasis>/ports/distfiles</emphasis>.  The ports collection Makefiles look for
them in this directory (another good reason to mount your CD-ROM on
<emphasis>/cdrom</emphasis>) and also in <emphasis>/usr/ports/distfiles</emphasis>.
</para>

<para>If you mount your CD-ROM elsewhere (maybe because you have more than one CD-ROM
drive, and so you have to mount the CD-ROM on, say, <emphasis>/cd4</emphasis>), the Makefiles
will not find the distribution files and will try to load the files from the
Internet.  One way to solve this problem is to create a symbolic link from
<emphasis>/cd4/ports/distfiles</emphasis> to <emphasis>/usr/ports/distfiles</emphasis>.  The trouble with
this approach is that you will then no longer be able to load new distribution
files into <emphasis>/usr/ports/distfiles</emphasis>, since it will be on CD-ROM.  Instead, do:
</para>
</emphasis><programlisting>
# <command>cd /cd4/ports/distfiles</command>
# <command>mkdir -p /usr/ports/distfiles</emphasis>			<emphasis>make sure you have a distfiles directory</command>
# <command>for i in *; do</command>
&gt; <command>  ln -s /cd4/ports/distfiles/$i /usr/ports/distfiles/$i</command>
&gt; <command>done</command>
</programlisting>

<para>If you're using <emphasis>csh</emphasis> or <emphasis>tcsh</emphasis>, enter:
</para>
<programlisting>
# <command>cd /cd4/ports/distfiles</command>
# <command>mkdir -p /usr/ports/distfiles</emphasis>			<emphasis>make sure you have a distfiles directory</command>
# <command>foreach i (*)</command>
? <command>  ln -s /cd4/ports/distfiles/$i /usr/ports/distfiles/$i</command>
? <command>end</command>
</programlisting>

<para>This creates a symbolic link to each of the distribution files, but if the file
for a specific port isn't there, the ports collection can fetch it and store it
in the directory.
</para>
</sect2>
<sect2>
<title>Building the port</title>

<para><indexterm><primary>building</primary><secondary>ports</secondary></indexterm>
<indexterm><primary>ports</primary><secondary>building</secondary></indexterm>
<anchor id="CFBSD-new-port"/>
Once you have the skeleton files for the port, the rest is simple.  Just enter:
</para>
<programlisting>
# <command>cd /usr/ports/databases/xmbase-grok</command>
# <command>make</command>
# <command>make install</command>
</programlisting>

<para>It's a good idea to perform the <emphasis>make</emphasis> step first: <emphasis>make install</emphasis>
does not always build the package.
</para>
</sect2>
<sect2>
<title>Port dependencies</title>

<para><indexterm><primary>ports</primary><secondary>dependencies</secondary></indexterm>
Sometimes, it's not enough to build a single port.  Many ports depend on other
ports.  If you have the complete, up-to-date ports tree installed on your
system, the Ports Collection will take care of this for you: it will check if
the other port is installed, and if it isn't, it will install it for you.  For
example, <emphasis>tkdesk</emphasis> depends on <emphasis>tk</emphasis>.  <emphasis>tk</emphasis> depends on <emphasis>tcl</emphasis>.
If you don't have any of them installed, and you try to build <emphasis>tkdesk</emphasis>, it
will recursively install <emphasis>tk</emphasis> and <emphasis>tcl</emphasis> for you.
</para>

<para>Things get a little more complicated if your tree isn't complete, or if you have
updated specific packages.  For example, the latest version of <emphasis>tkdesk</emphasis>
depends on <emphasis>tk</emphasis> version 4.1.  Older versions depended on version 3.6.  If
you update the directory <emphasis>/usr/ports/x11/tkdesk</emphasis>, but not
<emphasis>/usr/ports/x11/tk</emphasis>, the build will probably fail.
</para>

<para>There are two possible solutions to this problem:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>CVSup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>CVSup</secondary></indexterm>
<indexterm><primary>ctm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm</secondary></indexterm>
Keep the tree up to date with <emphasis>CVSup</emphasis> or <emphasis>ctm</emphasis> (see <xref linkend="CFBSD-chcurrent"/>).
</para>
</listitem>
<listitem>

<para>Check the dependencies, and update them manually.
</para>
</listitem>
</itemizedlist>

<para>To check the dependencies, look at the <emphasis>Makefile</emphasis>.  For example, the current
version of <emphasis>/usr/ports/x11/tkdesk/Makefile</emphasis> contains:
</para>
<programlisting>
# New ports collection makefile for:	tkdesk
# Version required:     1.0b2
# Date created:         30 Jul 1996
# Whom:                 shanee@rabbit.augusta.de
#
# $I\&amp;d: Makefile,v 1.4 1997/04/20 13:19:59 wosch Exp $
#

DISTNAME=	tkdesk-1.0b3
PKGNAME=	tkdesk-1.0b3
CATEGORIES=	misc x11 tk41
MASTER_SITES=	http://sun1.rrzn-user.uni-hannover.de/~zzhibol/tkdesk/

MAINTAINER=	nox@jelal.hb.north.de

LIB_DEPENDS=	tk41\\.1\\.:${PORTSDIR}/x11/tk41		<emphasis>look at this line</emphasis>

post-patch:
	-rm ${WRKSRC}/tcldesk/*.orig ${WRKSRC}/tcldesk/*/*.orig

\&amp;.include &lt;bsd.port.mk&gt;
</programlisting>

<para>The definition <emphasis>LIB_DEPENDS</emphasis> tells you the dependencies.  In this case, it
will first look for the libraries <emphasis>/usr/lib/libtk41.so.1.0</emphasis> or
<emphasis>/usr/local/lib/libtk41.so.1.0</emphasis>.  If it finds them, it will be satisfied.
Otherwise it will build the port at <emphasis>/usr/ports/x11/tk41</emphasis>.  The <emphasis>make</emphasis>
variable <emphasis>PORTSDIR</emphasis> represents the name of the top-level ports directory,
currently <emphasis>/usr/ports</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>Getting common software</title>

<para><indexterm><primary>Getting</primary><secondary>common software</secondary></indexterm>
<indexterm><primary>netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netscape</secondary></indexterm>
A lot of software doesn't need to be ported.  For example, if you want
<emphasis>Netscape</emphasis>, you can just download it from <emphasis>ftp.netscape.com</emphasis>.  In fact,
you have a choice of three different versions of <emphasis>Netscape</emphasis>: you can take
the native FreeBSD version, the BSD/OS version or the Linux version.
</para>

<para>That's where the trouble starts.  Which one do you use?  How do you install it?
Netscape's installation procedures are getting better, but they still leave
something to be desired.
</para>

<para>The answer's simple: take the port!  Although Netscape comes only in binary
form, the port handles getting the correct version and installing it for you.
Another advantage to using a port instead of installing the package manually is
that the port installs the software as a FreeBSD package, which makes it much
easier to remove the software later.
</para>

<para><indexterm><primary>StarOffice</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>StarOffice</secondary></indexterm>
This method can be used to install some other software as well, for example
<emphasis>StarOffice</emphasis>.  The moral is simple: always check the ports collection before
getting a software package from the net.
</para>
</sect1>
<sect1>
<title>Maintaining ports</title>

<para><indexterm><primary>maintaining</primary><secondary>ports</secondary></indexterm>
<indexterm><primary>ports</primary><secondary>maintaining</secondary></indexterm>
Once you install a port, you might consider that to be the end of the story.
That's seldom the case.  For example:
</para>
<itemizedlist>
<listitem>

<para>One day, you might find your disk fills up, so you go looking for old stuff you
don't use any more.  How do you know whether it's part of a port or not?
</para>
</listitem>
<listitem>

<para>You might need to replace a port by a newer version.  How do you do it?
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<sect3>
<title>Controlling installed ports</title>

<para><indexterm><primary>controlling</primary><secondary>installed ports</secondary></indexterm>
<indexterm><primary>ports</primary><secondary>controlling</secondary></indexterm>
We've already seen the program <emphasis>pkg_add</emphasis> when installing pre-compiled
packages.  There are a number of other <emphasis>pkg_</emphasis> programs which can help you
maintain installed ports, whether they have been installed by <emphasis>pkg_add</emphasis> or
by <emphasis>make install</emphasis> from the Ports Collection:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>pkg_info</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pkg_info</secondary></indexterm>
<emphasis>pkg_info</emphasis> will tell you which ports are installed.  For example,
</para>
<programlisting>
$ <emphasis> pkg_info -I -a | sort -f | less</emphasis>
a2ps-A4-4.9.7       Formats an ascii file for printing on a postscript printer.
aalib-1.2           An ascii art library
acroread-3.01       View, distribute and print PDF documents.
afm-1.0             Adobe Font Metrics.
apache-1.2.4        The extremely popular Apache http server.  Very fast, very c
apache-1.2b10       The extremely popular Apache http server.  Very fast, very c
<emphasis>\&amp;... etc</emphasis>
elm-2.4ME+22        ELM Mail User Agent
elm-2.4ME+32        ELM Mail User Agent
<emphasis>\&amp;... etc</emphasis>
</programlisting>

<para><indexterm><primary>pkg_list</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pkg_list</secondary></indexterm>
The option <emphasis>-a</emphasis> tells <emphasis>pkg_list</emphasis> to list all packages; otherwise you
should specify a package name.  The option <emphasis>-I</emphasis> specifies that the list
should be a one-line ``Index'' description; otherwise you get a multi-line
description of the package.
</para>

<para>By default, <emphasis>pkg_info</emphasis> lists the packages in the order in which they were
installed, which is not normally of great interest.  By piping into the command
<emphasis>sort -f</emphasis>, we get it in alphabetical order.  The <emphasis>-f</emphasis> flags tells
<emphasis>sort</emphasis> to <emphasis>fold</emphasis> upper case into the same sort order as lower case;
otherwise all packages with names starting with a capital letter would come
first.  Finally, <emphasis>less</emphasis> allows us to page through what could be a very
long list.
</para>

<para>Note the advantage of sorting in this example: it seems we have two versions of
<emphasis>apache</emphasis> and two versions of <emphasis>elm</emphasis> installed, probably not what we
intended.  If it had been unsorted, it would be difficult to discover this fact.
</para>
</listitem>
<listitem>

<para><indexterm><primary>pkg_delete</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pkg_delete</secondary></indexterm>
You can <emphasis>remove</emphasis> a package with <emphasis>pkg_delete</emphasis>.  You need to be
<emphasis>root</emphasis> to do this.  For example, the list above shows two versions of the
<emphasis>elm</emphasis> mail user agent.  To remove the older one, we enter:
</para>
<programlisting>
# <command>pkg_delete elm-2.4ME+22</command>
File `/usr/local/man/man1/answer.1' doesn't really exist.
Unable to completely remove file '/usr/local/man/man1/answer.1'
File `/usr/local/man/man1/checkalias.1' doesn't really exist.
Unable to completely remove file '/usr/local/man/man1/checkalias.1'
<emphasis>\&amp;... etc</emphasis>
Couldn't entirely delete package (perhaps the packing list is
incorrectly specified?)
</programlisting>

<para>In this case, it looks as if somebody has tried to remove the files before, so
<emphasis>pkg_delete</emphasis> couldn't do so.
</para>

<para>Another problem with <emphasis>pkg_delete</emphasis> is that it might delete files of the
same name which have been replaced by newer packages.  After performing this
operation, we try:
</para>
<programlisting>
$ <command>elm</command>
bash: elm: command not found
</programlisting>

<para>Oops!  We tried to delete the old version, but we deleted at least part of the
new version.  Now we need to install it again.
</para>

<para>The moral of this story is that things aren't as simple as they might be.  When
you install a new version of a package, you may want to test it before you
commit to using it all the time.  You can't just go and delete the old version.
One possibility would be to install the new package, and try it out.  When
you've finished testing, delete <emphasis>both</emphasis> packages and re-install the one you
want to keep.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
<sect3>
<title>Keeping track of updates</title>

<para>The best way to find out about updates is to subscribe to the
<emphasis>FreeBSD-ports</emphasis> mailing list.  That way, you will get notification every
time something changes.  If you're tracking the ports tree, you'll also get the
updates to the ports tree automatically.  Otherwise you will have to download
the port.  In either case, to update your installed port, just repeat the build.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Submitting a new port</title>

<para><indexterm><primary>submitting</primary><secondary>a port</secondary></indexterm>
<indexterm><primary>ports</primary><secondary>submitting</secondary></indexterm>
The ports collection is constantly growing.  Hardly a day goes by without a new
port being added to the list.  Maybe you want to submit the next one?
</para>

<para>It's beyond the scope of this book to give you all the details of how to go
about submitting a port.  Check in the online handbook for the details, which
might change from time to time.  Basically, however, the sequence is:
</para>
<itemizedlist>
<listitem>

<para>Read the instructions <emphasis>before</emphasis> starting the port.  There are many ways to
port a package&mdash;there could even be more than one correct way to port it.  If
you port it in the wrong way, the ports team will be unable to accept it, and
fixing the problem can easily be as difficult as doing the port was in the first
place.
</para>
</listitem>
<listitem>

<para>Write a top-level <emphasis>Makefile</emphasis> for the port, including information on the
master sites from which the package may be downloaded, the name and category of
the package, and the name of the maintainer (you).
</para>
</listitem>
<listitem>

<para>Perform the port.
</para>
</listitem>
<listitem>

<para>Submit it.
</para>
</listitem>
</itemizedlist>

<para><!--  XXXFrom: Doug White &lt;dwhite@gdi.uoregon.edu&gt; -->
<!--  XXXReply-To: Doug White &lt;dwhite@resnet.uoregon.edu&gt; -->
<!--  XXXTo: Greg Pavelcak &lt;gpavelcak@philos.umass.edu&gt; -->
<!--  XXXcc: questions@FreeBSD.ORG -->
<!--  XXXSubject: Re: Optimizing Compile of Ports -->
<!--  XXX -->
<!--  XXXOn Thu, 25 Sep 1997, Greg Pavelcak wrote: -->
<!--  XXX -->
<!--  XXX&gt; I've been installing ports lately instead of packages just for the -->
<!--  XXX&gt; heck of it. Compile optimizations seem to be out of my control with -->
<!--  XXX&gt; ports. Ilooked in /etc/make.conf /usr/share/mk/bsd.port.mk and the -->
<!--  XXX&gt; individual make files associated with ports and I don't see anything -->
<!--  XXX&gt; about compile options. Am I missing something, or is this just the -->
<!--  XXX&gt; way it is? (It's probably a good idea to keep me from messing with -->
<!--  XXX&gt; this stuff anyway.) -->
<!--  XXX -->
<!--  XXXThe ports do assume a standard set of compile-time options.  If you want -->
<!--  XXXto tweak them just before the build starts, you can run ``make -->
<!--  XXXconfigure'', which will fetch, extract, patch, and configure everything -->
<!--  XXXbut stop before the make is started.  See /usr/share/mk/bsd.port.mk line -->
<!--  XXX220-ish for the standard target list. -->
<!--  XXX -->
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchproblems"><title>Installation Problems</title>

<para>In <xref linkend="CFBSD-chinstall"/>, and <xref linkend="CFBSD-chshareinstall"/>, we saw what <emphasis>should</emphasis> happen when
you install FreeBSD.  Unfortunately, things don't always run smoothly.  In this
chapter, we'll look at what could go wrong and what to do if it does.  In the
following section, we'll look at what to do if the installation doesn't work as
expected, and on page
we'll consider how to recover a crashed system.
</para>
<sect1>
<title>If things go wrong</title>

<para>In this section, we'll look at the most common installation problems.  Before
you start, though, a couple of general recommendations:
</para>
<itemizedlist>
<listitem>

<para>If you can't boot, and if this chapter doesn't help, the most important
indication is the point at which the boot failed.  It's worth repeating the boot
with the <emphasis>-v</emphasis> (verbose) flag: enter it at the <emphasis>Boot:</emphasis> prompt:
</para>
<programlisting>
Boot: <command>-v</command>
</programlisting>

<para>It will give you additional information which might help diagnose the problem.
</para>
</listitem>
<listitem>

<para>If you get the system installed to the point where you can start it, but it
doesn't run quite the way you want, <emphasis>don't</emphasis> reinstall.  In most cases,
reinstallation doesn't help.  Instead, try to find the cause of the
problem&mdash;with the aid of the <emphasis>FreeBSD-questions</emphasis> mailing list if
necessary&mdash;and fix the problem.
</para>
</listitem>
</itemizedlist>

<para>Most installation problems relate to hardware incompatibilities, either because
of inherent problems in the hardware, or because the hardware is not configured
in the way the system expects.  You have two choices here:
</para>
<itemizedlist>
<listitem>

<para>Modify the kernel's viewpoint to match the hardware.  See page
<xref linkend="CFBSD-UserConfig-details"/> for an example of how to do this.
</para>
</listitem>
<listitem>

<para>Modify the hardware to match the kernel's viewpoint.  Check your hardware
manuals to do this.
</para>
</listitem>
</itemizedlist>

<para>Beyond these problems, however, specific hardware or combinations of hardware
can cause problems.  Check out the file <emphasis>TROUBLE.TXT</emphasis> on the first CD-ROM
for details of specifics.  In the following sections we'll look at the more
common cases that it mentions.
</para>
<sect2>
<title>Problems with sysinstall</title>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<emphasis>sysinstall</emphasis> is intended to be easy to use, but it is not very tolerant of
errors.  You may well find that you enter something by mistake and can't get
back to where you want to be.  In case of doubt, if you haven't yet committed to
the install, you can always just reboot.
</para>

<para></para>
</sect2>
<sect2>
<title>Problems with CD-ROM installation</title>

<para>If you select to install from CD-ROM, you may get the message:
</para>
<programlisting>
No CD-ROM device found
</programlisting>

<para>This might even happen if you have booted from CD-ROM!  The most common reasons
for this problem are:
</para>
<itemizedlist>
<listitem>

<para>You forgot to put the CD-ROM in the drive before you booted.  Sorry, this is a
current limitation of the boot process.  Restart the installation (press
<keycap>CTRL-ALT-DEL</keycap> or the reset button, or power cycle the computer).
</para>
</listitem>
<listitem>

<para>You are using an ATAPI CD-ROM drive which doesn't quite fit the specification.
In this case you need help from the FreeBSD developers.  Send a message to
<emphasis>FreeBSD-questions@FreeBSD.org</emphasis> and describe your CD-ROM as accurately as
you can.
</para>
</listitem>
<listitem>

<para>You have an old proprietary CD-ROM drive which is not set up the way the generic
kernel expects it.  See page <xref linkend="CFBSD-supported-hardware"/> for details of which
hardware is supported.  If your CD-ROM is set up differently, you have the
choice of setting it to correspond with what the generic kernel expects, or
using the configuration manager included in the generic kernel to change the
parameters&mdash;see page
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Install tries to install from floppy</title>

<para><indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
Sometimes when an installation medium fails, <emphasis>sysinstall</emphasis> decides to try
to get the root file system from floppy.  For some reason, you can't cancel this
menu.  Instead, just let <emphasis>sysinstall</emphasis> look for the file system on the
floppy.  When it doesn't find it, it'll give up by itself.
</para>
</sect2>
</sect1>
<sect1>
<title>Can't boot</title>

<para>One of the most terrifying things after installing FreeBSD is if you find that
the machine just won't boot.  This is particularly bad if you have important
data on the disk (either another operating system, or data from a previous
installation of FreeBSD).
</para>

<para>At this point, seasoned hackers tend to shrug their shoulders and point out that
you still have the backup you made before you did do the installation.  If you
tell them you didn't do a backup, they tend to shrug again and move on to
something else.
</para>

<para>Still, all is probably not lost.  The two most frequent causes of boot failure
are:
</para>
<itemizedlist>
<listitem>

<para>You installed the wrong boot manager, or you wiped it out altogether.  This one
is harmless.  Boot from the floppy disk, but when the prompt appears, enter:
</para>
<programlisting>
Boot: <command>hd()kernel</command>
</programlisting>

<para>After booting, install the correct bootstrap with <emphasis>disklabel -B</emphasis>, and you
should be able to boot from hard disk again.
</para>
</listitem>
<listitem>

<para>Things might continue a bit further: you elect to install <emphasis>booteasy</emphasis>, and
when you boot you get the Boot Manager prompt, but it just prints <emphasis>F?</emphasis> at
the boot menu and won't accept any input.  In this case, you may have set the
hard disk geometry incorrectly in the Partition editor when you installed
FreeBSD.  Go back into the partition editor and specify the correct geometry for
your hard disk.  Unfortunately, you must reinstall FreeBSD from the beginning if
this happens.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Can't find correct geometry</title>

<para>If you can't figure out the correct geometry for your machine, and even if you
don't want to run Microsoft on your machine, try installing a small Microsoft
partition at the beginning of the disk and install FreeBSD after that.  The
install program will see the Microsoft partition and try to infer the correct
geometry from it, which usually works.  After the partition editor has accepted
the geometry, you can remove the Microsoft partition again.  If you are sharing
your machine with Microsoft, make sure that the Microsoft partition is before the
FreeBSD partition.  Remember that, in either case, you may need to locate the
FreeBSD root file system completely in the first 1024 cylinders, otherwise you
will not be able to boot.  See page <xref linkend="CFBSD-EIDE"/> for further details.
</para>

<para>Alternatively, if you don't want to share your disk with any other operating
system, select the option to use the entire disk (<emphasis>a</emphasis> in the partition
editor).  This will leave all geometry considerations aside.
</para>
</sect2>
<sect2>
<title>System hangs during boot</title>

<para>A number of problems may lead to the system hanging during the boot process.
Here are a couple:
</para>
<itemizedlist>
<listitem>

<para>After installation, you might find that the system hangs after the message:
</para>
<programlisting>
Changing root to /dev/da0a
</programlisting>

<para><indexterm><primary>Ethernet</primary><secondary>3Com 3C509</secondary></indexterm>
<indexterm><primary>3Com</primary><secondary>3C509</secondary></indexterm>
This may happen if your system has a 3com 3c509 Ethernet adapter.  The
<emphasis>ep</emphasis> device driver is sensitive to probes for other devices that also use
the same address (by default address <emphasis>0x300</emphasis>).  Reboot the system by power
cycling the machine (turning it off and on.  Always wait a few seconds between
powering off and powering on again).  This will probably unwedge the Ethernet
board.  At the <emphasis>Boot:</emphasis> prompt specify the <emphasis>-c</emphasis> option to invoke
<emphasis>UserConfig</emphasis> and use the <emphasis>disable</emphasis> command to disable the device
probes for all devices at address <emphasis>0x300</emphasis> except the <emphasis>ep0</emphasis> driver.
After this, your machine should boot successfully.
</para>
</listitem>
<listitem>

<para>Sometimes the system appears to hang after the message:
</para>
<programlisting>
fd0: 1.44MB 3.5in
fd1: 1.2MB 5.25in
</programlisting>

<para>In fact, this usually isn't a hang, just a very long probe for <emphasis>wdc0</emphasis>.
The probe often takes a long time to complete on certain systems which don't
have a WD controller.  If your system does have a WD controller, this problem
can also happen after the lines:
</para>
<programlisting>
wdc0 at 0x1f0-0x1f7 irq 14 on isa
wdc0: unit 0 (wd0): &lt;WDC AC2200F&gt;
wd0: 202MB (415380 sectors), 989 cyls, 12 heads, 35 S/T, 512 B/S
</programlisting>

<para>In this case, the driver is looking for a second WD disk controller.  Be
patient, your system will boot.  You can eliminate the problem by using
UserConfig to eliminate the device <emphasis>wdc1</emphasis>, or by building a custom kernel.
</para>
</listitem>
<listitem>

<para>When booting from floppy, the system might hang after the message:
</para>
<programlisting>
Uncompressing kernel...
</programlisting>

<para>This is normally an indication that you have a memory problem (not enough
memory, faulty cache, or incorrect chipset parameters).
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Panic: cannot mount root</title>

<para>If you install FreeBSD on any disk except the first, you might find that the
boot proceeds normally, but then dies with the message:
</para>
<programlisting>
changing root device to wd1s1a
panic: cannot mount root
</programlisting>

<para>This problem comes from the fact that the BIOS uses a different numbering scheme
from FreeBSD, and it's difficult to correlate the disk numbers.
</para>

<para>In the case where the boot disk is not the first disk in the system, FreeBSD may
need help finding it.  There are two common situations where you need to tell
FreeBSD where the root filesystem is:
</para>
<itemizedlist>
<listitem>

<para>You have two IDE disks, each configured as the master on their respective IDE
busses.  You have no disk on the primary slave position (you might have a CD-ROM
drive there).  FreeBSD is on the second disk.  The BIOS sees these as disk 0 and
disk 1, while FreeBSD sees them as <emphasis>wd0</emphasis> and <emphasis>wd2</emphasis>, in other words
disk 2.  To tell the loader how to find it, stop it before booting and enter:
</para>
<programlisting>
disk1s1a:&gt; boot 1:wd(2,a)kernel
</programlisting>

<para>If you have a disk on primary master and on slave, the BIOS numbers agree with
FreeBSD, so you don't need to do this.
</para>
</listitem>
<listitem>

<para>If you're booting from a SCSI disk when you have one or more IDE disks in the
system, the FreeBSD disk number is lower than the BIOS disk number.  If you have
two IDE disks as well as the SCSI disk, the SCSI disk is BIOS disk 2, but it's
FreeBSD disk number 0, so you would say:
</para>
<programlisting>
disk1s1a:&gt; boot 2:da(0,a)kernel
</programlisting>

<para>This tells FreeBSD that you want to boot from BIOS disk 2, which is the first
SCSI disk in the system.  If you only had one IDE disk, you would use <emphasis>1:</emphasis>
instead.
</para>
</listitem>
</itemizedlist>

<para>You don't need to do this every time: once you have determined the correct
values to use, put the command exactly as you would have typed it in the file
<emphasis>/boot.config</emphasis>.  FreeBSD uses the contents of this file as the default
response to the <emphasis>boot:</emphasis>prompt.
</para>
</sect2>
<sect2>
<title>Can't find Intel EtherExpress board</title>

<para>A couple of problems can prevent recognition of an EtherExpress board:
</para>
<itemizedlist>
<listitem>

<para>You don't have a choice of I/O parameters for the EtherExpress 16. You must set
it to be memory mapped at address <emphasis>0xD0000</emphasis>, and set the amount of mapped
memory to 32K using the Intel-supplied program <emphasis>softset.exe</emphasis>.
</para>
</listitem>
<listitem>

<para>The <emphasis>mcd</emphasis> driver can mistakenly recognize Intel EtherExpress boards as
<emphasis>mcd</emphasis> devices.  Check the <emphasis>dmesg</emphasis> output: if it claims to have an
<emphasis>mcd0</emphasis> device, disable the <emphasis>mcd</emphasis> driver in UserConfig.  See page
<xref linkend="CFBSD-UserConfig-details"/> for details of UserConfig.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Can't see 3Com PCMCIA board</title>

<para>There are a couple of possible problems in this area:
</para>
<itemizedlist>
<listitem>

<para>FreeBSD does not support multi-function boards such as the 3C562 ethernet/modem
board.
</para>
</listitem>
<listitem>

<para>The 3C589 driver must know the IRQ, I/O port address and IOMem address in order
to work.  This information is stored in NVRAM on the board.  Unfortunately, the
only program capable of reading them is the DOS program supplied by 3COM.  This
program is very finicky about its operating environment, so it's best to run it
on a absolutely basic MS-DOS system with no other drivers.  Ignore its
complaints about CARD-Services not being found: it will continue.  If it tells
you the board is defective, use other methods to confirm the claim: it sometimes
does this even if there's nothing wrong with the board.  Note the IRQ, port, and
IOMEM values (the latter is called the CIS tuple by 3COM).  The first two can be
set in the program, the third can only be read.  Set these values in your kernel
configuration.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>No packets are transmitted on PCMCIA network board</title>

<para>Many PCMCIA boards use either 10-Base2 (BNC) or 10-BaseT connectors for
connecting to the network.  The driver can't auto-select the correct connector,
so you must tell it which connector to use with a combination of the
<emphasis>ifconfig</emphasis> flags <emphasis>link0</emphasis>, <emphasis>link1</emphasis> and <emphasis>link2</emphasis>.
Typically, one of the following commands selects the correct connector:
</para>
<programlisting>
# <command>ifconfig zp0 -link0 link1</command>
# <command>ifconfig zp0 link0 -link1</command>
</programlisting>

<para>Check the man page for your board for the details: they vary from one board to
another.  You can set these flags in <emphasis>sysinstall</emphasis> by using the <emphasis>Extra
options to ifconfig:</emphasis> field in the network setup screen.
</para>
</sect2>
<sect2>
<title>Device timeout on <emphasis>ed</emphasis> Ethernet boards</title>

<para>You might find that the system finds your <emphasis>ed</emphasis> board, but after starting up
the system you get device timeout errors.  There are two typical reasons for
this:
</para>
<itemizedlist>
<listitem>

<para>The Ethernet board may not be correctly attached to the network.  If it's not
connected, you at least need a terminator.
</para>
</listitem>
<listitem>

<para>Your board is set up for a different IRQ from what the kernel expects.  By
default, the <emphasis>ed</emphasis> driver does not use the ``soft'' configuration (values
entered using EZSETUP in MS-DOS), but it will use the software configuration if
you specify <emphasis>?</emphasis> in the IRQ field of your kernel config file.
</para>
</listitem>
</itemizedlist>

<para>If the board is incorrectly configured, either move the jumper on the board to a
hard configuration setting (altering the kernel settings if necessary), or
specify the IRQ as <emphasis>-1</emphasis> in UserConfig or <emphasis>?</emphasis> in your kernel config
file.  This will tell the kernel to use the soft configuration.
</para>
</sect2>
<sect2>
<title>Devices at IRQ 9 don't work</title>

<para>You might find that a board set up to generate IRQ 9 (also known as IRQ 2)
doesn't work.  It definitely won't work if you define it to be at IRQ 2, but
even if you define it to be at IRQ 9, you might have problems.  One reason might
be that you have a VGA board which generates IRQ 9: some Microsoft programs used to
use this feature, though it is now obsolete.  Most VGA boards have a jumper to
disable generating IRQ 9.
</para>

<para>Unfortuntately, this may not be enough.  In some cases, you can disable IRQ 9 on
the VGA, and the board still won't work: you may have a brain-dead VGA board
which doesn't generate any interrupts when you remove the jumper, but it holds
the interrupt line anyway and stops any other board from asserting an interrupt.
</para>

<para>XX Should we mention this?
One sure-fire way of making sure that your VGA board doesn't do anything on the
IRQ 9 line is to cut the trace: remove the VGA board from the computer, and
place it on a table with the component side down, the mounting bracket on the
left and the bus connector pointing downwards.  IRQ 9 is the fourth contact from
the left.  You'll probably see a thin trace going away from the contact pad.  I
find that the best way to cut these traces is with a watchmaker's screwdriver.
Don't worry about damaging the board: this trace is never used for anything, and
if you <emphasis>do</emphasis> cut the wrong one by mistake, you can solder it back again
relatively easily.
</para>
</sect2>
<sect2>
<title>Kernel doesn't find Matsushita/Panasonic CD-ROM</title>

<para>If you have a Matsushita/Panasonic CD-ROM, and the kernel doesn't recognize it,
check that the port address for the <emphasis>matcd</emphasis> driver is really correct for
your host interface board.  Some Microsoft drivers for SoundBlaster report a
hardware port address for the CD-ROM interface that is 0x10 lower than it really
is.
</para>

<para>If you can't figure out the settings by examining the board or documentation,
you can restart the system and use UserConfig (see page <xref linkend="CFBSD-UserConfig"/>) to
change the <emphasis></emphasis> address to <emphasis>-1</emphasis>.  This setting causes the driver to
look at a number of I/O ports that various manufacturers use for their
Matsushita/Panasonic/Creative CD-ROM interfaces.  Once the driver locates the
address, you should run UserConfig again and specify the correct address.
Leaving the parameter <emphasis>port</emphasis> set to -1 increases the amount of time that
it takes the system to boot, and this could interfere with other devices.
</para>

<para><indexterm><primary>Matsushita</primary><secondary>CD-562</secondary></indexterm>
<indexterm><primary>Matsushita</primary><secondary>CD-563</secondary></indexterm>
<indexterm><primary>Matsushita</primary><secondary>CD-522</secondary></indexterm>
<indexterm><primary>Matsushita</primary><secondary>CD-523</secondary></indexterm>
<indexterm><primary>Panasonic</primary><secondary>CD-562</secondary></indexterm>
<indexterm><primary>Panasonic</primary><secondary>CD-563</secondary></indexterm>
<indexterm><primary>Panasonic</primary><secondary>CD-522</secondary></indexterm>
<indexterm><primary>Panasonic</primary><secondary>CD-523</secondary></indexterm>
<indexterm><primary>Teac</primary><secondary>CD55a</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Matsushita CD-562</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Matsushita CD-563</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Matsushita CD-522</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Matsushita CD-523</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Panasonic CD-562</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Panasonic CD-563</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Panasonic CD-522</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Panasonic CD-523</secondary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>Teac CD55a</secondary></indexterm>
FreeBSD <xref linkend="CFBSD-Fver"/> supports only the double-speed Matsushita CR-562 and CR-563.
The Matsushita/Panasonic CR-522, Matsushita/Panasonic CR-523 and TEAC CD55a
drives are currently not supported&mdash;the command sets for these drives are not
compatible with the double-speed CR-562 and CR-563 drives.  You can recognize
the single-speed CR-522 and CR-523 drives by their use of a CD caddy.
</para>
</sect2>
<sect2>
<title>Can't install from tape</title>

<para>If you try to install from tape you might get messages like:
</para>
<programlisting>
sa0(aha0:1:0) NOT READY csi 40,0,0,0
</programlisting>

<para>This is typically what happens if you forget to put the tape in the tape drive
before booting from floppy.  Put the tape in the drive, reboot and try again.
</para>
</sect2>
<sect2>
<title>Can't detect SCSI boards on HP Netserver</title>

<para>There is a known problem detecting the on-board AIC-7xxx host adapter on an EISA
HP Netserver.  The EISA on-board SCSI controller in the HP Netserver machines
occupies EISA slot 11, so all the ``true'' EISA slots are in front of it.
Unfortunately, the address space for EISA slots 10 and higher collides with the
address space assigned to PCI, and FreeBSD's auto-configuration currently cannot
handle this situation very well.
</para>

<para>For the time being, the best you can do is to pretend there is no address range
clash by increasing the value of kernel option EISA_SLOTS to a value of 12.  To
do this, boot with the -c option into UserConfig and type:
</para>
<programlisting>
eisa 12
quit
</programlisting>

<para>Later, you can compile a custom kernel with the option line
</para>
<programlisting>
options	EISA_SLOTS=12
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Can't install on Panasonic AL-N1 or Rios Chandler</title>

<para>For some reason, these machines have problems with newer versions of FreeBSD, so
you could have this problem even if you have been running an older version of
FreeBSD.  Specifically, they don't like the new <emphasis>i586_copyout</emphasis> and
<emphasis>i586_copyin</emphasis> functions.  To disable this, boot the installation boot
floppy and enter UserConfig and type the following at it:
</para>
<programlisting>
flags npx0 1
quit
</programlisting>

<para>Then proceed normally to boot.  This will be saved into your kernel, so you only
need to do it once.
</para>
</sect2>
<sect2>
<title>Problems with the CMD640 IDE controller</title>

<para>This controller is broken: it can't handle commands on both channels
simultaneously.  The driver should recognize this problem and work around it, so
the only situation where you can run into problems is if you're upgrading from
an older version of FreeBSD.  In this case, build a custom kernel with the line
</para>
<programlisting>
options	"CMD640"
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Can't find the floppy on Compaq Aero notebook</title>

<para>Compaq does not store information about the floppy drive in the CMOS RAM of an
Aero notebook, so the FreeBSD floppy driver assumes there is no drive
configured.  To fix this, use UserConfig to set the Flags value of the fdc0
device to 0x1, or build a kernel with this flag set (see page <xref linkend="CFBSD-config-fd0"/> for
details).  This tells the driver of the existence of the first floppy drive (as
a 1.44 MB drive) and doesn't probe the CMOS at all.
</para>
</sect2>
<sect2>
<title>Read errors on Intel AL440LX based systems</title>

<para>The AL44LX is also called <emphasis>Atlanta</emphasis>.  When booting from hard disk the first
time, you may find that it stops with a ``Read Error'' message. There appears to
be a bug in the BIOS on at least some of these boards.  This bug causes the
FreeBSD boot loader to think that it is booting from a floppy disk.  This is
only a problem if you are not using the BootEasy boot manager.  Slice the disk
in ``compatible'' mode and install BootEasy during the FreeBSD installation to
avoid the bug, or upgrade the BIOS (see Intel's website for details).
</para>
</sect2>
<sect2>
<title>Can't recognize Dell DSA on Poweredge XE</title>

<para>By default, FreeBSD does not recognize Dell's proprietary DSA (Dell SCSI Array)
RAID controller on the Dell Poweredge XE.  To fix this, use the EISA
configuration utility to configure the DSA for Adaptec 1540 emulation.  After
that FreeBSD detects the DSA as an Adaptec 1540 SCSI controller, with irq 11 and
port <emphasis>0x340</emphasis>.  In emulation mode the system will use the DSA RAID disks,
but you cannot use DSA specific features such as watching RAID health.
</para>
</sect2>
<sect2>
<title>Can't use the AMD PCnet-FAST Ethernet board</title>

<para>These boards are fitted to machines such as the IBM Netfinity 5xxx or 7xxx
series.  The <emphasis>lnc</emphasis> driver is currently faulty, and will often not work
correctly with the PCnet-FAST and PCnet-FAST+.  At the moment, there is no known
solution: you'll have to install a different board.
</para>
</sect2>
<sect2>
<title>Can't operate IBM EtherJet board</title>

<para>Sometimes the <emphasis>fxp</emphasis> driver correctly detects an IBM EtherJet PCI board,
but the lights on the board don't come on and it doesn't connect to the network.
We don't understand why this happens, and IBM hasn't been able to explain it
either.  The board is a standard Intel EtherExpress Pro/100 with an IBM label on
it, and these boards normally work just fine.  You may see these symptoms only
in some IBM Netfinity servers.  The only current solution is to install a
different Ethernet adapter.
</para>
</sect2>
<sect2>
<title>IBM Netfinity 3500 freezes during network installation</title>

<para>There is an unidentified problem with the onboard Ethernet board in these
machines.  It may be related to the SMP features of the system being
misconfigured.  You will have to install another Ethernet adapter, and avoid
attempting to configure the onboard adapter at any time.
</para>
</sect2>
<sect2>
<title>TEAC CD-220E (rev 1.0D) IDE CD-ROM hangs the system</title>

<para>There are apparently firmware problems with the TEAC CD-220E.  Fixes may be
forthcoming, but at the moment it's best to use a different drive.
</para>
</sect2>
</sect1>
<sect1>
<title>Root file system fills up</title>

<para>You might find that the installation completes successfully, and you get your
system up and running, but almost before you know it, the root file system fills
up.  It could be, of course, that you just haven't made it big enough&mdash;FreeBSD
root file systems have got bigger over the years.  In the first edition of this
book I recommended 32 MB ``to be on the safe side''.  Nowadays 50 MB looks good,
and it wouldn't do any harm to use 80 MB.
</para>

<para>On the other hand, maybe you already have an 80 MB root file system, and it
still fills up.  In this case, you should check where you have put your
<emphasis>/tmp</emphasis> and <emphasis>/var</emphasis> file systems.  See page <xref linkend="CFBSD-symlink-var"/> for
further information.
</para>
</sect1>
<sect1>
<title>Panic</title>

<para><indexterm><primary>panic</primary></indexterm>
<anchor id="CFBSD-panic"/>
Sometimes the system gets into so much trouble that it can't continue.  It
should notice this situation and stop more or less gracefully: you might see a
message like
</para>
<programlisting>
panic: free vnode isn't

Syncing disks 14 13 9 5 5 5 5 5 5 5 giving up

dumping to dev 20001 offset 0
dump 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 succeeded
Automatic reboot in 15 seconds - press a key on the console to abort
Reboooting...
</programlisting>

<para>Just because the system has panicked doesn't mean that you should panic too.
It's a sorry fact of life that software contains bugs.  Many commercial systems
just crash when they hit a bug, and you never know why, or they print a message
like <emphasis>General protection error</emphasis>, which doesn't tell you very much either.
When a UNIX system panics, it tells you why&mdash;in this case here, the reason is
<emphasis>free vnode isn't</emphasis>.  You may not be any the wiser for a message like this
(it tells you that the file system handling has got confused about the current
state of storage on a disk), but other people might.  In particular, if you
<emphasis>do</emphasis> get a panic and you want to ask, say, the FreeBSD hackers, please
don't just say ``My system panicked, what do I do?''  The answer&mdash;if you get
one&mdash;will be ``What was the panic string?''
</para>

<para>After panicking, the system tries to write file system buffers back to disk so
that they don't get lost.  This is not always possible, as we see on the second
line of this example.  It started off with 14 buffers to write, but it only
managed to write 9 of them, possibly because it was confused about the state of
the disk.  This can mean that you will have difficulties after rebooting, but it
might also mean that the system was wrong in its assumptions about the number of
buffers needed to be written.
</para>

<para><indexterm><primary>dumping</primary><secondary>the system</secondary></indexterm>
In addition to telling you the cause of the panic, FreeBSD will optionally copy
the current contents of memory to the swap file for post-mortem analysis.  This
is called <emphasis>dumping</emphasis> the system, and is shown on the next two lines.  In
order to enable dumping, you need to specify where the dump should be written.
In <emphasis>/etc/defaults/rc.conf</emphasis>, you will find:
</para>
<programlisting>
dumpdev="NO"		# Device name to crashdump to (if enabled).
</programlisting>

<para>To enable dumping, put something like this in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
dumpdev=/dev/wd0s1b
</programlisting>

<para>If you don't already have a file <emphasis>/etc/rc.conf</emphasis>, just create it.  Make sure
that the name of the <emphasis>dumpdev</emphasis> corresponds to a swap partition with at
least as much space as your total memory.  You can use <emphasis>pstat</emphasis> to check
this:
</para>
<programlisting>
# <command>pstat -s</command>
Device      1024-blocks     Used    Avail Capacity  Type
/dev/wd0s1b       51200    50108     1028    98%    Interleaved
/dev/da0b         66036    51356    14616    78%    Interleaved
/dev/da2b        204800    51220   153516    25%    Interleaved
Total            321844   152684   169160    47%
</programlisting>

<para>As long as this machine doesn't have more than about 192 MB of memory, it will
be possible to take a dump on <emphasis>/dev/da2b</emphasis>.
</para>

<para>In addition, ensure you have a directory <emphasis>/var/crash</emphasis>.  After rebooting, the
system first checks the integrity of the file systems, then it checks for the
presence of a dump.  If it finds one, it copies the dump and the current kernel
to <emphasis>/var/crash</emphasis>.
</para>

<para>It's always worth enabling dumping, assuming your swap space is at least as
large as your memory.  You can analyze the dumps with <emphasis>kgdb</emphasis>&mdash;see the
online handbook for more details.
</para>

<para>To get the best results from a dump analysis, you need a <emphasis>debug kernel</emphasis>.
This kernel is in fact identical to a normal kernel, but it includes a lot of
information that can be used for dump analysis.  See page <xref linkend="CFBSD-run-config"/> for
details of how to build a debug kernel.  Since you never know when you might run
into a problem, it's highly recommended to use a debug kernel at all times.
</para>
</sect1>
<sect1>
<title>Fixing a broken installation</title>

<para><anchor id="CFBSD-recovery"/>
<indexterm><primary>Fixit</primary><secondary>floppy</secondary></indexterm>
A really massive crash may damage your system to such an extent that you need to
reinstall the whole system.  For example, if you overwrite your hard disk from
start to finish, you don't have any other choice.  In many cases, though, the
damage is serious but repairable.  The problem is, you can't start the system to
fix the problems.  In this case, you have two possibilities:
</para>
<itemizedlist>
<listitem>

<para>Boot from the second CD-ROM (<emphasis>Live Filesystem</emphasis>).  It will be mounted as
the root file system.
</para>
</listitem>
<listitem>

<para><indexterm><primary>floppies/fixit.flp</primary></indexterm>
Boot from the <emphasis>Fixit</emphasis> floppy.  The Fixit floppy is in the distribution in
the same directory as the boot diskette, <emphasis>floppies</emphasis>.  Just copy
<emphasis>floppies/fixit.flp</emphasis> to a disk in the same way as described for boot
diskettes in page <xref linkend="CFBSD-make-floppy"/>.  To use the fixit floppy, first boot with the
boot diskette and select ``Fixit floppy'' from the main menu.  The fixit floppy
will be mounted under the root MFS as <emphasis>/mnt2</emphasis>.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/mnt2</primary><secondary>mount point</secondary></indexterm>
In either case, the hard disks aren't mounted: you might want to do repair work
on them before any other access.
</para>

<para>Use this option only if you have a good understanding of the system installation
process.  Depending on the damage, you may or may not be successful.  If you
have a recent backup of your system, it might be faster to perform a complete
installation than to try to fix what's left, and after a re-installation you can
be more confident that the system is correctly installed.
</para>
</sect1>
</chapter>
\" This file is in -*- nroff-fill -*- mode
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchxtheory"><title>XFree86 configuration in depth</title>

<para>In most cases, the information in <xref linkend="CFBSD-chxsetup"/>, should be enough to get X up and
running.  If it doesn't work for some reason, or if you're a masochist, or if
you just want to understand the procedure better, this chapter should be able to
help.
</para>

<para>In the next section, we'll look at the technical background, and on page
<xref linkend="CFBSD-doxconfig"/> we'll look at setting up the <emphasis>XF86Config</emphasis> file.
</para>
<sect1>
<title>X configuration: the theory</title>

<para><anchor id="CFBSD-Xtheory"/>
Setting up your <emphasis>XF86Config</emphasis> file normally takes a few minutes, but
sometimes you can run into problems which make grown men cry.  In the rest of
this
chapter,
we'll look at the technical background:
</para>
<itemizedlist>
<listitem>

<para>How display boards and monitors work.
</para>
</listitem>
<listitem>

<para>How to set up XFree86 to work with your hardware.
</para>
</listitem>
<listitem>

<para>How to tune your hardware for maximum display performance.
</para>
</listitem>
<listitem>

<para>How to fry your monitor.
</para>
</listitem>
</itemizedlist>

<para>I mean the last point seriously: conventional wisdom says that you can't damage
hardware with a programming mistake, but in this case, you can, and people do it
from time to time.  When you've read the section on how monitors work, you'll
understand, but <emphasis>please</emphasis> don't start tuning until you understand the dangers
involved.
</para>
<sect2>
<title>How TVs and monitors work</title>

<para>You don't have to be a computer expert to see the similarity between monitors
and TVs: current monitor technology is derived from TV technology, and most
older display boards have modes which can use TVs instead of monitors.  Those of
us who were on the microcomputer scene 15 to 20 years ago will remember the joy
of getting a computer display on a portable TV, a ``glass tty'' connected by a
serial line running at 300 or 1200 bps.
</para>

<para>There are at least two ways to create pictures on a cathode ray tube: one is
derived from oscilloscopes, where each individual character is scanned by the
electron beam, rather like writing in the sand with your finger.  Some early
terminals used this technology, but it has been obsolete for at least 20 years.
</para>

<para>TVs and monitors display the picture by scanning lines across the screen.  Like
in a book, the first line starts at the top left of the screen and goes to the
top right.  Each successive line starts slightly below the previous line.  This
continues until the screen is full.  Like in a book, the lines don't have to be
full: the picture is formed by altering the intensity of the electron beam as it
scans the lines.
</para>

<para><indexterm><primary>deflection</primary><secondary>units</secondary></indexterm>
<indexterm><primary>deflection</primary><secondary>horizontal</secondary></indexterm>
<indexterm><primary>deflection</primary><secondary>vertical</secondary></indexterm>
<indexterm><primary>deflection</primary><secondary>line</secondary></indexterm>
<indexterm><primary>deflection</primary><secondary>frame</secondary></indexterm>
To perform this scan, the TV has two <emphasis>deflection units</emphasis>: one scans from left
to right, and the other scans, much more slowly, from top to bottom.  Not
surprisingly, these units are called the <emphasis>horizontal</emphasis> and <emphasis>vertical</emphasis>
deflection units.  You may also encounter the terms <emphasis>line</emphasis> and <emphasis>frame</emphasis>
deflection.
</para>

<para><indexterm><primary>flyback</primary><secondary>horizontal</secondary></indexterm>
<indexterm><primary>flyback</primary><secondary>vertical</secondary></indexterm>
The tube can only move the electron beam at a finite speed.  When the electron
beam reaches the right hand side of the screen, it needs to be deflected back
again.  This part of the scan is called the <emphasis>horizontal flyback</emphasis>, and it is
not used for displaying picture data.  The actual time that the hardware
requires for the flyback depends on the monitor, but it is in the order of 5% to
10% of the total line scan time.  Similarly, when the vertical deflection
reaches the bottom of the screen, it performs a <emphasis>vertical flyback</emphasis>, which is
also not used for display purposes.
The printed version of this book includes diagrams which are impossible to
reproduce in ASCII.  Sorry about that&mdash;about the only thing I can suggest is
to get hold of the book.
\}
Figure
shows the resultant pattern.
</para>

<para>[
move right 1.3i
TV: box wid 3.2i height 2.4i
A: line from TV.nw+ (.1i,-.1i) to TV.ne + (-.1i,-.1i)
B: line from TV.nw+ (.1i,-.2i) to TV.ne + (-.1i,-.2i)
C: line from TV.nw+ (.1i,-.3i) to TV.ne + (-.1i,-.3i)
"<emphasis>etc</emphasis>" at C.w + (.1i,-.2i)

line dashed .04i from A.e to B.w
Fb2: line dashed .04i from B.e to C.w

"First scan line" at A.e  + (.3i,0i) ljust
"Second scan line" at B.e + (.3i,0i) ljust

FB: "Flyback" at C.c + (0i,-.7i)

arrow dashed from FB.c +(0i,.1i) to Fb2.c
]
</para>

<para><figure><title>Scanning pattern on the monitor</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>It's not enough to just deflect, of course: somehow you need to ensure that the
scanning is synchronized with the incoming signal, so that the scan is at the
top of the screen when the picture information for the top of the screen
arrives.  You've seen what happens when this doesn't happen: the picture runs up
and down the screen (incorrect vertical synchronization) or tears away from the
left of the screen (incorrect horizontal synchronization).  Synchronization is
achieved by including synchronization pulses in the horizontal and vertical
flyback periods.  They have a voltage level outside the normal picture data
range in order to ensure that they are recognized as synchronization pulses.
</para>

<para><indexterm><primary>video</primary><secondary>blanking</secondary></indexterm>
<indexterm><primary>porch</primary><secondary>front</secondary></indexterm>
<indexterm><primary>porch</primary><secondary>back</secondary></indexterm>
As if that wasn't enough, the video amplifier, the part of the TV which alters
the intensity of the spot as it travels across the screen, needs time to ensure
that the flyback is invisible, so there are brief pauses between the end of the
line and the start of the sync pulse, and again between the end of the sync
pulse and the beginning of the data.  This process is called <emphasis>blanking</emphasis>, and
the delays are called the <emphasis>front porch</emphasis> (before the sync pulse) and the
<emphasis>back porch</emphasis> (after the sync pulse).
In the printed version of this book there's another diagram here.
\}
Figure
depicts a complete scan line.
<anchor id="CFBSD-waveform"/>
</para>

<para><!--  Dimensions -->
p3=.3i
p02=.02i
p1=.1i
p15=.15i
p05=.05i
<!--  For the sake of the article, two 1" variables -->
p100=1i
p100a=1i
p70=.7i
p20=.2i
p60=.6i
p48=.48i
p08=.08i
p025=.025i
p80=.8i
p08=.08i
p50=.5i
p12=.12i
p125=1.25i
p170=1.7i
p07=.07i
move right 1i
line dotted p02 right p1;					# end of previous line
A: line dotted p02 up p100 then right p15;			# start of sync pulse
arc dotted p02 from A.n to A.n+(p05, p05)
line dotted p02 up p15;
Pulse1: line dotted p02 right p1;
B: line dotted p02 down p15;	# pulse
arc dotted p02 from B.s to B.s+(p05,-p05);
Rp: line dotted p02 right p15;				# rear porch
Ps: line down p100 			 	# and picture data
line right p1
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
C: line up p100
line right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
line up p100 then right p1 then down p100 then right p1;
E: line up p100;
Fp: line right p15; 				# start of next sync pulse
arc from Fp.e to Fp.e+(p05, p05)
line up p15;
Pulse2: line right p1;
F: line down p15;				# pulse
arc from F.s to F.s+(p05,-p05);
line right p15;				# front porch
G: line down p100				 	# and picture data of next frame
   line dotted p02 right p1
   line dotted p02 up p70

move to Pulse1.c + (0,p20)
P1text: "Sync pulse" above;
arrow from P1text.c to Pulse1.c

Rpt: "Back porch" at Rp.c + (p60,p48)
arrow from Rpt.w + (-p3,-p08) to Rp.c + (-p07, 0i)
move to Fp

Fpt: "Front porch" at Fp.c + (-p60,p48)

arrow from Fpt.se + (p3,-p08) to Fp.c + (p07, 0i)
move to Fp

move to Pulse2.c + (0,p20)
P2text: "Sync pulse" above;
arrow from P2text.c to Pulse2.c

Cw: arrow from C.n + (0i,p1) to Ps.n + (0i,p1)
Ce: arrow from C.n + (0i,p1) to E.n + (0i,p1)

line dotted p025 from Cw.w to Ps.n
line dotted p025 from Ce.e to E.n

"Picture data" at C.n + (0i,p20)

Rd: "(Reference point)" at Ps.s + (0i,-p50)
     arrow from Rd + (0i,p1) to Ps.s + (0i,-p05)

HDE: "HDE" at E.s + (-p3,-p50)
     arrow from HDE + (0i,p1) to E.s + (0i,-p05)

SHR: "SHR" at Pulse2.w + (-p12,-p170)
     arrow from SHR + (p12,p1) to Pulse2.w + (0i,-p125)
     line dotted p025 from Pulse2.w + (0i,-p125+p100a-p100) to Pulse2.w

EHR: "EHR" at Pulse2.e + (p12,-p170)
     arrow from EHR + (-p12,p1) to Pulse2.e + (0i,-p125)
     line dotted p025 from Pulse2.e + (0i,-p125+p100a-p100) to Pulse2.e

HT: "HT" at G.s + (p3,-p50)
     arrow from HT + (0i,p1) to G.s + (0i,-p05)

"<emphasis>Registers:</emphasis>" at HDE.w - (p80,0i)
</para>

<para></para>

<para><figure><title>Scan line and register values</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para><indexterm><primary>interlacing</primary></indexterm>
The register information at the bottom of the picture refers to the video
controller registers.  We'll look at how to interpret them
on page
</para>

<para>That, in a nutshell, is how horizontal deflection works.  Vertical deflection
works in almost the same way, just slower, with one minor exception.  This basic
display mechanism was developed for TVs in the 1930s, at a time when terms like
high-tech (or even electronics) hadn't even been invented, and even today we're
stuck with the low data rates that they decided upon in those days.  Depending
on the country, TVs display only 25 or 30 frames (pages of display) per second.
This caused an unpleasant flicker in the display.  This flicker was avoided with
a trick called <emphasis>interlacing</emphasis>: instead of displaying the frame in one
vertical scan, the odd and even lines are displayed in two alternating half
frames, which increases the apparent frame frequency to 50 or 60 Hz.
</para>
</sect2>
<sect2>
<title>How monitors differ from TVs</title>

<para>So how do we apply this to computer displays?  Let's look at the US standard
NTSC system&mdash;the international PAL and SECAM systems are almost identical
except for the number of lines and a minor difference in the vertical frequency.
NTSC specifies 525 lines, but that includes the vertical flyback time, and in
fact only about 480 lines are visible.  The aspect ratio of a normal TV is 4:3,
in other words the screen is one-third wider than it is high, so if we want
square pixels,
<footnote>

<para>A square pixel is one with the same height and width.  They don't have to be
that way, but it makes graphics software much simpler.
</para>
</footnote>
we need to have one-third more pixels per line.  This means that we can display
640 pixels per line on 480 lines.
<footnote>

<para>Does this look familiar?  Now you know why.
</para>
</footnote>
This resolution is normally abbreviated to ``640x480''.  PAL and SECAM have
lower vertical frequencies, which allows a nominal 625 lines, of which about 580
are displayed.  Either way, these values have two huge disadvantages: first, the
resolution is barely acceptable for modern graphics displays, and secondly they
are interlaced displays.  Older PC display hardware, such as the CGA and some
EGA modes, was capable of generating these signal frequencies, but VGAs can no
longer do it.  This is a pity, in some ways: I'd like to have an X display on my
TV in the lounge room, but my last EGA died a couple of years ago.
</para>

<para>The first problem is interlace: it works reasonably for TVs, but it's a pain for
computer displays&mdash;there's still more flicker than a real 50 Hz or 60 Hz
display.  Modern display boards can still run in interlace mode, but don't even
think about doing so unless you're forced to&mdash;the resultant picture looks out
of focus and is very tiring to read.
</para>

<para>The second problem is the resolution: nowadays, 1024x768 is a normal enough
resolution, but I'm writing this on a display with 1280x1024, and many modern
boards display 1600x1200.  On the other hand, even 60 Hz refresh rate is barely
adequate: read any marketing literature and you'll discover that 72 Hz is the
point at which flicker suddenly disappears.  To get high-resolution, high
refresh rate displays, you need some very high internal frequencies&mdash;we'll see
how high further down.
</para>
</sect2>
<sect2>
<title>How to fry your monitor</title>

<para><anchor id="CFBSD-fry-monitor"/>
<indexterm><primary>line</primary><secondary>transformer</secondary></indexterm>
Remember that a monitor is just a glorified TV?  Well, one of the design
constraints of real TVs is that they have only a single horizontal frequency and
only a single vertical frequency.  This simplifies the hardware design
considerably: the horizontal deflection uses a tuned circuit to create both the
deflection frequency and the high voltage required to run the tube.  This
circuit is comprised of a transformer (the <emphasis>line transformer</emphasis>) and a
condenser.  Run a line transformer even fractionally off its intended frequency
and it will run much less efficiently and use more current, which gets converted
to heat.  If you run a conventional monitor off spec for any length of time, it
will burn out the line transformer.
</para>

<para>You don't have to roll your own X configuration to burn out the monitor: ten
years ago, the standard display boards were CGAs and HDAs,
<footnote>

<para>Color Graphics Adapter and Hercules Display Adapter.
</para>
</footnote>
and they had different line frequencies and thus required different monitors.
Unfortunately, they both used the same data connector.  If you connected an HDA
(18.43 kHz line frequency) to a CGA monitor (15.75 kHz, the NTSC line
frequency), you could expect smoke signals within a few minutes.
</para>

<para>Modern PC monitors no longer use line transformers, and there are few of them
which can't handle at least a range of line frequencies, but this doesn't mean
you can't damage them&mdash;you'll just burn out something else, frequently the
power supply.  In addition, just because the monitor displays correctly doesn't
mean that it is running in spec.  I have a rather elderly Eizo 9500 (called
Nanao in the US) which has three frequency ranges: (exactly) 31.5 kHz, 48 to 50
kHz, or 64 to 78 kHz.  In fact, it will display at any frequency between 48 and
78 kHz, but if it were run at 57 kHz for any length of time, I would be in for a
hefty repair bill.  The moral of the story:
</para>
<note>

<para>Never run your monitor out of spec.  If your display is screwed up, there's a
good chance that the frequencies are out, so turn off the monitor.
</para>
</note>

<para></para>

<para>Monitors aren't the only thing that you can burn out, of course.  If you try
hard, you can also burn out chips on some display boards by running them at
frequencies which are out of spec.  In practice, though, this doesn't happen
nearly as often.
</para>

<para><indexterm><primary>video</primary><secondary>composite</secondary></indexterm>
<indexterm><primary>composite</primary><secondary>video</secondary></indexterm>
Another difference between TVs and monitors is the kind of signal they take.  A
real TV includes a receiver, of course, so you have an antenna connection, but
modern TVs also have connections for inputs from VCRs, which are usually an
audio signal and a video signal.  The video signal consists of five important
parts: the <emphasis>red</emphasis> signal, the <emphasis>green</emphasis> signal, the <emphasis>blue</emphasis> signal, and
the horizontal and vertical sync pulses.  This kind of signal is called
<emphasis>composite video</emphasis>.  By contrast, most modern monitors separate these signals
onto separate signal lines, and older boards, such as the EGA, even used several
lines per colour.  Unfortunately, there is no complete agreement about how these
signals should work: the polarity of the sync pulses varies from one board to
the next, and some boards cheat and supply the sync pulses on the green signal
line.  This is mainly of historical interest, but occasionally you'll come
across a real bargain 20" monitor which only has 3 signal connections, and you
may not be able to get it to work&mdash;this could be one of the reasons.
</para>
</sect2>
<sect2>
<title>The CRT controller</title>

<para><anchor id="CFBSD-setting-video-regs"/>
The display controller, usually called a CRT (Cathode Ray Tube) controller, is
the part of the display board which creates the signals we've just been talking
about.  Early display controllers were designed to produce signals that were
compatible with TVs: they had to produce a signal with sync pulses, front and
back porches, and picture data in between.  Modern display controllers can do a
lot more, but the principles remain the same.
</para>

<para><indexterm><primary>dot</primary><secondary>clock</secondary></indexterm>
The first part of the display controller creates the framework we're looking
for: the horizontal and vertical sync pulses, blanking and picture information,
which is represented as a series of points or <emphasis>dots</emphasis>.  To count, we need a
pulse source, which also determines the duration of individual dots, so it is
normally called a <emphasis>dot clock</emphasis>.  For reasons lost in history, CRT controllers
start counting at the top left of the display, and not at the vertical sync
pulse, which is the real beginning of the display.  To define a line to the
horizontal deflection, we need to set four CRTC registers to tell
it&mdash;see the
diagram on page
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>register</primary><secondary>Horizontal Display End</secondary></indexterm>
The <emphasis>Horizontal Display End</emphasis> register (HDE) specifies how many dots we want
on each line.  After the CRTC has counted this many pixels, it stops outputting
picture data to the display.
</para>
</listitem>
<listitem>

<para><indexterm><primary>register</primary><secondary>Start Horizontal Retrace</secondary></indexterm>
The <emphasis>Start Horizontal Retrace</emphasis>
register (SHR) specifies how many dot clock
pulses occur before the sync pulse starts.  The difference between the contents
of this register and the contents of the HDE register defines the length of the
front porch.
</para>
</listitem>
<listitem>

<para><indexterm><primary>register</primary><secondary>End Horizontal Retrace</secondary></indexterm>
The <emphasis>End Horizontal Retrace</emphasis>
register (EHR) defines the end of the sync
pulse.  The width of the sync pulse is the difference between the contents of
this register and the SHR register.
</para>
</listitem>
<listitem>

<para><indexterm><primary>register</primary><secondary>Horizontal Total</secondary></indexterm>
The <emphasis>Horizontal Total</emphasis>
register (HT) defines the total number of dot clocks
per line.  The width of the back porch is the difference between the contents of
this register and the EHR register.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>register</primary><secondary>Start Horizontal Blanking</secondary></indexterm>
<indexterm><primary>register</primary><secondary>End Horizontal Blanking</secondary></indexterm>
In addition, the <emphasis>Start Horizontal Blanking</emphasis> and <emphasis>End Horizontal
Blanking</emphasis> registers (SHB and EHB) define when the video signals are turned off
and on.  The server sets these registers automatically, so we don't need to look
at them in more detail.
</para>

<para><indexterm><primary>register</primary><secondary>Vertical Display End</secondary></indexterm>
<indexterm><primary>register</primary><secondary>Start Vertical Retrace</secondary></indexterm>
<indexterm><primary>register</primary><secondary>End Vertical Retrace</secondary></indexterm>
<indexterm><primary>register</primary><secondary>Vertical Total</secondary></indexterm>
<indexterm><primary>register</primary><secondary>Start Vertical Blanking</secondary></indexterm>
<indexterm><primary>register</primary><secondary>End Vertical Blanking</secondary></indexterm>
The control of the vertical deflection is similar.  In this case, the registers
are <emphasis>Vertical Display End</emphasis> (VDE), <emphasis>Start Vertical Retrace</emphasis> (SVR), <emphasis>End
Vertical Retrace</emphasis> (EVR), <emphasis>Vertical Total</emphasis> (VT), <emphasis>Start Vertical
Blanking</emphasis> (SVB), and <emphasis>End Vertical Blanking</emphasis> (EVB).  The values in these
registers are counted in lines.
</para>

<para>VGA hardware evolved out of older 8 bit character-based display hardware, which
counted lines in characters, not dot clocks.  As a result, all of these
registers are 8 bits wide.  This is adequate for character displays, but it's a
problem when counting dots: the maximum value you can set in any of these
registers is 255.  The designers of the VGA resorted to a number of nasty
kludges to get around this problem: the horizontal registers count in groups of
8 dot clocks, so they can represent up to 2048 dot clocks. The vertical
registers overflow into an overflow register.  Even so, the standard VGA can't
count beyond 1024 lines.  Super VGAs vary in how they handle this problem, but
typically they add additional overflow bits.  To give you an idea of how clean
the VGA design is, consider the way the real Vertical Total (total number of
lines on the display) is defined on a standard VGA.  It's a 10 bit quantity, but
the first 8 bits are in the VT register, the 9th bit is in bit 0 of the overflow
register, and the 10th bit is in bit 5 of the overflow register.
</para>
</sect2>
<sect2>
<title>The XF86Config mode line</title>

<para>One of the steps in setting up XFree86 is to define these register values.
Fortunately, you don't have to worry about which bits to set in the overflow
register: the mode lines count in dots, and it's up to the server to convert the
dot count into something that the display board can understand.  A typical Mode
line looks like:
</para>
<programlisting>
Modeline "640x480a" 28 640 680 728 776 480 480 482 494
</programlisting>

<para>These ten values are required.  In addition, you may specify modifiers at the
end of the line.  The values are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>XF86Config</primary></indexterm>
A label for the resolution line.  This must be enclosed in quotation marks, and
is used to refer to the line from other parts of the <emphasis>XF86Config</emphasis> file.
Traditionally, the label represents the resolution of the display mode, but it
doesn't have to.  In this example, the resolution really is 640x480, but the
<emphasis>a</emphasis> at the end of the label is a clue that it's an alternative value.
</para>
</listitem>
<listitem>

<para>The clock frequency, 28 MHz in this example.
</para>
</listitem>
<listitem>

<para>The Horizontal Display End, which goes into the HDE register.  This value and
all that follow are specified in dots.  The server mangles them as the display
board requires and puts them in the corresponding CRTC register.
</para>
</listitem>
<listitem>

<para>The Start Horizontal Retrace (SHR) value.
</para>
</listitem>
<listitem>

<para>The End Horizontal Retrace (EHR) value.
</para>
</listitem>
<listitem>

<para>The Horizontal Total (HT) value.
</para>
</listitem>
<listitem>

<para>The Vertical Display End (VDE) value.  This value and the three following are
specified in lines.
</para>
</listitem>
<listitem>

<para>The Start Vertical Retrace (SVR) value.
</para>
</listitem>
<listitem>

<para>The End Vertical Retrace (EVR) value.
</para>
</listitem>
<listitem>

<para>The Vertical Total (VT) value.
</para>
</listitem>
</itemizedlist>

<para>This is pretty dry stuff.  To make it easier to understand, let's look at how we
would set a typical VGA display with 640x480 pixels.  Sure, you can find values
for this setup in any release of XFree86, but that doesn't mean that they're the
optimum for <emphasis>your system</emphasis>.  We want a non-flicker display, which we'll
take to mean a vertical frequency of at least 72 Hz, and of course we don't want
interlace.  Our multiscan monitor can handle any horizontal frequency between 15
and 40 kHz: since we want the least flicker, we'll aim for 40 kHz.
</para>

<para>First, we need to create our lines.  They contain 640 pixels, two porches and a
sync pulse.  The only value we really know for sure is the number of pixels.
How long should the porches and the sync pulses be?  If you have a good monitor
with good documentation, it should tell you, but most monitor manufacturers
don't seem to believe in good documentation.  When they do document the values,
they vary significantly from monitor to monitor, and even from mode to mode:
they're not as critical as they look.  For example, here are some typical values
from my NEC 5D handbook:
</para>

<para>Horizontal sync pulse: 1 to 4 \(*ms, front porch 0.18 to 2.1 \(*ms, back porch
1.25 to 3.56 \(*ms.
</para>

<para>As we'll see, the proof of these timing parameters is in the display.  If the
display looks good, the parameters are OK.  I don't know of any way to damage
the monitor purely by modifying these parameters, but there are other good
reasons to stick to this range.  As a rule of thumb, if you set each of the
three values to 2 \(*ms to start with, you won't go too far wrong.
Alternatively, you could start with the NTSC standard values: the standard
specifies that the horizontal sync pulse lasts for 4.2 to 5.1 \(*ms, the front
porch must be at least 1.27 \(*ms.  NTSC doesn't define the length of the back
porch&mdash;instead it defines the total line blanking, which lasts for 8.06 to 10.3
\(*ms.  For our purposes, we can consider the back porch to be the length of the
total blanking minus the lengths of the front porch and the sync pulse.  If you
take values somewhere in the middle of the ranges, you get a front porch of 1.4
\(*ms, a sync pulse of 4.5 \(*ms, and total blanking 9 \(*ms, which implies a
back porch of 9 - 1.4 - 4.5 = 3.1 \(*ms.
</para>

<para>For our example, let's stick to 2 \(*ms per value.  We have a horizontal
frequency of 40 kHz, or 25 \(*ms per line.  After taking off our 6 \(*ms for
flyback control, we have only 19 \(*ms left for the display data.  In order to
get 640 pixels in this time, we need one pixel every 19 \(di 640 \(*ms, or about 30
ns.  This corresponds to a frequency of 33.6 MHz.  This is our desired dot
clock.
</para>

<para>The next question is: do we have a dot clock of this frequency?  Maybe.  This
should be in your display board documentation, but I'll take a bet that it's
not.  Never mind, the XFree86 server is clever enough to figure this out for
itself.  At the moment, let's assume that you do have a dot clock of 33 MHz.
</para>
<note>

<para>If you don't have a suitable clock, you'll have to take the next lower clock
frequency that you do have: you can't go any higher, since this example assumes
the highest possible horizontal frequency.
</para>
</note>

<para>You now need to calculate four register values to define the horizontal lines:
</para>
<itemizedlist>
<listitem>

<para>The first value is the Horizontal Display End, the number of pixels on a line.
We know this one: it's 640.
</para>
</listitem>
<listitem>

<para>You calculate SHR by adding the number of dot clocks that elapse during the
front porch to the value of HDE.  Recall that we decided on a front porch of 2
\(*ms.  In this time, a 33 MHz clock will count 66 cycles.  So we add 66, right?
Wrong.  Remember that the VGA registers count in increments of 8 pixels, so we
need to round the width of the front porch to a multiple of 8.  In this case, we
round it to 64, so we set SHR to 640 + 64 = 704.
</para>
</listitem>
<listitem>

<para>The next value we need is EHR, which is SHR plus the width of the horizontal
retrace, again 64 dot clocks, so we set that to 704 + 64 = 768.
</para>
</listitem>
<listitem>

<para>The final horizontal value is HT.  Again, we add the front porch&mdash;64 dot
clocks&mdash;to EHR and get 768 + 64 = 832.
</para>
</listitem>
</itemizedlist>

<para>At this point, our vestigial mode line looks like:
</para>
<programlisting>
Modeline "640x480"   28   640 704 768 832
</programlisting>

<para>Next, we need another four values to define the vertical scan.  Again, of the
four values we need, we only know the number of lines.  How many lines do we use
for the porches and the vertical sync?  As we've seen, NTSC uses about 45 lines
for the three combined, but modern monitors can get by with much less.  Again
referring to the Multisync manual, we get a front porch of betwwen 0.014 and 1.2
ms, a sync pulse of between 0.06 and 0.113 ms, and a back porch of between 0.54
and 1.88 ms.  But how many lines is that?
</para>

<para>To figure that out, we need to know our <emphasis>real</emphasis> horizontal frequency.  We
were aiming at 40 kHz, but we made a couple of tradeoffs along the way.  The
real horizontal frequency is the dot clock divided by the horizontal total, in
this case 33 MHz \(di 832, which gives us 39.66 kHz&mdash;not too bad.  At that
frequency, a line lasts 1\(di39660 seconds, or just over 25 \(*ms, so our front
porch can range between \(12 and 48 lines, our sync pulse between 2 and 5 lines,
and the back porch between 10 and 75 lines.  Do these timings make any sense?
No, they don't&mdash;they're just values which the monitor can accept.
</para>

<para>To get the highest refresh rate, we can go for the lowest value in each case.
It's difficult to specify a value of \(12, so we'll take a single line front
porch.  We'll take two lines of sync pulse and 10 lines of back porch. This
gives us:
</para>
<itemizedlist>
<listitem>

<para>VDE is 480.
</para>
</listitem>
<listitem>

<para>SVR is 481.
</para>
</listitem>
<listitem>

<para>EVR is 483.
</para>
</listitem>
<listitem>

<para>VT is 493.
</para>
</listitem>
</itemizedlist>

<para>Now  our mode line is complete:
</para>
<programlisting>
Modeline "640x480" 28  640 704 768 832  480 481 483 493
</programlisting>

<para><indexterm><primary>XF86config</primary></indexterm>
Now we can calculate our vertical frequency, which is the horizontal frequency
divided by the Vertical Total, or 39.66 \(di 493 kHz, which is 80.4 Hz&mdash;that's
not bad either.  By comparison, if you use the standard entry in
<emphasis>XF86config</emphasis>, you will get a horizontal frequency of 31.5 kHz and a vertical
frequency of only 60 Hz.
</para>

<para>If you know the technical details of your monitor and display board, it really
is that simple.  This method doesn't require much thought, and it creates
results which work.
</para>
</sect2>
</sect1>
<sect1>
<title>XF86Config</title>

<para><anchor id="CFBSD-doxconfig"/>
<indexterm><primary>XF86Config</primary></indexterm>
<indexterm><primary>XF86Config</primary></indexterm>
<indexterm><primary>XF86Config.eg</primary></indexterm>
<indexterm><primary>XF86Config</primary></indexterm>
The <emphasis>XF86Config</emphasis> file contains several sections; these procedures will
lead you through filling out each part.  There is a sample <emphasis>XF86Config</emphasis>
file in <emphasis>/usr/X11R6/lib/X11/XF86Config.eg</emphasis>.  You can copy this to
<emphasis>/usr/X11R6/lib/X11/XF86Config</emphasis>, and edit that file to your specific
configuration.  In the following examples, we'll look at the relevant sections
of <emphasis>XF86Config</emphasis> and discuss what might need changing.  Refer to the man
page <emphasis>XF86Config(5)</emphasis> as you fill in your <emphasis>XF86Config</emphasis> file.  Table
overleaf, gives you an overview of the sections in <emphasis>XF86Config</emphasis>.  Note that
the X server treats lines beginning with <emphasis>#</emphasis> as comments.  You'll see many
definitions with a <emphasis>#</emphasis> in front of them in the following examples.  You
activate the definition by removing the <emphasis>#</emphasis>.
</para>

<para>Normally, you'll set up your <emphasis>XF86Config</emphasis> when you run the
<emphasis>xf86config</emphasis> program (note the difference in character case; in UNIX,
<emphasis>XF86Config</emphasis> and  <emphasis>xf86config</emphasis> are two different file names).  We
looked at that in <xref linkend="CFBSD-chxsetup"/>, on page
The following discussion will apply equally well to the <emphasis>XF86Config</emphasis> file
that you generate by this procedure.
<table frame='all'><title>XF86Config sections</title>
center,box,tab(#) ;
| l | lw67 | .
Section#Description
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> Files</entry><entry> Sets the default font and RGB paths&mdash;see page <xref linkend="CFBSD-XF86Config-File-section"/>.
</entry></row>
<row><entry> Server Flags</entry><entry> Sets a few general server options. Refer to the server manual page for more information about them.
</entry></row>
<row><entry> Keyboard</entry><entry> Sets up keyboard devices, and sets a few optional parameters&mdash;see page <xref linkend="CFBSD-XF86Config-Keyboard-section"/>
</entry></row>
<row><entry> Pointer</entry><entry> Sets up the pointer devices, and sets a few optional parameters&mdash;see page <xref linkend="CFBSD-XF86Config-Pointer-section"/>
</entry></row>
<row><entry> Monitor</entry><entry> Describes your monitor to the server&mdash;see page <xref linkend="CFBSD-XF86Config-Monitor-section"/>
</entry></row>
<row><entry> Device</entry><entry> Describes your video hardware to the server&mdash;see page <xref linkend="CFBSD-XF86Config-Device-section"/>
</entry></row>
<row><entry> Screen</entry><entry> Describes how to use the monitor and video hardware&mdash;see page <xref linkend="CFBSD-XF86Config-Screen-section"/>
</entry></row>
</tbody></tgroup></table>
</para>
<sect2>
<title>The Files section</title>

<para><anchor id="CFBSD-XF86Config-File-section"/>
<indexterm><primary>XF86Config</primary><secondary>Files section</secondary></indexterm>
The <emphasis>Files</emphasis> section of the <emphasis>XF86Config</emphasis> file contains the path to
the RGB database file, which should never need to be changed, and the default
font path.  You may want to add more font paths: the <emphasis>FontPath</emphasis> lines in
your <emphasis>XF86Config</emphasis> are concatenated to form a search path.  Ensure that
each directory listed exists and is a valid font directory.
</para>

<para>The standard <emphasis>Files</emphasis> section looks like:
</para>
<programlisting>
Section "Files"

# The location of the RGB database.  Note, this is the name of the
# file minus the extension (like ".txt" or ".db").  There is normally
# no need to change the default.

    RgbPath	"/usr/X11R6/lib/X11/rgb"

# Multiple FontPath entries are allowed (which are concatenated together),
# as well as specifying multiple comma-separated entries in one FontPath
# command (or a combination of both methods)

    FontPath	"/usr/X11R6/lib/X11/fonts/misc/"
#    FontPath	"/usr/X11R6/lib/X11/fonts/Type1/"
#    FontPath	"/usr/X11R6/lib/X11/fonts/Speedo/"
#    FontPath	"/usr/X11R6/lib/X11/fonts/75dpi/"
#    FontPath	"/usr/X11R6/lib/X11/fonts/100dpi/"

EndSection
</programlisting>

<para>Sometimes the server complains about:
</para>
<programlisting>
Can't open default font 'fixed'
</programlisting>

<para><indexterm><primary>mkfontdir</primary><secondary>command</secondary></indexterm>
This is almost certainly the result of an invalid entry in your font path.  Try
running <emphasis>mkfontdir</emphasis> in each directory if you are certain that each one is
correct.  The <emphasis>XF86Config</emphasis> man page describes other parameters that may be
in this section of the file.
</para>
</sect2>
<sect2>
<title>The Keyboard section</title>

<para><anchor id="CFBSD-XF86Config-Keyboard-section"/>
<indexterm><primary>XF86Config</primary><secondary>Keyboard section</secondary></indexterm>
The <emphasis>Keyboard</emphasis> section specifies the keyboard protocol, the repeat rate, and
the default mapping of some of the modifier keys:
</para>
<programlisting>
Section "Keyboard"

    Protocol	"Standard"

# when using XQUEUE, comment out the above line, and uncomment the
# following line

#    Protocol	"Xqueue"

    AutoRepeat	500 5

# Let the server do the NumLock processing.  This should only be required
# when using pre-R6 clients
#    ServerNumLock

# Specifiy which keyboard LEDs can be user-controlled (eg, with xset(1))
#    Xleds      1 2 3

# To set the LeftAlt to Meta, RightAlt key to ModeShift,
# RightCtl key to Compose, and ScrollLock key to ModeLock:

#    LeftAlt     Meta
#    RightAlt    ModeShift
#    RightCtl    Compose
#    ScrollLock  ModeLock

EndSection
</programlisting>

<para>About the only thing you're likely to want to change are the definitions of the
modifier keys for non-English keyboards.  See the <emphasis>XF86Config(5)</emphasis> man page
for details.
</para>
</sect2>
<sect2>
<title>The Pointer section</title>

<para><anchor id="CFBSD-XF86Config-Pointer-section"/>
<indexterm><primary>XF86Config</primary><secondary>Pointer section</secondary></indexterm>
The <emphasis>Pointer</emphasis> section specifies the pointer protocol and device, which is
almost always a mouse.
</para>
<programlisting>
Section "Pointer"

    Protocol	"Microsoft"
    Device	"/dev/com1"

# When using XQUEUE, comment out the above two lines, and uncomment
# the following line.

#    Protocol	"Xqueue"

# Baudrate and SampleRate are only for some Logitech mice

#    BaudRate	9600
#    SampleRate	150

# Emulate3Buttons is an option for 2-button Microsoft mice
# Emulate3Timeout is the timeout in milliseconds (default is 50ms)

#    Emulate3Buttons
#    Emulate3Timeout	50

# ChordMiddle is an option for some 3-button Logitech mice

#    ChordMiddle

EndSection
</programlisting>

<para>These values are defaults, and many are either incorrect for FreeBSD (for
example the device name <emphasis>/dev/com1</emphasis>) or do not apply at all (for example
<emphasis>Xqueue</emphasis>).  If you are configuring manually, select one <emphasis>Protocol</emphasis>
and one <emphasis>Device</emphasis> entry from the following selection.  If you must use a
two-button mouse, uncomment the keyword <emphasis>Emulate3Buttons</emphasis>&mdash;in this mode,
pressing both mouse buttons simultaneously within <emphasis>Emulate3Timeout</emphasis>
milliseconds causes the server to report a middle button press.
</para>
<programlisting>
Section "Pointer"

    Protocol	"Microsoft"	<emphasis>for Microsoft protocol mice</emphasis>
    Protocol    "MouseMan"		<emphasis>for Logitech mice</emphasis>
    Protocol    "PS/2"		<emphasis>for a PS/2 mouse</emphasis>
    Protocol    "Busmouse"		<emphasis>for a bus mouse</emphasis>

    Device	"/dev/ttyd0"		<emphasis>for a mouse on the first serial port</emphasis>
    Device	"/dev/ttyd1"		<emphasis>for a mouse on the second serial port</emphasis>
    Device	"/dev/ttyd2"		<emphasis>for a mouse on the third serial port</emphasis>
    Device	"/dev/ttyd3"		<emphasis>for a mouse on the fourth serial port</emphasis>
    Device	"/dev/psm0"		<emphasis>for a PS/2 mouse</emphasis>
    Device	"/dev/mse0"		<emphasis>for a bus mouse</emphasis>

    Emulate3Buttons			<emphasis>only for a two-button mouse</emphasis>

EndSection
</programlisting>

<para>You'll notice that the protocol name does not always match the manufacturer's
name.  In particular, the <emphasis>Logitech</emphasis> protocol only applies to older
Logitech mice.  The newer ones use either the MouseMan or Microsoft protocols.
Nearly all modern serial mice run one of these two protocols, and most run both.
</para>

<para>If you are using a bus mouse or a PS/2 mouse, make sure that the device driver
is included in the kernel.  The <emphasis>GENERIC</emphasis> kernel contains drivers for both
mice, but the PS/2 driver is disabled.  Use UserConfig (see page <xref linkend="CFBSD-UserConfig"/>)
to enable it.
</para>
</sect2>
<sect2>
<title>The Device section</title>

<para><indexterm><primary>XF86Config</primary><secondary>Device section</secondary></indexterm>
<anchor id="CFBSD-XF86Config-Device-section"/>
The <emphasis>Device</emphasis> section describes the video hardware.  You can specify multiple
device sections, each section describing a single graphics board.  Here are some
typical examples:
</para>
<programlisting>
# Any number of graphics device sections may be present

Section "Device"
    Identifier	"Generic VGA"
    VendorName	"Unknown"
    BoardName	"Unknown"
    Chipset	"generic"
#    VideoRam	256
#    Clocks	25.2 28.3
EndSection

Section "Device"
    # SVGA server auto-detected chipset
    Identifier	"Generic SVGA"
    VendorName	"Unknown"
    BoardName	"Unknown"
EndSection

# Section "Device"
#    Identifier	"Any Trident TVGA 9000"
#    VendorName	"Trident"
#    BoardName	"TVGA 9000"
#    Chipset	"tvga9000"
#    VideoRam	512
#    Clocks	25 28 45 36 57 65 50 40 25 28 0 45 72 77 80 75
# EndSection

# Section "Device"
#    Identifier	"Actix GE32+ 2MB"
#    VendorName	"Actix"
#    BoardName	"GE32+"
#    Ramdac	"ATT20C490"
#    Dacspeed	110
#    Option	"dac_8_bit"
#    Clocks	 25.0  28.0  40.0   0.0  50.0  77.0  36.0  45.0
#    Clocks	130.0 120.0  80.0  31.0 110.0  65.0  75.0  94.0
# EndSection
</programlisting>

<para>Be sure to read the server manual pages and the chipset-specific <emphasis>README</emphasis>
files for any non-generic information that may apply to your setup.
</para>

<para>To create a <emphasis>Device</emphasis> section you need to collect the data for your hardware,
and make some configuration decisions.  The hardware data you need is:
</para>
<itemizedlist>
<listitem>

<para>Chipset
</para>
</listitem>
<listitem>

<para>Amount of video memory
</para>
</listitem>
<listitem>

<para>Dot-clocks available or clock chip used (if programmable)
</para>
</listitem>
<listitem>

<para>Ramdac type (for some servers)
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>XF86Config</primary><secondary>Chipset specification</secondary></indexterm>
The server can usually determine this information on its own, but it is best to
fully specify things in the <emphasis>XF86Config</emphasis> file, so that no mistakes are made.
The <emphasis>Chipset</emphasis> is one of the keyword strings for a configured driver&mdash;you
can display it with
</para>
<programlisting>
$ <command>X -showconfig</command>
XFree86 Version 3.3.3.1 / X Window System
(protocol Version 11, revision 0, vendor release 6300)
Release Date: December 29 1998
        If the server is older than 6-12 months, or if your card is newer
        than the above date, look for a newer version before reporting
        problems.  (see http://www.XFree86.Org/FAQ)
Operating System: FreeBSD 3.0-CURRENT i386 [ELF]
Configured drivers:
  SVGA: server for SVGA graphics adaptors (Patchlevel 0):
      NV1, STG2000, RIVA128, RIVATNT, ET4000, ET4000W32, ET4000W32i,
      ET4000W32i_rev_b, ET4000W32i_rev_c, ET4000W32p, ET4000W32p_rev_a,
      ET4000W32p_rev_b, ET4000W32p_rev_c, ET4000W32p_rev_d, ET6000, ET6100,
      et3000, pvga1, wd90c00, wd90c10, wd90c30, wd90c24, wd90c31, wd90c33,
      gvga, ati, sis86c201, sis86c202, sis86c205, sis86c215, sis86c225,
      sis5597, sis5598, sis6326, tvga8200lx, tvga8800cs, tvga8900b,
      tvga8900c, tvga8900cl, tvga8900d, tvga9000, tvga9000i, tvga9100b,
      tvga9200cxr, tgui9400cxi, tgui9420, tgui9420dgi, tgui9430dgi,
      tgui9440agi, cyber9320, tgui9660, tgui9680, tgui9682, tgui9685,
      cyber9382, cyber9385, cyber9388, cyber9397, cyber9520, 3dimage975,
      3dimage985, clgd5420, clgd5422, clgd5424, clgd5426, clgd5428,
      clgd5429, clgd5430, clgd5434, clgd5436, clgd5446, clgd5480, clgd5462,
      clgd5464, clgd5465, clgd6205, clgd6215, clgd6225, clgd6235, clgd7541,
      clgd7542, clgd7543, clgd7548, clgd7555, clgd7556, ncr77c22, ncr77c22e,
      cpq_avga, mga2064w, mga1064sg, mga2164w, mga2164w AGP, mgag200,
      mgag100, oti067, oti077, oti087, oti037c, al2101, ali2228, ali2301,
      ali2302, ali2308, ali2401, cl6410, cl6412, cl6420, cl6440, video7,
      ark1000vl, ark1000pv, ark2000pv, ark2000mt, mx, realtek, s3_virge,
      AP6422, AT24, AT3D, s3_svga, NM2070, NM2090, NM2093, NM2097, NM2160,
      NM2200, ct65520, ct65525, ct65530, ct65535, ct65540, ct65545, ct65546,
      ct65548, ct65550, ct65554, ct65555, ct68554, ct69000, ct64200,
      ct64300, mediagx, V1000, V2x00, p9100, spc8110, generic
</programlisting>

<para>Note that the operating system is reported as <emphasis>FreeBSD 3.0-CURRENT</emphasis>.  This
is the release of FreeBSD under which the server was built, not necessarily the
release for which it was intended.  In particular, it does not mean that it is
out of date, or that you have accidentally installed the wrong version.
</para>

<para>Only some of the accelerated servers currently have chipset drivers.  The amount
of memory is specified in KBytes, so you specify 1 MB of memory as 1024.
</para>

<para><indexterm><primary>devices</primary><secondary>XF86Config entry</secondary></indexterm>
<indexterm><primary>modeDB.txt</primary></indexterm>
<indexterm><primary>AccelCards</primary></indexterm>
The dot-clocks are the trickiest part of board configuration.  Fortunately a
large database of collected dot-clocks is available.  You can find a list of
Device entries for some graphics boards in the file
<emphasis>/usr/X11R6/lib/X11/doc/Devices</emphasis>.  If you find one for your board, you can
start with that.  Also, the first part of the file
<emphasis>/usr/X11R6/lib/X11/doc/modeDB.txt</emphasis> lists information for a myriad of SVGA
boards.  For accelerated boards, you can also look in the file
<emphasis>/usr/X11R6/lib/X11/doc/AccelCards</emphasis>.  If you find your board, copy the
numbers from the database to the Clocks line in your <emphasis>XF86Config</emphasis> file,
exactly as they appear in the database, without sorting, and leaving any
duplicates.  Note that some of the newer accelerated boards use a programmable
clock generator, in which case a ClockChip line is used in your
<emphasis>XF86Config</emphasis> file to identify the type of clock generator.  For example,
for a #9 GXe board you would specify
</para>
<programlisting>
ClockChip "icd2061a"
</programlisting>

<para></para>

<para>If you can't find a listing for your board, you can attempt to have the server
detect them.  Run the command:
</para>
<programlisting>
$ <command>X -probeonly &gt;/tmp/out 2&gt;&amp;1		<emphasis>for sh, ksh, bash, or zsh</emphasis></command>
% <command>X -probeonly &gt;&amp;/tmp/out			<emphasis>for csh or tcsh</emphasis></command>
</programlisting>

<para>Be sure that the <emphasis>XF86Config</emphasis> file does not contain a Clocks line at this
point.  Running this will cause your monitor to freak out for a couple of
seconds, as the server cycles through the clocks rapidly.  It should not damage
your monitor, but some newer monitors may shut themselves off because things may
go out of spec.  Anyhow, when this gets done, look in the file <emphasis>/tmp/out</emphasis>
for the detected dot-clocks.  Copy these to the Clocks line in your
<emphasis>XF86Config</emphasis> file, exactly as they appear in <emphasis>/tmp/out</emphasis>.  Don't sort
them or rearrange them in any way.
</para>

<para>Your board may have a programmable clock generator.  A symptom of this will be a
printout of only 2 or 3 clock values, with the rest all zeros.  If you run into
this, and your board is not listed in the databases, contact the XFree86 team
for help, or post a message to <emphasis>comp.windows.x.i386unix</emphasis>.
</para>

<para>Some servers (S3 and AGX) require you to identify the type and speed of the
RAMDAC your board uses in order to get the most out of the hardware.  This is
done by adding entries <emphasis>Ramdac</emphasis> and <emphasis>DacSpec</emphasis>.  For details of the
supported RAMDACs, refer to the appropriate server manual page.  Previous
versions of XFree86 specified the RAMDAC type with an Option flag.
</para>

<para>You may need to specify some option flags for your hardware.  The server manual
pages will describe these options, and the chipset-specific <emphasis>README</emphasis> files
will tell you if any are required for your board.
</para>
</sect2>
<sect2>
<title>Configuring the Monitor and its Modes</title>

<para><indexterm><primary>VideoModes.doc</primary></indexterm>
Configuring monitor modes can be a trying experience because of the lack of
standardization in monitor hardware.  The XFree86 project has attempted to
simplify this by collecting databases of specific monitor information, and
assembling a set of generic modes that should get pretty much any monitor up and
functional.  For all the gory details of mode generation and tuning, refer to
the file <emphasis>/usr/X11R6/lib/X11/doc/VideoModes.doc</emphasis>.
</para>
</sect2>
<sect2>
<title>The Monitor section</title>

<para><anchor id="CFBSD-XF86Config-Monitor-section"/>
<indexterm><primary>XF86Config</primary><secondary>Monitor section</secondary></indexterm>
<indexterm><primary>Monitors</primary><secondary>documentation</secondary></indexterm>
The monitor specs and video modes are described in the <emphasis>Monitor</emphasis> sections in
the <emphasis>XF86Config</emphasis> file:
</para>
<programlisting>
# Any number of monitor sections may be present

Section "Monitor"

    Identifier	"Generic Monitor"
    VendorName	"Unknown"
    ModelName	"Unknown"

# HorizSync is in kHz unless units are specified.
# HorizSync may be a comma separated list of discrete values, or a
# comma separated list of ranges of values.
# NOTE: THE VALUES HERE ARE EXAMPLES ONLY.  REFER TO YOUR MONITOR'S
# USER MANUAL FOR THE CORRECT NUMBERS.

    HorizSync   31.5  # typical for a single frequency fixed-sync monitor

#    HorizSync	30-64         # multisync
#    HorizSync	31.5, 35.2    # multiple fixed sync frequencies
#    HorizSync	15-25, 30-50  # multiple ranges of sync frequencies

# VertRefresh is in Hz unless units are specified.
# VertRefresh may be a comma separated list of discrete values, or a
# comma separated list of ranges of values.
# NOTE: THE VALUES HERE ARE EXAMPLES ONLY.  REFER TO YOUR MONITOR'S
# USER MANUAL FOR THE CORRECT NUMBERS.

    VertRefresh 60  # typical for a single frequency fixed-sync monitor

#    VertRefresh	50-100        # multisync
#    VertRefresh	60, 65        # multiple fixed sync frequencies
#    VertRefresh	40-50, 80-100 # multiple ranges of sync frequencies

# Modes can be specified in two formats.  A compact one-line format, or
# a multi-line format.

# A generic VGA 640x480 mode (hsync = 31.5kHz, refresh = 60Hz)
# These two are equivalent

#    ModeLine "640x480" 25.175 640 664 760 800 480 491 493 525

    Mode "640x480"
        DotClock	25.175
        HTimings	640 664 760 800
        VTimings	480 491 493 525
    EndMode

# These two are equivalent

#    ModeLine "1024x768i" 45 1024 1048 1208 1264 768 776 784 817 Interlace

#    Mode "1024x768i"
#        DotClock	45
#        HTimings	1024 1048 1208 1264
#        VTimings	768 776 784 817
#        Flags		"Interlace"
#    EndMode

EndSection
</programlisting>

<para>To create a Monitor section, you need to know your monitor's specifications, in
particular its video bandwidth and what range of horizontal sync and vertical
sync rates it supports.  If you can't find this information in the monitor's
user manual, check the file <emphasis>/usr/X11R6/lib/X11/doc/Monitors</emphasis> to see if it
has an entry for your monitor.  The <emphasis>XF86Config</emphasis> man page describes how to
enter this information into the Monitor section.
</para>

<para>Next, you need to provide a set of video modes that are suitable for the
monitor.  The first step is to check in the <emphasis>Monitors</emphasis> and <emphasis>modeDB.txt</emphasis>
files to see if there is a listing of modes for your specific monitor.  If there
is, copy those modes to the Monitor section of your <emphasis>XF86Config</emphasis> file.
Verify that there is a clock listed on the Clocks line in your <emphasis>XF86Config</emphasis>
that matches the dot clock in the 2nd parameter of each mode line; delete any
mode line that does not have a matching clock on your board.  If you still have
modes left, you are in good shape.
</para>

<para>If you don't find any specific modes, or need more modes for the resolutions you
want to use, refer to the Generic Video Modes listing in the file
<emphasis>/usr/X11R6/lib/X11/doc/README.Config</emphasis>.  Match the mode specification
against your monitor's specifications; pick the highest-refresh mode that is
within specs, and make sure you have a matching dot-clock on your Clocks line.
Try the VESA modes before any corresponding alternate mode setting.  Copy the
mode specification to the Monitor section of your <emphasis>XF86Config</emphasis> file.  Note
that these modes are likely not optimal; they may not be sized perfectly, or may
not be correctly centered.  But they should get you up and running.  If you want
to tune the mode to your monitor, you can read the section <emphasis>Fixing Problems
with the Image</emphasis> in <emphasis>VideoModes.doc</emphasis>.
</para>

<para>A note before you are done.  If the same mode name occurs more than once in the
Monitor section of the <emphasis>XF86Config</emphasis> file, the server will use the first mode
with a matching clock.  It is generally considered a bad idea to have more than
one mode with the same name in your <emphasis>XF86Config</emphasis> file.
</para>
</sect2>
<sect2>
<title>The Screen section</title>

<para><anchor id="CFBSD-XF86Config-Screen-section"/>
<indexterm><primary>XF86Config</primary><secondary>Screen section</secondary></indexterm>
Once you have given a description of your monitor and graphics hardware you need
to specify how they are to be used by the servers.  This is the purpose of the
<emphasis>Screen</emphasis> sections in the <emphasis>XF86Config</emphasis> file:
</para>
<programlisting>
# The colour SVGA server
Section "Screen"
    Driver	"svga"
    Device	"Generic SVGA"
    Monitor	"Generic Monitor"
    Subsection "Display"
        Depth	    8
        Modes	    "640x480"
        ViewPort    0 0
        Virtual     800 600
    EndSubsection
EndSection

# The 16-colour VGA server
Section "Screen"
    Driver	"vga16"
    Device	"Generic VGA"
    Monitor	"Generic Monitor"
    Subsection "Display"
        Modes	    "640x480"
        ViewPort    0 0
        Virtual     800 600
    EndSubsection
EndSection

# The Mono server
Section "Screen"
    Driver	"vga2"
    Device	"Generic VGA"
    Monitor	"Generic Monitor"
    Subsection "Display"
        Modes	    "640x480"
        ViewPort    0 0
        Virtual     800 600
    EndSubsection
EndSection

# The accelerated servers (S3, Mach32, Mach8, 8514, P9000, AGX, W32)
# Section "Screen"
#     Driver	"accel"
#     Device	"Actix GE32+ 2MB"
#     Monitor	"Generic Monitor"
#     Subsection  "Display"
#         Depth	    8
#         Modes	    "640x480"
#         ViewPort    0 0
#         Virtual	    1280 1024
#     EndSubsection
#     SubSection "Display"
#         Depth	    16
#         Weight	    565
#         Modes	    "640x480"
#         ViewPort    0 0
#         Virtual	    1024 768
#     EndSubsection
# EndSection
</programlisting>

<para>Supply a Screen section for each of the server driver types you will be using.
The driver types are <emphasis>SVGA</emphasis> (<emphasis>XF86_SVGA</emphasis>), <emphasis>VGA16</emphasis>
(<emphasis>XF86_VGA16</emphasis>), <emphasis>VGA2</emphasis> (<emphasis>XF86_Mono</emphasis>), <emphasis>MONO</emphasis>
(<emphasis>XF86_Mono</emphasis>, <emphasis>XF86_VGA16</emphasis>), and <emphasis>ACCEL</emphasis> (<emphasis>XF86_S3</emphasis>,
<emphasis>XF86_Mach32</emphasis>, <emphasis>XF86_Mach8</emphasis>, <emphasis>XF86_Mach64</emphasis>, <emphasis>XF86_8514</emphasis>,
<emphasis>XF86_P9000</emphasis>, <emphasis>XF86_AGX</emphasis>, and <emphasis>XF86_W32</emphasis>).  Each Screen section
specifies which Monitor description and Device description are to be used.
</para>

<para>The Screen sections include one or more <emphasis>Display</emphasis> subsections.  One
Display subsection may be provided for each pixel depth (the number of bits per
pixel) that the server supports.  In the Display subsection you can specify the
size of the virtual screen the server will use.  The virtual screen allows you
to have a <emphasis>root window</emphasis> larger than can be displayed on your monitor.  For
example, you can have an 800x600 display, but a 1280x1024 virtual size.  Use the
keyword <emphasis>Virtual</emphasis> to specify this size.  Note that many of the new
accelerated servers use non-displayed memory for caching.  It is not desirable
to use all of your memory for virtual display, as this leaves none for caching,
and this can cost as much as 30-40% of your server performance.
</para>

<para>The last thing you specify in Display subsection are the display modes, the
physical display resolutions that the server will use.  The name is arbitrary,
but must match something in the appropriate <emphasis>Monitor</emphasis> section.  By
convention, these names are the display resolution (for example
<emphasis>1024x768</emphasis>), but this is not a requirement.  You can list as many as
desired; the first is the initial display resolution, and you can cycle through
the list with <keycap>Ctrl-Alt-Keypad+</keycap> or <keycap>Ctrl-Alt-Keypad-</keycap> hotkey sequences.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchunixref"><title>Making friends with FreeBSD</title>

<para>So now you have installed FreeBSD, and it successfully boots from the hard disk.
Your first encounter with FreeBSD can be rather puzzling.  Sure, you didn't
expect to see the same things you know from Microsoft platforms, but you might
not have expected what you see either:
<anchor id="CFBSD-login-prompt"/>
</para>
<programlisting>
   FreeBSD (freebie.example.org) (ttyv0)

login:
</programlisting>

<para>Where do you go from here?  This chapter tells you.
</para>

<para><indexterm><primary>Abrahams</primary><secondary>Paul W.</secondary></indexterm>
<indexterm><primary>Larson</primary><secondary>Bruce R.</secondary></indexterm>
<indexterm><primary>Peek</primary><secondary>Jerry</secondary></indexterm>
<indexterm><primary>O'Reilly</primary><secondary>Tim</secondary></indexterm>
<indexterm><primary>Loukides</primary><secondary>Mike</secondary></indexterm>
<indexterm><primary>Nemeth</primary><secondary>Evi</secondary></indexterm>
<indexterm><primary>Snyder</primary><secondary>Garth</secondary></indexterm>
<indexterm><primary>Seebass</primary><secondary>Scott</secondary></indexterm>
<indexterm><primary>Hein</primary><secondary>Trent R.</secondary></indexterm>
FreeBSD is a very powerful operating system, but power doesn't come without a
certain complexity.  As a result, that some mundane operations can seem more
difficult than they need be.  There isn't space in this book to explain
everything there is about working with FreeBSD, but in the following few
chapters I'd like to make the transition easier for people who have prior
experience with Microsoft platforms or with other flavours of UNIX.  You can
find a lot more information about these topics in <emphasis>UNIX for the
Impatient</emphasis>, by Paul W. Abrahams and Bruce R. Larson, <emphasis>UNIX Power Tools</emphasis>,
by Jerry Peek, Tim O'Reilly, and Mike Loukides, and <emphasis>UNIX System
Administration Handbook</emphasis>, by Evi Nemeth, Garth Snyder, Scott Seebass, and
Trent R. Hein.  See <xref linkend="CFBSD-biblio"/>, for more information.
</para>

<para>If you've come from Microsoft, you will notice a large number of differences
between UNIX and Microsoft, but in fact the two systems have more in common than
meets the eye.  Indeed, back in the mid-80s, one of the stated goals of MS-DOS
2.0 was to make it more UNIX-like.  You be the judge of how successful that
attempt was, but in the following sections you'll notice some similarities.
You'll find a comparison of the more common MS-DOS and UNIX commands in
<xref linkend="CFBSD-appcommands"/>.
</para>

<para>In this chapter, we'll look at FreeBSD from the perspective of a newcomer with
no UNIX background.  If you <emphasis>do</emphasis> have a UNIX background, you may still
find it interesting.  Specifically, we'll consider:
</para>
<itemizedlist>
<listitem>

<para>Your primary interface with FreeBSD is via the <emphasis>shell</emphasis>.  This looks rather
like the command-line interface to Microsoft's MS-DOS, but there are a number of
differences which aren't immediately obvious.  We'll look at them in the next
section.
</para>
</listitem>
<listitem>

<para>UNIX is a multi-user operating system.  This means that you have to tell the
system who you are before you can access it.  On page <xref linkend="CFBSD-users-and-groups"/> we'll
look at how to define users.
</para>
</listitem>
<listitem>

<para>Once you have defined a user, you need to log in to the system and tell it what
to do.  We'll look at that on page
</para>
</listitem>
<listitem>

<para>Not all users are created equal.  In particular, the system administration login
<emphasis>root</emphasis> has power over all other users.  We'll look at this topic on page
</para>
</listitem>
<listitem>

<para>UNIX implements multi-tasking via a mechanism called <emphasis>processes</emphasis>.  We'll
look at them on page <xref linkend="CFBSD-processes"/>.
</para>
</listitem>
<listitem>

<para>Timekeeping is extremely important in a networking system.  If your system has
the wrong time, it can cause all sorts of strange effects.  On page
<xref linkend="CFBSD-timekeeping"/> we'll look at how to ensure that your system is running the
correct time.
</para>
</listitem>
<listitem>

<para>Other aspects of FreeBSD are so extensive that we'll dedicate separate chapters
to them.  We'll look at them in <xref linkend="CFBSD-chstarting"/>, <xref linkend="CFBSD-chfilesys"/>, <xref linkend="CFBSD-chdisks"/>, and
<xref linkend="CFBSD-chtapes"/>.  In particular, on page <xref linkend="CFBSD-vt"/> we'll see how to access multiple
``terminals'' or windows.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Differences from other environments</title>

<para><indexterm><primary>Differences</primary><secondary>from other environments</secondary></indexterm>
At first sight, UNIX can look really arcane.  People often get really frustrated
when working with the shell: it just doesn't seem to do what you want, and
there's no good reason.
</para>

<para>Well, of course there's always a good reason, but they are often so non-obvious
that even experienced programmers find it hard to believe.  Here are some of the
most popular, seen from a Microsoft perspective:
</para>
<sect2>
<title>Upper and lower case names</title>

<para><indexterm><primary>File</primary><secondary>names</secondary></indexterm>
UNIX file names are <emphasis>case-sensitive</emphasis>: the names <emphasis>FOO</emphasis>, <emphasis>Foo</emphasis> and
<emphasis>foo</emphasis> are three different names.  This may seem silly at first, but any
alternative is going to make things slower (the system must internally upshift
or downshift the names), and it means that the names must be associated with a
specific character set.  How do you upshift the German name <emphasis>Blödsinn</emphasis>?
What if the same characters appear in a Chinese name?  Do they still shift the
same?  In fact, all characters are legal in a UNIX file name, with one
exception: <emphasis>/</emphasis> is a separator which indicates a directory, and you can't
use it in a file name.  Still, there are some characters you should avoid:
spaces are a pain, as we'll see below, and binary 0s (the ASCII <emphasis>NUL</emphasis>
character) can confuse a lot of programs.  It's almost impossible to get a
binary 0 into a file name anyway, since the character is used to represent the
end of a string in the C programming language.
</para>

<para>This isn't the problem it used to be: web browsers have made UNIX file names
more popular with <emphasis>Uniform Resource Locators</emphasis> or <emphasis>URLs</emphasis>.  We'll look
at them on page <xref linkend="CFBSD-URL"/>.
</para>
</sect2>
<sect2>
<title>File names and extensions</title>

<para>The Microsoft naming convention (name, period and extension) is similar to that
of UNIX.  UNIX also uses extensions to represent specific kinds of files.  The
difference is that these extensions (and their lengths) are implemented by
convention, not by the file system.  In Microsoft, the period between the name
and the extension is a typographical feature which only exists at the display
level: it's not part of the name.  In UNIX, the period is part of the name, and
names like <emphasis>foo.bar.bazzot</emphasis> are perfectly valid file names.  The system
doesn't assign any particular meaning to file name extensions; instead, it looks
for <emphasis>magic numbers</emphasis>, specific values in specific places in the file.
</para>
</sect2>
<sect2>
<title>Globbing characters</title>

<para><indexterm><primary>globbing</primary><secondary>characters</secondary></indexterm>
<indexterm><primary>characters</primary><secondary>globbing</secondary></indexterm>
Most systems have a method of representing groups of filenames and other names,
usually by using special characters for representing an abstraction.  The most
common in UNIX are the characters <emphasis>*</emphasis>, <emphasis>?</emphasis> and the square brackets
<emphasis>[]</emphasis>.  UNIX calls these characters <emphasis>globbing characters</emphasis>.  The
Microsoft usage comes from UNIX, but the underlying file name representation
makes for big differences.  Table <xref linkend="CFBSD-globbing-example"/> gives some examples.
box,center,tab(#) ;
lfCWp9 | lw32 | lw32 .
Name#Microsoft meaning#UNIX meaning
=
CONFIG.*#T{
All files with the name <emphasis>CONFIG</emphasis>, no matter what their extension.
T}#T{
All files whose name starts with <emphasis>CONFIG.</emphasis>, no matter what the rest is.
Note that the name includes a period at the end.
T}
CONFIG.BA?#T{
All files with the name <emphasis>CONFIG</emphasis> and an extension which starts with
<emphasis>BA</emphasis>, no matter what the last character.
T}#T{
All files which start with <emphasis>CONFIG.BA</emphasis> and have one more character in their
name.
T}
*#T{
Depending on the Microsoft version, all files without an extension, or all
files.
T}#T{
All files.
T}
*.*#T{
All files with an extension.
T}#T{
All files which have a period after the beginning of their name.
T}
foo[127]#T{
In older versions, invalid.  In newer versions with long file name support, the
file with the name <emphasis>foo[127]</emphasis>.
T}#T{
<emphasis>foo1</emphasis>, <emphasis>foo2</emphasis> and <emphasis>foo7</emphasis>.
T}

</tbody></tgroup></table>
<figure><title>Globbing examples</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
<sect2>
<title>Shell parameters</title>

<para><indexterm><primary>Shell</primary><secondary>parameters</secondary></indexterm>
<indexterm><primary>parameters</primary><secondary>shell</secondary></indexterm>
<indexterm><primary>parsing</primary></indexterm>
<indexterm><primary>argument</primary><secondary>shell</secondary></indexterm>
<indexterm><primary>white</primary><secondary>space</secondary></indexterm>
<indexterm><primary>space</primary><secondary>white</secondary></indexterm>
When you invoke a program with the shell, it first <emphasis>parses</emphasis> the input line
before passing it to the program: it turns the line into a number of parameters
(called <emphasis>arguments</emphasis> in the C programming language).  Normally the
parameters are separated by <emphasis>white space</emphasis>, either a space or a tab
character.  If you write a program or script <emphasis>foo</emphasis>, and invoke it like this:
</para>
<programlisting>
$ <command>foo and a lot more</command>
</programlisting>

<para>the program will receive five arguments, numbered 0 to 4:
box,center,tab(#) ;
rfCWp9 | lw65 .
\s10Argument#Value
=
0#foo
1#and
2#a
3#lot
4#more

</tbody></tgroup></table>
What happens if you want to pass a name with a space?  For example, you might
want to look for the text ``<emphasis>Mail rejected</emphasis>'' in a log file.  We have a
program for looking for text, called <emphasis>grep</emphasis>.  The syntax is:
</para>
<programlisting>
grep <emphasis>expression</emphasis> <emphasis>files</emphasis>
</programlisting>

<para>Argument 1 is the expression; all additional arguments are the names of files to
search.  We could write
</para>
<programlisting>
$ <command>grep Mail rejected /var/log/maillog</command>
</programlisting>

<para>but that would try to look for the text <emphasis>Mail</emphasis> in the files
<emphasis>rejected</emphasis> (probably causing an error message that the file did not exist)
and <emphasis>/var/log/maillog</emphasis> (where just about every line contains the text
<emphasis>Mail</emphasis>).  That's  not what we want.  Instead, we do pretty much what I
wrote above:
</para>
<programlisting>
$ <command>grep "Mail rejected" /var/log/maillog</command>
</programlisting>

<para>In other words, if we put quote characters <command>""</command> around a group of words,
the shell will interpret them as a single parameter.  The parameter that is
passed to <emphasis>grep</emphasis> is <emphasis>Mail rejected</emphasis>, not <emphasis>"Mail rejected"</emphasis>.
</para>

<para>This behaviour of the shell is a very good reason not to use file names with
spaces in them.  It's perfectly legitimate to embed spaces into UNIX file names,
but it's a pain to use.
</para>

<para>It's even more interesting to see what happens when you pass a globbing
character to a program, for example:
</para>
<programlisting>
$ <command>cc -o foo *.c</command>
</programlisting>

<para>This invocation compiles all C source files (<emphasis>*.c</emphasis>) and creates a program
<emphasis>foo</emphasis>.  If you do this with Microsoft, the C compiler gets four parameters,
and it has to find the C source files itself.  In UNIX, the shell expands the
text <emphasis>*.c</emphasis> and replaces it with the names of the source files.  If there
are thirty source files in the directory, it will pass a total of 33 parameters
to the compiler.
</para>
</sect2>
<sect2>
<title>Fields which can contain spaces</title>

<para>The solution to the ``Mail rejected'' problem isn't ideal, but it works well
enough as long as you don't have to do it all the time.  In many cases, though,
particularly in configuration files, you do have to do it relatively often.  As
a result, a number of system configuration files use a colon (<emphasis>:</emphasis>) as a
delimiter.  This looks very confusing at first, but it turns out not to be as
bad as the alternatives.  We'll see some examples in the password file on page
<xref linkend="CFBSD-master-passwd"/>, in the login class file on page <xref linkend="CFBSD-login-class"/>, and in the
<emphasis>PATH</emphasis> environment variable on page <xref linkend="CFBSD-PATH"/>.
</para>
</sect2>
<sect2>
<title>Slashes: backward and forward</title>

<para><indexterm><primary>root</primary><secondary>directory</secondary></indexterm>
<indexterm><primary>slash</primary><secondary>character</secondary></indexterm>
<indexterm><primary>escape</primary><secondary>character</secondary></indexterm>
<indexterm><primary>character</primary><secondary>slash</secondary></indexterm>
<indexterm><primary>character</primary><secondary>escape</secondary></indexterm>
<anchor id="CFBSD-slash"/>
Some of the most confusing characters in computers are <emphasis>/</emphasis> and <emphasis>\e</emphasis>.
UNIX uses <emphasis>/</emphasis> to delimit directories: for example, <emphasis>/etc/fstab</emphasis>
starts from the <emphasis>root directory</emphasis> (<emphasis>/</emphasis>), and represents the directory
<emphasis>etc</emphasis> inside this directory, and the file <emphasis>fstab</emphasis> within that
directory.  The backslash <emphasis>\e</emphasis> is called an <emphasis>escape character</emphasis> it
has a number of different purposes:
</para>
<itemizedlist>
<listitem>

<para>You can put it in front of another special character to say ``don't interpret
this character in any special way''.  For example, we've seen that the shell
interprets a space character as the end of a parameter.  In the previous example
we changed <emphasis>Mail rejected</emphasis> to <emphasis>"Mail rejected"</emphasis> to stop the shell
from interpreting it.  We could also have written it like this:
<emphasis>Mail\e\ rejected</emphasis>.
</para>

<para><indexterm><primary>quoting</primary></indexterm>
A more common use for this <emphasis>quoting</emphasis> is to tell the shell to ignore the
end of a line.  If a command line in a shell script gets too long, you might
like to split it up into several lines; but the shell sees the end of a line as
a go-ahead to perform the command.  You can stop it from doing so by putting a
backslash <emphasis>immediately</emphasis> before the end of the line:
</para>
<programlisting>
$ <command>grep \e
  "Mail rejected" \e
   /var/log/maillog</command>
</programlisting>

<para>Don't put any spaces between the <emphasis>\e</emphasis> and the end of the line; otherwise
the shell will interpret the first space as a parameter by itself, and then it
will interpret the end of line as the end of the command.
</para>
</listitem>
<listitem>

<para><indexterm><primary>control</primary><secondary>characters</secondary></indexterm>
<indexterm><primary>character</primary><secondary>control</secondary></indexterm>
In the C programming language, the backslash is used to represent several
<emphasis>control characters</emphasis>.  For example, <emphasis>\en</emphasis> means ``new line''.  This
usage appears in many other places as well.
</para>
</listitem>
<listitem>

<para>Using <emphasis>\e</emphasis> as an escape character causes problems: how do we put a
<emphasis>\e</emphasis> character on a line?  The answer: quote it.  Write <emphasis>\e\e</emphasis> when
you mean <emphasis>\e</emphasis>.  This causes particular problems when interfacing with
Microsoft&mdash;see page <xref linkend="CFBSD-multibackslash"/> for an example.
</para>
</listitem>
</itemizedlist>

<para>There are many more such surprises in store; take a look at <emphasis>UNIX Power
Tools</emphasis> for a good overview.
</para>
</sect2>
<sect2>
<title>Tab characters</title>

<para><indexterm><primary>Tab</primary><secondary>characters</secondary></indexterm>
<indexterm><primary>character</primary><secondary>tab</secondary></indexterm>
<indexterm><primary>make</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>make</secondary></indexterm>
<indexterm><primary>sendmail</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sendmail</secondary></indexterm>
<indexterm><primary>syslogd</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>syslogd</secondary></indexterm>
We've seen that the shell treats white space, either spaces or tab characters,
as the same.  Unfortunately, some other programs do not.  <emphasis>make</emphasis>,
<emphasis>sendmail</emphasis> and <emphasis>syslogd</emphasis> make a distinction between the two kinds of
characters, and they all require tabs (not spaces) in certain places.  This is a
<emphasis>real</emphasis> nuisance, since hardly any editor makes a distinction between them.
</para>
</sect2>
<sect2>
<title>Carriage control characters</title>

<para><indexterm><primary>Carriage</primary><secondary>Return character</secondary></indexterm>
<indexterm><primary>Line</primary><secondary>Feed character</secondary></indexterm>
<indexterm><primary>character</primary><secondary>carriage return</secondary></indexterm>
<indexterm><primary>character</primary><secondary>line feed</secondary></indexterm>
In the olden days, the standard computer terminal was a Teletype, a kind of
computer-controlled electric typewriter.  When it got to the end of a line, it
required two mechanical operations to move to the beginning of the next line: the
<emphasis>Carriage Return</emphasis> control character told it to move the carriage back to
the beginning of the line, and the <emphasis>Line Feed</emphasis> character told it to move
to the next line.
</para>

<para><indexterm><primary>Newline</primary><secondary>character</secondary></indexterm>
<indexterm><primary>character</primary><secondary>newline</secondary></indexterm>
Generations of computer systems emulated this behaviour by putting both
characters at the end of each text line.  This makes it more difficult to
recognize the end of line, it uses up more storage space, and normally it
doesn't buy you much.  The implementors of UNIX decided instead to use a single
character, which it calls the <emphasis>Newline</emphasis> character.  For some reason, they
chose the line feed to represent newline, though the character generated by
<keycap>Enter</keycap> is a carriage return.  As we saw above, the C programming language
represents it as <emphasis>\en</emphasis>.
</para>

<para>This causes problems transferring data between FreeBSD and Microsoft, and also
when printing to printers which still expect both characters.  We'll look at the
file transfer issues on page <xref linkend="CFBSD-Microsoft-staircase"/>, and the printer issues on
page <xref linkend="CFBSD-staircase"/>.
</para>
</sect2>
</sect1>
<sect1>
<title>Users and groups</title>

<para><indexterm><primary>users</primary><secondary>and groups</secondary></indexterm>
<anchor id="CFBSD-users-and-groups"/>
Probably the biggest difference between traditional Microsoft platforms and
FreeBSD also takes the longest to appreciate: FreeBSD is a multi-user,
multi-tasking system.  This means that many people can use the system at once,
and each of them can do several things at the same time.  You may think ``why
would I want to do that?''.  Once you've got used to this idea, though, you'll
never be satisfied with Microsoft again, even if you were in the first place.
If you use the X window system, you'll find that all windows can be active at
the same time&mdash;you don't have to select them.  You can monitor some activity
in the background in another window while writing a letter, testing a program,
or playing a game.
</para>

<para><indexterm><primary>user</primary></indexterm>
In order to access a FreeBSD system, you must be registered as a <emphasis>user</emphasis>.
The registration defines a number of parameters:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>user</primary><secondary>name</secondary></indexterm>
<indexterm><primary>user</primary><secondary>ID</secondary></indexterm>
A <emphasis>user name</emphasis>, also often called <emphasis>user ID</emphasis>.  This is a name which you
use to identify yourself to the system.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-password"/>
<indexterm><primary>password</primary></indexterm>
A <emphasis>password</emphasis>, a security device to ensure that other people don't abuse your
user ID.  In order to log in, you need to specify both your user ID and the
correct password.  When you type in the password, nothing appears on the screen,
so that people looking over your shoulder can't read it.
</para>

<para>It may seem strange to go to such security measures on a system which you alone
use, but if you connect to the Internet, even via PPP or SLIP, other people can
at least theoretically access your system while you are connected.  If you don't
connect to the Internet, you can get away without a password, but you can't get
away without a user ID.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-shell"/>
<indexterm><primary>shell</primary></indexterm>
<indexterm><primary>COMMAND.COM</primary></indexterm>
<indexterm><primary>sh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sh</secondary></indexterm>
<indexterm><primary>csh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>csh</secondary></indexterm>
<indexterm><primary>bash</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>bash</secondary></indexterm>
<indexterm><primary>tcsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcsh</secondary></indexterm>
<indexterm><primary>zsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>zsh</secondary></indexterm>
<indexterm><primary>COMMAND.COM</primary></indexterm>
A <emphasis>shell</emphasis>, a program which reads in your commands and executes them.  MS-DOS
uses the program <emphasis>COMMAND.COM</emphasis> to perform this function.  UNIX has a large
choice of shells: the traditional UNIX shells are the Bourne shell <emphasis>sh</emphasis>
and the C shell <emphasis>csh</emphasis>, but FreeBSD also supplies <emphasis>bash</emphasis>, <emphasis>tcsh</emphasis>,
<emphasis>zsh</emphasis> and others.  The UNIX shells are orders of magnitude more powerful
than <emphasis>COMMAND.COM</emphasis>&mdash;see <emphasis>UNIX Power Tools</emphasis> for a good discussion.  I
personally use the <emphasis>bash</emphasis> shell.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-home-directory"/>
<indexterm><primary>home</primary><secondary>directory</secondary></indexterm>
<indexterm><primary>directory</primary><secondary>home</secondary></indexterm>
A <emphasis>home directory</emphasis>.  Since the system can have multiple users, each one
needs a separate directory in which to store his private files.  Typically,
users have a directory <emphasis>/home/<emphasis>username</emphasis></emphasis>, where <emphasis>username</emphasis> is
the name they use to log in.  When you log in to the system, the shell sets the
current directory to your home directory.  In it, you can do what you want, and
normally it is protected from access by other users.  Many shells, including the
<emphasis>bash</emphasis> used in these examples, use the special notation <emphasis>~</emphasis> (tilde)
to represent the name of the home directory.
</para>
</listitem>
<listitem>

<para><indexterm><primary>group</primary></indexterm>
<anchor id="CFBSD-group"/>
A <emphasis>group</emphasis> number.  UNIX collects users into <emphasis>groups</emphasis> who have
specific access permissions.  When you add a user, you need to make him a member
of a specific group, which is entered in the password information.  Your group
number indirectly helps determine what you are allowed to do in the system.  As
we'll see on page <xref linkend="CFBSD-permissions"/>, your user and group determine what access you
have to the system.  You can belong to more than one group.
</para>

<para><indexterm><primary>/etc/group</primary></indexterm>
Group numbers generally have names associated with them.  The group names and
numbers are stored in the file <emphasis>/etc/group</emphasis>.  In addition, this file may
contain userids of users who belong to another group, but who are allowed to
belong to this group as well.
</para>

<para>If you find the concept of groups confusing, don't worry about them.  You can
get by quite happily without using them at all.  You'll just see references to
them when we come to discuss file permissions.  For further information, look at
the man page for <emphasis>group(5)</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>In addition to ``real'' users, who represent people, the system has a number of
pseudo-users who represent tasks performed by the system.  Don't remove them, or
you could run into problems.
</para>

<para><indexterm><primary>/etc/passwd</primary></indexterm>
<indexterm><primary>/etc/master.passwd</primary></indexterm>
<indexterm><primary>/etc/pwd.db</primary></indexterm>
<indexterm><primary>/etc/spwd.db</primary></indexterm>
<anchor id="CFBSD-master-passwd"/>
The list of users is kept in the file <emphasis>/etc/passwd</emphasis>.  In older UNIX systems,
this was the only file used to store user information, and the passwords were
also stored here in encrypted form.  Nowadays processors are much faster, and
it's too easy to crack a password.  As a result, FreeBSD keeps the real
information in a file called <emphasis>/etc/master.passwd</emphasis>, and for performance
reasons it also makes it available in database form in <emphasis>/etc/pwd.db</emphasis> and
<emphasis>/etc/spwd.db</emphasis>.  <emphasis>/etc/passwd</emphasis> remains for compatibility reasons: some
programs access it directly to get information about the environment in which
they are running.
</para>

<para>By default, there are no real users on a freshly installed system.  Optionally,
<emphasis>sysinstall</emphasis> will do it for you, but there's no particular reason to do it
during system installation.  In the next section, we'll look at two ways to add
and modify users.
</para>
<sect2>
<title>Choosing a user name</title>

<para><indexterm><primary>user</primary><secondary>name</secondary></indexterm>
<indexterm><primary>choosing</primary><secondary>a user name</secondary></indexterm>
<anchor id="CFBSD-logging-in"/>
<indexterm><primary>logging</primary><secondary>in</secondary></indexterm>
So what user name do you choose?  User names are usually related to your real
name and can be up to 8 characters long.  By convention, they are in all lower
case, even when they represent real names.  Typical ways to form a user name
are:
</para>
<itemizedlist>
<listitem>

<para>First name.  In my personal case, this would be <emphasis>greg</emphasis>.
</para>
</listitem>
<listitem>

<para>Last name (<emphasis>lehey</emphasis>).
</para>
</listitem>
<listitem>

<para>First name and initial of last name (<emphasis>gregl</emphasis>).
</para>
</listitem>
<listitem>

<para>Inital of first name, and last name (<emphasis>glehey</emphasis>).
</para>
</listitem>
<listitem>

<para>Initials (<emphasis>gfl</emphasis>).
</para>
</listitem>
<listitem>

<para>Nickname (for example, <emphasis>grog</emphasis>).
</para>
</listitem>
</itemizedlist>

<para>I choose the last possibility, as we will see in the following discussion.
</para>
</sect2>
<sect2>
<title>Adding users</title>

<para><indexterm><primary>adding</primary><secondary>users</secondary></indexterm>
<indexterm><primary>users</primary><secondary>adding</secondary></indexterm>
<anchor id="CFBSD-adding-user"/>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>adduser</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>adduser</secondary></indexterm>
<indexterm><primary>Schneider</primary><secondary>Wolfram</secondary></indexterm>
<indexterm><primary>Lehey</primary><secondary>Yana</secondary></indexterm>
There are two ways to add users.  One is the program <emphasis>adduser</emphasis>:
</para>
<programlisting>
# <command>adduser</command>
Use option ``-verbose'' if you want see more warnings &amp; questions
or try to repair bugs.

Enter username [a-z0-9]: <command>yana</command>
Enter full name []: <command>Yana Lehey</command>
Enter shell bash csh date no sh [bash]:	<emphasis>accept the default</emphasis>
Uid [1000]:						<emphasis>accept the default</emphasis>
Enter login class: default []:			<emphasis>accept the default</emphasis>
Login group yana [yana]: <command>home</command>
Login group is ``home''. Invite yana into other groups: <command>no</command>
[no]: </emphasis><command>wheel</command>						<emphasis>in order to use su
Enter password []:					<emphasis>no echo</emphasis>
Enter password again []:				<emphasis>no echo</emphasis>

Name:	  yana
Password: ****
Fullname: Yana Lehey
Uid:	  1000
Gid:	  1001 (home)
Class:
Groups:	  home wheel
HOME:	  /home/yana
Shell:	  /bin/bash
OK? (y/n) [y]:						<emphasis>accept the default</emphasis>
Added user ``yana''
Add another user? (y/n) [y]: <command>n</command>
</programlisting>

<para><indexterm><primary>vipw</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vipw</secondary></indexterm>
<indexterm><primary>Lehey</primary><secondary>Norman</secondary></indexterm>
<anchor id="CFBSD-vipw"/>
</para>

<para><indexterm><primary>/etc/master.passwd</primary></indexterm>
An alternative way of adding or removing users is with the <emphasis>vipw</emphasis> program.
This is a more typical UNIX-hackish approach: <emphasis>vipw</emphasis> starts your favourite
editor and allows you to edit the contents of the file <emphasis>/etc/master.passwd</emphasis>.
After you have finished, it checks the contents and rebuilds the password
database.  Figure <xref linkend="CFBSD-vipw-screen"/> shows an example.
<indexterm><primary>/etc/master.passwd</primary></indexterm>
</para>

<para><figure><title><emphasis>vipw</emphasis> display</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<anchor id="CFBSD-user-class"/>
<table frame='all'><title><emphasis>/etc/master.passwd</emphasis> format</title>
box,center,tab(#) ;
lfCWp9w15 | lw60  .
\s10Field#Meaning
=
yvonne#T{
User name
T}
(gibberish)#T{
Encrypted password.  When adding a new user, leave this field empty and add it
later with the <emphasis>passwd</emphasis> program.
T}
1005#T{
User number
T}
1000#T{
Group number
T}
<indexterm><primary>/etc/passwd</primary></indexterm>
(empty)#T{
Login class.  We'll look at this below.  This field is not included in
<emphasis>/etc/passwd</emphasis>.
T}
0#T{
Password change time.  If non-0, it is the time in seconds after which the
password must be changed.  This field is not included in <emphasis>/etc/passwd</emphasis>.
T}
0#T{
Account expiration time.  If non-0, it is the time in seconds after which the
user expires.  This field is not included in <emphasis>/etc/passwd</emphasis>.
T}
<indexterm><primary>Lehey</primary><secondary>Yvonne</secondary></indexterm>
<indexterm><primary>gecos</primary></indexterm>
T{
Yvonne Lehey, Echunga, +61-8-8388-8250
T}#T{
The so-called <emphasis>gecos</emphasis>
field, which describes the user.  This field is used
by a number of programs, in particular mail readers, to extract the real name of
the user.
T}
/home/yvonne#T{
The name of the home directory.
T}
/bin/bash#T{
The shell to be started when the user logs in.
T}

</tbody></tgroup></table>
</para>

<para>You're probably wondering why would you ever want to do things this way, and you
might find it funny that most experienced UNIX administrators prefer it.  The
reason is that you get more of an overview than with a peephole approach that
graphical environments give you, but of course you need to understand the format
better.  It's less confusing once you know that each line represents a single
user, that the lines are divided into <emphasis>fields</emphasis> (which may be empty), and
that each field is separated from the next by a colon (<emphasis>:</emphasis>).  Table
<xref linkend="CFBSD-master.passwd-format"/> describes the fields you see on the line on which the
cursor is positioned.  You can read more about the format of
<emphasis>/etc/master.passwd</emphasis> in the man page for <emphasis>passwd</emphasis> for further
details.
</para>

<para>We'll see a valid use of this approach on page <xref linkend="CFBSD-add-SLIP-user"/>: if you want to
make a second user almost the same as the first, it's easier to use an editor
than type in all the parameters again.
<!-- XXX -->
</para>
</sect2>
<sect2>
<title>Adding or changing passwords</title>

<para><indexterm><primary>adding</primary><secondary>passwords</secondary></indexterm>
<indexterm><primary>changing</primary><secondary>passwords</secondary></indexterm>
<indexterm><primary>passwords</primary><secondary>adding</secondary></indexterm>
<indexterm><primary>passwords</primary><secondary>changing</secondary></indexterm>
<indexterm><primary>passwd</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>passwd</secondary></indexterm>
If your system has any connection with the outside world, it's a good idea to
change your password from time to time.  Do this with the <emphasis>passwd</emphasis>
program.  The input doesn't look very interesting:
</para>
<programlisting>
$ <command>passwd</command>
Changing local password for yana.
Old password:				<emphasis>doesn't echo</emphasis>
New password:				<emphasis>doesn't echo</emphasis>
Retype new password:			<emphasis>doesn't echo</emphasis>
passwd: rebuilding the database...
passwd: done
</programlisting>

<para>You have to enter the old password to make sure that some passer-by doesn't
change it for you while you're away from your monitor, and you have to enter the
new password twice to make sure that you don't mistype and lock yourself out of
your account.  If this does happen anyway, you can log in as <emphasis>root</emphasis> and
change the password: <emphasis>root</emphasis> doesn't have to enter the old password, and it
can change anybody's password.  For example:
</para>
<programlisting>
# <command>passwd</command>
Changing local password for yana.
New password:				<emphasis>doesn't echo</emphasis>
Retype new password:			<emphasis>doesn't echo</emphasis>
passwd: rebuilding the database...
passwd: done
</programlisting>

<para>In this case, you specify the name of the user for whom you change the password.
</para>

<para><indexterm><primary>root</primary></indexterm>
<indexterm><primary>su</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>su</secondary></indexterm>
If you are changing the <emphasis>root</emphasis> password, be careful: it's easy enough to
lock yourself out of the system if you mess things up, which could happen if,
for example, you mistyped the password twice in the same way (don't laugh, it
happens).  If you're running X, open another window and use <emphasis>su</emphasis> to become
<emphasis>root</emphasis>.  If you're running in character mode, select another virtual
terminal and log in as <emphasis>root</emphasis> there.  Only when you're sure you can still
access <emphasis>root</emphasis> should you log out.
</para>

<para>If you <emphasis>do</emphasis> manage to lose the <emphasis>root</emphasis> password, all may not be lost.
Reboot the machine to single user mode (see page <xref linkend="CFBSD-single-user"/>), and enter:
</para>
<programlisting>
# <command>mount -u /</emphasis>				<emphasis>mount root file system read/write</command>
# <command>mount /usr /</emphasis>				<emphasis>mount /usr file system (if separate)</command>
# <command>passwd root</emphasis>				<emphasis>change the password for <emphasis>root<emphasis>
Enter new password:
Enter password again:
# </emphasis></emphasis></emphasis></command><command>^D</command>						<emphasis>enter ctrl-D to continue with startup
</programlisting>

<para>If you have a separate <emphasis>/usr</emphasis> file system (the normal case), you need to
mount it as well, since the <emphasis>passwd</emphasis> program is in the directory
<emphasis>/usr/bin</emphasis>.  Note that you should explicitly state the name <emphasis>root</emphasis>: in
single user mode, the system doesn't have the concept of user IDs.
</para>
</sect2>
<sect2>
<title>The super user</title>

<para><indexterm><primary>super</primary><secondary>user</secondary></indexterm>
<anchor id="CFBSD-root"/>
<indexterm><primary>su</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>su</secondary></indexterm>
FreeBSD has a number of privileged users for various administration functions.
Some are just present to be the owners of particular files, while others, such
as <emphasis>daemon</emphasis> and <emphasis>uucp</emphasis>, exist to run particular programs.  One user
stands above all others, however: <emphasis>root</emphasis> may do just about anything.  The
kernel gives <emphasis>root</emphasis> special privileges, and you need to become
<emphasis>root</emphasis> in order to perform a number of functions, including adding other
users.  Make sure <emphasis>root</emphasis> has a password if there is any chance that other
people can access your system (this is a must if you have any kind of dialup
access).  Apart from that, <emphasis>root</emphasis> is a user like any other, but to quote
the man page <emphasis>su(1)</emphasis>,
<quote>
<emphasis>By default (unless the prompt is reset by a startup file) the super-user
prompt is set to <emphasis>#</emphasis> to remind one of its awesome power.
</quote>
</emphasis></para>
<sect3>
<title>Becoming super user</title>

<para><indexterm><primary>becoming</primary><secondary>super user</secondary></indexterm>
<indexterm><primary>super</primary><secondary>user</secondary></indexterm>
Frequently when you're logged in normally, you want to do something which
requires you to be <emphasis>root</emphasis>.  You can log out and log in again as
<emphasis>root</emphasis>, of course, but there's an easier way:
</para>
<programlisting>
$ </emphasis><command>su</command>							<emphasis>become super user
Password:						<emphasis>as usual, it doesn't echo</emphasis>
#							<emphasis>root prompt</emphasis>
</programlisting>

<para><indexterm><primary>/etc/group</primary></indexterm>
In order to be able to use <emphasis>su</emphasis>, you must be a member of the group
<emphasis>wheel</emphasis>.  Normally you do this when you add the user, but otherwise just
put the name of the user at the end of the line in <emphasis>/etc/group</emphasis>:
</para>
<programlisting>
</emphasis>wheel:*:0:root<command>,grog</command>				<emphasis>add the text in bold face
</programlisting>

<para></para>
<note>

<para>BSD treats <emphasis>su</emphasis> somewhat differently from System V.  First, you need to be
a member of the group <emphasis>wheel</emphasis>, and secondly BSD gives you more of the
super-user environment than System V.  See the man page
for further information.
</para>
</note>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Login classes</title>

<para><indexterm><primary>login</primary><secondary>classes</secondary></indexterm>
<anchor id="CFBSD-login-class"/>
<indexterm><primary>/etc/login.conf</primary></indexterm>
In UNIX tradition, <emphasis>root</emphasis> has been the owner of the universe.  In a large
installation, this is rather primitive, and the 4.3BSD Net/2 relase introduced a
new concept, <emphasis>login classes</emphasis>, which determine session accounting, resource
limits and user environment settings.  Various programs in the system use the
database described in <emphasis>/etc/login.conf</emphasis> to set up a user's login
environment and to enforce policy, accounting and administrative restrictions.
The login class database also provides the means by which users are able to be
authenticated to the system and the types of authentication available.
</para>

<para>When creating a user, you may optionally enter a class name, which should match
an entry in <emphasis>/etc/login.conf</emphasis>&mdash;see page <xref linkend="CFBSD-user-class"/> for more details.
If you don't, the system uses the entry <emphasis>default</emphasis> for a non-root user.
For the root user, the system uses the entry <emphasis>root</emphasis> if it is present, and
<emphasis>default</emphasis> otherwise.
</para>

<para>The structure of the login configuration database is relatively extensive.  It
describes a number of parameters, many of which can have two values: a
<emphasis>current</emphasis> value and a <emphasis>maximum</emphasis> value.  On login, the system sets
the values to the <emphasis>-cur</emphasis> (current) value, but the user may, at his option,
increase the value to the <emphasis>-max</emphasis> (maximum) value.  We'll look at the
<emphasis>default</emphasis> entry for an example.
</para>
<programlisting>
# Example defaults
# These settings are used by login(1) by default for classless users
# Note that entries like "cputime" set both "cputime-cur" and "cputime-max"

default:\e
	:cputime=infinity:\e
	:datasize-cur=64M:\e
	:stacksize-cur=64M:\e
	:memorylocked-cur=10M:\e
	:memoryuse-cur=100M:\e
	:filesize=infinity:\e
	:coredumpsize=infinity:\e
	:maxproc-cur=64:\e
	:openfiles-cur=64:\e
	:priority=0:\e
	:requirehome@:\e
	:umask=022:\e
	:tc=auth-defaults:
</programlisting>

<para><indexterm><primary>backslash
</primary></indexterm>
As in the password file, the fields are delimited by colons (<emphasis>:</emphasis>).  In
this example, though, lines are <emphasis>continued</emphasis> by placing a backslash
(<emphasis>\e</emphasis>) at the end of each line except the last.  This usage is common in
UNIX.  Unlike Microsoft usage, a backslash is never used to represent a
directory.
</para>

<para>This entry defines the following parameters:
</para>
<itemizedlist>
<listitem>

<para>Processes may use as much CPU time as they want.  If you change this, you can
stop processes which use more than a specific amount of CPU time.
</para>
</listitem>
<listitem>

<para>The current maximum sizes of the user data segment and the stack are set to 64
MB.  The entry doesn't define maximum values for these parameters.
</para>
</listitem>
<listitem>

<para>The user may lock a maximum of 10 MB of memory per process.
</para>
</listitem>
<listitem>

<para>The total memory use per process may not exceed 100 MB.
</para>
</listitem>
<listitem>

<para>There is no limit on the size of data files or core dump files that the user may
create.
</para>
</listitem>
<listitem>

<para>The user may have up to 64 processes.
</para>
</listitem>
<listitem>

<para>Each process may have up to 64 open files.  For some programs, this could be a
limitation.
</para>
</listitem>
<listitem>

<para>The user <emphasis>need not</emphasis> have a home directory in order to log in.  The
<emphasis>@</emphasis> symbol specifies that the preceding symbol (<emphasis>requirehome</emphasis>)
should be undefined.  As a result, the system does not require the home
directory.
</para>
</listitem>
<listitem>

<para><indexterm><primary>umask</primary></indexterm>
By default, the <emphasis>umask</emphasis> is set to <emphasis>022</emphasis>.  See page <xref linkend="CFBSD-umask"/> for
more details of <emphasis>umask</emphasis>.
</para>
</listitem>
<listitem>

<para>The system uses the default authentication scheme for this user.
</para>
</listitem>
</itemizedlist>

<para>See the man page <emphasis>login.conf(5)</emphasis> for further details.
</para>
</sect2>
<sect2>
<title>Referring to other classes</title>

<para>If you want to create a new class, you don't have to start from scratch.  You
can derive the defaults from a different class.  For example, if you have one
user on the system who uses a lot of memory, you might create a class like this:
</para>
<programlisting>
glutton:\e
	:tc=default:\e
	:memoryuse-cur=infinity:
</programlisting>

<para>The property <emphasis>tc</emphasis> refers to the <emphasis>default</emphasis> class.  A good example of
this is the <emphasis>xuser</emphasis> class, designed for the needs of X11 users:
</para>
<programlisting>
xuser:\e
	:manpath=/usr/share/man /usr/X11R6/man /usr/local/man:\e
	:cputime=4h:\e
	:datasize=12M:\e
	:stacksize=4M:\e
	:filesize=8M:\e
	:memoryuse=16M:\e
	:openfiles=32:\e
	:maxproc=48:\e
	:tc=standard:
</programlisting>

<para>In this example, you'll notice also that the class definition defines a default
for the environment variable <emphasis>MANPATH</emphasis>.
</para>
</sect2>
<sect2>
<title>Using login classes</title>

<para>Login classes are a relatively recent addition to FreeBSD.  There are a couple
of things to note about their use:
</para>
<itemizedlist>
<listitem>

<para>At the time of writing, not all parameters are implemented.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/login.conf</primary></indexterm>
The data is stored in the file database format for faster access.  After
modifying the file <emphasis>/etc/login.conf</emphasis>, be sure to run the following command
to update the database:
</para>
<programlisting>
# <command>cap_mkdb /etc/login.conf</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Using the shell</title>

<para><indexterm><primary>using</primary><secondary>the shell</secondary></indexterm>
<indexterm><primary>shell</primary><secondary>using</secondary></indexterm>
So now we have a user ID, and we can get beyond the prompt on page
\&amp;<xref linkend="CFBSD-login-prompt"/>.  When you log in, you start your <emphasis>shell</emphasis>.  As we saw on
page <xref linkend="CFBSD-shell"/>, the shell takes your input as commands and ensures that they are
executed.  To log in, you type in your user ID, and when asked, your password:
</para>
<programlisting>
login: <command>grog</command>
Password:					<emphasis>password doesn't show on the screen</emphasis>
Last login: Sun Dec 21 18:56:11 on ttyv0
Copyright (c) 1980, 1983, 1986, 1988, 1989, 1991, 1993, 1994
	The Regents of the University of California.  All rights reserved.

FreeBSD 2.2.5 (FREEBIE) #14: Tue Jan  2 06:56:46 MET 1998

Welcome to FreeBSD!

You have mail.
erase ^H, kill ^U, intr ^C, status ^T
Niklaus Wirth has lamented that, whereas Europeans pronounce his name
correctly (Ni-klows Virt), Americans invariably mangle it into
(Nick-les Worth).  Which is to say that Europeans call him by name, but
Americans call him by value.
=== grog@freebie(/dev/ttyv0) ~ 1 -&gt;
</programlisting>

<para>There's a lot of stuff here, and it's worth looking at it in more detail:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>getty</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>getty</secondary></indexterm>
<indexterm><primary>login</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>login</secondary></indexterm>
The program that asks you to log in is called <emphasis>getty</emphasis>.  It reads in your
user ID and starts a program called <emphasis>login</emphasis> and passes the user ID to it.
</para>
</listitem>
<listitem>

<para><emphasis>login</emphasis> asks for the password and checks your user ID.
</para>
</listitem>
<listitem>

<para>If the user ID and password are correct, <emphasis>login</emphasis> starts your designated
shell.
</para>
</listitem>
<listitem>

<para>While starting up, the shell looks at a number of files.
See the man page for your particular shell for details of what they are for.
<indexterm><primary>Message</primary><secondary>of the day</secondary></indexterm>
<indexterm><primary>/etc/motd</primary></indexterm>
<anchor id="CFBSD-motd"/>
In this case, though, we can see the results: one file contains the time you
last logged in, another one contains the <emphasis>Message of the day</emphasis>
(<emphasis>/etc/motd</emphasis>), and a third one contains your mail.  The shell prints out
the message of the day unaltered&mdash;in this case, it contains information about
the name of the kernel and a welcome message.  The shell also prints information
on last login time and whether you have mail.
</para>
</listitem>
<listitem>

<para>The line ``<emphasis>erase ^H, kill ^U, intr ^C, status ^T</emphasis>'' looks strange.  It's
telling you the current editing control characters.  We'll look at these on page
<xref linkend="CFBSD-control-chars"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>home</primary><secondary>directory</secondary></indexterm>
<indexterm><primary>directory</primary><secondary>home</secondary></indexterm>
It changes the current directory to your <emphasis>home directory</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Wirth</primary><secondary>Niklaus</secondary></indexterm>
<indexterm><primary>fortune</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fortune</secondary></indexterm>
Then it runs the <emphasis>fortune</emphasis> program, which prints out a random quotation
from a database of ``fortune cookies''.  In this case, we get a message about
Niklaus Wirth, the inventor of the Pascal programming language.
</para>
</listitem>
<listitem>

<para>Finally, the last line is a prompt, the information that tells you that the
shell is ready for input.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>sh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sh</secondary></indexterm>
<indexterm><primary>csh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>csh</secondary></indexterm>
It's worth looking at the prompt in more detail, since it illustrates a number
of things about the UNIX environment.  By default, <emphasis>sh</emphasis> and friends prompt
with a <emphasis>$</emphasis>, and <emphasis>csh</emphasis> and friends prompt with a <emphasis>%</emphasis>.  In the
same way that you can change the MS-DOS command prompt away from <emphasis>C:\e&gt; </emphasis>
to, say, show the current directory, you can change it to just about anything
you want with the UNIX shells.  You don't have to like my particular version,
but it's worth understanding what it's trying to say.
</para>

<para><indexterm><primary>xterm</primary><secondary>command</secondary></indexterm>
<anchor id="CFBSD-shell-prompt"/>
The first part, <emphasis>===</emphasis>, is just to make it easier to find in a large list
on an X display.  An <emphasis>xterm</emphasis> window (a terminal emulator which runs under
X11) on a high resolution X display can contain up to 90 lines, and searching
for command prompts can be non-trivial.
</para>

<para>Next, <emphasis>grog@freebie</emphasis> is my user ID and the name of system on which I am
working, in the RFC 822 format used for mail IDs.  Multiple systems and multiple
users can all be present on a single X display.  This way, I can figure out
which user I am and what system I am running on.
</para>

<para><indexterm><primary>/dev/ttyv0</primary></indexterm>
<emphasis>/dev/ttyv0</emphasis> is the name of the current controlling terminal.  This can
sometimes be useful.
</para>

<para><emphasis>~</emphasis> is the name of the home directory.  Most shells, but not all of them,
support this symbolism.
</para>

<para><emphasis>1</emphasis> is the prompt number.  Each time you enter a command, it is associated
with this number, and the prompt number is incremented.  One way to re-execute
the command is to enter <emphasis>!!1</emphasis> (two exclamation marks and the number of the
command).  We'll look at more comfortable ones in the next section.
</para>
<sect2>
<title>Command line editing</title>

<para><indexterm><primary>Command</primary><secondary>line editing</secondary></indexterm>
<anchor id="CFBSD-control-chars"/>
Typing is a pain.  If you're anything like me, you're continually making
mistakes, and you may spend more time correcting typing errors than doing the
typing in the first place.  It's particularly frustrating when you enter
something like:
</para>
<programlisting>
$ <command>groff -rex=7.5 -r$$ -rL -rW -rN2 -mpic tmac.M unixerf.mm<emphasis>
troff: fatal error: can't open `unixerf.mm': No such file or directory
</emphasis></command></programlisting>

<para>This command <emphasis>should</emphasis> create the PostScript version of this chapter, but
unfortunately I messed up the name of the chapter: it should have been
<emphasis>unixref.mm</emphasis>, and I typed <emphasis>unixerf.mm</emphasis>.
</para>
<note>

<para>Yes, I know this looks terrible.  UNIX isn't all like this, but sometimes this
kind of notation has its advantages: it offers a flexibility that you can't get
any other way.  In addition, it's relatively easy to generate this kind of
command line automatically: the command I really use to format this chapter is
<emphasis>make unixref</emphasis>.
</para>
</note>

<para>It would be particularly frustrating if I had to type the whole command in
again.  UNIX offers a number of ways to make life easier.  The most obvious one
is so obvious that you tend to take it for granted: the <keycap>Backspace</keycap> key
erases the last character you entered.  Well, most of the time.  What if you're
running on a machine without a <keycap>Backspace</keycap> key?  You won't have that problem
with a PC, of course, but a lot of workstations have a <keycap>DEL</keycap> key instead of
a <keycap>Backspace</keycap> key.  UNIX lets you specify what key to use to erase the last
character entered.  By default, the erase character really is <keycap>DEL</keycap>, but the
shell startup changes it and prints out a message saying what it has done:
</para>
<programlisting>
 erase ^H, kill ^U, intr ^C, status ^T
</programlisting>

<para>in the example above.  <keycap>^H</keycap> (<keycap>CTRL-H</keycap>) is an alternative representation
for <keycap>Backspace</keycap>.
</para>

<para>The three other functions <emphasis>kill</emphasis>, <emphasis>intr</emphasis>, and <emphasis>status</emphasis> perform
similar editing functions.  <emphasis>kill</emphasis> erases the whole line, and <emphasis>intr</emphasis>
stops a running program.
</para>
<note>

<para><indexterm><primary>signal</primary></indexterm>
More correctly, <emphasis>intr</emphasis> sends a <emphasis>signal</emphasis> called <emphasis>SIGINTR</emphasis> to
the process.  This normally causes a program to stop.
</para>
</note>

<para><indexterm><primary>bash</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>bash</secondary></indexterm>
You'll notice that it is set to <keycap>Ctrl-C</keycap>, so its function is very similar to
that of the MS-DOS <keycap>Break</keycap> key.  <emphasis>status</emphasis> is an oddball function: it
doesn't change the input, it just displays a statistics message.  <emphasis>bash</emphasis>
doesn't in fact use it: it has a better use for <keycap>Ctrl-T</keycap>.
</para>

<para>In fact, these control characters are just a few of a large number of control
characters that you can set.  Table <xref linkend="CFBSD-terminal-control-chars"/> gives an
overview.
<table frame='all'><title>Terminal control characters</title>
box, center,tab(%) ;
 lfCWp9 | lfCWp9 | lf(R)w59  .
\s10Name%Default%Function
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> CR%\er% Go to beginning of line.  Normally, this also terminates input (in other words, it returns the complete line to the program, which then acts on the input).
</entry></row>
<row><entry> NL%\en% End line.  Normally, this also terminates input.
</entry></row>
<row><entry> INTR%CTRL-C% Generate an \s10<emphasis>SIGINT</emphasis>\s0 signal.  This normally causes the process to terminate.
</entry></row>
<row><entry> QUIT%CTRL-|% Generate a \s10<emphasis>SIGQUIT</emphasis>\s0 signal.  This normally causes the process to terminate.
</entry></row>
<row><entry> ERASE%DEL% Erase last character.  FreeBSD sets this to <keycap>Backspace</keycap> on login, but under some unusual circumstances you will find it still set to <keycap>DEL</keycap>.
</entry></row>
<row><entry> KILL%CTRL-U% Erase current input line.
</entry></row>
<row><entry> EOF%CTRL-D% Return end-of-file indication.  Most programs stop when they receive an EOF.
</entry></row>
<row><entry> EOL%% Alternate end-of-line character.  This is not normally used, and by default it is disabled.
</entry></row>
<row><entry> EOL2%% Alternate end-of-line character.  Also seldom used.
</entry></row>
<row><entry> START%CTRL-Q% Resume output after stop.  See the next entry.
</entry></row>
<row><entry> STOP%CTRL-S% Stop output.  Use this to examine text which is scrolling faster than you can read.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fg</primary><secondary>command</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>command</primary><secondary>fg</secondary></indexterm>
<row><entry> SUSP%CTRL-Z% Suspend process.  This key generates a \s10<emphasis>SIGTSTP</emphasis>\s0 signal when typed. This normally causes a program to be suspended.  To restart, use the <emphasis>fg</emphasis> command.
</entry></row>
<row><entry> DSUSP%CTRL-Y% Delayed suspend. Generate a \s10<emphasis>SIGTSTP</emphasis>\s0 signal when the character is read.  Otherwise, this is the same as <emphasis>SUSP</emphasis>.
</entry></row>
<row><entry> REPRINT%CTRL-R% Redisplay all characters in the input queue (in other words, characters that have been input but not yet read by any process).  The term "print" recalls the days of harcopy terminals.  Many shells disable this function.
</entry></row>
<row><entry> DISCARD%CTRL-O% Discard all terminal output until another \s10<emphasis>DISCARD</emphasis>\s0 character arrives, more input is typed or the program clears the condition.
</entry></row>
<row><entry> WERASE%CTRL-W%Erase the preceding word.
</entry></row>
<row><entry> LNEXT%CTRL-V% Interpret next character literally.  Many shells disable this function.
</entry></row>
<row><entry> STATUS%\\377% Send a <emphasis>SIGINFO</emphasis> signal to the foreground process group.  If <emphasis>NOKERNINFO</emphasis> is not set, the kernel also prints a status message on the terminal.
</entry></row>
</tbody></tgroup></table>
<indexterm><primary>stty</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>stty</secondary></indexterm>
To set these characters, use the <emphasis>stty</emphasis> program.  For example, if you're
used to erasing the complete input line with <keycap>Ctrl-X</keycap>, and specifying an
end-of-file condition with <keycap>Ctrl-Z</keycap>, you could enter:
</para>
<programlisting>
$ <command>stty susp \e377 kill ^X eof ^Z</command>
</programlisting>

<para>You need to set <emphasis>SUSP</emphasis> to something else first, because by default it is
<emphasis>Ctrl-Z</emphasis>, so the system wouldn't know which function to perform if you
press <emphasis>^Z</emphasis>
</para>
<note>

<para>The combination <emphasis>\e377</emphasis> is the character octal 377 (this notation comes
from the C language, and its origin is lost in the mists of time, back in the
days when UNIX ran on PDP-11s).  This character is the ``null'' character which
turns off the corresponding function.  System V uses the character <emphasis>\e0</emphasis>
for the same purpose.
</para>
</note>

<para>In this particular case, <emphasis>^X</emphasis> really does mean the letter <emphasis>^</emphasis>
followed by the letter <emphasis>X</emphasis>, and not <keycap>CTRL-X</keycap>, the single character
created by holding down the <keycap>Control</keycap> character and pressing <keycap>X</keycap> at the
same time.
</para>
</sect2>
<sect2>
<title>Command history and other editing functions</title>

<para><indexterm><primary>Command</primary><secondary>history</secondary></indexterm>
<anchor id="CFBSD-command-history"/>
The editing characters we looked at above are provided by the terminal driver,
which is part of the kernel, so they are available to all processes.  They all
have the limitation that they only work on the line you're currently typing.
Once you've pressed <keycap>Enter</keycap>, there's nothing they can do any more.
</para>

<para>Nowadays, most shells supply a <emphasis>command history</emphasis> function and additional
functionality for editing it.  We'll take a brief look at these features
here&mdash;for more details, see the man pages for your shell.
<!-- XXX -->
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
<table frame='all'><title>Command line editing&mdash;<emphasis>Emacs</emphasis> mode</title>
box, center,tab(#) ;
lf(B)w11 | lw67	 .
Key#Function
=

<tgroup cols='26' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>  Ctrl-A </entry><entry> Move to the beginning of the line   LeftArrow </entry><entry> Move to previous character on line   Ctrl-B </entry><entry> Move to previous character on line (alternative)   Ctrl-D </entry><entry> Delete the character under the cursor.  Be careful with this character: it's also the End-of-file character, so if you enter it on an empty line, it stops your shell and logs you out.   Ctrl-E </entry><entry> Move to the end of the line   RightArrow </entry><entry> Move to next character on line   Ctrl-F </entry><entry> Move to next character on line (alternative)   Ctrl-K </entry><entry> Erase the rest of the line   Ctrl-L </entry><entry> Erase screen contents   DownArrow </entry><entry> Move to next input line   Ctrl-N </entry><entry> Move to next input line (alternative)   UpArrow </entry><entry> Move to previous input line   Ctrl-P </entry><entry> Move to previous input line (alternative)   Ctrl-R </entry><entry> Incremental search backward for text   Ctrl-S </entry><entry> Incremental search for text forward   Ctrl-T </entry><entry> Transpose the character under the cursor with the character before the cursor   Ctrl-U </entry><entry> Erase the current line   Ctrl-Y </entry><entry> Insert previously erased with <keycap>Ctrl-K</keycap> or <keycap>Alt-D</keycap>   Ctrl-_ </entry><entry> Undo the last command   Alt-C </entry><entry> Capitalize the following word   Alt-D </entry><entry> Delete the following word   Alt-F </entry><entry> Move forward one word   Alt-L </entry><entry> Convert the following word to lower case   Alt-T </entry><entry> Transpose the word before the cursor with the one after it   Alt-U </entry><entry> Convert the following word to upper case
</entry></row>
</tbody></tgroup></table>
</para>

<para><indexterm><primary>bash</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>bash</secondary></indexterm>
<indexterm><primary>ksh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ksh</secondary></indexterm>
<indexterm><primary>zsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>zsh</secondary></indexterm>
Shell command line editing has been through a number of evolutionary phases.
The original Bourne shell supplied no command line editing at all, though the
version supplied with FreeBSD gives you many of the editing features of more
modern shells.  Still, it's unlikely that you'll want to use the Bourne shell as
your shell: <emphasis>bash</emphasis>, <emphasis>ksh</emphasis>, and <emphasis>zsh</emphasis> are all compatible with the
Bourne shell, but they also supply better command line editing.
</para>

<para><indexterm><primary>csh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>csh</secondary></indexterm>
<indexterm><primary>vi</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vi</secondary></indexterm>
The next phase of command line editing was introduced with the C shell,
<emphasis>csh</emphasis>.  By modern standards, it's also rather pitiful.  It's described in
the <emphasis>csh</emphasis> man page if you really want to know.  About the only part that
is still useful is the ability to repeat a previous command with the <emphasis>!!</emphasis>
construct.
<anchor id="CFBSD-set-cle"/>
Modern shells supply command line editing which resembles the editors <emphasis>vi</emphasis>
or <emphasis>Emacs</emphasis>.  In <emphasis>bash</emphasis>, <emphasis>sh</emphasis>, <emphasis>ksh</emphasis>, and <emphasis>zsh</emphasis> you can
make the choice by entering
</para>
<programlisting>
$ <command>set -o emacs</emphasis>				<emphasis>for Emacs-style editing</command>
$ <command>set -o vi</emphasis>				<emphasis>for vi-style editing</command>
</programlisting>

<para><indexterm><primary>tcsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcsh</secondary></indexterm>
In <emphasis>tcsh</emphasis>, the corresponding commands are:
</para>
<programlisting>
% <command>bind emacs</command>
% <command>bind vi</command>
</programlisting>

<para>Normally you put one of these commands in your startup file.
<table frame='all'><title>Command line editing&mdash;<emphasis>vi</emphasis> mode</title>
box,center, tab(#) ;
| lf(B)w11 | lw58 | .
Key#Function
=

<tgroup cols='15' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>  ^ </entry><entry> Move to the beginning of the line   h </entry><entry> Move to previous character on line   x </entry><entry> Delete the character under the cursor   $ </entry><entry> Move to the end of the line   l </entry><entry> Move to next character on line   D </entry><entry> Erase the rest of the line   Ctrl-L </entry><entry> Erase screen contents   j </entry><entry> Move to next input line   k </entry><entry> Move to previous input line   K </entry><entry> Search for text backward   J </entry><entry> Search for text forward   u </entry><entry> Undo the last command   w </entry><entry> Move forward one word  i</entry><entry> Change to insert mode
</entry></row>
</tbody></tgroup></table>
<indexterm><primary>tcsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcsh</secondary></indexterm>
<indexterm><primary>vi</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vi</secondary></indexterm>
In <emphasis>Emacs</emphasis> mode, you enter the commands simply by typing them in.  In
<emphasis>vi</emphasis> mode, you have to press <keycap>ESC</keycap> first.  Table <xref linkend="CFBSD-bash-cli-edit"/>
shows an overview of the more typical Emacs-style commands in <emphasis>bash</emphasis>, and
Table <xref linkend="CFBSD-tcsh-cli-edit"/> shows the commands for <emphasis>tcsh</emphasis> in <emphasis>vi</emphasis> mode.
Many other shells supply similar functionality.
</para>
<sect3>
<title>File name completion</title>

<para><indexterm><primary>file</primary><secondary>name completion</secondary></indexterm>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
As we have seen, UNIX file names can be much longer than traditional Microsoft
names, and it becomes a problem to type them correctly.  To address this
problem, newer shells provide <emphasis>file name completion</emphasis>.  In <emphasis>Emacs</emphasis>
mode, you typically type in part of the name, then press the <keycap>Tab</keycap> key.  The
shell checks which file names begin with the characters you typed.  If there is
only one, it puts in the missing characters for you.  If there are none, it
beeps (rings the ``terminal bell'').  If there are more than one, it puts in as
many letters as are common to all the file names, and then beeps.  For example,
if I have a directory <emphasis>documentation</emphasis> in my home directory, I might enter:
</para>
<programlisting>
=== grog@freebie (/dev/ttyp4) ~ 14 -&gt; cd </emphasis><command>doc<emphasis>umentation/
=== grog@freebie (/dev/ttyp4) ~/documentation 15 -&gt; </emphasis></command><command>ls<emphasis>
freebsd.faq  freebsd.fbc  freeware
=== grog@freebie (/dev/ttyp4) ~/documentation 16 -&gt; </command><command>emacs </emphasis></emphasis></emphasis></command>f</command>ree<emphasis>beep<command>b<emphasis>sd.f<emphasis>beep<command>aq
</command></programlisting>

<para>Remember that my input is in \s\n[cwfontsize]<command>fixed bold</command>\s0 font, and the
shell's output is in \s\n[cwfontsize]<emphasis>fixed</emphasis>\s0 font.  On the first line,
I entered the characters <emphasis>cd doc</emphasis> followed by a <keycap>Tab</keycap> character, and
the shell completed with the text <emphasis>umentation/</emphasis>.  On the last line, I
entered the characters <emphasis>emacs f</emphasis> and a <keycap>Tab</keycap>.  In this case, the shell
determined that there was more than one file which started like this, so it
added the letters <emphasis>ree</emphasis> and rang the bell.  I entered the letter <emphasis>b</emphasis>
and pressed <keycap>Tab</keycap> again, and the shell added the letters <emphasis>sd.f</emphasis> and
beeped again.  Finally, I added the letters <emphasis>aq</emphasis> to complete the file name
<emphasis>freebsd.faq</emphasis>.
</para>

<para><indexterm><primary>vi</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vi</secondary></indexterm>
Command line completion in <emphasis>vi</emphasis> mode is similar: instead of pressing
<keycap>Tab</keycap>, you press <keycap>ESC</keycap> twice.
</para>
</sect3>
</sect2>
<sect2>
<title>Environment variables</title>

<para><indexterm><primary>environment</primary><secondary>variables</secondary></indexterm>
<indexterm><primary>variables</primary><secondary>environment</secondary></indexterm>
<anchor id="CFBSD-environment-variables"/>
<indexterm><primary>environment</primary><secondary>variables</secondary></indexterm>
The UNIX programming model includes a concept called <emphasis>environment
variables</emphasis>.  This rather unusual sounding name is simply a handy method of
passing relatively long-lived information of a general nature from one program
to another.  It's easier to demonstrate the use than to describe.  Table
<xref linkend="CFBSD-environment-variable-table"/> takes a look at some typical environment
variables.  To set environment variables from Bourne-style shells, enter
</para>
<programlisting>
$ <command>TERM=xterm export TERM</command>
</programlisting>

<para>This sets the value of the <emphasis>TERM</emphasis> variable to <emphasis>xterm</emphasis>.  If you
want, you can also set it at the beginning of a command line:
</para>
<programlisting>
$ <command>TERM=xterm-color mutt</command>
</programlisting>

<para><indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
This starts the <emphasis>mutt</emphasis> mail reader (see page <xref linkend="CFBSD-mutt"/>) with
<emphasis>xterm</emphasis>'s colour features enabled.
</para>

<para>For <emphasis>csh</emphasis> and <emphasis>tcsh</emphasis>, set environment variables with:
</para>
<programlisting>
% <command>setenv TERM xterm</command>
</programlisting>

<para>To start a process with these variables, enter:
</para>
<programlisting>
% <command>env xterm-color mutt</command>
</programlisting>

<para><table frame='all'><title>Common environment variables</title>
box,center,tab(#) ;
| lfCWp9 | lw68 | .
\s10Name#Purpose
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>df</primary></indexterm>
<row><entry> BLOCKSIZE</entry><entry> The size of blocks which programs like <emphasis>df</emphasis> count.  The default is 512 bytes, but it's often more convenient to use 1024.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>termcap</primary></indexterm>
<row><entry> COLUMNS</entry><entry> The number of columns on the current display.  This variable should not be used, since the number of columns is defined in the <emphasis>termcap</emphasis> description for terminals with a fixed display size, and the software should be able to ask the others, such as <emphasis>xterm</emphasis>, for their size.  Unfortunately, other systems frequently have difficulties in this area, and <emphasis>COLUMNS</emphasis> can help.
</entry></row>
<row><entry> DISPLAY</entry><entry> When running X, the name of the X server.  For a local system, this is typically <emphasis>unix:0</emphasis>.  For remote systems, it's in the form
</entry></row>
<row><entry> <emphasis>system-name</emphasis>:<emphasis>server-number</emphasis>.<emphasis>screen-number</emphasis>.  For the system <emphasis>bumble.example.org</emphasis>, you would probably write <emphasis>bumble.example.org:0</emphasis>.
</entry></row>
<row><entry> EDITOR</entry><entry> The name of your favourite editor.  Various programs that start editors look at this variable to know which editor to start.
</entry></row>
<row><entry> HOME</entry><entry> The name of your home directory.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>locale</primary></indexterm>
<row><entry> LANG</entry><entry> The <emphasis>locale</emphasis> which you use.  This should be the name of a directory in <emphasis>/usr/share/locale</emphasis>.
</entry></row>
<row><entry> LINES</entry><entry> See <emphasis>COLUMNS</emphasis> above.  This second variable defines the number of lines on the screen.
</entry></row>
<row><entry> MAIL</entry><entry> Some programs use this variable to find your incoming mail file.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/share/man</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/usr/local/man</primary></indexterm>
<row><entry> MANPATH</entry><entry> A list of path names, separated by colons (<emphasis>:</emphasis>), which specifies where the <emphasis>man</emphasis> program should look for man pages.  A typical string might be <emphasis>/usr/share/man:/usr/local/man</emphasis>, and specifies that there are man pages in each of the directories <emphasis>/usr/share/man</emphasis> and <emphasis>/usr/local/man</emphasis>.
</entry></row>
<row><entry> NTAPE</entry><entry> The name of the non-rewinding tape device.  See page <xref linkend="CFBSD-tape-devices"/> for more details.
</entry></row>
<row><entry> PATH</entry><entry> A list of path names, separated by colons (<emphasis>:</emphasis>), which specifies where the shell should look for executable programs if you specify just the program name.
</entry></row>
<row><entry> PS1</entry><entry> In Bourne-style shells, this is the prompt string.  It's usually set to <command>$</command>, but can be changed.  See page <xref linkend="CFBSD-shell-prompt"/> for a discussion of a possible prompt for <emphasis>bash</emphasis>.
</entry></row>
<row><entry> PS2</entry><entry> In Bourne-style shells, this is the prompt string for continuation lines.  It's usually set to <command>&gt;</command>.
</entry></row>
<row><entry> SHELL</entry><entry> The name of the shell.  You can use this for starting a new copy.
</entry></row>
<row><entry> TAPE</entry><entry> The name of the rewinding tape device.  See page <xref linkend="CFBSD-tape-devices"/> for more details.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/share/zoneinfo</primary></indexterm>
<row><entry> TERM</entry><entry> The type of terminal emulation you are using.  This is very important: there is no other way for an application to know what the terminal is, and if you set it to the wrong value, full-screen programs will behave incorrectly.  TZ</entry><entry> Time zone.  This is the name of a file in <emphasis>/usr/share/zoneinfo</emphasis> which describes the local time zone.  See the section on timekeeping on page <xref linkend="CFBSD-timekeeping"/> for more details.
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
<anchor id="CFBSD-PATH"/>
Note particularly the <emphasis>PATH</emphasis> variable.  One of the most popular questions
in the <emphasis>FreeBSD-questions</emphasis> mailing list is ``I have compiled a program,
and I can see it in my directory, but when I try to run it, I get the message
<emphasis>command not found</emphasis>''.  This is usually because the current directory is
not in the <emphasis>PATH</emphasis>.
</para>
<note>

<para>It's good practice <emphasis>not</emphasis> to have your current directory or your home
directory in the <emphasis>PATH</emphasis>: if you do, you can be subject to security
attacks.
</para>
</note>

<para><indexterm><primary>.profile</primary></indexterm>
<anchor id="CFBSD-profile"/>
You should set your <emphasis>PATH</emphasis> variable to point to the most common executable
directories.  Add something like this to your <emphasis>.profile</emphasis> file (for
Bourne-style shells):
</para>
<programlisting>
PATH=/usr/bin:/usr/local/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin
export PATH
</programlisting>

<para><indexterm><primary>.cshrc</primary></indexterm>
Alternatively, for <emphasis>csh</emphasis>-style shells, put this in your <emphasis>.cshrc</emphasis>:
</para>
<programlisting>
set path = (/usr/bin /usr/local/bin /usr/sbin /bin /sbin /usr/X11R6/bin)
</programlisting>

<para>This specifies to look for executable programs in the sequence <emphasis>/usr/bin</emphasis>,
<emphasis>/usr/local/bin</emphasis>, <emphasis>/usr/sbin</emphasis>, <emphasis>/bin</emphasis>, <emphasis>/sbin</emphasis> and
<emphasis>/usr/X11R6/bin</emphasis>.  This variable is of great importance: one of the leading
problems that beginners have is to have an incorrect <emphasis>PATH</emphasis> variable.
</para>

<para></para>
</sect2>
<sect2>
<title>Shell startup files</title>

<para><indexterm><primary>Shell</primary><secondary>startup files</secondary></indexterm>
<anchor id="CFBSD-bashrc"/>
As we saw above, there are a lot of ways to customize your shell.  It would be
inconvenient to have to set them every time, so all shells provide a means to
set them automatically when you log in.  Nearly every shell has its own startup
file.  Table <xref linkend="CFBSD-.rcnames"/> gives an overview.
</para>

<para>The format of these files is like a shell script&mdash;in other words, straight
shell commands.  Figure <xref linkend="CFBSD-.bashrc"/> shows a typical <emphasis>.bashrc</emphasis> file to set
the environment variables we discussed.
</para>

<para><table frame='all'><title>Shell startup files</title>
box,center,tab(#) ;
l | lI .
Shell#startup file
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> bash</entry><entry>.profile, then .bashrc
</entry></row>
<row><entry> csh</entry><entry>.login on login, always .cshrc
</entry></row>
<row><entry> sh</entry><entry>.profile
</entry></row>
<row><entry> tcsh</entry><entry>.login on login, always .tcshc, .cshrc if .tcshrc not found
</entry></row>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>
<programlisting>
umask 022
BLOCKSIZE=1024	# for df
CVSROOT=/src/ncvs
EDITOR=/opt/bin/emacs;export EDITOR
LANG=en_AU.ISO8859-1 export LANG
MANPATH=/usr/share/man:/usr/local/man
MOZILLA_HOME=/usr/local/netscape export MOZILLA_HOME
PAGER=less export PAGER
PATH=/usr/bin:/usr/local/bin:/usr/sbin:/bin:/sbin:/usr/X11R6/bin
PS1="=== \eu@\eh (`tty`) \ew \e# -&gt; "
PS2="\eu@\eh \ew \e! ++ "
SHELL=/bin/bash export SHELL
TAPE=/dev/nrst0 export TAPE	# note non-rewinding as standard
if [ "$TERM" = "" ]; then
  TERM=xterm
fi
if [ "$DISPLAY" = "" ]; then
  DISPLAY=unix:0;export DISPLAY
fi
/usr/games/fortune		# print a fortune cookie
</programlisting>

<para><indexterm><primary>.bashrc</primary></indexterm>
<figure><title>Minimal <emphasis>.bashrc</emphasis> file</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
It would be tedious for every user to put settings in their private
initialization files, so the shells also read a system-wide default file.  For
the Bourne shell family, it is <emphasis>/etc/profile</emphasis>, while the C shell family has
three files: <emphasis>/etc/csh.login</emphasis> to be executed on login, <emphasis>/etc/csh.cshrc</emphasis>
to be executed when a new shell is started after you log in, and
<emphasis>/etc/csh.logout</emphasis> to be executed when you stop a shell.  The start files are
executed before the corresponding individual files.
</para>

<para>In addition, login classes (page <xref linkend="CFBSD-login-class"/>) offer another method of
setting environment variables at a global level.
</para>
</sect2>
<sect2>
<title>Changing your shell</title>

<para><anchor id="CFBSD-chsh"/>
<indexterm><primary>command</primary><secondary>chsh</secondary></indexterm>
<indexterm><primary>chsh</primary><secondary>command</secondary></indexterm>
The FreeBSD installation gives <emphasis>root</emphasis> a C shell, <emphasis>csh</emphasis>.  This is the
traditional Berkeley shell, but it has a number of disadvantages: command line
editing is very primitive, and the script language is significantly different
from that of the Bourne shell, which is the <emphasis>de facto</emphasis> standard for shell
scripts: if you stay with the C shell, you may still need to understand the
Bourne shell.  The latest version of the Bourne shell <emphasis>sh</emphasis> also includes
some command line editing.  See page <xref linkend="CFBSD-set-cle"/> for details of how to enable
it.
</para>

<para>You can get better command line editing with <emphasis>tcsh</emphasis>, in the Ports
Collection.  You can get both better command line editing and Bourne shell
syntax with <emphasis>bash</emphasis>, also in the Ports Collection.
</para>

<para>If you have <emphasis>root</emphasis> access, you can use <emphasis>vipw</emphasis> to change your shell,
but there's a more general way: use <emphasis>chsh</emphasis> (<emphasis>Change Shell</emphasis>).  Simply
run the program.  It starts your favourite editor (as defined by the
<emphasis>EDITOR</emphasis> environment variable).  Here's an example before:
</para>
<programlisting>
<indexterm><primary>Velte</primary><secondary>Jack</secondary></indexterm>
#Changing user database information for velte.
Shell: /bin/csh
Full Name: Jack Velte
Location:
Office Phone:
Home Phone:
</programlisting>

<para>You can change anything after the colons.  For example, you might change this
to:
</para>
<programlisting>
#Changing user database information for velte.
Shell: <command>/usr/local/bin/bash</command>
Full Name: Jack Velte
Location: <command>On the road</command>
Office Phone: <command>+1-408-555-1999</command>
Home Phone:
</programlisting>

<para><emphasis>chsh</emphasis> checks and updates the password files when you save the
modifications and exit the editor.  The next time you log in, you get the new
shell.  <emphasis>chsh</emphasis> tries to ensure you don't make any mistakes&mdash;for example,
it won't let you enter the name of a shell which isn't mentioned in the file
<emphasis>/etc/shells</emphasis>&mdash;but it's a <emphasis>very</emphasis> good idea to check the shell before
logging out.  You can try this with <emphasis>su</emphasis>, which you normally use to become
super user:
</para>
<programlisting>
bumble# <command>su velte</command>
Password:
su-2.00$				<emphasis>note the new prompt</emphasis>
</programlisting>

<para>There are a couple of problems in using <emphasis>tcsh</emphasis> or <emphasis>bash</emphasis> as a root
shell:
</para>
<itemizedlist>
<listitem>

<para>The shell for <emphasis>root</emphasis> <emphasis>must</emphasis> be on the root file system, otherwise
will not work in single user mode.  Unfortunately, most ports of shells put the
shell in the directory <emphasis>/usr/local/bin</emphasis>, which is almost never on the root
file system.
</para>
</listitem>
<listitem>

<para>Most shells are <emphasis>dynamically linked</emphasis>: they rely on library routines in
files such as <emphasis>/usr/lib/libc.a</emphasis>.  These files are not available in single
user mode, so the shells won't work.  You can solve this problem by creating
<emphasis>statically linked</emphasis> versions of the shell, but this requires programming
experience beyond the scope of this book.
</para>
</listitem>
</itemizedlist>

<para>If you can get hold of a statically linked version, perform the following steps
to install it:
</para>
<itemizedlist>
<listitem>

<para>Copy the shell to <emphasis>/bin</emphasis>, for example:
</para>
<programlisting>
# <command>cp /usr/local/bin/bash /bin</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Add the name of the shell to <emphasis>/etc/shells</emphasis>,  in this example the line in
<keycap>bold print</keycap>:
</para>
<programlisting>
# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.
/bin/sh
/bin/csh
<command>/bin/bash</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Processes</title>

<para><indexterm><primary>process</primary><secondary>defined</secondary></indexterm>
<anchor id="CFBSD-processes"/>
<anchor id="CFBSD-ps-command"/>
<indexterm><primary>process</primary><secondary>ID</secondary></indexterm>
<indexterm><primary>PID</primary></indexterm>
As we have seen, UNIX is a multi-user, multi-tasking operating system.  In
particular, you can run a specific program more than once.  We use the term
<emphasis>process</emphasis> to refer to a particular instance of a running program.  Each
process is given a <emphasis>process ID</emphasis>, more frequently referred to as <emphasis>PID</emphasis>, a
number between 0 and 29999 which uniquely identifies it.  There are many things
that you might like to know about the processes which are currently running,
such as:
</para>
<itemizedlist>
<listitem>

<para>How many processes are running?
</para>
</listitem>
<listitem>

<para>Who is running the processes?
</para>
</listitem>
<listitem>

<para>Why is the system so slow?
</para>
</listitem>
<listitem>

<para>Which process is blocking my access to the modem?
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>ps</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ps</secondary></indexterm>
<indexterm><primary>process</primary><secondary>status</secondary></indexterm>
Your primary tool for investigating process behaviour is the <emphasis>ps</emphasis>
(<emphasis>process status</emphasis>) command.  It has a large number of command options, and
it can tell you a whole lot of things which you will only understand when you
have investigated how the kernel works, but it can be very useful for a number
of things.  Here are some typical uses:
</para>
<sect2>
<title>What processes do I have running?</title>

<para>After starting a large number of processes in a number of windows under X, you
probably can't remember what is still running.  Maybe processes that you thought
had stopped are still running.  To display a brief summary of the processes you
have running, use the <emphasis>ps</emphasis> command with no options:
</para>
<programlisting>
$ <command>ps</command>
  PID  TT  STAT      TIME COMMAND
  187  p0  Is+    0:01.02 -bash (bash)
  188  p1  Ss     0:00.62 -bash (bash)
  453  p1  R+     0:00.03 ps
</programlisting>

<para>This display shows the following information:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>PID</emphasis> of the process.
</para>
</listitem>
<listitem>

<para><indexterm><primary>controlling</primary><secondary>terminal</secondary></indexterm>
<indexterm><primary>/dev/ttyp0</primary></indexterm>
<indexterm><primary>teletype</primary></indexterm>
<emphasis>TT</emphasis> is short for <emphasis>teletype</emphasis>, and shows the last few letters of the
name of the <emphasis>controlling terminal</emphasis>, the terminal on which the process is
running.  In this example, the terminals are <emphasis>/dev/ttyp0</emphasis> and
<emphasis>/dev/ttyp1</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>STAT</emphasis> shows the current process status.  It's involved and requires a
certain amount of understanding of how the kernel runs in order to interpret
it&mdash;see the man page for <emphasis>ps</emphasis> for more details.
</para>
</listitem>
<listitem>

<para><emphasis>TIME</emphasis> is the CPU time that the process has used in minutes, seconds and
hundredths of a second.  Note that many other UNIX systems, particularly System
V, only show this field to the nearest second.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ps</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ps</secondary></indexterm>
<emphasis>COMMAND</emphasis> is normally the command you entered, but don't rely on this.  In
the next section, you'll see that <emphasis>sendmail</emphasis> has changed its
<emphasis>COMMAND</emphasis> field to tell you what it is doing.  You'll notice that the
command on the last line is the <emphasis>ps</emphasis> which performs the listing.  Due to
some complicated timing problems in the kernel, this process may or may not
appear in the listing.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>What processes are running?</title>

<para>There are many more processes in the system than the list above shows.  To show
them all, use the <emphasis>a</emphasis> option to <emphasis>ps</emphasis>.  To show dæmons as well
(see the next section for a definition of <emphasis>dæmon</emphasis>), use the <emphasis>x</emphasis>
option.  To show much more detail, use the <emphasis>u</emphasis> or <emphasis>l</emphasis> options.  For
example,
</para>
<programlisting>
$ <command>ps waux</command>
<!--  This doesn't fit on the page in the standard point size.  Reduce. -->
<!--  Should do now. .ps 6000u -->
USER    PID %CPU %MEM  VSZ  RSS  TT  STAT STARTED    TIME COMMAND
grog    510  0.0  0.9  448  272  p1  R+    2:49PM 0:00.02 ps -waux
root      1  0.0  0.6  324  180  ??  Is   10:10AM 0:00.15 /sbin/init --
root      2  0.0  0.1    0   12  ??  DL   10:10AM 0:00.00  (pagedaemon)
root      3  0.0  0.1    0   12  ??  DL   10:10AM 0:00.00  (vmdaemon)
root      4  0.0  0.1    0   12  ??  DL   10:10AM 0:08.61  (update)
root     23  0.0  0.3  196   72  ??  Is   10:10AM 0:00.02 adjkerntz -i
root     49  0.0  0.4  220  116  ??- I     9:11AM 0:00.10 mount -a -t nfs
root     71  0.0  1.1  188  340  ??  Ss    9:11AM 0:00.78 syslogd
daemon   76  0.0  0.9  176  272  ??  Is    9:11AM 0:00.03 portmap
root     81  0.0  0.9  160  280  ??  Is    9:11AM 0:00.84 rwhod
root     85  0.0  0.6  408  176  ??  Is    9:11AM 0:00.03 mountd
root     87  0.0  0.4  232  104  ??  Is    9:11AM 0:00.03 nfsd: master (nfsd)
root     90  0.0  0.2  224   56  ??  I     9:11AM 0:00.02 nfsd: server (nfsd)
root     91  0.0  0.2  224   56  ??  I     9:11AM 0:00.00 nfsd: server (nfsd)
root     92  0.0  0.2  224   56  ??  I     9:11AM 0:00.00 nfsd: server (nfsd)
root     93  0.0  0.2  224   56  ??  I     9:11AM 0:00.00 nfsd: server (nfsd)
root     98  0.0  1.0  192  300  ??  Is    9:11AM 0:00.54 inetd
root    105  0.0  1.1  236  340  ??  Is    9:11AM 0:01.19 cron
root    107  0.0  1.1  192  320  ??  Is    9:11AM 0:00.07 lpd
root    110  0.0  1.3  484  376  ??  Is    9:11AM 0:00.16 sendmail: accepting connecti
root    150  0.0  1.8  156  536  v0  Is+   9:11AM 0:00.06 /usr/libexec/getty Pc ttyv0
root    151  0.0  1.8  156  536  v1  Is+   9:11AM 0:00.06 /usr/libexec/getty Pc ttyv1
root    152  0.0  1.8  156  536  v2  Is+   9:11AM 0:00.06 /usr/libexec/getty Pc ttyv2
root    153  0.0  1.8  156  536  v3  Is+   9:11AM 0:00.05 /usr/libexec/getty Pc ttyv3
root    154  0.0  1.8  156  536  v4  Is+   9:11AM 0:00.07 /usr/libexec/getty Pc ttyv4
root    155  0.0  1.8  156  536  v5  Is+   9:11AM 0:00.06 /usr/libexec/getty Pc ttyv5
root    156  0.0  1.8  156  536  v6  Is+   9:11AM 0:00.05 /usr/libexec/getty Pc ttyv6
root    160  0.0  1.8  176  556  ??  I     9:11AM 0:00.08 /usr/libexec/yagetty 38400
root    163  0.0  0.6  284  168  ??  I     9:12AM 0:01.55 nfs radio.example.org /C
root    173  0.0  1.8  168  540  ??  Is    9:29AM 0:00.11 rshd
root    174  0.0  5.7  540 1728  ??  I     9:29AM 0:03.04 xterm
root    180  0.0  1.8  168  544  ??  Is    9:29AM 0:00.21 rshd
root    181  0.1  6.0  540 1820  ??  S     9:29AM 0:06.12 xterm
grog    187  0.0  1.7  808  520  p0  Is    9:30AM 0:01.10 -bash (bash)
grog    188  0.0  1.9  768  568  p1  Ss    9:30AM 0:00.75 -bash (bash)
root    462  0.0  2.0  752  600  p0  I+    2:35PM 0:00.78 su (bash)
root      0  0.0  0.0    0    0  ??  DLs  -       0:00.00  (swapper)
</programlisting>

<para>We've seen a number of these fields already.  The others are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>real</primary><secondary>user ID</secondary></indexterm>
<emphasis>USER</emphasis> is the <emphasis>real user ID</emphasis> of the process, the user ID of the
person who started it.
</para>
</listitem>
<listitem>

<para><emphasis>%CPU</emphasis> is an approximate count of the proportion of CPU time that the
process has been using in the last few seconds.  This is the column to examine
if things suddenly get slow.
</para>
</listitem>
<listitem>

<para><emphasis>%MEM</emphasis> is an approximate indication of the amount of physical memory that
the process is using.
</para>
</listitem>
<listitem>

<para><emphasis>VSZ</emphasis> (<emphasis>virtual size</emphasis>) is the number of 4096 byte pages of virtual
memory that the process is using.
</para>
</listitem>
<listitem>

<para><emphasis>RSS</emphasis> (<emphasis>resident segment size</emphasis>) is the number of 4096 byte pages of
physical memory currently in use.
</para>
</listitem>
<listitem>

<para><emphasis>STARTED</emphasis> is the time or date when the process was started.
</para>
</listitem>
</itemizedlist>

<para>In addition, a surprising number of processes don't have a controlling
terminal.  They are <emphasis>dæmons</emphasis>, and we'll look at them in the next
section.
</para>
</sect2>
<sect2>
<title><emphasis>top</emphasis> </title>

<para><indexterm><primary>top</primary></indexterm>
Another tool for investigating system performance is <emphasis>top</emphasis>, which shows a
number of performance criteria, including the status of the processes which are
using the most resources.  Start it with the number of processes you want
displayed, for example:
</para>
<programlisting>
$ <command>top 4</command>
last pid: 10887;  load averages:  0.27,  0.43,  0.32                  14:18:05
109 processes: 6 running, 96 sleeping, 7 zombie
CPU states:  3.5% user,  0.0% nice,  5.0% system,  0.0% interrupt, 91.5% idle
Mem: 6456K Active, 53M Inact, 21M Wired, 11M Cache, 8341K Buf, 588K Free
Swap: 314M Total, 97M Used, 218M Free, 31% Inuse

  PID USERNAME PRI NICE  SIZE    RES STATE    TIME   WCPU    CPU COMMAND
15027 grog       2   0 38788K 16000K select  52:34  2.02%  2.02% X
22478 grog       2   0  6232K  3160K select   3:44  0.72%  0.72% emacs
10887 grog      28   0   920K   692K RUN      0:00  0.70%  0.65% top
15058 grog       2   0   484K   456K select   0:09  0.11%  0.11% fvwm2
</programlisting>

<para>See the man page <emphasis>top(1)</emphasis> for more details.
</para>
</sect2>
<sect2>
<title>Dæmons</title>

<para><anchor id="CFBSD-daemon"/>
<indexterm><primary>dæmon
</primary></indexterm>
<indexterm><primary>daemon
</primary></indexterm>
<indexterm><primary>sendmail</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>cron</primary><secondary>dæmon</secondary></indexterm>
A significant part of the work in a FreeBSD system is performed by
<emphasis>dæmon</emphasis>s.  A dæmon is not just the friendly little guy on the cover of
this book&mdash;it's a process which goes around in the background and does routine
work such as sending mail (<emphasis>sendmail</emphasis>), accepting or denying Internet
access (<emphasis>inetd)</emphasis>, or starting jobs at particular times (<emphasis>cron</emphasis>).
</para>
<note>

<para>To quote the <emphasis>Shorter Oxford English Dictionary</emphasis>: <keycap>Demon</keycap> Also
<keycap>dæmon</keycap>. ME [In form, and in sense I, a. L. <emphasis>dæmon</emphasis>
(med. L. <emphasis>demon</emphasis>)...] 1. Gr. Myth. (=
<emphasis>\(*d\(*a\h'.05m'\(*i\(*m\(*w\(*n</emphasis>): A being of a nature intermediate
between that of gods and men; an inferior divinity, spirit (including the souls
of deceased persons).  Often written <emphasis>dæmon</emphasis> for distinction.  1569.
</para>
</note>

<para>You can recognize dæmons in a <emphasis>ps waux</emphasis> listing by the fact that they don't
have a controlling terminal.  Each dæmon has a man page which describes what it
does.
</para>

<para><indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
Normally, dæmons are started when the system is booted and run until the system
is stopped.  If you stop one by accident, you could be in trouble.  For example,
<emphasis>init</emphasis> is responsible for starting other processes.  If you kill it, you
effectively kill the system, so, unlike traditional UNIX systems, FreeBSD does
not allow <emphasis>init</emphasis> to be killed.
</para>
</sect2>
<sect2>
<title><emphasis>cron</emphasis> </title>

<para><indexterm><primary>cron</primary></indexterm>
<anchor id="CFBSD-cron"/>
<indexterm><primary>/etc/daily</primary></indexterm>
<indexterm><primary>/etc/weekly</primary></indexterm>
<indexterm><primary>/etc/monthly</primary></indexterm>
One of the more useful dæmons is <emphasis>cron</emphasis>, named after Father Time.
<emphasis>cron</emphasis> performs functions at specific times.  For example, by default the
system runs the script <emphasis>/etc/daily</emphasis> every day at 2:00 am, the script
<emphasis>/etc/weekly</emphasis> every Saturday at 3:30 am, and the script
<emphasis>/etc/monthly</emphasis> on the first day of every month at 5:30 am.
</para>

<para><indexterm><primary>crontab</primary></indexterm>
To tell <emphasis>cron</emphasis> to perform a function at a particular time, you need a file
called a <emphasis>crontab</emphasis>.  The system keeps the real <emphasis>crontab</emphasis> where you
can't get at it, but you can keep a copy.  It's a good idea to call it
<emphasis>crontab</emphasis> as well.
</para>

<para>Let's look at the format of the default system <emphasis>crontab</emphasis>, located in
<emphasis>/etc/crontab</emphasis>:
</para>
<programlisting>
# /etc/crontab - root's crontab for FreeBSD
#
# $I\&amp;d: crontab,v 1.10 1995/05/27 01:55:21 ache Exp $
# From: I\&amp;d: crontab,v 1.6 1993/05/31 02:03:57 cgd Exp
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin
HOME=/var/log
#
#minute hour	mday	month	wday	who	command
#
*/5	*	*	*	*	root	/usr/libexec/atrun
#
# rotate log files every hour, if necessary
#0	*	*	*	*	root	/usr/bin/newsyslog
#
# do daily/weekly/monthly maintenance
0	2	*	*	*	root	/etc/daily 2&gt;&amp;1 | sendmail root
30	3	*	*	6	root	/etc/weekly 2&gt;&amp;1 | sendmail root
30	5	1	*	*	root	/etc/monthly 2&gt;&amp;1 | sendmail root
#
# time zone change adjustment for wall cmos clock,
# does nothing, if you have UTC cmos clock.
# See adjkerntz(8) for details.
1,31	0-4	*	*	*	root	/sbin/adjkerntz -a
</programlisting>

<para>As usual, lines starting with <emphasis>#</emphasis> are comments.  The others have seven
fields.  The first five fields specify the minute, the hour, the day of the
month, the month, and the day of the week on which an action should be
performed.  The character <command>*</command> means ``every''.  Thus, <emphasis>0 2 * * *</emphasis>
(for <emphasis>/etc/daily</emphasis>) means ``0 minutes, 2 o'clock (on the 24 hour clock),
every day of the month, every month, every weekday''.
</para>

<para><indexterm><primary>/etc/crontab</primary></indexterm>
Field number six is special: it only exists in <emphasis>/etc/crontab</emphasis>, and it
specifies the user as which the operation should be performed.  When you write
your own <emphasis>crontab</emphasis> file, don't use this field.
</para>

<para>The remaining fields define the operation to be performed.  <emphasis>cron</emphasis> doesn't
read your shell initialization files.  In particular, this can mean that it
won't find programs you expect it to find.  It's a good idea to put in explicit
<emphasis>PATH</emphasis> definitions, or specify an absolute pathname for the program, as is
done in this example.  <emphasis>cron</emphasis> mails the output to you, so you should check
<emphasis>root</emphasis>'s mail from time to time.
</para>

<para><indexterm><primary>crontab</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>crontab</secondary></indexterm>
To install or list a <emphasis>crontab</emphasis>, use the <emphasis>crontab</emphasis> program:
</para>
<programlisting>
$ <command>crontab crontab</emphasis>				<emphasis>install a crontab</command>
$ <command>crontab -l</emphasis>					<emphasis>list the contents of an installed crontab</command>
# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (crontab installed on Wed Jan  1 15:15:10 1997)
# (Cron version -- $\&amp;Id: crontab.c,v 1.7 1996/12/17 00:55:12 pst Exp $)
0 0 * * * /home/grog/Scripts/rotate-log
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Stopping processes</title>

<para><indexterm><primary>stopping</primary><secondary>processes</secondary></indexterm>
<indexterm><primary>processes</primary><secondary>stopping</secondary></indexterm>
<anchor id="CFBSD-stopping-processes"/>
Sometimes you may find that you want to stop a currently running process.  There
are a number of ways to do this, but the easiest are:
</para>
<itemizedlist>
<listitem>

<para>If the process is running on a terminal, and it's accepting input, hitting the
<emphasis>EOF</emphasis> key (usually <keycap>CTRL-D</keycap>) will often do it.
</para>
</listitem>
<listitem>

<para>If <emphasis>EOF</emphasis> doesn't do it, try the <emphasis>INTR</emphasis> key (usually <keycap>Ctrl-C</keycap>).
</para>
</listitem>
<listitem>

<para><indexterm><primary>kill</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kill</secondary></indexterm>
If the process is ignoring <emphasis>INTR</emphasis>, or if it is not associated with a
terminal, use the <emphasis>kill</emphasis> command.  For example, to find who is using all
the CPU time, use <emphasis>ps</emphasis> and look at the <emphasis>%CPU</emphasis> field:
</para>
<programlisting>
# <command>ps waux </command>
USER   PID %CPU %MEM   VSZ  RSS  TT  STAT STARTED      TIME COMMAND
root   105  97.3  1.1  236  340  ??  Is    9:11AM 137:14.29 cron
<emphasis>\&amp;(other processes omitted)</emphasis>
</programlisting>

<para>Here, <emphasis>cron</emphasis> is using 97% of the CPU time, and has accumulated over 2
hours of CPU time since this morning.  It's obviously sick, and we should put it
out of its misery.  To stop it, enter:
</para>
<programlisting>
# <command>kill 105</command>
</programlisting>

<para>This command sends a signal called <emphasis>SIGTERM</emphasis> (terminate) to the process.
This signal gives the process time to tidy up before exiting, so you should
always try to use it first.  The 105 is <emphasis>cron</emphasis>'s PID, which we got from
the <emphasis>ps</emphasis> command.
</para>

<para>If the process doesn't go away within a few seconds, it's probably ignoring
<emphasis>SIGTERM</emphasis>.  In this case, you can use the ultimate weapon:
</para>
<programlisting>
# <command>kill -9 105</command>
</programlisting>

<para>The <emphasis>-9</emphasis> is the number of <emphasis>SIGKILL</emphasis>, a signal that cannot be caught
or ignored.  You can find a list of the signals and their numeric values in
<emphasis>/usr/include/sys/signal.h</emphasis>, which is part of the software development
package.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Timekeeping</title>

<para><indexterm><primary>timekeeping</primary></indexterm>
<anchor id="CFBSD-timekeeping"/>
FreeBSD is a networking system, so keeping the correct time is more important
than on a standalone system.  Apart from the obvious problem of keeping the same
time as other local systems, it's also important to keep time with systems in
other time zones.
</para>

<para><indexterm><primary>Time</primary><secondary>Zones</secondary></indexterm>
<indexterm><primary>tzsetup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tzsetup</secondary></indexterm>
<indexterm><primary>epoch</primary></indexterm>
<indexterm><primary>UTC</primary></indexterm>
<indexterm><primary>Universal</primary><secondary>Coordinated Time</secondary></indexterm>
<indexterm><primary>Time</primary><secondary>Zones</secondary></indexterm>
<indexterm><primary>PST</primary></indexterm>
<indexterm><primary>Pacific</primary><secondary>Standard Time</secondary></indexterm>
<indexterm><primary>PDT</primary></indexterm>
<indexterm><primary>Pacific</primary><secondary>Daylight Time</secondary></indexterm>
<indexterm><primary>/etc/localtime</primary></indexterm>
<indexterm><primary>tzsetup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tzsetup</secondary></indexterm>
Internally, FreeBSD keeps the time as the number of seconds since the
<emphasis>epoch</emphasis>, the beginning of recorded history: 00:00:00 UTC, 1 January 1970.
<emphasis>UTC</emphasis> is the international base time zone, and means <emphasis>Universal
Coordinated Time</emphasis>, despite the initials.  It corresponds very closely, but not
exactly, to Greenwich Mean Time (GMT), the local time in England in the winter.
It would be inconvenient to keep all dates in UTC, so the system understands the
concept of <emphasis>Time Zones</emphasis>.  For example, in Walnut Creek, CA, the time zone in
the winter is called <emphasis>PST</emphasis> (<emphasis>Pacific Standard Time</emphasis>), and in the
summer it is <emphasis>PDT</emphasis> (<emphasis>Pacific Daylight Time</emphasis>).  FreeBSD stores
information about the local time zone in a file called <emphasis>/etc/localtime</emphasis>.
Normally, <emphasis>sysinstall</emphasis> installs the correct data in this file, but if you
got it wrong, or if you move time zones, you can do it yourself easily enough by
running the <emphasis>tzsetup</emphasis> program.
</para>
<sect2>
<title>The <emphasis>TZ</emphasis> environment variable</title>

<para><indexterm><primary>/usr/share/zoneinfo</primary></indexterm>
An alternate means of describing the time zone is to set the environment
variable <emphasis>TZ</emphasis>, which we looked at on page <xref linkend="CFBSD-environment-variables"/>.  This
looks like the way that System V does it, but that's not quite accurate.  System
V doesn't have the time zone definition files in <emphasis>/usr/share/zoneinfo</emphasis>, so
the <emphasis>TZ</emphasis> variable tells it information about the time zone.  For example,
the value of <emphasis>TZ</emphasis> for Berlin, Germany is <emphasis>MEZ1MSZ2</emphasis> in System V, but
<emphasis>Germany/Berlin</emphasis> in FreeBSD.
</para>
</sect2>
<sect2>
<title>Keeping the correct time</title>

<para><indexterm><primary>ntp</primary></indexterm>
If you're connected to the Internet on a reasonably regular basis, there are a
number of programs which can help you synchronize your time via the <emphasis>ntp</emphasis>
service.
</para>

<para>A number of systems around the world supply time information via the <emphasis>ntp</emphasis>
service.  The first thing you need to do is to find one near you.  One place to
look is at
<emphasis>http://www.eecis.udel.edu/~mills/ntp/servers.html</emphasis>.
</para>

<para><indexterm><primary>xntpd</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xntpd</secondary></indexterm>
<indexterm><primary>ntpdate</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ntpdate</secondary></indexterm>
Your choice of program depends on the nature of your connection to the Internet.
If you're connected full time, you'll probably prefer <emphasis>xntpd</emphasis>, which keeps
the system synchronized.  Otherwise you can use <emphasis>ntpdate</emphasis>, which you can run
as you feel like it.
</para>
<sect3>
<title>xntpd</title>

<para><emphasis>xntpd</emphasis> performs periodic queries to keep the system synchronized with a
time server.  There are many ways to run it&mdash;see the man page <emphasis>xntpd(8)</emphasis>.
In most cases, you can set up one system on the network to connect to an
external time reference, and the other systems on the same Ethernet can get the
time information from the first system.
</para>

<para>To get the time from an external source and broadcast it to the other systems on
the network, create a file <emphasis>/etc/ntp.conf</emphasis> with a content like this:
</para>
<programlisting>
server	203.21.37.18	# ns.saard.net
driftfile	/etc/ntp.drift
broadcast 223.147.37.255
</programlisting>

<para><indexterm><primary>/etc/ntp.drift</primary></indexterm>
The first line defines the server.  It's important to get one near you: network
delays can significantly impair the accuracy of the results.  <emphasis>xntpd</emphasis> uses
the file <emphasis>/etc/ntp.drift</emphasis> to record information about the (in)accuracy of
the local system's clock.  You only need the final line if you have other
systems on the network which wait for a broadcast message.  It specifies the
broadcast address for the network and also tells <emphasis>xntpd</emphasis> to broadcast on
this address
</para>

<para>After setting up this file, you just need to start <emphasis>xntpd</emphasis>:
</para>
<programlisting>
# <command>xntpd</command>
</programlisting>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
To ensure that <emphasis>xntpd</emphasis> gets started every time you reboot, ensure that you
have the the following lines in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
xntpd_enable="<command>YES</command>"		# Run xntpd Network Time Protocol (or NO).
xntpd_flags=""			# Flags to xntpd (if enabled).
</programlisting>

<para>If <emphasis>/etc/rc.conf</emphasis> doesn't exist, create it.
</para>

<para>The comment on the first line is misleading: the value of <emphasis>xntpd_enable</emphasis>
must be <emphasis>YES</emphasis>.  You don't need any flags.  You put exactly the same text
in the <emphasis>/etc/rc.conf</emphasis> on the other machines, and simply omit the file
<emphasis>/etc/ntp.conf</emphasis>.  This causes <emphasis>xntpd</emphasis> on these machines to monitor
broadcast messages.
</para>
</sect3>
<sect3>
<title>ntpdate</title>

<para><indexterm><primary>ntpdate</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ntpdate</secondary></indexterm>
If you only infrequently connect to the Internet, <emphasis>xntpd</emphasis> may become
discouraged and not keep good time.  In this case, it's better to use
<emphasis>ntpdate</emphasis>.  Simply run it when you want to set the time:
</para>
<programlisting>
# <command>ntpdate <emphasis>server
</emphasis>
</command></programlisting>

<para>You can't use both <emphasis>ntpdate</emphasis> and <emphasis>xntpd</emphasis>: they both use the same
port.
</para>
</sect3>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchstarting"><title>Starting and stopping the system</title>

<para>Before you can run FreeBSD, you need to start it up.  That's normally pretty
straightforward: you turn the machine on, a lot of things scroll off the screen,
and about a minute later you have a <emphasis>login:</emphasis> prompt on the screen.
Nevertheless, there are a number of items of interest on the way.  In
particular, the boot process tells you a lot of information about the system
hardware configuration.  This can be of use when upgrading the system, or if you
have problems.
</para>

<para>It's not so obvious that you need to adhere to a procedure when shutting down
the system.  We'll look at the hows and whys on page <xref linkend="CFBSD-shutdown"/>.
</para>
<sect1>
<title>Starting the system</title>

<para><indexterm><primary>starting</primary><secondary>the system</secondary></indexterm>
<anchor id="CFBSD-bootup"/>
When you power up the system, or when you reboot, a number of actions occur
before the system is up and running:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Power</primary><secondary>On Self Test</secondary></indexterm>
<indexterm><primary>POST</primary></indexterm>
First, the system firmware
<footnote>

<para><indexterm><primary>BIOS</primary></indexterm>
<indexterm><primary>Basic</primary><secondary>Input/Output System</secondary></indexterm>
<indexterm><primary>SRM</primary></indexterm>
The firmware is called <emphasis>BIOS</emphasis> (<emphasis>Basic Input/Output System</emphasis>) on the
i386 architecture, or <emphasis>SRM</emphasis> on the Alpha architecture.  We'll refer to it
as BIOS in the rest of this section.
</para>
</footnote>
performs tests which check that the machine is working correctly and determines
the hardware configuration.  This <emphasis>Power On Self Test</emphasis> or <emphasis>POST</emphasis> has
nothing to do with FreeBSD.
</para>
</listitem>
<listitem>

<para><indexterm><primary>starting</primary><secondary>the system</secondary></indexterm>
<indexterm><primary>bootstrap</primary></indexterm>
Next, the BIOS loads the first of three <emphasis>bootstraps</emphasis> from the first sector
on the hard disk.  This bootstrap may or may not be part of the FreeBSD system.
It's up to this bootstrap to decide which operating system to boot.  Typically
it will load the FreeBSD bootstrap from the second sector on disk.
</para>
</listitem>
<listitem>

<para><indexterm><primary>BTX</primary></indexterm>
The FreeBSD bootstrap first loads the second-level bootstrap, <emphasis>BTX</emphasis>, from
the next 15 sectors on disk and executes it.  This bootstrap prints out the
message:
</para>
<programlisting>
BTX loader 1.00	 BTX version is 1.00
BIOS drive A: is disk0
BIOS drive C: is disk1
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>/kernel</primary></indexterm>
<indexterm><primary>loader</primary><secondary>bootstrap</secondary></indexterm>
The second-level boot locates the third-level bootstrap, called <emphasis>loader</emphasis>,
and loads it into memory.  <emphasis>loader</emphasis>, which is new with FreeBSD 3.1, is an
intelligent bootstrap component which allows preloading of multiple kernel
components.  See the man page <emphasis>loader(8)</emphasis> for more information.
<emphasis>loader</emphasis> locates the kernel, by default the file <emphasis>/kernel</emphasis> on the
root file system, and loads it into memory.  It prints the <emphasis>Boot:</emphasis> prompt
at this point so that you can influence this choice&mdash;see the man page
<emphasis>boot(8)</emphasis> for more details of what you can enter at this prompt.
</para>
</listitem>
<listitem>

<para><indexterm><primary>probing</primary></indexterm>
The kernel switches the machine into 32-bit mode (on Intel) or 64-bit mode (on
Alpha) and disables the system BIOS.  It then performs its own tests to look for
hardware it knows about.  It's quite verbose about this, and prints messages
about both the hardware it finds and the hardware it doesn't find.  This
operation is called <emphasis>probing</emphasis>.  It's normal to have more ``didn't find''
messages than ``found'' messages.  You'll see an example of these messages on
pages <xref linkend="CFBSD-boot-msg-start"/> to <xref linkend="CFBSD-boot-msg-end"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>swapper</primary></indexterm>
After the probe, the kernel starts two processes, numbered 0 and 1.  Process 0
is the <emphasis>swapper</emphasis> and is responsible for emergency clearing of memory when
the standard virtual memory algorithms aren't fast enough.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-init"/>
<indexterm><primary>init</primary></indexterm>
<indexterm><primary>/etc/rc</primary></indexterm>
Process 1 is called <emphasis>init</emphasis>.  As the name suggests, it is responsible for
starting up the system and dæmons.  When coming up in the default multi-user
mode, it spawns a shell to execute the shell script <emphasis>/etc/rc</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/defaults/rc.conf</primary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
<emphasis>/etc/rc</emphasis> first reads in the description files
<emphasis>/etc/defaults/rc.conf</emphasis>, which contains defaults for a number of
configuration variables, and <emphasis>/etc/rc.conf</emphasis>, which contains your
modifications to the defaults.  It then proceeds to perform the steps necessary
to bring up the system, first starting virtual disk drivers, mounting swap space
and checking the file system integrity if necessary.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
When <emphasis>/etc/rc</emphasis> exits, <emphasis>init</emphasis> reads the file <emphasis>/etc/ttys</emphasis> and
starts processes as determined there.  It spends the rest of its life looking
after these processes.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Boot messages</title>

<para><anchor id="CFBSD-boot-msg-start"/>
As the bootstrap loaders load, you will see something like:
</para>
<programlisting>
/							<emphasis>this is a ``twirling baton''</emphasis>
BTX loader 1.00	 BTX version is 1.00
BIOS drive A: is disk0
BIOS drive C: is disk1
</programlisting>

<para>These messages are printed by <emphasis>BTX</emphasis>.
<indexterm><primary>baton</primary><secondary>twirling</secondary></indexterm>
<indexterm><primary>twirling</primary><secondary>baton</secondary></indexterm>
If you're loading from disk, the <emphasis>/</emphasis> character at the end of the previous
line keeps changing through <emphasis>-</emphasis>, <emphasis>\e</emphasis>, and <emphasis>|</emphasis> before going
back to <emphasis>/</emphasis> again, giving the impression that the character is rotating.
This display, called a <emphasis>twirling baton</emphasis>, is your indication that the system
hasn't crashed and burned.
</para>

<para>Next, <emphasis>loader</emphasis> prints its prompt:
</para>
<programlisting>
FreeBSD/i386 bootstrap loader, Revision 0.5  640/64512kB
(jkh@time.cdrom.com, Sun Jul 24 16:25:12 CST 1999)
</programlisting>

<para>If you do nothing, or if you press <keycap>Enter</keycap>, it will load the kernel.  Once
the kernel has been loaded, it will take control of the machine.  Messages from
the kernel are in high-intensity text (brighter than normal).  This is the only
time you will normally see them, but sometimes you'll see them during normal
machine operation.  The boot messages look like:
</para>
<programlisting>
/kernel text=0x14c395 data=0x180d8+0x22ec4 syms=[0x4+0x1e3c0+0x4+0x210f8]
Booting the kernel
Copyright (c) 1982, 1986, 1989, 1991, 1993
	The Regents of the University of California.
	All rights reserved.

FreeBSD 3.0 #0: Wed Jan 28 14:43:28  1998
  jkh@westhill.cdrom.com:/usr/src/sys/compile/GENERIC
</programlisting>

<para>The first line tells you how large the kernel is.  Unless you run into problems,
which are unlikely at this point, this information is of little interest.  If
you <emphasis>do</emphasis> have problems, the most important information is the date of
compilation and the pathname of the kernel on the last two lines of this
example.  Please include this information if you report a problem.
</para>

<para>Next, you see:
</para>
<programlisting>
Please insert MFS root floppy and press enter:
</programlisting>

<para>When you insert the MFS root floppy and press <keycap>Enter</keycap>, you see more twirling
batons, then the UserConfig screen appears.
</para>
</sect2>
<sect2>
<title>UserConfig: Modifying the boot configuration</title>

<para><anchor id="CFBSD-modify-boot-config"/>
<indexterm><primary>UserConfig</primary></indexterm>
<anchor id="CFBSD-"UserConfig""/>
After the kernel has been loaded, the following screen will appear:
</para>
<programlisting>
Kernel configuration Menu

	<command>Skip kernel configuration and continue with installation</command>
	Start kernel configuration in full-screen visual mode
	Start kernel configuration in CLI mode

Here you have the chance to go into kernel configuration mode, making
any changes which may be necessary to properly adjust the kernel to
match your hardware configuration.

If you are installing FreeBSD for the first time, select Visual Mode
(press Down-Arrow then ENTER).

If you need to do more specialized kernel configuration and are an
experienced FreeBSD user, select CLI mode.

If you are <keycap>certain</keycap> that you do not need to configure your kernel
then simply press ENTER or Q now.
</programlisting>

<para>If your hardware configuration matches what the generic kernel expects (see page
<xref linkend="CFBSD-supported-hardware"/>), just press <keycap>ENTER</keycap>.  The kernel will continue with
the <emphasis>device probes</emphasis>, which we discuss on page <xref linkend="CFBSD-device-probe"/>.
</para>

<para><anchor id="CFBSD-UserConfig-details"/>
If you do need to change the configuration, press the <keycap>down arrow</keycap> key to
choose the kernel configuration in full-screen mode, then press <keycap>ENTER</keycap>.
This starts <emphasis>UserConfig</emphasis>, a part of the kernel which can be activated at
boot time to change the system's idea of device configuration.  It presents you
with a full-screen menu:
</para>
<programlisting>
---Active Drivers----------------------------<command>25 Conflicts</command>------Dev---IRQ--Port--
 <command>Storage : (Collapsed)</command>
 Network : (Collapsed)
 Communications : (Collapsed)
 Input : (Collapsed)
 Multimedia :
 Miscellaneous :


---Inactive Drivers--------------------------------------------Dev--------------
 Storage : (Collapsed)
 Network : (Collapsed)
 Communications : (Collapsed)
 Input : (Collapsed)
 Multimedia :
 Miscellaneous :
</programlisting>

<para>Note the word <emphasis>Conflicts</emphasis> at the top of the screen.  This is a warning,
not an error.  We'll see on page <xref linkend="CFBSD-device-probe"/> that the drivers look for
hardware in a number of configurations.  Not all of these configurations can
coexist, but there will not be a problem unless you install hardware that can't
coexist.
</para>

<para>The word <emphasis>(Collapsed)</emphasis> doesn't mean that your hardware has given up the
ghost&mdash;it means that the information about the corresponding hardware, which
is usually a large number of devices, has been omitted.  You can expand it by
placing the cursor on the appropriate line and pressing <keycap>Enter</keycap>.  A bar
cursor stretches across the line <emphasis>Storage (Collapsed)</emphasis>.  You can move it
up and down with the arrow keys.  In our example, we have a NE2000 compatible
Ethernet board, but its I/O registers start at address <emphasis>0x320</emphasis>, it is set
up for IRQ 9, and we want to change the kernel configuration to recognize it.
We move the bar down to the line <emphasis>Network</emphasis> and press <keycap>Enter</keycap>.  The
display changes to:
</para>
<programlisting>
---Active Drivers----------------------------<command>25 Conflicts</command>------Dev---IRQ--Port--
 Storage : (Collapsed)
 Network :
<command>NE1000,NE2000,3C503,WD/SMC80xx Ethernet adapters        conf   ed0   5    0x280</command>
NE1000,NE2000,3C503,WD/SMC80xx Ethernet adapters        <command>conf</command>   ed1   5    0x300
3C509 Ethernet adapter                                  <command>conf</command>   ep0   10   0x300
Fujitsu MD86960A/MB869685A Ethernet adapters            <command>conf</command>   fe0   5    0x240
Intel EtherExpress Ethernet adapter                     <command>conf</command>   ix0   10   0x300
DEC Etherworks 2 and 3 Ethernet adapters                <command>conf</command>   le0   5    0x300
---Inactive Drivers--------------------------------------------Dev--------------
 Storage : (Collapsed)
 Network : (Collapsed)
 Communications : (Collapsed)
 Input : (Collapsed)
 Multimedia :
 Miscellaneous :
</programlisting>

<para>The highlighted <emphasis>conf</emphasis> means that the current configuration could conflict
with another device: the I/O address, IRQ or memory address will also be probed
by another driver.  This is only a problem if you really have two boards with
the same configuration; otherwise you can ignore this warning.  In this case, by
chance our Novell NE2000 board is already highlighted, so all we need to do is
to press <keycap>Enter</keycap> again to edit the configuration.  The configuration is
copied to individual fields at the bottom of the screen, so we now see:
</para>
<programlisting>
---Active Drivers----------------------------<command>25 Conflicts</command>------Dev---IRQ--Port--
 Storage : (Collapsed)
 Network :
<command>NE1000,NE2000,3C503,WD/SMC80xx Ethernet adapters        conf   ed0   5    0x280</command>
NE1000,NE2000,3C503,WD/SMC80xx Ethernet adapters        <command>conf</command>   ed1   5    0x300
3C509 Ethernet adapter                                  <command>conf</command>   ep0   10   0x300
Fujitsu MD86960A/MB869685A Ethernet adapters            <command>conf</command>   fe0   5    0x240
Intel EtherExpress Ethernet adapter                     <command>conf</command>   ix0   10   0x300
DEC Etherworks 2 and 3 Ethernet adapters                <command>conf</command>   le0   5    0x300
---Inactive Drivers--------------------------------------------Dev--------------
 Storage : (Collapsed)
 Network : (Collapsed)
 Communications : (Collapsed)
 Input : (Collapsed)
 Multimedia :
 Miscellaneous :
--------------------------------------------------------------------------------
 Port address : <command>0x280</command>     Memory address : 0xd8000   Conflict allowed
 IRQ number   : 5
 Flags        : 0
--------------------------------------------------------------------------------
</programlisting>

<para>The port address is in reverse video, which means that we can edit it.  We type
in <emphasis>0x320</emphasis> and press <keycap>Tab</keycap> to get to the <emphasis>IRQ field</emphasis>, where we
enter <emphasis>9</emphasis>.  Then we press <keycap>Enter</keycap> to leave the edit mode, and
<emphasis>q</emphasis> to leave the configuration editor.  Booting continues as normal, but
this time the system finds our Ethernet board.
</para>

<para>This is only an example, of course.  It's easier to play around with the editor
than to describe it.  Don't worry about damaging anything on disk, since at this
point it's just you and the computer, and the computer doesn't yet know about
any peripherals.
</para>
<note>

<para>Due to the nature of PC hardware, IRQ 2 and IRQ 9 are the same thing.  Never
specify IRQ 2 to UserConfig: use IRQ 9 instead.  If you use IRQ 2, the driver
will not work correctly.
</para>
</note>

<para></para>
</sect2>
<sect2>
<title>Starting UserConfig from hard disk</title>

<para>When you boot from hard disk, the selection menu does not appear, since this
would be a nuisance: normally you will not want to change your configuration
once it is installed.  If you need to do so, however, make sure that UserConfig
is included in your kernel (see <xref linkend="CFBSD-chbuild"/>, page <xref linkend="CFBSD-config-USERCONFIG"/>).  To
activate UserConfig on boot, wait until you see:
</para>
<programlisting>
BTX loader 1.00	 BTX version is 1.00
BIOS drive A: is disk0
BIOS drive C: is disk1

FreeBSD/i386 bootstrap loader, Revision 0.2  640/64512kB
(grog@bumble.example.org, Sun Jan 31 16:25:12 CST 1999)
/							<emphasis>this is a ``twirling baton''</emphasis>
Hit [Enter] to boot immediately, or any other key for command prompt.
Booting [kernel] in 6 seconds...	<emphasis>this counts down from 10 seconds</emphasis>
</programlisting>

<para>Normally, you just wait until the countdown reaches 0, or press <keycap>Enter</keycap>, and
the bootstrap will continue and load the kernel.  You have a number of options,
however&mdash;see the man page <emphasis>boot(8)</emphasis> for a complete discussion.  To
interrupt the boot process, press the space bar (most keys will do, but the
space bar is easiest to remember).  You will get:
</para>
<programlisting>
Type '?' for a list of commands, 'help' for more detailed help.
disk1s1a:&gt;
</programlisting>

<para>To start UserConfig, enter:
</para>
<programlisting>
disk1s1a:&gt; <emphasis>boot</emphasis> -c
Copyright (c) 1992-1999 The FreeBSD Project.
Copyright (c) 1982, 1986, 1989, 1991, 1993
	The Regents of the University of California. All rights reserved.
FreeBSD 3.1-RELEASE #0: Wed Feb	 17 13:06:56 CST 1999
    grog@daemon.lemis.com:/usr/src/sys/compile/GENERIC
Timecounter "i8254"  frequency 1193182 Hz
Timecounter "TSC"  frequency 132968074 Hz
CPU: Pentium/P54C (132.97-MHz 586-class CPU)
  Origin = "GenuineIntel"  Id = 0x52c  Stepping=12
  Features=0x1bf&lt;FPU,VME,DE,PSE,TSC,MSR,MCE,CX8&gt;
real memory  = 67108864 (65536K bytes)
FreeBSD Kernel Configuration Utility - Version 1.2
 Type "help" for help or "visual" to go to the visual
 configuration interface (requires MGA/VGA display or
 serial terminal capable of displaying ANSI graphics).
config&gt; <keycap>v</emphasis>					<emphasis>go into visual mode</keycap>
</programlisting>

<para>You can type <emphasis>help</emphasis> for help, as the prompt suggests, but just about the
only thing you need is the visual configuration interface.
</para>
</sect2>
<sect2>
<title>Probing the hardware</title>

<para><indexterm><primary>probing</primary></indexterm>
<anchor id="CFBSD-device-probe"/>
When you continue from the UserConfig selection menu, an incredible amount of
information will scroll off the screen.  Once the boot is complete, you can go
back and examine text that has scrolled off the top of the screen: press
<keycap>ScrollLock</keycap>.  The cursor will disappear, and you can use the <keycap>PageUp</keycap>
and <keycap>PageDown</keycap> keys to scroll up to 3 previous screenfuls.  To exit this
mode, press <keycap>ScrollLock</keycap> again.  We'll go through this output in some detail
over the next few pages.
</para>

<para>Once it has finished loading, the kernel calls all configured drivers to examine
the hardware configuration of the machine on which it is running.  This is
called <emphasis>probing</emphasis> for the devices.  If you have time to follow it, it's a
good idea to confirm that it's correct.  It's not that important unless
something goes wrong, and then it <emphasis>won't</emphasis> scroll off the screen.  We see
something like:
</para>
<programlisting>
Copyright (c) 1992-1999 FreeBSD Inc.
Copyright (c) 1982, 1986, 1989, 1991, 1993
	The Regents of the University of California. All rights reserved.
FreeBSD 3.2-RELEASE #1733: Wed May 12 10:47:53 CST 1999
    grog@presto.example.org:/usr/src/sys/compile/PRESTO
Timecounter "i8254"  frequency 1193182 Hz
Timecounter "TSC"  frequency 132955161 Hz
CPU: Pentium/P54C (132.96-MHz 586-class CPU)
  Origin = "GenuineIntel"  Id = 0x52c  Stepping=12
  Features=0x1bf&lt;FPU,VME,DE,PSE,TSC,MSR,MCE,CX8&gt;
</programlisting>

<para>The lines above identify the CPU: it's an original Pentium (internal code P54C),
and it runs at 133 MHz.
</para>
<programlisting>
real memory  = 67108864 (65536K bytes)
avail memory = 62017536 (60564K bytes)
Preloaded elf kernel "kernel" at 0xf0337000.
</programlisting>

<para>The real memory is the size of RAM.  Some systems reserve 1 kB of RAM in real
mode, but this should not have any effect on the value of real memory.
Available memory is the memory available to users after the kernel has been
loaded and initialized.  The load address of the kernel is not of much interest
unless you have specific problems.
</para>

<para>Sometimes the kernel will report only 16 MB even on larger systems.  This is due
to BIOS incompatibilities, and occurs surprisingly often on big-name machines.
To fix it, build a custom kernel which specifies the memory size
explicitly&mdash;see the description of the <emphasis>MAXMEM</emphasis> parameter on page
<xref linkend="CFBSD-config-MAXMEM"/>.
</para>

<para>Next we look for the other chips on the motherboard:
</para>
<programlisting>
Probing for devices on PCI bus 0:
chip0: &lt;Intel 82437FX PCI cache memory controller&gt; rev 0x01 on pci0.0.0
chip1: &lt;Intel 82371FB PCI to ISA bridge&gt; rev 0x02 on pci0.7.0
ide_pci0: &lt;Intel PIIX Bus-master IDE controller&gt; rev 0x02 on pci0.7.1
</programlisting>

<para>This is an Intel 82437 FX chipset.  We continue to look at the hardware
connected to the motherboard, some of which is in fact implemented in the FX
chipset:
</para>
<programlisting>
ahc0: &lt;Adaptec 2940 Ultra SCSI adapter&gt; rev 0x00 int a irq 14 on pci0.17.0
ahc0: aic7880 Wide Channel A, SCSI Id=7, 16/255 SCBs
</programlisting>

<para>As the first line states, this is a SCSI host adapter using PCI interrupt A, IRQ
14, and its PCI slot number is 17.
</para>
<programlisting>
Probing for devices on the ISA bus:
sc0 on isa								<emphasis>this is the system console</emphasis>
sc0: VGA color &lt;16 virtual consoles, flags=0x0&gt;
ed0 not found at 0x280					<emphasis>ed0 is a possible Ethernet board</emphasis>
ed1 not found at 0x300					<emphasis>and ed1 is another one at a different address</emphasis>
atkbdc0 at 0x60-0x6f on motherboard
atkbd0 irq 1 on isa
sio0 at 0x3f8-0x3ff irq 4 flags 0x0 on isa	<emphasis>the first serial port</emphasis>
sio0: type 16550A						<emphasis>it's a buffered UART</emphasis>
sio1 at 0x2f8-0x2ff irq 3 on isa			<emphasis>the second serial port</emphasis>
sio1: type 16550A
sio2 not found at 0x3e8					<emphasis>no more serial I/O ports</emphasis>
sio3 not found at 0x2e8
</programlisting>

<para><indexterm><primary>COM1:</primary></indexterm>
Recall from page <xref linkend="CFBSD-supported-hardware"/> that UNIX devices start counting from 0,
whereas Microsoft starts counting from 1.  Devices <emphasis>sio0</emphasis> through
<emphasis>sio3</emphasis> are known as <emphasis>COM1:</emphasis> through <emphasis>COM4:</emphasis> in the Microsoft
world.
</para>
<programlisting>
psm0 not found							<emphasis>no PS/2 mouse</emphasis>
mse0 not found at 0x23c					<emphasis>and no Microsoft mouse</emphasis>
fdc0 at 0x3f0-0x3f7 irq 6 drq 2 on isa		<emphasis>Floppy controller</emphasis>
fdc0: FIFO enabled, 8 bytes threshold
fd0: 1.44MB 3.5in						<emphasis>one 3\(12" drive</emphasis>
wdc0 at 0x1f0-0x1f7 irq 14 flags 0xa0ffa0ff on isa	<emphasis>first IDE controller</emphasis>
wdc0: unit 0 (wd0): &lt;ST51270A&gt;, DMA, 32-bit, multi-block-32	<emphasis>Seagate ST51270A</emphasis>
wd0: 1223MB (2504880 sectors), 2485 cyls, 16 heads, 63 S/T, 512 B/S
wdc1 at 0x170-0x177 irq 15 flags 0xa0ffa0ff on isa	<emphasis>second IDE controller</emphasis>
wdc1: unit 0 (wd2): &lt;IBM-DHEA-36480&gt;, DMA, 32-bit, multi-block-16
wd2: 6197MB (12692736 sectors), 12592 cyls, 16 heads, 63 S/T, 512 B/S
wdc1: unit 1 (wd3): &lt;IBM-DHEA-38451&gt;, DMA, 32-bit, multi-block-16
wd3: 8063MB (16514064 sectors), 16383 cyls, 16 heads, 63 S/T, 512 B/S
</programlisting>

<para>This system has only one floppy drive, but three IDE drives on two controllers.
The controllers both run in DMA mode.  The <emphasis>flags</emphasis> value
(<emphasis>0xa0ffa0ff</emphasis>) gives more detail about how the controller runs.  See page
<xref linkend="CFBSD-config-wdc0"/> for more details of the flags.
</para>

<para>In this case, both IDE controllers have disks connected, and the boot proceeds
relatively quickly.  If one of the controllers has no disks connected, things
are different: before the disk driver gives up, it waits for quite a long time,
about 30 seconds.  Don't despair, the system probably hasn't crashed and burned,
the driver just wants to be <emphasis>really</emphasis> sure that there is no disk there.  If
this wait gets on your nerves, you can rebuild the kernel with a shorter wait.
See page <xref linkend="CFBSD-config-IDE_DELAY"/> for further information.
</para>

<para>The disk driver reads the information about the disk drives directly from the
drive.  This is a relatively new feature of IDE drives.  ST506 drives did not
supply this information, and many BIOSes do not read the drive.  Instead, they
store information about the drive configuration in their CMOS memory.  If the
stored values don't match the real parameters, you may have difficulty booting.
Since FreeBSD doesn't use the BIOS after booting, it might work fine with a
system, but if you also have Microsoft or another operating system on the disk,
it may not work.  In this case, compare the values above with those stored in
CMOS memory.
</para>

<para>Next, more SCSI drivers check for their boards:
</para>
<programlisting>
bt_isa_probe: Probe failed for card at 0x330
bt0 not found at 0x330
aha0 at 0x330-0x333 irq 12 drq 6 on isa
aha0: AHA-1542 64 head BIOS FW Rev. 0.5 (ID=41) SCSI Host Adapter, SCSI ID 7, 16 CCBs
aha1 not found at 0x334
</programlisting>

<para>Here we have found another SCSI host adapter, this time an Adaptec 1542.  The
SCSI driver can read the DMA channel number and the IRQ value, but it hasn't
checked the bus speed, since this can cause some controllers to crash.  There is
no particular sequence in booting, and in this example the two host adapters
were found at significantly different times.
</para>

<para>Next, a number of other drivers probe:
</para>
<programlisting>
wt0 not found at 0x300
mcd0 not found at 0x300
matcdc0 not found at 0x230
scd0 not found at 0x230
ppc0 at 0x378 irq 7 flags 0x40 on isa
ppc0: SMC-like chipset (ECP/EPP/PS2/NIBBLE) in COMPATIBLE mode
lpt0: &lt;generic printer&gt; on ppbus 0
lpt0: Interrupt-driven port
ppi0: &lt;generic parallel i/o&gt; on ppbus 0
plip0: &lt;PLIP network interface&gt; on ppbus 0
lpt0: &lt;generic printer&gt; on ppbus 0
lpt0: Interrupt-driven port
</programlisting>

<para>The only thing found here is the parallel port.  Since FreeBSD 3.1, this port is
under control of the <emphasis>ppbus</emphasis> driver, and the printer is a subdevice.
</para>

<para>Continuing,
</para>
<programlisting>
1 3C5x9 board(s) on ISA found at 0x250
ep0 at 0x250-0x25f irq 10 on isa
ep0: aui/utp/bnc[*BNC*] address 00:a0:24:37:0c:bd
</programlisting>

<para>Here the <emphasis>ep</emphasis> driver has found a 3Com 3C509 Ethernet board.  In addition
to I/O address and IRQ, it displays the Ethernet address
(<emphasis>00:a0:24:37:0c:bd</emphasis>) and the information that this board, which has
multiple interfaces, is using the BNC interface.
</para>
<programlisting>
vga0 at 0x3b0-0x3df maddr 0xa0000 msize 131072 on isa
npx0 flags 0x1 on motherboard
npx0: INT 16 interface
sb_reset_dsp failed
sb0 not found at 0x220
Intel Pentium detected, installing workaround for F00F bug
</programlisting>

<para>Here the VGA display driver reports the board that it found.  The value
<emphasis>msize</emphasis> is for text mode only.  Modern display boards have several
megabytes of memory, but that will not show.
</para>

<para>The SoundBlaster driver reports a failure (<emphasis>sb_reset_dsp failed</emphasis>) before
deciding that there is no SoundBlaster board present.  This occurs relatively
frequently and is no cause for concern unless you really do have a SoundBlaster
board installed.
</para>

<para>The <emphasis>F00F bug</emphasis> refers to a bug in the original Pentium chipset whereby
programs can hang the CPU by executing an invalid instruction with the code
<emphasis>0xf00f</emphasis>.  The workaround prevents this bug from having any effect, but it
slows down the machine a little.  This bug only affects the original Pentium,
not the Pentium Pro, Pentium II or Pentium III.  If you don't have an original
Pentium, you can improve performance fractionally by using the configuration
option <emphasis>NO_F00F_HACK</emphasis>.  See page <xref linkend="CFBSD-config-NO_F00F_HACK"/> for more details.
</para>
<programlisting>
Waiting 3 seconds for SCSI devices to settle
</programlisting>

<para>At this point, most of the probes are finished.  The SCSI drivers reset the SCSI
busses and wait 3 seconds for the devices to complete their reset.  This kernel
has been modified to wait only 3 seconds: by default the value is 15 seconds.
See the description of the parameter <emphasis>SCSI_DELAY</emphasis> on page
<xref linkend="CFBSD-config-SCSI_DELAY"/> details of how to change this value.
</para>

<para>So far, the kernel has been running entirely in memory.  Now it mounts the root
file system:
</para>
<programlisting>
changing root device to da0s1e
</programlisting>

<para>In previous versions of FreeBSD, this was the last message you would see from
the kernel.  The disks would already have been located, and there would be no
more highlighted messages.  This is also the case if you have an IDE-only
system.  The CAM driver, however, delays device probes until they are needed, so
next you see:
</para>
<programlisting>
da1 at ahc0 bus 0 target 2 lun 0
da1: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da1: 3.300MB/s transfers
da1: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
da2 at ahc0 bus 0 target 3 lun 0
da2: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da2: 3.300MB/s transfers
da2: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
da3 at ahc0 bus 0 target 4 lun 0
da3: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da3: 3.300MB/s transfers
da3: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
da4 at ahc0 bus 0 target 5 lun 0
da4: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da4: 3.300MB/s transfers
da4: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
sa0 at aha0 bus 0 target 3 lun 0
sa0: &lt;EXABYTE EXB-8505SMBANSH2 0793&gt; Removable Sequential Access SCSI-2 device
sa0: 5.000MB/s transfers (5.000MHz, offset 11)
sa1 at aha0 bus 0 target 4 lun 0
sa1: &lt;ARCHIVE Python 28849-XXX 4.CM&gt; Removable Sequential Access SCSI-2 device
sa1: 5.000MB/s transfers (5.000MHz, offset 15)
sa2 at aha0 bus 0 target 5 lun 0
sa2: &lt;TANDBERG TDC 3800 -03:&gt; Removable Sequential Access SCSI-CCS device
sa2: 3.300MB/s transfers
pass4 at aha0 bus 0 target 4 lun 1
pass4: &lt;ARCHIVE Python 28849-XXX 4.CM&gt; Removable Changer SCSI-2 device
pass4: 5.000MB/s transfers (5.000MHz, offset 15)
da5 at aha0 bus 0 target 2 lun 0
da5: &lt;CONNER CFP4207S  4.28GB 2847&gt; Fixed Direct Access SCSI-2 device
da5: 3.300MB/s transfers, Tagged Queueing Enabled
da5: 4096MB (8388608 512 byte sectors: 64H 32S/T 4096C)
cd0 at aha0 bus 0 target 6 lun 0
cd0: &lt;NRC MBR-7 110&gt; Removable CD-ROM SCSI-2 device
cd0: 3.300MB/s transfers
cd0: cd present [322265 x 2048 byte records]
da0 at aha0 bus 0 target 0 lun 0
da0: &lt;IBM DORS-32160 WA0A&gt; Fixed Direct Access SCSI-2 device
da0: 10.000MB/s transfers (10.000MHz, offset 15), Tagged Queueing Enabled
da0: 2063MB (4226725 512 byte sectors: 64H 32S/T 2063C)
</programlisting>

<para>There are a number of things to note here:
</para>
<itemizedlist>
<listitem>

<para>The SCSI subsystem includes a total of six disk drives, three tape drives and a
CD-ROM.
</para>
</listitem>
<listitem>

<para>The first SCSI disk drive gets the ID <emphasis>da1</emphasis>, not <emphasis>da0</emphasis>.  <emphasis>da0</emphasis> is
there, but it comes at the very end.  This indicates that the drive has been
``wired down'' (see page <xref linkend="CFBSD-wiring"/>), because it is the system disk.  This is
the only way to put a system disk on the second SCSI controller in this
configuration.
</para>
</listitem>
<listitem>

<para>The probes also find a device <emphasis>pass4</emphasis> at aha target 4, <emphasis>LUN</emphasis>
(<emphasis>logical unit</emphasis>) 1.  This is the same target as <emphasis>sa1</emphasis>, which is on
LUN 0, and it represents the changer device.
</para>
</listitem>
</itemizedlist>

<para><anchor id="CFBSD-boot-msg-end"/>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
<indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
At this point, the kernel has finished probing, and it transfers control to the
shell script <emphasis>/etc/rc</emphasis>.  From this point on the display is in normal
intensity.  <emphasis>/etc/rc</emphasis> first reads the configuration information in
<emphasis>/etc/defaults/rc.conf</emphasis> and <emphasis>/etc/rc.conf</emphasis> (see page <xref linkend="CFBSD-rc.conf"/>).
After that, it starts <emphasis>ccd</emphasis> and <emphasis>vinum</emphasis> if requested:
</para>
<programlisting>
vinum: loaded
vinum: reading configuration from /dev/da2h
vinum: updating configuration from /dev/da3h
vinum: updating configuration from /dev/da4h
vinum: updating configuration from /dev/da1h
</programlisting>

<para>Next, it checks the consistency of the file systems.  Normally you'll see
messages like this for each file system in <emphasis>/etc/fstab</emphasis>:
</para>
<programlisting>
/dev/rda0s1a: FILESYSTEM CLEAN; SKIPPING CHECKS
/dev/rda0s1a: clean, 6311 free (367 frags, 743 blocks, 0.9% fragmentation)
/dev/rda0s1e: FILESYSTEM CLEAN; SKIPPING CHECKS
/dev/rda0s1e: clean, 1577 files, 31178 used, 7813 free (629 frags, 898 blocks, 1.6% fr
agmentation)
</programlisting>

<para>If your system has crashed, however, either due to a software or hardware
problem, or because it was not shut down correctly, you'll see something like:
</para>
<programlisting>
WARNING: / was not properly dismounted
/dev/rda0s1a: 6311 free (367 frags, 743 blocks, 0.9% fragmentation)
</programlisting>

<para>Next, <emphasis>/etc/rc</emphasis> invokes the first of three network start invocations.
This one initializes the interfaces, sets the routes and starts the firewall if
necessary:
</para>
<programlisting>
Doing initial network setup: hostname.
ep0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
	inet 223.147.37.2 netmask 0xffffff00 broadcast 223.147.37.255
	ether 00:a0:24:37:0c:bd
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384
	inet 127.0.0.1 netmask 0xff000000

add net default: gateway 223.147.37.5
Additional routing options:.
routing daemons:.
</programlisting>

<para>In this example, there were no additional routing options, and no routing
dæmons.  The messages accordingly have nothing between the characters <emphasis>:</emphasis>
and <emphasis>.</emphasis>.  You'll see this relatively frequently.
</para>

<para>Next, <emphasis>/etc/rc</emphasis> mounts the network file systems, cleans up <emphasis>/var/run/</emphasis>
and then starts <emphasis>syslogd</emphasis> unless you have disabled it:
</para>
<programlisting>
Mounting NFS file systems.
Additional daemons: syslogd.
</programlisting>

<para>Then it checks if we have a core dump.  If so, it will try to save it to
<emphasis>/var/crash</emphasis>.
</para>
<programlisting>
checking for core dump...savecore: no core dump
</programlisting>

<para>This may fail if there isn't enough space in <emphasis>/var/crash</emphasis>.  If the dump does
fail, you can clean up and save the dump later, as long as you haven't used
enough swap space to overwrite the dump.
</para>

<para>Next comes the second pass of the network startup, which starts our choice of
<emphasis>named</emphasis>, <emphasis>ntpdate</emphasis>, <emphasis>xntpd</emphasis>, <emphasis>timed</emphasis>, <emphasis>portmap</emphasis>,
<emphasis>ypserv</emphasis>, <emphasis>rpc.ypxfrd</emphasis>, <emphasis>rpc.yppasswdd</emphasis>, <emphasis>ypbind</emphasis>, <emphasis>ypset</emphasis>,
<emphasis>keyserv</emphasis> and <emphasis>rpc.ypupdated</emphasis>:
</para>
<programlisting>
Doing additional network setup: named xntpd portmap.
starting.  named 8.1.2 Sun May	9 13:04:13 CST 1999  grog@freebie.example.org:/usr/ob
j/usr.sbin/named
master zone "example.org" (IN) loaded (serial 1997010902)
master zone "37.147.223.in-addr.arpa" (IN) loaded (serial 1996110801)
listening on [192.109.197.149].53 (ep0)
listening on [127.0.0.1].53 (lo0)
Forwarding source address is [0.0.0.0].1063
Ready to answer queries.
</programlisting>

<para>With the exception of the first line, all the messages come from <emphasis>named</emphasis>.
They may come in the middle of the first line, rather than waiting for the end
of the line.
</para>

<para>Next, <emphasis>/etc/rc</emphasis> enables quotas if asked, and then runs the third network
pass, which starts our choice of <emphasis>mountd</emphasis>, <emphasis>nfsd</emphasis>, <emphasis>rpc.lockd</emphasis>,
<emphasis>rpc.statd</emphasis>, <emphasis>nfsiod</emphasis>, <emphasis>amd</emphasis>, <emphasis>rwhod</emphasis> and <emphasis>kerberos</emphasis>:
</para>
<programlisting>
Starting final network daemons: mountd nfsd rpc.statd nfsiod rwhod.
</programlisting>

<para>Now we're almost done.  <emphasis>/etc/rc</emphasis> rebuilds a couple of internal databases
(for use by the <emphasis>ps</emphasis> command and some others), then it sets the default
paths for <emphasis>ldconfig</emphasis>:
</para>
<programlisting>
setting ELF ldconfig path: /usr/lib /usr/lib/compat /usr/X11R6/lib /usr/local/lib
setting a.out ldconfig path: /usr/lib/aout /usr/lib/compat/aout /usr/X11R6/lib/aout /
usr/local/lib/aout
</programlisting>

<para>Next, it starts your choice of <emphasis>inetd</emphasis>, <emphasis>cron</emphasis>, <emphasis>printer</emphasis>,
<emphasis>sendmail</emphasis> and <emphasis>usbd</emphasis>:
</para>
<programlisting>
starting standard daemons: inetd cron sendmail.
</programlisting>

<para>The last thing that <emphasis>/etc/rc</emphasis> does is to check for other startup files.
These could be in the files specified in the variable <emphasis>local_startup</emphasis>, or
in the file <emphasis>/etc/rc.local</emphasis>.  In our case, there are none, so all we see is:
</para>
<programlisting>
Local package initialization:.
</programlisting>

<para>Finally, we're done.  <emphasis>/etc/rc</emphasis> stops, and <emphasis>init</emphasis> proecesses
<emphasis>/etc/ttys</emphasis>, which starts <emphasis>getty</emphasis> processes on specified terminals.
On the console, we see:
</para>
<programlisting>
Wed May 12 13:52:00 CST 1999

FreeBSD (freebie.example.org) (ttyv0)

login:
</programlisting>

<para>At this point, we're at the beginning of <xref linkend="CFBSD-chunixref"/> (page <xref linkend="CFBSD-login-prompt"/>).
</para>
</sect2>
<sect2>
<title>Single user mode</title>

<para><anchor id="CFBSD-single-user"/>
<indexterm><primary>single</primary><secondary>user mode</secondary></indexterm>
Sometimes it's inconvenient that multiple users can access the system.  For
example, if you're repartitioning a disk, you don't want other people walking
all over the disk while you're doing so.  Even if you're the only user on the
system, dæmons may be doing things in the background.  In order to avoid this
problem, you can stop the boot process before most of the dæmons have been
started and enter <emphasis>single user mode</emphasis>.  To do this, specify the <emphasis>-s</emphasis>
flag at boot time:
</para>
<programlisting>
Boot: <command>-s</command>
</programlisting>

<para>As soon as the device probes have been completed, the system startup will be
interrupted, and you will be prompted for a shell.  Always choose <emphasis>sh</emphasis>:
some other shells, notably <emphasis>bash</emphasis>, get confused in single user mode. Only
the root file system will be accessible, and it will be mounted read-only.  The
reason for this is that the file system may be damaged and require repair before
you can write to it.  If you do need to write to the root file system, you
should first check the consistency of the file system with <emphasis>fsck</emphasis>.  For
example,
</para>
<programlisting>
<command>npx0 on motherboard
npx0: INT 16 interface				<emphasis>end of the probes (high intensity display)<emphasis>
Enter pathname of shell or RETURN for sh:	<emphasis>hit RETURN</emphasis>
erase ^H, kill ^U, intr ^C
# </emphasis></emphasis></command><command>fsck -y /dev/rwd0a</emphasis>					<emphasis>check the integrity of the root file system</command>
** /dev/rwd0a
** Last Mounted on /
** Root file system
** Phase 1 - Check Blocks and Sizes
** Phase 2 - Check Pathnames
** Phase 3 - Check Connectivity
** Phase 4 - Check Reference Counts
** Phase 5 - Check Cyl groups
1064 files, 8190 used, 6913 free (61 frags, 1713 blocks, 0.4% fragmentation)
# <command>mount -u /</emphasis>						<emphasis>remount root file system read/write</command>
# <command>mount /usr</emphasis>						<emphasis>mount any other file systems you need</command>
</programlisting>

<para>To leave single user mode and enter multi user mode, just enter <keycap>CTRL-D</keycap>:
</para>
<programlisting>
# <command>^D</command>
Skipping file system checks...
<emphasis>(the rest of the boot sequence)</emphasis>
</programlisting>

<para><indexterm><primary>run</primary><secondary>levels</secondary></indexterm>
<indexterm><primary>init</primary><secondary>S</secondary></indexterm>
System V has the concept of <emphasis>run levels</emphasis>, which are controlled by
<emphasis>init</emphasis>.  Single user mode corresponds to run level <emphasis>S</emphasis>, and multi user
mode corresponds to run level 3.  There is nothing to correspond to the other
System V run levels, in particular run level 2, which starts a System V system
without networking.  Networking is such an integral part of FreeBSD that this is
just not practicable.  You also can't enter single user mode with the System V
command <emphasis>init S</emphasis>. If you try, you get:
</para>
<programlisting>
# <command>init S</command>
init: already running
</programlisting>

<para>You can enter single user mode from a running FreeBSD system with the
<emphasis>shutdown</emphasis> command, which we'll look at in the next section.
Unfortunately, <emphasis>shutdown</emphasis> leaves some dæmons running and file systems
mounted, so it's preferable to enter by rebooting, as shown above.
</para>
<sect3>
<title>Password protecting single-user mode</title>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
If you run a secure environment, you could be concerned about the fact that you
can start up in single-user mode without entering a password.  That's the
default&mdash;normally, if somebody can access your system console, a password is
no longer much use, and it can be a nuisance&mdash;but you can change it.  Find
this entry in <emphasis>/etc/ttys</emphasis>, and change the word <emphasis>secure</emphasis> to
<emphasis>insecure</emphasis>:
# If you want to be asked for password, change "secure" to "insecure" here
console	none				unknown	off <command>in</command>secure
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>FreeBSD configuration files</title>

<para><anchor id="CFBSD-configfiles"/>
One of the outstanding things about UNIX is that all system configuration
information is stored in text files, usually in the directory
<filename></filename>/etc .
Some people think that this method seems primitive by comparison with a flashy
GUI configuration editor, but it has significant advantages.  In particular, you
see <emphasis>exactly</emphasis> what the program reads.  WIth a GUI editor, the real
configuration is usually stored in a format which you can't read, and even when
you can, it's undocumented.  Also, you can see more of the configuration at a
time: a GUI editor usually presents you with only small parts of the
configuration, and it's difficult to see the relationships.
</para>

<para>In the Microsoft world, one of the most common methods of problem resolution is
to reinstall the system.  This is a declaration of bankruptcy: it takes forever,
you're liable to cause other problems on the way, and you never find out what
the problem was.  If your FreeBSD system doesn't do what you expect, <emphasis>don't
</emphasis>
reinstall the system.  Take a look at the configuration files, and there's a
good chance that you'll find the problem there.
</para>

<para>The vast majority of configuration files are the same across all versions of
UNIX.  This appendix touches on them briefly, but you can get in-depth
information in books such as the <emphasis>UNIX System Administration Handbook</emphasis>, by
Evi Nemeth, Garth Snyder, Scott Seebass, and Trent R. Hein.  In all cases, you
can get more information from section 5 of the man pages.
</para>

<para>In this section, we'll first look at <emphasis>/etc/defaults/rc.conf</emphasis> and
<emphasis>/etc/rc.conf</emphasis>.  On page <xref linkend="CFBSD-std-config-files"/> we'll look at the other
non-network configuration files, and on page <xref linkend="CFBSD-net-config-files"/> we'll look at
the files related to network configuration.
</para>
</sect1>
<sect1>
<title>/etc/rc.conf</title>

<para><anchor id="CFBSD-rc.conf"/>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
<filename></filename>/etc/rc.conf 
is the main system configuration file, and in this format it is unique to
FreeBSD.  In older versions of FreeBSD, this file was called
<filename></filename>/etc/sysconfig&mdash;only
the name has changed.
</para>

<para><filename></filename>/etc/rc.conf 
is intended to be the one file which defines the configuration of your
system&mdash;that is to say, what the system needs to do when it starts up.  It's
not quite that simple, but nearly all site-dependent information is stored here.
We'll walk through the version that was current at the time of writing.  The
files will change as time goes on, but most of the information will remain
relevant.
</para>

<para><emphasis>/etc/rc.conf</emphasis> is completely your work.  When you install the system,
there is no such file: you have to create it.  What you will find is a file
<emphasis>/etc/defaults/rc.conf</emphasis>, which contains default values for everything in
<emphasis>/etc/rc.conf</emphasis>.  Why do it this way?  In fact, previous versions of FreeBSD
supplied the file <emphasis>/etc/rc.conf</emphasis> and you had to edit it.  The problems
arrived when you upgraded: which variables were the old defaults, and which ones
had you changed?  It was quite difficult to decide.  As a result, FreeBSD
<xref linkend="CFBSD-Fver"/> has the defaults in one file.  You shouldn't change this file: if you
want to override the default, put the new value in <emphasis>/etc/rc.conf</emphasis>.  Then,
when you upgrade, you can keep your old <emphasis>/etc/rc.conf</emphasis>, and you only need to
change it if new features have been introduced and you want to change them.
</para>

<para>Let's walk through <emphasis>/etc/defaults/rc.conf</emphasis>.  As we do, we'll build up our
<emphasis>/etc/rc.conf</emphasis>.  To avoid too much confusion, I show the text which goes
into <emphasis>/etc/rc.conf</emphasis> in \s8<command>constant width bold</command>\s0, whereas the text
in <emphasis>/etc/defaults/rc.conf</emphasis> is in \s8<emphasis>constant width</emphasis>\s0.
</para>
<programlisting>
#!/bin/sh
#

# This is rc.conf - a file full of useful variables that you can set
# to change the default startup behavior of your system.  You should
# not edit this file!  Put any overrides into one of the ${rc_conf_files}
# instead and you will be able to update these defaults later without
# spamming your local configuration information.
#
# All arguments must be in double or single quotes.
#
#	$I\&amp;d: rc.conf,v 1.1.2.4 1999/05/03 08:13:55 grog Exp $

##############################################################
### Important initial Boot-time options  #####################
##############################################################

swapfile="NO"				# Set to name of swapfile if aux swapfile desired.
</programlisting>

<para>You only need to set <emphasis>swapfile</emphasis> if you want an additional swap file.  We
will see an example of this on page <xref linkend="CFBSD-swapon"/>.
</para>
<programlisting>
apm_enable="NO"				# Set to YES if you want APM enabled.
pccard_enable="NO"			# Set to YES if you want to configure PCCARD devices.
pccard_mem="DEFAULT"			# If pccard_enable=YES, this is card memory address.
pccard_ifconfig="NO"			# Specialized pccard ethernet configuration (or NO).
</programlisting>

<para>The four preceding parameters apply to notebooks only.  We don't discuss them in
this book.
</para>
<programlisting>
local_startup="/usr/local/etc/rc.d /usr/X11R6/etc/rc.d"	# startup script dirs.
</programlisting>

<para><indexterm><primary>/etc/rc2.d</primary></indexterm>
This is a list of directories which are searched for startup scripts.  If you
come from a System V background, you would expect to find these scripts in the
directories such as <emphasis>/etc/rc2.d</emphasis>.
</para>
<programlisting>
local_periodic="/usr/local/etc/periodic /usr/X11R6/etc/periodic" # periodic script dirs
</programlisting>

<para><emphasis>local_periodic</emphasis> is a list of directories to search for scripts to be run
by <emphasis>cron</emphasis>.  Currently it is not used.
</para>
<programlisting>
rc_conf_files="/etc/rc.conf /etc/rc.conf.local"
</programlisting>

<para><emphasis>rc_conf_files</emphasis> is a list of files to read after this file.  You'll
recognize <emphasis>/etc/rc.conf</emphasis>, which we discussed above.
<emphasis>/etc/rc.conf.local</emphasis> is an idea that hasn't completely died, but there's a
good chance that it will.  You'd be best off not to use it until you're sure
it's going to stay.
</para>

<para>For obvious reasons, this is one entry in <emphasis>/etc/defaults/rc.conf</emphasis> which
you can't override in <emphasis>/etc/rc.conf</emphasis>.
</para>
<programlisting>
##############################################################
###  Network configuration sub-section  ######################
##############################################################

### Basic network options: ###
hostname="myname.my.domain"	# Set this!
</programlisting>

<para><emphasis>hostname</emphasis> is the fully qualified name of the host.  You should always
override it in <emphasis>/etc/rc.conf</emphasis>.  See page <xref linkend="CFBSD-set-hostname"/> for more details.
In <emphasis>/etc/rc.conf</emphasis>, we'll put:
</para>
<programlisting>
<command>hostname="presto.example.org"	# Set this!</command>
</programlisting>

<para>Continuing in <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
nisdomainname="NO"			# Set to NIS domain if using NIS (or NO).
</programlisting>

<para>If you're using Sun's NIS, set this.  We don't discuss NIS in this book.
</para>
<programlisting>
firewall_enable="NO"			# Set to YES to enable firewall functionality
firewall_script="/etc/rc.firewall" # Which script to run to set up the firewall
firewall_type="UNKNOWN"		# Firewall type (see /etc/rc.firewall)
firewall_quiet="NO"			# Set to YES to suppress rule display
</programlisting>

<para>Parameters for the <emphasis>ipfw</emphasis> firewall.  See page <xref linkend="CFBSD-firewall-configuration"/>,
where we set the following flags in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>firewall_enable="YES"		# Set to YES to enable firewall functionality
firewall_type="client"		# Firewall type (see /etc/rc.firewall)</command>
</programlisting>

<para></para>
<programlisting>
natd_program="/sbin/natd"	  	# path to natd, if you want a different one.
natd_enable="NO"			# Enable natd (if firewall_enable == YES).
natd_interface="fxp0"		# Public interface or IPaddress to use.
natd_flags=""				# Additional flags for natd.
</programlisting>

<para>Parameters for <emphasis>natd</emphasis>.  See page <xref linkend="CFBSD-natd-rc.conf"/> for more details.  In the
example there, we'll add these lines to <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>natd_enable="YES"		 	# Enable natd (if firewall_enable == YES).
natd_interface="tun0"		# Public interface or IPaddress to use.</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
tcp_extensions="NO"			# Disallow RFC1323 extensions (or YES).
</programlisting>

<para>We don't discuss these extensions in this book.  Leave this variable set to
<emphasis>NO</emphasis> unless you have problems.
</para>
<programlisting>
network_interfaces="lo0"		# List of network interfaces (lo0 is loopback).
ifconfig_lo0="inet 127.0.0.1"	# default loopback device configuration.
#ifconfig_lo0_alias0="inet 127.0.0.254 netmask 0xffffffff" # Sample alias entry.
</programlisting>

<para>This is one area that you must change if you have any network interfaces at
all.  On page <xref linkend="CFBSD-describing-network"/>, we come up with the following entries in
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>network_interfaces="ed0 lo0"	# List of network interfaces (lo0 is loopback).
ifconfig_ed0="inet 223.147.37.2	 netmask 255.255.255.0"
ifconfig_lo0="inet 127.0.0.1"	# default loopback device configuration.</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
# If you have any sppp(4) interfaces above, you might also want to set
# the following parameters.  Refer to spppcontrol(8) for their meaning.
sppp_interfaces=""			# List of sppp interfaces.
#sppp_interfaces="isp0"		# example: sppp over ISDN
#spppconfig_isp0="authproto=chap myauthname=foo myauthsecret='top secret' hisauthname
=some-gw hisauthsecret='another secret'"
</programlisting>

<para>These are parameters for the <emphasis>sppp</emphasis> implementation for <emphasis>ISDN4BSD</emphasis>,
which we won't discuss here.
</para>
<programlisting>
### Network daemon (miscellaneous) &amp; NFS options: ###
syslogd_enable="YES"			# Run syslog daemon (or NO).
syslogd_flags=""			# Flags to syslogd (if enabled).
</programlisting>

<para>You should always run syslogd unless you have a very good reason not to.
<emphasis>syslogd_flags</emphasis> is normally empty, as in this example.
</para>
<programlisting>
inetd_enable="YES"			# Run the network daemon dispatcher (or NO).
inetd_flags=""				# Optional flags to inetd (always enabled).
</programlisting>

<para>We will look at <emphasis>inetd</emphasis> on page <xref linkend="CFBSD-inetd"/>.  Normally you will want to keep
it enabled, and you won't need any flags for it.
</para>
<programlisting>
named_enable="NO"			# Run named, the DNS server (or NO).
named_program="named"		# path to named, if you want a different one.
named_flags=""				# Flags for named
#named_flags="-u bind -g bind"	# Flags for named
</programlisting>

<para>These parameters specify whether we should run the name server, and what flags
we should use if we do.  See page <xref linkend="CFBSD-running-named"/> for more details.  Previous
versions of <emphasis>named</emphasis> required a flag to specify the location of the
configuration file, but the location FreeBSD uses has now become the standard,
so we no longer need to specify any flags.  All we put in <emphasis>/etc/rc.conf</emphasis>
is:
</para>
<programlisting>
<command>named_enable="YES"			# Run named, the DNS server (or NO).</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
kerberos_server_enable="NO"	# Run a kerberos master server (or NO).
kadmind_server_enable="NO"		# Run kadmind (or NO) -- do not run non
						# a slave kerberos server
kerberos_stash=""			# Is the kerberos master key stashed?
</programlisting>

<para>Set these if you want to run Kerberos.  We don't discuss Kerberos in this book.
</para>
<programlisting>
rwhod_enable="NO"			# Run the rwho daemon (or NO).
rwhod_flags=""				# Flags for rwhod
</programlisting>

<para>Set this if you want to run the <emphasis>rwhod</emphasis> dæmon, which broadcasts
information about the system load.
</para>
<programlisting>
amd_enable="NO"				# Run amd service with $amd_flags (or NO).
amd_flags="-a /net -c 1800 -k i386 -d my.domain -l syslog /host /etc/amd.map"
amd_map_program="NO"			# Can be set to "ypcat -k amd.master"
</programlisting>

<para>Enable the automounter.   We don't discuss the automounter in this book.
</para>
<programlisting>
nfs_client_enable="NO"		# This host is an NFS client (or NO).
nfs_client_flags="-n 4"		# Flags to nfsiod (if enabled).
nfs_access_cache="2"			# Client cache timeout in seconds
nfs_server_enable="NO"		# This host is an NFS server (or NO).
nfs_server_flags="-u -t -n 4"	# Flags to nfsd (if enabled).
mountd_flags="-r"			# Flags to mountd (if NFS server enabled).
nfs_reserved_port_only="NO"	# Provide NFS only on secure port (or NO).
rpc_lockd_enable="NO"		# Run NFS rpc.lockd (*broken!*) if nfs_server.
rpc_statd_enable="YES"		# Run NFS rpc.statd if nfs_server (or NO).
portmap_enable="YES"			# Run the portmapper service (or NO).
portmap_program="/usr/sbin/portmap"	# path to portmap, if you want a different one.
portmap_flags=""			# Flags to portmap (if enabled).
rpc_ypupdated_enable="NO"		# Run if NIS master and SecureRPC (or NO).
</programlisting>

<para>Flags for NFS.  See page <xref linkend="CFBSD-NFS-setup"/>.   There we set the following values in
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
nfs_client_enable="YES"		# This host is an NFS client (or NO).
nfs_server_enable="YES"		# This host is an NFS server (or NO).
</programlisting>

<para></para>
<programlisting>
keyserv_enable="NO"			# Run the SecureRPC keyserver (or NO).
keyserv_flags=""			# Flags to keyserv (if enabled).
rarpd_enable="NO"			# Run rarpd (or NO).
rarpd_flags=""				# Flags to rarpd.
xtend_enable="NO"			# Run the X-10 power controller daemon.
xtend_flags=""				# Flags to xtend (if enabled).
</programlisting>

<para>These entries refer to the Secure RPC key server, <emphasis>rarpd</emphasis> and the X-10
dæmon.  We don't discuss any of them in this book.  See the man pages
<emphasis>keyserv(8)</emphasis>, <emphasis>rarpd(8)</emphasis> and <emphasis>xtend(8)</emphasis> respectively.
</para>
<programlisting>
### Network Time Services options: ###
timed_enable="NO"			# Run the time daemon (or NO).
timed_flags=""				# Flags to timed (if enabled).
ntpdate_enable="NO"			# Run the ntpdate to sync time (or NO).
ntpdate_program="ntpdate"		# path to ntpdate, if you want a different one.
ntpdate_flags=""			# Flags to ntpdate (if enabled).
xntpd_enable="NO"			# Run xntpd Network Time Protocol (or NO).
xntpd_program="xntpd"		# path to xntpd, if you want a different one.
xntpd_flags="-p /var/run/xntpd.pid"	# Flags to xntpd (if enabled).
</programlisting>

<para><!--  XXX -->
<emphasis>timed</emphasis>, <emphasis>ntpdate</emphasis> and <emphasis>xntpd</emphasis> are three different ways of
synchronizing your machine with the current date and time.  See page
<xref linkend="CFBSD-timekeeping"/> for more information.  There we put the following values into
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>xntpd_enable="YES"			# Run xntpd Network Time Protocol (or NO).
xntpd_flags=""				# Flags to xntpd (if enabled).</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
# Network Information Services (NIS) options: ###
nis_client_enable="NO"		# We're an NIS client (or NO)
nis_client_flags=""			# Flags to ypbind (if enabled).
nis_ypset_enable="NO"		# Run ypset at boot time (or NO).
nis_ypset_flags=""			# Flags to ypset (if enabled).
nis_server_enable="NO"		# We're an NIS server (or NO)
nis_server_flags=""			# Flags to ypserv (if enabled).
nis_ypxfrd_enable="NO"		# Run rpc.ypxfrd at boot time (or NO).
nis_ypxfrd_flags=""			# Flags to rpc.ypxfrd (if enabled).
nis_yppasswdd_enable="NO"		# Run rpc.yppasswdd at boot time (or NO).
nis_yppasswdd_flags=""		# Flags to rpc.yppasswdd (if enabled).
</programlisting>

<para>More parameters for configuring NIS.  As mentioned above, this book does not
deal with NIS.
</para>
<programlisting>
### Network routing options: ###
defaultrouter="NO"			# Set to default gateway (or NO).
static_routes=""			# Set to static route list (or leave empty).
gateway_enable="NO"			# Set to YES if this host will be a gateway.
</programlisting>

<para>Here's another area that we need to change if we're using any kind of a network.
On page <xref linkend="CFBSD-route"/> we set the following values in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>defaultrouter="223.147.37.5"	# Set to default gateway (or NO).
static_routes=""			# Set to static route list (or leave empty).</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
router_enable="NO"			# Set to YES to enable a routing daemon.
router="routed"				# Name of routing daemon to use if enabled.
router_flags="-q"			# Flags for routing daemon.
mrouted_enable="NO"			# Do multicast routing (see /etc/mrouted.conf).
mrouted_flags=""			# Flags for multicast routing daemon.
</programlisting>

<para>These parameters relate to the routing dæmons <emphasis>routed</emphasis> and <emphasis>mrouted</emphasis>.
In the configurations we considered, you don't need them.
</para>
<programlisting>
ipxgateway_enable="NO"		# Set to YES to enable IPX routing.
ipxrouted_enable="NO"		# Set to YES to run the IPX routing daemon.
ipxrouted_flags=""			# Flags for IPX routing daemon.
</programlisting>

<para>IPX is a Novell proprietary networking protocol which is designed to be similar
to IP.  FreeBSD supplies the dæmon <emphasis>IPXrouted</emphasis> (note the capitalization)
which handles IPX routing tables.  See the man page <emphasis>IPXrouted(8)</emphasis> for
further details.
</para>
<programlisting>
arpproxy_all=""				# replaces obsolete kernel option ARP_PROXYALL.
forward_sourceroute="NO"		# do source routing (only if gateway_enable is set to "YES")
accept_sourceroute="NO"		# accept source routed packets to us
</programlisting>

<para>Various IP options.
</para>
<programlisting>
### ATM interface options: ###
atm_enable="NO"				# Configure ATM interfaces (or NO).
#atm_netif_hea0="atm 1"		# Network interfaces for physical interface.
#atm_sigmgr_hea0="uni31"		# Signalling manager for physical interface.
#atm_prefix_hea0="ILMI"		# NSAP prefix (UNI interfaces only) (or ILMI).
#atm_macaddr_hea0="NO"		# Override physical MAC address (or NO).
# ATMARP server address (or local).
#atm_arpserver_atm0="0x47.0005.80.999999.9999.9999.9999.999999999999.00"
#atm_scsparp_atm0="NO"		# Run SCSP/ATMARP on network interface (or NO).
atm_pvcs=""				# Set to PVC list (or leave empty).
atm_arps=""				# Set to permanent ARP list (or leave empty).

### ISDN interface options: ###
isdn_enable="NO"			# Enable the ISDN subsystem (or NO).
isdn_fsdev="/dev/ttyv4"		# Output device for fullscreen mode (or NO for daemon mode).
isdn_flags="-dn -d0x1f9"		# Flags for isdnd
isdn_trace="NO"				# Enable the ISDN trace subsystem (or NO).
isdn_traceflags="-f /var/tmp/isdntrace0"	# Flags for isdntrace
</programlisting>

<para>Parameters for ATM and ISDN, which this book doesn't discuss.
</para>
<programlisting>
### Miscellaneous network options: ###
icmp_bmcastecho="NO"			# respond to broadcast ping packets
</programlisting>

<para><indexterm><primary>smurf</primary></indexterm>
This parameter relates to the so-called <emphasis>smurf</emphasis> ``denial of service''
attack: according to the RFCs, a machine should respond to a ping to its
broadcast address.  But what happens if somebody pings a remote network's
broadcast address across the Internet, as fast as he can?  Each system on the
remote network will reply, completely overloading the Internet interface.  Yes,
this is silly, but there are silly people out there.  If you leave this
parameter as it is, your system will not be vulnerable.  See
<emphasis>http://www.cert.org/advisories/CA-98.01.smurf.html</emphasis> for more details.
</para>
<programlisting>
##############################################################
###  System console options  #################################
##############################################################

keymap="NO"				# keymap in /usr/share/syscons/keymaps/* (or NO).
keyrate="NO"				# keyboard rate to: slow, normal, fast (or NO).
keybell="NO"				# bell to duration.pitch or normal or visual (or NO).
keychange="NO"				# function keys default values (or NO).
cursor="NO"				# cursor type {normal|blink|destructive} (or NO).
scrnmap="NO"				# screen map in /usr/share/syscons/scrnmaps/* (or NO).
font8x16="NO"				# font 8x16 from /usr/share/syscons/fonts/* (or NO).
font8x14="NO"				# font 8x14 from /usr/share/syscons/fonts/* (or NO).
font8x8="NO"				# font 8x8 from /usr/share/syscons/fonts/* (or NO).
blanktime="300"				# blank time (in seconds) or "NO" to turn it off.
saver="NO"					# screen saver: Uses /modules/${saver}_saver.ko
</programlisting>

<para>These parameters describe the use of alternate keyboard mappings when using the
standard character-based terminals only.  See the files in
<filename></filename>/usr/share/syscons/keymaps 
for key map files, and
<filename></filename>/usr/share/syscons/fonts 
for alternate fonts.  These parameters have no effect on the X-based displays
that this book assumes.
</para>
<programlisting>
moused_enable="NO"			# Run the mouse daemon.
moused_type="auto"			# See man page for rc.conf(5) for available settings.
moused_port="/dev/cuaa0"		# Set to your mouse port.
moused_flags=""				# Any additional flags to moused.
allscreens_flags=""			# Set this vidcontrol mode for all virtual screens
</programlisting>

<para>Parameters for <emphasis>moused</emphasis>, a mouse driver for the character-based terminals,
and global flags for virtual screens.
</para>
<programlisting>
##############################################################
###  Miscellaneous administrative options  ###################
##############################################################

cron_enable="YES"			# Run the periodic job daemon.
</programlisting>

<para>Run <emphasis>cron</emphasis>, the dæmon responsible for running things at specific times.  See
page <xref linkend="CFBSD-cron"/> for a description of <emphasis>cron</emphasis>.  You should leave this enabled
unless you have a good reason not to.
</para>
<programlisting>
lpd_enable="YES"			# Run the line printer daemon
lpd_program="/usr/sbin/lpd"	# path to lpd, if you want a different one.
lpd_flags=""				# Flags to lpd (if enabled).
</programlisting>

<para>See page <xref linkend="CFBSD-printers"/> for a discussion of printing.  There's no particular
reason to change these defaults.
</para>
<programlisting>
usbd_enable="NO"			# Run the usbd daemon.
usbd_flags=""				# Flags to usbd (if enabled).
</programlisting>

<para>Support for the <emphasis>Universal Serial Bus</emphasis> or <emphasis>USB</emphasis> is relatively new,
and it is liable to change.  Consider this an experimental option at the moment.
See the man pages <emphasis>usbd(8)</emphasis> and <emphasis>usb(4)</emphasis> for more information.
</para>
<programlisting>
sendmail_enable="YES"		# Run the sendmail daemon (or NO).
sendmail_flags="-bd -q30m"		# -bd is pretty mandatory
</programlisting>

<para>See page <xref linkend="CFBSD-sendmail"/> for a discussion of <emphasis>sendmail</emphasis>.  There's normally no
need to change these values.
</para>
<programlisting>
dumpdev="NO"				# Device name to crashdump to (if enabled).
</programlisting>

<para>This parameter specifies how to take dumps when the system panics.  See page
<xref linkend="CFBSD-panic"/> for details, where we set the following value in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
<command>dumpdev=/dev/wd0s1b</command>
</programlisting>

<para>Continuing with <emphasis>/etc/defaults/rc.conf</emphasis>,
</para>
<programlisting>
enable_quotas="NO"			# turn on quotas on startup (or NO).
check_quotas="NO"			# Check quotas on startup (or NO).
accounting_enable="NO"		# Turn on process accounting (or NO).
ibcs2_enable="NO"			# Ibcs2 (SCO) emulation loaded at startup (or NO).
linux_enable="NO"			# Linux emulation loaded at startup (or NO).
<!-- XXXsvr4_enable="NO"	# SysVR4 emulation loaded at startup (or NO). -->
</programlisting>

<para>We don't discuss quotas or accounting in this book.  We will look at the
parameters <emphasis>ibcs2_enable</emphasis> on page <xref linkend="CFBSD-SCO-emulation"/> and
<emphasis>linux_enable</emphasis> on page <xref linkend="CFBSD-Linux-emulation"/>.
<!-- XXX, and <emphasis>svr4_enable</emphasis> on page <emphasis>svr4-emulation</emphasis>.  -->
</para>
<programlisting>
rand_irqs="NO"				# Stir the entropy pool (or NO).
</programlisting>

<para><emphasis>rand_irqs</emphasis> is used by the <emphasis>random number devices</emphasis>,
<emphasis>/dev/random</emphasis> and <emphasis>/dev/urandom</emphasis>.  These devices gather environmental
noise from device drivers and return good random numbers, suitable for
cryptographic use.  These numbers are also good for seeding TCP sequence
numbers, and other places where it is desirable to have numbers which are not
only random, but hard to predict by an attacker.
</para>
<programlisting>
clear_tmp_enable="NO"		# Clear /tmp at startup.
</programlisting>

<para>In the old days, the startup sequence automatically deleted everything in the
file system <emphasis>/tmp</emphasis>.  Sometimes this wasn't desirable, so now it's your
choice.  Change this value to <emphasis>YES</emphasis> if you want the old behaviour.
</para>
<programlisting>
ldconfig_paths="/usr/lib/compat /usr/X11R6/lib /usr/local/lib"
			# shared library search paths
ldconfig_paths_aout="/usr/lib/compat/aout /usr/X11R6/lib/aout /usr/local/lib/aout"
			# a.out shared library search paths
</programlisting>

<para>These two variables are lists of the directories which are searched to find
<emphasis>ELF</emphasis> and <emphasis>a.out</emphasis> dynamic libraries, respectively.  See page
<xref linkend="CFBSD-dynamic-libraries"/> for more details.  You would normally not remove anything
from these lists, but you might want to add something.
</para>
<programlisting>
kern_securelevel_enable="NO"	# kernel security level (see init(8)),
kern_securelevel="-1"		# range: -1..3 ; `-1' is the most insecure
update_motd="YES"			# update version info in /etc/motd (or NO)
</programlisting>

<para>The kernel runs with four different levels of security.  Any superuser process
can raise the security level, but only init can lower it.  The security levels
are:
</para>
<itemizedlist>
<listitem>

<para>Permanently insecure mode: always run the system in level 0 mode.  This is the
default initial value.
</para>
</listitem>
<listitem>

<para>Insecure mode: the immutable and append-only flags may be turned off.  All
devices may be read or written subject to their permissions.
</para>
</listitem>
<listitem>

<para>Secure mode: the system immutable and system append-only flags may not be turned
off.  Disks for mounted filesystems, <emphasis>/dev/mem</emphasis> and <emphasis>/dev/kmem</emphasis> may
not be opened for writing.
</para>
</listitem>
<listitem>

<para>Highly secure mode.  This is the same as secure mode with the addition that
disks may not be opened for writing (except by <emphasis>mount(2)</emphasis>), whether or not
they are mounted.  This level precludes tampering with filesystems by unmounting
them, but it also prevents running <emphasis>newfs(8)</emphasis> while the system is
multi-user.
</para>
</listitem>
<listitem>

<para>Network secure mode.  This is the same as highly secure mode with the addition
that IP packet filter rules (see page <xref linkend="CFBSD-firewall-configuration"/>) can not be
changed and dummynet configuration can not be adjusted.  We don't discuss
dummynet in this book.
</para>
</listitem>
</itemizedlist>

<para>To set the secure level to anything except -1, set the variable
<emphasis>kern_securelevel</emphasis> to the value you want, and set
<emphasis>kern_securelevel_enable</emphasis> to <emphasis>YES</emphasis>.
</para>
<programlisting>
start_vinum=""				# set to YES to start vinum
vinum_drives=""				# put in names of disks containing vinum drives
						# to start vinum on only specific disks.
</programlisting>

<para>We will look at <emphasis>Vinum</emphasis> on page <xref linkend="CFBSD-vinum"/>.  There we put the following
text into <emphasis>/etc/rc.conf</emphasis> in order to start it on booting:
</para>
<programlisting>
<command>start_vinum="YES"			# set to YES to start vinum</command>
</programlisting>

<para></para>
<sect2>
<title>Our /etc/rc.conf</title>

<para>To summarize the changes from the defaults, our <emphasis>/etc/rc.conf</emphasis> should now
contain the following entries:
</para>
<programlisting>
hostname="presto.example.org"
firewall_enable="YES"		# Set to YES to enable firewall functionality
firewall_type="client"		# Firewall type (see /etc/rc.firewall)
natd_enable="YES"			# Enable natd (if firewall_enable == YES).
natd_interface="tun0"		# Public interface or IPaddress to use.
named_enable="YES"			# Run named, the DNS server (or NO).
nfs_client_enable="YES"		# This host is an NFS client (or NO).
nfs_server_enable="YES"		# This host is an NFS server (or NO).
xntpd_enable="YES"			# Run xntpd Network Time Protocol (or NO).
xntpd_flags=""				# Flags to xntpd (if enabled).
dumpdev=/dev/wd0s1b			# Device name to crashdump to (if enabled).
start_vinum="YES"			# set to YES to start vinum
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Other configuration files</title>

<para><anchor id="CFBSD-std-config-files"/>
This section handles the non-network configuration files in alphabetical order.
See page <xref linkend="CFBSD-net-config-files"/> for a description of network configuration files.
</para>
<sect2>
<title>/etc/aliases</title>

<para><indexterm><primary>/etc/aliases</primary></indexterm>
<filename></filename>/etc/aliases 
is used by <emphasis>sendmail</emphasis> to describe mail aliases.  See page <xref linkend="CFBSD-/etc/aliases"/>
for more details.
</para>
</sect2>
<sect2>
<title>/etc/csh.cshrc, /etc/csh.login, /etc/csh.logout</title>

<para><indexterm><primary>/etc/csh.cshrc</primary></indexterm>
<indexterm><primary>/etc/csh.login</primary></indexterm>
<indexterm><primary>/etc/csh.logout</primary></indexterm>
<indexterm><primary>csh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>csh</secondary></indexterm>
These are default initialization files for <emphasis>csh</emphasis>.  See the man page
<emphasis>csh(1)</emphasis> for more details.
</para>
</sect2>
<sect2>
<title>/etc/crontab</title>

<para><indexterm><primary>/etc/crontab</primary></indexterm>
<indexterm><primary>cron</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>cron</secondary></indexterm>
<filename></filename>/etc/crontab 
describes the jobs to be performed by <emphasis>cron</emphasis> on behalf of the system.  See
page <xref linkend="CFBSD-cron"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/disktab</title>

<para><indexterm><primary>/etc/disktab</primary></indexterm>
<indexterm><primary>disklabel</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>disklabel</secondary></indexterm>
<filename></filename>/etc/disktab 
contains descriptions of disk geometries for <emphasis>disklabel</emphasis>.  See page
<xref linkend="CFBSD-disktab"/> for further details.
</para>
</sect2>
<sect2>
<title>/etc/fstab</title>

<para><anchor id="CFBSD-/etc/fstab"/>
<indexterm><primary>/etc/fstab</primary></indexterm>
<indexterm><primary>/etc/rc</primary></indexterm>
<indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
<filename></filename>/etc/fstab 
contains a list of file systems known to the system.  The script
<filename></filename>/etc/rc 
starts <emphasis>mount</emphasis> twice during system startup first to mount the local file
systems, and later to mount the NFS file system.  <emphasis>mount</emphasis> will mount all
file systems unless they are explicitly excluded.
</para>

<para><indexterm><primary>/etc/fstab</primary></indexterm>
<indexterm><primary>freebie.example.org</primary></indexterm>
Here's a typical
<filename></filename>/etc/fstab ,
from host <emphasis>freebie.example.org</emphasis>:
</para>
<programlisting>
/dev/wd0a				/			ufs		rw		1 1
/dev/wd0s1b			none			swap		sw		0 0
/dev/wd0s1e			/usr			ufs		rw		2 2
/dev/sd0b				none			swap		sw		0 0
/dev/sd0h				/src			ufs		rw		2 2
/dev/sd1h				/home			ufs		rw		2 2
/dev/sd2b				none			swap		sw		0 0
/dev/sd2e				/S			ufs		rw,noauto	2 2
/dev/sd3a				/mod			ufs		rw,noauto	0 0
# /dev/sd1e			/src			ufs		rw,noauto	0 0
proc					/proc			procfs	rw		0 0
# /dev/mcd0a			/cdrom		cd9660	ro,noauto	0 0
/dev/cd0a				/cdrom/1		cd9660	ro,noauto	0 0
/dev/cd1a				/cdrom/2		cd9660	ro,noauto	0 0
/dev/cd2a				/cdrom/3		cd9660	ro,noauto	0 0
/dev/cd3a				/cdrom/4		cd9660	ro,noauto	0 0
/dev/cd4a				/cdrom/5		cd9660	ro,noauto	0 0
/dev/cd5a				/cdrom/6		cd9660	ro,noauto	0 0
/dev/cd6a				/cdrom/7		cd9660	ro,noauto	0 0
/dev/cd7a				/cdrom/8		cd9660	ro,noauto	0 0
presto:/				/presto		nfs		soft,rw,noauto 0 0
presto:/usr			/presto/usr	nfs		soft,rw,noauto 0 0
# presto:/var			/presto/var	nfs		soft,rw,noauto 0 0
presto:/home			/presto/home	nfs		soft,rw,noauto 0 0
bumble:/				/bumble		nfs		soft,rw,noauto 0 0
bumble:/usr			/bumble/usr	nfs		soft,rw,noauto 0 0
wait:/C				/C			nfs		soft,rw,noauto 0 0
wait:/				/wait			nfs		soft,rw,noauto,tcp 0 0
</programlisting>

<para>This information has the following meaning:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>ufs</primary></indexterm>
<indexterm><primary>cd9660</primary></indexterm>
<indexterm><primary>proc</primary></indexterm>
The first column contains either the name of a device (for swap, <emphasis>ufs</emphasis> and
<emphasis>cd9660</emphasis> file systems), the name of a file system (for NFS file systems),
or <emphasis>proc</emphasis> for the <emphasis>proc</emphasis> file system.
</para>
</listitem>
<listitem>

<para>The lines beginning with <emphasis>#</emphasis> are <emphasis>commented out</emphasis>: <emphasis>mount</emphasis>
ignores them completely.
</para>
</listitem>
<listitem>

<para>The second column is either a mount point or the keyword <emphasis>none</emphasis> in the
case of a partition which is not mounted, such as swap.
</para>
</listitem>
<listitem>

<para>The third column is the kind of file system (or <emphasis>swap</emphasis>).
</para>
</listitem>
<listitem>

<para>The fourth column are flags relating to the particular file system being
mounted.  Some of the more common are:
<table frame='all'><title>Mount flags</title>
box,center,tab(#) ;
| lfCWp9 | lw70 | .
Flag#Purpose
=
ro#Mount read-only
rw#Mount read/write
sw#Mount as swap
noauto#Don't mount automatically
soft#T{
For an NFS mount, fail if the request times out.  If you don't specify this
option, NFS will keep retrying for ever.
T}
tcp#T{
For NFS only, mount with TCP transport rather than the standard UDP transport.
This feature is supported almost only by BSD systems&mdash;check whether the other
end offers TCP transport.
T}

</tbody></tgroup></table>
For NFS mount flags, see <xref linkend="CFBSD-chnfs"/>, page <xref linkend="CFBSD-NFS-mount-flags"/>.
</para>
</listitem>
</itemizedlist>

<para>Why are there so many entries with the <emphasis>noauto</emphasis> keyword?	If you don't
bother to mount them, why bother to mention them?
</para>

<para>If file system has an entry in
<filename></filename>/etc/fstab ,
<emphasis>mount</emphasis> is clever enough to get all the information it needs from this
file.  You just need to specify the name of the mount point or the name of the
special device (for <emphasis>ufs</emphasis> and <emphasis>cd9660</emphasis>) or the remote file system
(for NFS).  This is particularly useful for <emphasis>cd9660</emphasis>.  Without an entry in
<filename></filename>/etc/fstab ,
you would have to write:
</para>
<programlisting>
# <command>mount -t cd9660 -o ro /dev/cd0a /cdrom</command>
</programlisting>

<para>With the entry, you can simplify this to:
</para>
<programlisting>
# <command>mount /cdrom</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>/etc/gettytab</title>

<para><indexterm><primary>/etc/gettytab</primary></indexterm>
<indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
<filename></filename>/etc/gettytab 
describes profiles for <emphasis>getty</emphasis>.  You probably don't need it; check the man
page (on your system, but not in this book) if you're interested.
</para>
</sect2>
<sect2>
<title>/etc/group</title>

<para><indexterm><primary>/etc/group</primary></indexterm>
<filename></filename>/etc/group 
defines the groups known to the system.  See page <xref linkend="CFBSD-group"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/login.conf</title>

<para><indexterm><primary>/etc/login.conf</primary></indexterm>
<filename></filename>/etc/login.conf 
describes user parameters set at login time.  See page <xref linkend="CFBSD-login-class"/> for more
details.
</para>
</sect2>
<sect2>
<title>/etc/manpath.config</title>

<para><indexterm><primary>/etc/manpath.config</primary></indexterm>
<indexterm><primary>man</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>man</secondary></indexterm>
<filename></filename>/etc/manpath.config 
is a configuration file for <emphasis>man</emphasis>.  You don't usually need to change this
file.
</para>
</sect2>
<sect2>
<title>/etc/master.passwd</title>

<para><indexterm><primary>/etc/master.passwd</primary></indexterm>
<filename></filename>/etc/master.passwd 
is the real password file.  We looked at it on page <xref linkend="CFBSD-master-passwd"/>.
</para>
</sect2>
<sect2>
<title>/etc/motd</title>

<para><indexterm><primary>/etc/motd</primary></indexterm>
<indexterm><primary>message</primary><secondary>of the day</secondary></indexterm>
<filename></filename>/etc/motd 
(<emphasis>message of the day</emphasis>) is a file which is printed out at login.  See page
<xref linkend="CFBSD-motd"/> for an example.
</para>
</sect2>
<sect2>
<title>/etc/passwd</title>

<para><indexterm><primary>/etc/passwd</primary></indexterm>
<filename></filename>/etc/passwd 
is the old-style password file.  It is now present only for programs which
expect to read it.  See page <xref linkend="CFBSD-master-passwd"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/printcap</title>

<para><indexterm><primary>/etc/printcap</primary></indexterm>
<filename></filename>/etc/printcap 
describes the printers connected to a system.  See page <xref linkend="CFBSD-printcap"/> for more
details.
</para>
</sect2>
<sect2>
<title>/etc/profile</title>

<para><indexterm><primary>/etc/profile</primary></indexterm>
<filename></filename>/etc/profile 
is a default startup file for Bourne-style shells.  See page <xref linkend="CFBSD-profile"/> for
more details.
</para>
</sect2>
<sect2>
<title>/etc/pwd.db</title>

<para><indexterm><primary>/etc/pwd.db</primary></indexterm>
<filename></filename>/etc/pwd.db 
is a machine-readable form of the user database with the passwords removed.  We
looked at it on page <xref linkend="CFBSD-master-passwd"/>.
</para>
</sect2>
<sect2>
<title>/etc/rc</title>

<para><indexterm><primary>/etc/rc</primary></indexterm>
<filename></filename>/etc/rc 
is the main script which starts up the system.  It uses the other files whose
names start with
<filename></filename>/etc/rc 
to perform specific initialization.  See page <xref linkend="CFBSD-init"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/rc.i386</title>

<para><indexterm><primary>/etc/rc.i386</primary></indexterm>
<filename></filename>/etc/rc.i386 
is used to initialize features specific to the Intel 386 architecture, such as
SCO and Linux emulation.  You don't normally need to look at or change this
file.
</para>
</sect2>
<sect2>
<title>/etc/rc.local</title>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
<filename></filename>/etc/rc.local 
is the configuration file which you use to include specific commands which are
not catered for in
<filename></filename>/etc/rc.conf .
We've seen a few examples in the book; check the index for more information.
</para>
</sect2>
<sect2>
<title>/etc/rc.pccard</title>

<para><indexterm><primary>/etc/rc.pccard</primary></indexterm>
<filename></filename>/etc/rc.pccard 
sets up laptops using the PCCARD bus.  We don't discuss this in this book.
</para>
</sect2>
<sect2>
<title>/etc/rc.serial</title>

<para><indexterm><primary>/etc/rc.serial</primary></indexterm>
<filename></filename>/etc/rc.serial 
sets default values for serial devices.  We don't discuss this in this book.
</para>
</sect2>
<sect2>
<title>/etc/sendmail.cf</title>

<para><indexterm><primary>/etc/sendmail.cf</primary></indexterm>
<indexterm><primary>sendmail</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>sendmail</secondary></indexterm>
<filename></filename>/etc/sendmail.cf 
is the main configuration file for <emphasis>sendmail</emphasis>.  We will look at it on page
<xref linkend="CFBSD-sendmail"/>.
</para>
</sect2>
<sect2>
<title>/etc/shells</title>

<para><indexterm><primary>/etc/shells</primary></indexterm>
<indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
<filename></filename>/etc/shells 
is a list of valid shells, used by <emphasis>ftp</emphasis> and some other programs.  See
page <xref linkend="CFBSD-/etc/shells"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/spwd.db</title>

<para><indexterm><primary>/etc/spwd.db</primary></indexterm>
<filename></filename>/etc/spwd.db 
is a machine-readable form of the user database with the passwords intact.  We
looked at it on page <xref linkend="CFBSD-master-passwd"/>.
</para>
</sect2>
<sect2>
<title>/etc/syslog.conf</title>

<para><indexterm><primary>/etc/syslog.conf</primary></indexterm>
<indexterm><primary>syslogd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>syslogd</secondary></indexterm>
<filename></filename>/etc/syslog.conf 
is the configuration file for <emphasis>syslogd</emphasis>.  We will look at it on page
<xref linkend="CFBSD-syslog.conf"/>.
</para>
</sect2>
<sect2>
<title>/etc/termcap</title>

<para><indexterm><primary>/etc/termcap</primary></indexterm>
<indexterm><primary>terminal</primary><secondary>capability</secondary></indexterm>
<indexterm><primary>capability</primary><secondary>terminal</secondary></indexterm>
<filename></filename>/etc/termcap 
(<emphasis>terminal capabilities</emphasis>) describes terminal control sequences.  By
default, programs use the value of the <emphasis>TERM</emphasis> environment variable to look
up the terminal capabilities in this database.  See page
<xref linkend="CFBSD-environment-variables"/> for more details.
</para>
</sect2>
<sect2>
<title>/etc/ttys</title>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
<indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
<filename></filename>/etc/ttys 
is a file which describes terminals and pseudo-terminals to <emphasis>init</emphasis>.  We've
looked at it in a number of places: check the index.
</para>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
Here's an excerpt from the default
<filename></filename>/etc/ttys :
</para>
<programlisting>
# This entry needed for asking password when init goes to single-user mode
# If you want to be asked for password, change "secure" to "insecure" here
console	none					unknown	off secure
</programlisting>

<para><indexterm><primary>/dev/ttyv0</primary></indexterm>
The system console.  This is not a real terminal: it can be moved from one
device to another.  By default, it corresponds to <emphasis>/dev/ttyv0</emphasis> (the next
entry).
</para>
<programlisting>
ttyv0	"/usr/libexec/getty Pc"		cons25	on  secure
</programlisting>

<para>This is the first virtual terminal, the one which you get automatically at boot
time.  To change to the others, press <keycap>Alt</keycap>-<keycap>F<emphasis>x</emphasis></keycap>, where <emphasis>x</emphasis>
is between 1 and 16.  This will give you one of the others:
</para>
<programlisting>
# Virtual terminals
ttyv1	"/usr/libexec/getty Pc"		cons25	on secure
ttyv2	"/usr/libexec/getty Pc"		cons25	on secure
ttyv3	"/usr/libexec/getty Pc"		cons25	off secure
</programlisting>

<para>The default kernel supports four virtual terminals.  See page <xref linkend="CFBSD-config-MAXCONS"/>
for details of how to configure more.  As we saw on page <xref linkend="CFBSD-getty-setup"/>, you
need to keep one <emphasis>off</emphasis> if you want to run X.
</para>
<programlisting>
# Serial terminals
ttyd0	"/usr/libexec/getty std.9600"	unknown	off secure
ttyd1	"/usr/libexec/getty std.9600"	unknown	off secure
ttyd2	"/usr/libexec/getty std.9600"	unknown	off secure
ttyd3	"/usr/libexec/getty std.9600"	unknown	off secure
</programlisting>

<para>These are the serial ports on your machine.  It doesn't matter if it contains
names which correspond to non-existent hardware, such as <emphasis>/dev/ttyd3</emphasis>, as
long as you don't try to enable them.
</para>
<programlisting>
# Pseudo terminals
ttyp0		none			network
ttyp1		none			network
</programlisting>

<para>There's a whole list of these.  The purpose here is to tell network programs
the properties of the terminal: in particular, they're not <emphasis>secure</emphasis>, which
means that you're not allowed to log in on them as <emphasis>root</emphasis>.
</para>
</sect2>
<sect2>
<title>/etc/periodic/</title>

<para>The directory <emphasis>/etc/periodic</emphasis> contains three directories used by
<emphasis>cron</emphasis> at regular intervals: <emphasis>daily</emphasis>, <emphasis>weekly</emphasis> and
<emphasis>monthly</emphasis>.  The directories contain a number of files for performing
specific tasks.  For example, <emphasis>/etc/periodic/daily</emphasis> contains the following
files:
</para>
<programlisting>
  -rwxr-xr-x  1 grog  example   321 Apr  6 18:25 100.clean-disks
  -rwxr-xr-x  1 grog  example   651 Apr  6 18:25 110.clean-tmps
  -rwxr-xr-x  1 grog  example   231 Apr  6 18:25 120.clean-preserve
  -rwxr-xr-x  1 grog  example   223 Aug 18  1997 130.clean-msgs
  -rwxr-xr-x  1 grog  example   217 Apr  6 18:25 140.clean-rwho
  -rwxr-xr-x  1 grog  example  1059 May 25  1998 200.backup-passwd
  -rwxr-xr-x  1 grog  example   499 Aug 17  1997 210.backup-aliases
  -rwxr-xr-x  1 grog  example   322 Aug 18  1997 220.backup-distfile
  -rwxr-xr-x  1 grog  example   458 Aug 18  1997 300.calendar
  -rwxr-xr-x  1 grog  example   410 Aug 18  1997 310.accounting
  -rwxr-xr-x  1 grog  example   186 Aug 18  1997 320.rdist
  -rwxr-xr-x  1 grog  example   253 Aug 17  1997 330.news
  -rwxr-xr-x  1 grog  example   321 Jan  2 07:37 340.uucp
  -rwxr-xr-x  1 grog  example   184 Aug 17  1997 400.status-disks
  -rwxr-xr-x  1 grog  example   182 Aug 18  1997 410.status-uucp
  -rwxr-xr-x  1 grog  example   179 Aug 18  1997 420.status-network
  -rwxr-xr-x  1 grog  example   284 Oct  6  1998 430.status-rwho
  -rwxr-xr-x  1 grog  example   425 Apr 18  1998 440.status-mailq
  -rwxr-xr-x  1 grog  example   261 Aug 18  1997 450.status-security
  -rwxr-xr-x  1 grog  example   432 Feb  9  1998 460.status-mail-rejects
  -rwxr-xr-x  1 grog  example   288 Aug 17  1997 999.local
</programlisting>

<para>The files are executed in the order of their names, so the names consist of two
parts: a number indicating the sequence, and a name indicating the function.
This method is new with FreeBSD version 3.  In older versions of FreeBSD, these
functions were performed by files with the names <emphasis>/etc/daily</emphasis>,
<emphasis>/etc/weekly</emphasis> and <emphasis>/etc/monthly</emphasis>.  See page <xref linkend="CFBSD-cron"/> for more details
of <emphasis>cron</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>Network configuration files</title>

<para><anchor id="CFBSD-net-config-files"/>
<indexterm><primary>/etc/rc.network</primary></indexterm>
<indexterm><primary>/etc/network</primary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
This section describes the network configuration files in alphabetical order.
The main script for starting the network is
<filename></filename>/etc/rc.network ,
which in earlier BSD versions, including FreeBSD, was called
<filename></filename>/etc/network .
You normally don't change this file: it reads all the necessary definitions from
<filename></filename>/etc/rc.conf ,
and that's the file you should change.
</para>
<sect2>
<title>/etc/exports</title>

<para><indexterm><primary>/etc/exports</primary></indexterm>
<filename></filename>/etc/exports 
is a list of file systems which should be NFS exported.  We will look at it on
page <xref linkend="CFBSD-/etc/exports"/>.  See also the man page <emphasis>exports(5)</emphasis>.
</para>
</sect2>
<sect2>
<title>/etc/rc.firewall</title>

<para><indexterm><primary>/etc/rc.firewall</primary></indexterm>
<indexterm><primary>ipfw</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>ipfw</secondary></indexterm>
<filename></filename>/etc/rc.firewall 
is used to initialize the packet filtering firewall <emphasis>ipfw</emphasis>.  See page
<xref linkend="CFBSD-firewall-configuration"/> for further details.
</para>
</sect2>
<sect2>
<title>/etc/ftpusers</title>

<para><indexterm><primary>/etc/ftpusers</primary></indexterm>
<indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
<filename></filename>/etc/ftpusers 
is a list of users who are <emphasis>not</emphasis> allowed to connect to this system using
<emphasis>ftp</emphasis>.
</para>
</sect2>
<sect2>
<title>/etc/host.conf</title>

<para><indexterm><primary>/etc/host.conf</primary></indexterm>
<indexterm><primary>/etc/hosts</primary></indexterm>
<filename></filename>/etc/host.conf 
describes the order in which to perform name resolution.  We have three choices:
BIND,
<filename></filename>/etc/hosts ,
and NIS.  The file simply specifies which of these options should be used, and
in which order:
</para>
<programlisting>
# $I\&amp;d: host.conf,v 1.2 1993/11/07 01:02:57 wollman Exp $
# Default is to use the nameserver first
bind
# If that doesn't work, then try the /etc/hosts file
hosts
# If you have YP/NIS configured, uncomment the next line
# nis
</programlisting>

<para></para>
</sect2>
<sect2>
<title>/etc/hosts</title>

<para><anchor id="CFBSD-etc-hosts"/>
<indexterm><primary>/etc/hosts</primary></indexterm>
For a small network, especially if you're not permanently connected to the
Internet, you have the option of placing the addresses of the systems you want
to talk to in a file called
<filename></filename>/etc/hosts .
This file is simply a list of IP addresses and host names, for example:
</para>
<programlisting>
# Local network host addresses
#
# loopback address for all systems
127.1 loopback local localhost

###### domain example.com.
#
223.147.37.1   freebie freebie.example.org	  # FreeBSD 3.0
223.147.37.2   presto.example.org presto		  # 66 MHz 486 (BSD UNIX)
223.147.37.3   bumble bumble.example.org		  # 33 MHz 486 (UNIX SVR3.2)
223.147.37.4   wait wait.example.org			  # 33 MHz 486 (DOS)
223.147.37.129 solo solo.example.org   lxn	  # LXN
223.147.37.132 dinosaur dinosaur.example.org	  # 25 MHz 386 running DOS
223.147.37.133 andante andante.example.org	  # Toshiba laptop - 16 MHz 386SX
223.147.37.135 onlyyou onlyyou.example.org	  # Consensys Destiny machine
223.147.37.136 zaphod zaphod.example.org		  # 2-headed X machine
</programlisting>

<para>Obviously, you need to set up this file yourself, and you need it on every
machine on the network.  As you can see, a system can have more than one name:
just put as many names as you want behind the IP address.  This method is hard
to maintain: a better alternative is the Domain Name Service, which we discuss
in Chapter <xref linkend="CFBSD-nchdns"/>.
</para>
</sect2>
<sect2>
<title>/etc/hosts.equiv</title>

<para><indexterm><primary>/etc/hosts.equiv</primary></indexterm>
<filename></filename>/etc/hosts.equiv 
is a list of hosts whose users may use <emphasis>rsh</emphasis> to access this system without
supplying a password.  We'll look at it on page <xref linkend="CFBSD-hosts-equiv"/>.
</para>
</sect2>
<sect2>
<title>/etc/hosts.lpd</title>

<para><indexterm><primary>/etc/hosts.lpd</primary></indexterm>
<indexterm><primary>lpd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>lpd</secondary></indexterm>
<filename></filename>/etc/hosts.lpd
is a list of hosts which can use the <emphasis>lpd</emphasis> spooler on this system.
</para>
</sect2>
<sect2>
<title>/etc/inetd.conf</title>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
<indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
<filename></filename>/etc/inetd.conf 
is the configuration file for <emphasis>inetd</emphasis>, the Internet d&aelig;gmon.  It dates back
to the original implementation of TCP/IP in 4.2BSD, and the format is the same
for all versions of UNIX.  We have looked at various modifications to this file
throughout the network part of the book.  See the index (<emphasis>inetd.conf</emphasis>) and
the man page <emphasis>inetd.conf(5)</emphasis> for further details.
</para>
</sect2>
<sect2>
<title>/etc/namedb/named.conf</title>

<para><indexterm><primary>named</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>named</secondary></indexterm>
<indexterm><primary>/etc/named/named.conf</primary></indexterm>
<emphasis>/etc/named/named.conf</emphasis> is the main configuration file for <emphasis>named</emphasis>, the
Domain Name Service d&aelig;gmon.  We will look at it in <xref linkend="CFBSD-chdns"/>.  Previous
versions of <emphasis>named</emphasis> used a different form of configuration file which was
stored in <emphasis>/etc/named.boot</emphasis>.
</para>
</sect2>
<sect2>
<title>/etc/networks</title>

<para><indexterm><primary>/etc/networks</primary></indexterm>
<filename></filename>/etc/networks 
is a list of networks in the Internet.  Although this sounds
like a good idea, it is almost useless: if you connect to the Internet, you
should use a name server, which supplants this file.
</para>
</sect2>
<sect2>
<title>/etc/protocols</title>

<para><indexterm><primary>/etc/protocols</primary></indexterm>
<filename></filename>/etc/protocols 
is a list of known protocols which run on the IP layer.  This file should be
seen and not changed.
</para>
</sect2>
<sect2>
<title>/etc/rc.network</title>

<para><indexterm><primary>/etc/rc.network</primary></indexterm>
<filename></filename>/etc/rc.network 
is the main script which starts up the network.  You shouldn't need to change
this file.
</para>
</sect2>
<sect2>
<title>/etc/services</title>

<para><indexterm><primary>/etc/services</primary></indexterm>
<filename></filename>/etc/services ,
a list of the IP services which this system supports.  Like
<filename></filename>/etc/protocols ,
you should not change this file.
</para>
</sect2>
</sect1>
<sect1>
<title>Obsolete configuration files</title>

<para></para>
<sect2>
<title>/etc/sysconfig</title>

<para><indexterm><primary>/etc/sysconfig</primary></indexterm>
<filename></filename>/etc/sysconfig 
was a file which contained all the site-specific configuration definitions.  Its
name has been changed to
<filename></filename>/etc/rc.conf .
</para>
</sect2>
<sect2>
<title>/etc/netstart</title>

<para><indexterm><primary>/etc/netstart</primary></indexterm>
<indexterm><primary>/etc/rc</primary></indexterm>
<indexterm><primary>/etc/rc.network</primary></indexterm>
<filename></filename>/etc/netstart 
was a script called by
<filename></filename>/etc/rc 
to start up the network.  Its name has now been changed to
<filename></filename>/etc/rc.network .
FreeBSD still includes a file
<filename></filename>/etc/netstart ,
but its only purpose is to start the network in single-user mode.
</para>
</sect2>
</sect1>
<sect1>
<title>Shutting down the system</title>

<para><anchor id="CFBSD-shutdown"/>
<indexterm><primary>shutdown</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>shutdown</secondary></indexterm>
FreeBSD uses a number of sophisticated techniques to achieve its high
performance.  In particular, when you write data to a disk, the system doesn't
put it on the disk immediately: it waits for more data to arrive, which improves
performance dramatically, since it reduces the number of disk accesses by up to
several orders of magnitude.
</para>

<para><indexterm><primary>fsck</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fsck</secondary></indexterm>
The result of turning power off before the data is written is equally dramatic.
You may just lose the data, but if the data is information on a change in file
system structure, your file system will be broken.  To check for this, the
system runs a program called <emphasis>fsck</emphasis> (File System Check) at startup.
<emphasis>fsck</emphasis> can repair minor damage, but it's obviously a better idea to avoid
damage by ensuring that the system is shut down in an orderly way.
</para>
<note>

<para>Never stop your machine by just turning off the power.  The results could be
devastating.
</para>
</note>

<para></para>

<para>The correct way to shut a system down is with the <emphasis>shutdown</emphasis> command.  To
quote the man page <emphasis>shutdown(8)</emphasis>:
</para>

<para><indexterm><primary>hacker
</primary></indexterm>
<indexterm><primary>guru
</primary></indexterm>
<emphasis>Shutdown provides an automated shutdown procedure for super-users to nicely
notify users when the system is shutting down, saving them from system
administrators, hackers, and gurus, who would otherwise not bother with such
niceties.</emphasis>
</para>

<para>This command has a number of useful options:
</para>
<itemizedlist>
<listitem>

<para>Use the <emphasis>-r</emphasis> option to reboot the computer.  You sometimes need to do
this, for example after installing a new kernel.
</para>
</listitem>
<listitem>

<para>Use the <emphasis>-h</emphasis> option to stop the machine.  This is the normal case, but it
isn't the default.
</para>
</listitem>
<listitem>

<para>Without an option, <emphasis>shutdown</emphasis> attempts to put the machine in single user
mode.  This doesn't always work as well as booting in single user mode.
</para>
</listitem>
<listitem>

<para>Shutdown takes a time parameter which tells it when to actually perform the
shutdown.  This is useful in a multi-user environment, but normally you'll want
to shutdown now, so <emphasis>shutdown</emphasis> understands the keyword <emphasis>now</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>In the normal case, where you want to stop the machine right now so you can turn
the power off, you would type:
</para>
<programlisting>
# shutdown -h now
Feb  4 12:38:36 freebie shutdown: halt by grog:
Feb  4 12:38:39 freebie syslogd: exiting on signal 15

syncing disks... done

The operating system has halted.
Please press any key to reboot.
</programlisting>

<para>Be sure to wait for this message before you turn off the power.
</para>
<sect2>
<title>Rebooting</title>

<para>To reboot the machine, enter
</para>
<programlisting>
# <command>shutdown -r now</command>		<emphasis>or</emphasis>
# </emphasis><command>reboot				<emphasis>or</command>
<keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>DEL</keycap>
</programlisting>

<para></para>
</sect2>
</sect1>
</chapter>
\" This file is in -*- nroff-fill -*- mode
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchfilesys"><title>File systems</title>

<para><indexterm><primary>file</primary><secondary>system</secondary></indexterm>
One of the most far-reaching concepts of the UNIX operating system was its
<emphasis>file system</emphasis>, the way in which it stores data.  Although most other
operating systems have copied it since then, including Microsoft's platforms,
none have come close to the elegance with which it is implemented.  In this
chapter, we'll look at what that means to you.
</para>
<sect1>
<title>File systems</title>

<para><indexterm><primary>file</primary><secondary>systems</secondary></indexterm>
<indexterm><primary>directories</primary></indexterm>
<indexterm><primary>files</primary></indexterm>
<indexterm><primary>directories</primary></indexterm>
Both UNIX and Microsoft environments store disk data in <emphasis>files</emphasis>, which in
turn are placed in <emphasis>directories</emphasis>.  A file may be a directory: that is, it
may contain other files.
</para>
<sect2>
<sect3>
<title>File names</title>

<para><indexterm><primary>file</primary><secondary>names</secondary></indexterm>
<indexterm><primary>file</primary><secondary>name extension</secondary></indexterm>
The differences between UNIX and Microsoft start with <emphasis>file names</emphasis>.
Traditional Microsoft file names are rigid: a file name consists of eight
characters, possibly followed by a period and another three characters (the
so-called <emphasis>file name extension</emphasis>).  There are significant restrictions on
which characters may be used to form a file name, and upper and lower case
letters have the same meaning (internally, Microsoft converts the names to UPPER
CASE).  Directory members are selected with a backslash (<keycap>\e</keycap>), which
conflicts with other meanings in the C programming language&mdash;see page
<xref linkend="CFBSD-slash"/> for more details.
</para>

<para>By comparison, UNIX file names are much more flexible.  They may contain any
character except a slash (<emphasis>/</emphasis>), which is used to indicate a directory
component, and they may be up to 255 characters long.
</para>
<note>

<para>In some older versions of UNIX and early versions of Linux, file names were
restricted to 14 characters.
</para>
</note>

<para>Upper and lower case letters have different meanings, so in UNIX the names
<emphasis>foo</emphasis>, <emphasis>FOO</emphasis>, and <emphasis>Foo</emphasis> are three different names.
</para>
</sect3>
</sect2>
<sect2>
<title>Permissions</title>

<para><indexterm><primary>file</primary><secondary>permissions</secondary></indexterm>
<indexterm><primary>permissions</primary><secondary>file</secondary></indexterm>
<anchor id="CFBSD-permissions"/>
Since a UNIX system may potentially be used by many people, it includes a method
of protecting data from access by unauthorized persons.  Every file has three
items of information associated with it which describes who can access it in
what manner:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>file</primary><secondary>owner</secondary></indexterm>
The <emphasis>file owner</emphasis>, the user ID of the person who owns the file.
</para>
</listitem>
<listitem>

<para><indexterm><primary>file</primary><secondary>group</secondary></indexterm>
The <emphasis>file group</emphasis>, the group ID of the group which ``owns'' the file.
</para>
</listitem>
<listitem>

<para>A list of what the owner, the group and other people can do with the file.  The
possible actions are reading, writing or executing.
</para>
</listitem>
</itemizedlist>

<para>For example, you might have a program which accesses private data, and you want
to be sure that only you may execute it.  You do this by setting the permissions
so that only the owner may execute it.  Or you might have a text document in
development, and you want to be sure that you are the only person who can change
it.  On the other hand, the people who work with you have a need to be able to
refer to the document.  You set the permissions so that only the owner may write
it, that the owner and group may read it, and, since it's not ready for
publication yet, you don't allow anybody else to access it.
</para>

<para>Traditionally, the permissions are represented by three groups of <emphasis>rwx</emphasis>:
<emphasis>r</emphasis> stands for <emphasis>read</emphasis> permission, <emphasis>w</emphasis> stands for <emphasis>write</emphasis>
permission, and <emphasis>x</emphasis> stands for <emphasis>execute</emphasis> permission.  The three
groups represent the permissions for the owner, the group and others
respectively.  If the permission is not granted, it is represented by a hyphen
(<emphasis>-</emphasis>).
<!--  Hi, Jack :-) -->
Thus, the permissions for the program I discussed above would be
<emphasis>r-x------</emphasis> (I can read and execute the program, and nobody else can do
anything with it).  The permissions for the draft document would be
<emphasis>rw-r-----</emphasis> (I can read and write, the group can read, and others can't
access it).
</para>

<para><indexterm><primary>~/.rhosts</primary></indexterm>
Typical FreeBSD file access permissions are <emphasis>rwxr-xr-x</emphasis> for programs and
<emphasis>rw-r--r--</emphasis> for other system files.  In some cases, however, you'll find
that other permissions are <emphasis>required</emphasis>.  For example, the file
<emphasis>~/.rhosts</emphasis>, which is used by some network programs for user validation, may
contain the user's password in legible form.  To help ensure that other people
don't read it, the network programs will refuse to read it unless its
permissions are <emphasis>rw-------</emphasis>.  The vast majority of system problems in UNIX
can be traced to incorrect permissions, so you should pay particular attention
to them.
</para>

<para><indexterm><primary>permission</primary><secondary>setuid</secondary></indexterm>
<indexterm><primary>permission</primary><secondary>setgid</secondary></indexterm>
<indexterm><primary>setuid</primary></indexterm>
<indexterm><primary>set</primary><secondary>user ID</secondary></indexterm>
<indexterm><primary>setgid</primary></indexterm>
<indexterm><primary>set</primary><secondary>group</secondary></indexterm>
Apart from these access permissions, executables can also have two bits set to
specify the access permissions of the process when it is run.  If the
<emphasis>setuid</emphasis> (<emphasis>set user ID</emphasis>) bit is set, the process will always run as
if it had been started by its owner.  If the <emphasis>setgid</emphasis> (<emphasis>set group</emphasis>
ID) bit is set, it will run as if it had been started by its group.  This is
frequently used to start system programs which need to access resources which
the user may not access directly.  We'll see an example of this with the
<emphasis>ps</emphasis> command on page <xref linkend="CFBSD-ps-permissions"/>.  <emphasis>ls</emphasis> represents the
<emphasis>setuid</emphasis> bit by setting the third letter of the permissions string to
<emphasis>s</emphasis> instead of <emphasis>x</emphasis>; similarly, it represents the <emphasis>setgid</emphasis> bit
by setting the sixth letter of the permissions string to <emphasis>s</emphasis> instead of
<emphasis>x</emphasis>.
</para>

<para>In addition to this access information, the permissions contain a character
which describes what kind of file it represents.  The first letter may be a
<emphasis>-</emphasis> (hyphen), which designates a regular file, the letter <emphasis>d</emphasis> for
directory, or the letters <emphasis>b</emphasis> or <emphasis>c</emphasis> for a device node.  We'll look
at device nodes in <xref linkend="CFBSD-chdisks"/>, page
There are also a number of other letters which are less used.  See the man page
<emphasis>ls(1)</emphasis> for a full list.
</para>

<para><indexterm><primary>ls</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ls</secondary></indexterm>
To list files and show the permissions, use the <emphasis>ls</emphasis> command with the
<emphasis>-l</emphasis> option:
</para>
<programlisting>
$ <command>ls -l</command>
total 2429
-rw-rw-r--   1 grog     wheel       28204 Jan  4 14:17 %backup%~
drwxrwxr-x   3 grog     wheel         512 Oct 11 15:26 2.1.0-951005-SNAP
drwx------   4 grog     wheel         512 Nov 25 17:23 Mail
-rw-rw-r--   1 grog     wheel         149 Dec  4 14:18 Makefile
-rw-rw-r--   1 grog     wheel         108 Dec  4 12:36 Makefile.bak
-rw-rw-r--   1 grog     wheel         108 Dec  4 12:36 Makefile~
-rw-rw-r--   1 grog     wheel           0 Dec  4 12:36 depend
-rw-rw-r--   1 root     wheel     1474560 Dec 14 17:03 deppert.floppy
-rwxr-xr-x   1 grog     wheel         100 Dec 19 15:24 doio
-rwxrwxr-x   1 grog     wheel         204 Dec 19 15:25 doiovm
-rwxrwxr-x   1 grog     wheel         204 Dec 19 15:16 doiovm~
-rwxr-xr-x   1 grog     wheel         115 Dec 26 08:42 dovm
-rwxr-xr-x   1 grog     wheel         114 Dec 19 15:30 dovm~
drwxr-xr-x   2 grog     wheel         512 Oct 16  1994 emacs
drwxrwxrwx   2 grog     wheel         512 Jan  3 14:07 letters
</programlisting>

<para>This format shows the following information:
</para>
<itemizedlist>
<listitem>

<para>First, the permissions, which we've already looked at.
</para>
</listitem>
<listitem>

<para><indexterm><primary>link</primary><secondary>count</secondary></indexterm>
Then, the <emphasis>link count</emphasis>.  This is the number of hard links to the file.
For a regular file, this is normally 1, but directories have at least 2.  We'll
look at links on page <xref linkend="CFBSD-links"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>image</primary><secondary>floppy</secondary></indexterm>
<indexterm><primary>floppy</primary><secondary>image</secondary></indexterm>
<indexterm><primary>deppert
</primary></indexterm>
<indexterm><primary>Lincke</primary><secondary>Roland</secondary></indexterm>
Next come the names of the owner and the group, and the size of the file in
bytes.  You'll notice that the file <emphasis>deppert.floppy</emphasis> belongs to
<emphasis>root</emphasis>.  This was probably an accident, and it could lead to problems.
Incidentally, looking at the name of the file and its size, it's fairly obvious
that this is an <emphasis>image</emphasis> of a 3\(12<emphasis>"</emphasis> floppy, that is to say, a
literal copy of the complete floppy.
</para>
</listitem>
<listitem>

<para>The date is normally the date that the file was last modified.  With the
<emphasis>-u</emphasis> option to <emphasis>ls</emphasis>, you can list the last time the file was
accessed.
</para>
</listitem>
<listitem>

<para>Finally comes the name of the file.  As you can see from this example, the names
can be quite varied.
</para>
</listitem>
</itemizedlist>

<para>A couple of the permissions are of interest.  The directories all have the
<emphasis>x</emphasis> (execute) permission bit set.  This is necessary in order to be able
to access the files in the directory&mdash;that's the way the term <emphasis>execute</emphasis>
is defined for a directory.  If I reset the execute permission, I can still list
the names of the files, but I can't access them.
</para>

<para>I am the only person who can access the directory <emphasis>Mail</emphasis>.  This is the
normal permission for a mail directory.
</para>
<sect3>
<title>Changing file permissions and owners</title>

<para>Often enough, you may want to change file permissions or owners.  UNIX supplies
three programs to do this:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>chown</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chown</secondary></indexterm>
<indexterm><primary>deppert.floppy</primary></indexterm>
To change the file owner, use <emphasis>chown</emphasis>.  For example, to change the ownership
of the file <emphasis>deppert.floppy</emphasis>, which in the list above belongs to
<emphasis>root</emphasis>, <emphasis>root</emphasis> would enter:
</para>
<programlisting>
# <command>chown grog deppert.floppy</command>
</programlisting>

<para>Note that this operation must be performed by <emphasis>root</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>chgrp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chgrp</secondary></indexterm>
To change the file group, use <emphasis>chgrp</emphasis>, which works in the same way as
<emphasis>chown</emphasis>.  To change the group ownership to <emphasis>lemis</emphasis>, you would enter:
</para>
<programlisting>
# <command>chgrp lemis deppert.floppy</command>
</programlisting>

<para><emphasis>chown</emphasis> can also change both the owner and the group.  Instead of the two
previous examples, you could enter:
</para>
<programlisting>
# <command>chown grog.lemis deppert.floppy</command>
</programlisting>

<para>This would change the owner to <emphasis>grog</emphasis>, as before, and also change the
group to <emphasis>lemis</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>chmod</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chmod</secondary></indexterm>
To change the permissions, use the <emphasis>chmod</emphasis> program.  <emphasis>chmod</emphasis> has a
number of different formats, but unfortunately the 9-character representation
isn't one of them.  Read the man page <emphasis>chmod(1)</emphasis> for the full story, but
you can achieve just about anything you want with one of the formats shown in
table
<table frame='all'><title>chmod permission codes</title>
box, center,tab(#) ;
lfCWp9 | lw63 .
\s10Specification#Effect
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> go-w</entry><entry> Deny write permission to group and others
</entry></row>
<row><entry> =rw,+X</entry><entry> Set the read and write permissions to the usual defaults, but retain any execute permissions that are currently set
</entry></row>
<row><entry> +X</entry><entry> Make a directory or file searchable/executable by everyone if it is already searchable/executable by anyone
</entry></row>
<row><entry> u=rwx,go=rx</entry><entry> Make a file readable/executable by everyone and writable by the owner only
</entry></row>
<row><entry> go=</entry><entry> Clear all mode bits for group and others
</entry></row>
<row><entry> g=u-w</entry><entry> Set the group bits equal to the user bits, but clear the group write bit
</entry></row>
<row><entry>
</entry></row>
<!--  .TH N -->
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
<sect3>
<title>Permissions for new files</title>

<para><anchor id="CFBSD-umask"/>
<indexterm><primary>umask</primary></indexterm>
<indexterm><primary>User</primary><secondary>mask</secondary></indexterm>
None of this tells us what the permissions for new files are going to be.  The
wrong choice could be disastrous.  For example, if files were automatically
created with the permissions <emphasis>rwxrwxrwx</emphasis>, anybody could access them in any
way.  On the other hand, creating them with <emphasis>r--------</emphasis> could result in a
lot of work setting them to what you really want them to be.  UNIX solves this
problem with a thing called <emphasis>umask</emphasis> (<emphasis>User mask</emphasis>).  This is a
default non-permission: it specifies which permission bits <emphasis>not</emphasis> to allow.
</para>

<para>As if this weren't confusing enough, it's specified in the octal number system,
in which the valid digits are <emphasis>0</emphasis> to <emphasis>7</emphasis>.  Each octal digit
represents 3 bits.  By contrast, the more common hexadecimal system uses 16
digits, <emphasis>0</emphasis> to <emphasis>9</emphasis> and <emphasis>a</emphasis> to <emphasis>f</emphasis>.  The original
versions of UNIX ran on machines which used the octal number system, and since
the permissions come in threes, it made sense to leave the <emphasis>umask</emphasis> value
in octal.
</para>

<para>An example: by default, you want to create files which anybody can read, but
only you can write.  You set the mask to <emphasis>022</emphasis>.  This corresponds to the
binary bit pattern <emphasis>000010010</emphasis>.
</para>
<note>

<para>The leading <emphasis>0</emphasis> is needed to specify that the number is in octal, not to
make up three digits.  If you want to set the permissions so that by default
nobody can read, you'd set it to <emphasis>0222</emphasis>.  Some shells automatically assume
that the number is octal, so you <emphasis>may</emphasis> be able to omit the <emphasis>0</emphasis>, but
it's not good practice.
</para>
</note>

<para>The permissions are allowed where the corresponding bit is <emphasis>0</emphasis>:
</para>
<programlisting>
rwxrwxrwx		<emphasis>Possible permissions</emphasis>
000010010		<emphasis>umask</emphasis>
rwxr-xr-x		<emphasis>resultant permissions</emphasis>
</programlisting>

<para>By default, files are created without the <emphasis>x</emphasis> bits, whereas directories
are created with the allowed <emphasis>x</emphasis> bits, so with this <emphasis>umask</emphasis>, a file
would be created with the permissions <emphasis>rw-r--r--</emphasis>.
</para>

<para><emphasis>umask</emphasis> is a shell command.  To set it, just enter:
</para>
<programlisting>
$ <command>umask 022</command>
</programlisting>

<para>It's preferable to set this in your shell initialization file&mdash;see page
<xref linkend="CFBSD-bashrc"/> for further details.
</para>

<para>Beware of creating a too restrictive umask.  For example, you will get into a
lot of trouble with a umask like <emphasis>377</emphasis>, which creates files which you can
only read, and which nobody else can access.  If you disallow the <emphasis>x</emphasis>
(executable) bit, you will not be able to access directories you create, and you
won't be able to run programs you compile.
</para>
</sect3>
<sect3>
<title>Making a program executable</title>

<para><anchor id="CFBSD-ps-permissions"/>
File permissions enable one problem that occurs so often that it's worth drawing
attention to it.  Many operating systems require that an executable program have
a special naming convention, such as <emphasis>COMMAND.COM</emphasis> or <emphasis>FOO.BAT</emphasis>, which
in MS-DOS denotes a specific kind of binary executable and a script file,
respectively.  In UNIX, you don't need a special suffix in order to be able to
execute a program, but it must have the <emphasis>x</emphasis> bit set.  Sometimes this bit
gets reset (turned off), for example if you copy it across the net with
<emphasis>ftp</emphasis>.  The result looks like this:
</para>
<programlisting>
$ <command>ps</command>
bash: ps: Permission denied
$ <command>ls -l /bin/ps</command>
-r--r--r--  1 bin  kmem  163840 May  6 06:02 /bin/ps
$ </emphasis><command>su</command>							<emphasis>you need to be super user to set ps permission
Password:						<emphasis>password doesn't echo</emphasis>
# <command>chmod +x /bin/ps</emphasis>				<emphasis>make it executable</command>
# </emphasis><command>ps</command>							<emphasis>now it works
  PID  TT  STAT      TIME COMMAND
  226  p2  S      0:00.56 su (bash)
  239  p2  R+     0:00.02 ps
  146  v1  Is+    0:00.06 /usr/libexec/getty Pc ttyv1
  147  v2  Is+    0:00.05 /usr/libexec/getty Pc ttyv2
# </emphasis><command>^D</command>							<emphasis>exit su
$ <command>ps</command>
ps: /dev/mem: Permission denied		<emphasis>hey! it's stopped working</emphasis>
</programlisting>

<para>Huh?  It only worked under <emphasis>su</emphasis>, and stopped working when I became a mere
mortal again?  What's going on here?
</para>

<para><indexterm><primary>ps</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ps</secondary></indexterm>
<indexterm><primary>/dev/mem</primary></indexterm>
<indexterm><primary>setuid</primary></indexterm>
There's a second problem with privileged programs like <emphasis>ps</emphasis>: they need to
be able to access special files, in this case <emphasis>/dev/mem</emphasis>, a special file
which addresses the system memory.  In order to do this, we need to set the
<emphasis>setuid</emphasis> bit, <emphasis>s</emphasis>.  To do this, we become superuser again:
</para>
<programlisting>
$ </emphasis><command>su</command>							<emphasis>you need to be super user to set ps permission
Password:						<emphasis>password doesn't echo</emphasis>
# <command>chmod g+s /bin/ps</emphasis>				<emphasis>set the setgid bit</command>
# <command>ls -l /bin/ps</emphasis>					<emphasis>see what it looks like</command>
-r-xr-sr-x  1 bin  kmem  163840 May  6 06:02 /bin/ps
# </emphasis><command>^D</command>							<emphasis>exit su
$ </emphasis><command>ps</command>							<emphasis>now it still works
  PID  TT  STAT      TIME COMMAND
  226  p2  S      0:00.56 su (bash)
  239  p2  R+     0:00.02 ps
  146  v1  Is+    0:00.06 /usr/libexec/getty Pc ttyv1
  147  v2  Is+    0:00.05 /usr/libexec/getty Pc ttyv2
</programlisting>

<para>In this example, the permissions in the final result really are the correct
permissions for <emphasis>ps</emphasis>.  It's impossible to go through the permissions for
every standard program.  If you suspect that you have the permissions set
incorrectly, use the permissions of the files on the Live Filesystem CD-ROM as a
guideline.
</para>
</sect3>
<sect3>
<title>Links</title>

<para><anchor id="CFBSD-links"/>
<indexterm><primary>hard</primary><secondary>link</secondary></indexterm>
<indexterm><primary>link</primary><secondary>hard</secondary></indexterm>
<indexterm><primary>hard</primary><secondary>link</secondary></indexterm>
<indexterm><primary>link</primary><secondary>hard</secondary></indexterm>
Files may have more than one name.  There are two methods: one, called a
<emphasis>link</emphasis>, or sometimes <emphasis>hard link</emphasis>, really gives the same file two
different names.  There is a requirement that files be on the same file system
as the directory, so this method restricts the names to the same file system.
</para>

<para><indexterm><primary>symbolic</primary><secondary>link</secondary></indexterm>
<indexterm><primary>soft</primary><secondary>link</secondary></indexterm>
<indexterm><primary>link</primary><secondary>symbolic</secondary></indexterm>
<indexterm><primary>link</primary><secondary>soft</secondary></indexterm>
Alternatively, <emphasis>symbolic links</emphasis>, sometimes called <emphasis>soft links</emphasis>, are
not restricted to the same file system (not even to the same system!), and they
refer to another file name, not to the file itself.  The difference is most
evident if you delete a file: if the file has been hard linked, the other names
still exist and you can access the file by them.  If you delete a file name
which has a symbolic link pointing to it, the file will go away and the symbolic
link will not be able to find it any more.
</para>

<para>It's not easy to decide which kind of link to use&mdash;see <emphasis>UNIX Power Tools</emphasis>
for more details.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Directory structure</title>

<para><anchor id="CFBSD-directory-structure"/>
Although Microsoft platforms have a hierarchical directory structure, there is
little standardization of the directory names: it's difficult to know where a
particular program or data file might be.  UNIX systems have a standard
directory hierarchy, though every vendor loves to change it just a little bit to
ensure that they're not absolutely compatible.  In the course of its evolution,
UNIX has changed its directory structure several times.  Still, it's much better
than the almost complete lack of standardization in the Microsoft world.  The
most recent, and probably most far-reaching changes, occurred with System V.4
and 4.4BSD, both of which made almost identical changes.
</para>

<para><indexterm><primary>root</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<indexterm><primary>fsck</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fsck</secondary></indexterm>
<indexterm><primary>fsdb</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fsdb</secondary></indexterm>
<indexterm><primary>/usr</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/usr</secondary></indexterm>
<indexterm><primary>/</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/</secondary></indexterm>
Nearly every version of UNIX prefers to have at least two file systems,
<emphasis>/</emphasis> (the <emphasis>root file system</emphasis>) and <emphasis>/usr</emphasis>, even if they only have
a single disk.  This arrangement is more reliable than a single file system:
it's possible for a file system to crash so badly that it can't be mounted any
more, and you need to read in a tape backup, or use programs like <emphasis>fsck</emphasis>
or <emphasis>fsdb</emphasis> to piece them together.  If you have only one file system, you
may need to completely reinstall the system under these circumstances.  If,
however, you have a small root file system with only enough on it to get the
machine running in single user mode, you can subsequently recover the
<emphasis>/usr</emphasis> file system relatively easily.  If you also almost never write to
your root file system, the chances of damaging it are remote.
</para>

<para><anchor id="CFBSD-file-system-layout"/>
For these reasons, BSD systems like to have as small a root file system as
possible.  They store much of the data that System V stores in its root file
system in <emphasis>/usr</emphasis>.  You should never need a root file system with more than
40 MB, and I get by quite happily with 30 MB.
</para>

<para><indexterm><primary>/tmp</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/tmp</secondary></indexterm>
One problem with this method is the <emphasis>/tmp</emphasis> file system, which is normally
located on the root file system.  As its name implies, it is used to store
temporary files.  This creates two problems for this method:
</para>
<itemizedlist>
<listitem>

<para>If you create temporary files, you want to write to them, and we don't want to
write to the root file system if we can avoid it.
</para>
</listitem>
<listitem>

<para>The files may become large and fill up the file system.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/tmp</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/tmp</secondary></indexterm>
<indexterm><primary>/usr/tmp</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/usr/tmp</secondary></indexterm>
<indexterm><primary>/usr</primary></indexterm>
<indexterm><primary>directory</primary><secondary>/usr</secondary></indexterm>
The standard solution for these problems is to relocate the <emphasis>/tmp</emphasis> file
system to a different directory, say <emphasis>/usr/tmp</emphasis>, and create a symbolic link
from <emphasis>/usr/tmp</emphasis> to <emphasis>/tmp</emphasis>&mdash;see page <xref linkend="CFBSD-symlink-var"/> for more
details.  Table <xref linkend="CFBSD-hierarchy"/> gives an overview of the standard FreeBSD
directories.
</para>

<para><table frame='all'><title>FreeBSD directory hierarchy</title>
box,tab(#) ;
| lfI | lw62 | .
Directory
Name#Usage
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>/</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/</secondary></indexterm>
<row><entry> /</entry><entry> Root file system.  Contains the kernel, the bootstrap, and mount points for other file systems.  It should not contain anything else.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/bin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/bin</secondary></indexterm>
<row><entry> /bin</entry><entry> Executable programs of general use which are needed at system startup time.  The name was originally an abbreviation for <emphasis>binary</emphasis>, but many of the files in here are shell scripts.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/cdrom</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/cdrom</secondary></indexterm>
<row><entry> /cdrom</entry><entry> A mount point for CD-ROM drives
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/compat
</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/compat</secondary></indexterm>
<row><entry> /compat</entry><entry> A directory containing code for emulated systems, such as Linux.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/dev</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/dev</secondary></indexterm>
<row><entry> /dev</entry><entry> Directory of device nodes.  The name is an abbreviation for <emphasis>devices</emphasis>. We'll look at the contents of this directory in more detail on page
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/etc</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/etc</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/sbin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/sbin</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/etc</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/etc</secondary></indexterm>
<row><entry> /etc</entry><entry> Files used at system startup.  Unlike System V, <emphasis>/etc</emphasis> does not contain kernel build files, which are not needed at system startup.  Unlike earlier UNIX versions, it also does not contain executables&mdash;they have been moved to <emphasis>/sbin</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/proc</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/proc</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>process</primary><secondary>directory</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>process</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/stand/sysinstall</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/lib</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/lib</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/var</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/mnt</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/mnt</secondary></indexterm>
<row><entry> /mnt</entry><entry> A mount point for floppies and other temporary file systems
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>kernel</primary><secondary>loadable module</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/modules</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/modules</secondary></indexterm>
<row><entry> /modules</entry><entry> Directory containing <emphasis>kernel loadable modules</emphasis>, parts of the kernel which can be started at run time.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/proc</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/proc</secondary></indexterm>
<row><entry> /proc</entry><entry>
</entry></row>
<indexterm><primary>process</primary><secondary>file system</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<row><entry> The <emphasis>process file system</emphasis>.  This directory contains pseudo-files which refer to the virtual memory of currently active processes.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/root</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/root</secondary></indexterm>
<row><entry> /root</entry><entry> The home directory of the user <emphasis>root</emphasis>.  In traditional UNIX file systems, <emphasis>root</emphasis>'s home directory was <emphasis>/</emphasis>, but this is messy.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/sbin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/sbin</secondary></indexterm>
<row><entry> <emphasis>/sbin</entry><entry> System executables needed at system startup time.  These are typically system administration files that used to be stored in <emphasis>/etc</emphasis>.
</entry></row>
<indexterm><primary>/stand</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/stand</secondary></indexterm>
<row><entry> /stand</entry><entry> Directory with <emphasis>standalone</emphasis> programs.  In fact, most of the programs are the same file, <emphasis>/stand/sysinstall</emphasis>, which we discussed in great detail in <xref linkend="CFBSD-chinstall"/>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr</secondary></indexterm>
<row><entry> /usr</entry><entry> The ``second file system''.  See the discussion above.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/X11R6</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/X11R6</secondary></indexterm>
<row><entry> /usr/X11R6</entry><entry> The X11 windowing system
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/X11R6/bin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/X11R6/bin</secondary></indexterm>
<row><entry> /usr/X11R6/bin</entry><entry> Executable X11 programs
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/X11R6/include</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/X11R6/include</secondary></indexterm>
<row><entry> /usr/X11R6/include</entry><entry> Header files for X11 programming
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/X11R6/lib</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/X11R6/lib</secondary></indexterm>
<row><entry> /usr/X11R6/lib</entry><entry> Library files for X11
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/X11R6/man</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/X11R6/man</secondary></indexterm>
<row><entry> /usr/X11R6/man</entry><entry> Man pages for X11
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/bin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/bin</secondary></indexterm>
<row><entry> /usr/bin</entry><entry> Standard executable programs that are not needed at system start.  Most programs you use will be stored here.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/games</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/games</secondary></indexterm>
<row><entry> /usr/games</entry><entry> Games
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/include</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/include</secondary></indexterm>
<row><entry> /usr/include</entry><entry> Header files for programmers
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/lib</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/lib</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/lib</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/lib</secondary></indexterm>
<row><entry> /usr/lib</entry><entry> Library files for programmers.  FreeBSD does not have a directory <emphasis>/lib</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/libexec</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/libexec</secondary></indexterm>
<row><entry> /usr/libexec</entry><entry> Executable files which are not started directly by the user, for example the phases of the C compiler (which are started by <emphasis>/usr/bin/gcc</emphasis>) or the
</entry></row>
<indexterm><primary>/usr/bin/gcc</primary></indexterm>
<row><entry> <emphasis>getty</emphasis> program, which is started by <emphasis>init</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/local</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/local</secondary></indexterm>
<row><entry> /usr/local</entry><entry> Additional programs which are not part of the operating system.  It parallels the <emphasis>/usr</emphasis> directory in having subdirectories <emphasis>bin</emphasis>, <emphasis>include</emphasis>, <emphasis>lib</emphasis>, <emphasis>man</emphasis>, <emphasis>sbin</emphasis>, and <emphasis>share</emphasis>.  This is where you can put programs which you get from other sources.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/sbin</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/sbin</secondary></indexterm>
<row><entry> /usr/sbin</entry><entry> System administration programs which are not needed at system startup.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/share</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/usr/share</secondary></indexterm>
<row><entry> /usr/share</entry><entry> Miscellaneous read-only files, mainly informative.  Subdirectories include <emphasis>doc</emphasis>, the FreeBSD documentation, <emphasis>games</emphasis>, <emphasis>info</emphasis>, the GNU <emphasis>info</emphasis> documentation, <emphasis>locale</emphasis>, internationization information, and <emphasis>man</emphasis>, the man pages.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/var</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var</secondary></indexterm>
<row><entry> /var</entry><entry> A file system for data which changes frequently, such as mail, news, and log files.  If <emphasis>/var</emphasis> is not a separate file system, you should create a directory on another file system and symlink <emphasis>/var</emphasis> to it&mdash;see page <xref linkend="CFBSD-symlink-var"/>).
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/var/log</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var/log</secondary></indexterm>
<row><entry> /var/log</entry><entry> Directory with system log files
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/var/mail</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var/mail</secondary></indexterm>
<row><entry> /var/mail</entry><entry> Incoming mail for users on this system
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/var/spool</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var/spool</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/var/spool/lpd</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/var/spool/mqueue</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/var/spool/uucp</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/var/spool/ftp</primary></indexterm>
<row><entry> /var/spool</entry><entry> Spool data, such as data waiting to be printed (<emphasis>/var/spool/lpd</emphasis>), <emphasis>/var/spool/mqueue</emphasis> (outgoing mail), UUCP data (<emphasis>/var/spool/uucp</emphasis>), and <emphasis>/var/spool/ftp</emphasis> (anonymous FTP).
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/var/tmp</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>directory</primary><secondary>/var/tmp</secondary></indexterm>
<row><entry> /var/tmp</entry><entry> Temporary files.  See the discussion above.
</entry></row>
</tbody></tgroup></table>
</emphasis></para>
</sect1>
<sect1>
<title>FreeBSD devices</title>

<para><anchor id="CFBSD-devices"/>
<indexterm><primary>major</primary><secondary>number</secondary></indexterm>
<indexterm><primary>minor</primary><secondary>number</secondary></indexterm>
<indexterm><primary>block</primary><secondary>device</secondary></indexterm>
<indexterm><primary>character</primary><secondary>device</secondary></indexterm>
Like all traditional UNIX systems, FreeBSD refers to devices by a <emphasis>major
number</emphasis> and a <emphasis>minor number</emphasis>.  The major number is in fact an index into a
list of drivers, and the minor number is a number which the driver uses to
distinguish the individual device and how it should treat it.  FreeBSD also
distinguishes between <emphasis>block devices</emphasis>, on which you can store a file system,
and <emphasis>character devices</emphasis>, which do not.  Block devices have a corresponding
raw device which is used for some purposes, such as file system consistency
checks.  You can see this information in an <emphasis>ls -l</emphasis> listing:
</para>
<programlisting>
$ <command>ls -l /dev/rfd0 /dev/rft0 /dev/ft0 /dev/fd0</command>
brw-r-----  9 root  operator    2,   0 Nov 12 13:32 /dev/fd0
brw-r-----  2 root  operator    2,  32 Nov 12 13:33 /dev/ft0
crw-r-----  9 root  operator    9,   0 Nov 12 13:32 /dev/rfd0
crw-r-----  2 root  operator    9,  32 Oct 31 19:59 /dev/rft0
</programlisting>

<para><indexterm><primary>fd0</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>fd0</secondary></indexterm>
The letter at the beginning of the permissions shows that <emphasis>/dev/fd0</emphasis> and
<emphasis>/dev/ft0</emphasis> are block devices, and <emphasis>/dev/rfd0</emphasis> and <emphasis>/dev/rft0</emphasis>
are character devices.  The major number of the character devices is <emphasis>9</emphasis>,
and the major number of the block devices is <emphasis>2</emphasis>.  In each case, they are
separated from the minor number by a comma.
</para>

<para><indexterm><primary>floppy</primary><secondary>tape</secondary></indexterm>
If you find a strange device which isn't listed here, you might get an idea from
the company it keeps: here, for example, we know that <emphasis>/dev/fd0</emphasis> is a
floppy disk, and since the same driver also handles <emphasis>/dev/ft0</emphasis>, it's
reasonable to assume that it has something to do with a floppy disk.  In fact,
<emphasis>/dev/ft0</emphasis> is the <emphasis>floppy tape</emphasis> driver, which handles tape drives
connected to the floppy disk controller.
</para>
<sect2>
<sect3>
<title>Long minor numbers</title>

<para>Traditionally, major and minor numbers are stored in the same machine word.
Originally, the word was 16 bits long, and the major and minor numbers were each
8 bit quantities, which limited their maximum values to 255.  Then System V.4
increased the word size to 32 bits, and gave 14 bits to the major numbers and 18
bits to the minor numbers, giving maximum values of 16383 and 262143
respectively.  4.4BSD also introduced 32 bit device numbers, but left the major
number in the same place, and left it 8 bits long.  The minor number takes up
the rest of the word, and is thus 24 bits long with a hole in the middle.
</para>

<para>Here's a overview:
</para>

<para>h = .2i
dh = .02i
dw = .8i
move.25i
[
        Caps: [
                boxht = h; boxwid = dw
		   box invis "<emphasis>Byte</emphasis>"
                A: box invis "\s10<emphasis>0</emphasis>\s0"
                B: box invis "\s10<emphasis>1</emphasis>\s0"
                C: box invis "\s10<emphasis>2</emphasis>\s0"
                D: box invis "\s10<emphasis>3</emphasis>\s0"
      ]
        Trad: [
                boxht = h; boxwid = dw
		   box invis "traditional"
		box invis
		box invis
                A: box "major"
                B: box "minor"
      ]   at Caps.s - (0, h)
        SVR4: [
		boxht = h; boxwid = dw
		boxht = h;
		box invis "System V.4"
		box wid dw * 1.75 "major (14 bits)"
                box wid dw * 2.25 "minor (18 bits)"
      ]   at Trad.s - (0, h)
        BSD44: [
		boxht = h; boxwid = dw
		box invis "FreeBSD"
		box wid dw * 2 "more minor"
		box "major"
		box "minor"
      ]   at SVR4.s - (0, h)
]
</para>

<para><figure><title>Major and minor numbers</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
FreeBSD uses the high-order minor for very special devices, such as control
ports for disks.  Normally, you'll never see them, but if you <emphasis>do</emphasis> find a
minor number in the millions, it's not a bug, it's a feature.
</para>
</sect3>
</sect2>
<sect2>
<title>Creating new device nodes</title>

<para><anchor id="CFBSD-MAKEDEV"/>
<indexterm><primary>mknod</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mknod</secondary></indexterm>
<indexterm><primary>/dev/MAKEDEV</primary></indexterm>
<indexterm><primary>MAKEDEV</primary><secondary>script</secondary></indexterm>
<indexterm><primary>script</primary><secondary>MAKEDEV</secondary></indexterm>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
Just because the system supports a device doesn't mean that it automatically has
a name.  The name is an entry in the <emphasis>/dev</emphasis> directory, and needs to be
added manually.  If you boot a different kernel, you may have a mismatch between
your <emphasis>/dev</emphasis> directory and your kernel&mdash;either you have names for devices
which aren't included in the kernel, or you don't have names for devices which
are included in the kernel.  In addition, some devices don't have device nodes,
for example Ethernet interfaces: they are treated differently by the
<emphasis>ifconfig</emphasis> program.
</para>

<para><indexterm><primary>mknod</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mknod</secondary></indexterm>
As a result, you may have to create device nodes in order to access the devices.
For example, the system supports any combination of SCSI devices on a
controller, up to seven of them, but by default only one tape and four disks are
configured.  If you add a second tape drive or a fifth SCSI disk, you will need
to add device nodes to be able to talk to them.  You can do this the hard way or
the easy way.  The hard way uses the <emphasis>mknod</emphasis> command (see the man page
<emphasis>mknod(8)</emphasis>).
<indexterm><primary>/dev/MAKEDEV</primary></indexterm>
The easy way uses the script <emphasis>/dev/MAKEDEV</emphasis>.  For example, by default
FreeBSD only supplies definitions for four SCSI disks.  If you add a
fifth SCSI disk, enter:
</para>
<programlisting>
# <command>cd /dev</command>
# <command>./MAKEDEV da4</emphasis>				<emphasis>create the device</command>
# <command>./MAKEDEV da4s0a</emphasis>			<emphasis>create the slice entries too</command>
</programlisting>

<para><emphasis>MAKEDEV</emphasis> assumes that you are in the <emphasis>/dev</emphasis> directory, as indicated
in this example.
</para>

<para>The names that <emphasis>MAKEDEV</emphasis> chooses aren't the most intuitive.  You may have
difficulty deciding how to tell it to build the devices you want.  Here's an
overview:
<table frame='all'><title>Parameters for <emphasis>MAKEDEV</emphasis></title>
box,center,tab(#) ;
lfCWp9 | lw67 .
\s10Parameter#Function
_

<tgroup cols='5' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> all</entry><entry> Make all known devices, with a standard number of units.  Beware of this option: it first removes any device nodes in <emphasis>/dev</emphasis>.  std</entry><entry> Makes ``standard'' devices  local</entry><entry> Configuration specific devices  mach-4</entry><entry> Devices for Mach's XFree86 distribution.  See <emphasis>http://www.cs.hut.fi/lites.html</emphasis> for more info on LITES.
</entry></row>
<row><entry> wt*</entry><entry> QIC-02 interfaced cartridge tape.  Don't use this for SCSI tape.  sa*</entry><entry> SCSI tape drives.  ft*</entry><entry> QIC-40/QIC-80 cartridge tapes interfaced via the floppy disk controller.
</entry></row>
<row><entry> wd*</entry><entry> ST506, IDE, ESDI, RLL and similar disk drives.  fd*</entry><entry> Floppy disk drives, both 3\(12" and 5\(14"  da*</entry><entry> SCSI disks  cd*</entry><entry> SCSI CD-ROM drives  mcd*</entry><entry> Mitsumi CD-ROM drives  scd*</entry><entry> Sony CD-ROM drives  matcd*</entry><entry> Matsushita and Panasonic CD-ROM drives  wcd*</entry><entry> IDE (ATAPI) CD-ROM drives  vn*</entry><entry> ``vnode'' virtual disks.  od*</entry><entry> Optical disks
</entry></row>
<row><entry> vty*</entry><entry> Virtual console devices for <emphasis>syscons</emphasis> and <emphasis>pcvt</emphasis>
</entry></row>
<row><entry> mse*</entry><entry> Logitech and ATI Inport bus mouse  psm*</entry><entry> PS/2 mouse  sysmouse</entry><entry> Mousesystems mouse emulator for <emphasis>syscons</emphasis>
</entry></row>
<row><entry> refclock-*</entry><entry> Serial ports used by <emphasis>xntpd</emphasis> parse refclocks.
</entry></row>
<row><entry> tty*</entry><entry> General purpose serial ports  cua*</entry><entry> Dialout serial ports  ttyA*</entry><entry> Specialix SI/XIO dialin ports  cuaA*</entry><entry> Specialix SI/XIO dialout ports  ttyD*</entry><entry> Digiboard - 16 dialin ports  cuaD*</entry><entry> Digiboard - 16 dialout ports  pty*</entry><entry> Set of 32 master and slave pseudo terminals  vty*</entry><entry> Virtual terminals using <emphasis>syscons</emphasis> and <emphasis>pcvt</emphasis> console drivers.
</entry></row>
<row><entry> lpt*</entry><entry> Standard parallel printer.
</entry></row>
<row><entry> uk*</entry><entry> ``unknown'' SCSI device (supports ioctl calls only).  worm*</entry><entry> WORM driver.  pt*</entry><entry> SCSI processor type (scanners, for example)  PC-CARD</entry><entry> PC-CARD (previously called PCMCIA) support  card*</entry><entry> PC-CARD slots
</entry></row>
<row><entry> apm</entry><entry> Advanced Power Management BIOS  bpf*</entry><entry> Berkeley packet filter  speaker</entry><entry> PC speaker  tw*</entry><entry> xten power controller  snd*</entry><entry> various sound cards  pcaudio</entry><entry> PCM audio driver  socksys</entry><entry> iBCS2 socket system driver  vat</entry><entry> VAT compatibility audio driver (requires snd*)  gsc</entry><entry> Genius GS-4500 hand scanner  joy</entry><entry> PC joystick  tun*</entry><entry> Tunneling IP device  snp*</entry><entry> tty snoop devices  spigot</entry><entry> Video Spigot video acquisition card  ctx*</entry><entry> Cortex-I video acquisition card  meteor*</entry><entry> Matrox Meteor video acquisition card (PCI)  bktr*</entry><entry> Bt848 based video acquisition card (PCI)   qcam*</entry><entry> Connectix QuickCam\(tm parallel port camera  isdn*</entry><entry> ISDN devices  labpc*</entry><entry> National Instrument's Lab-PC and LAB-PC+  perfmon</entry><entry> CPU performance-monitoring counters  pci</entry><entry> PCI configuration-space access from user mode
</entry></row>
</tbody></tgroup></table>
The asterisk (<emphasis>*</emphasis>) after some names indicates that you should specify the
number of devices to create.  Be careful here: the number of devices is not the
number of the last device.  If you specify, say, <emphasis>tty8</emphasis>, <emphasis>MAKEDEV</emphasis>
will create the devices <emphasis>/dev/tty0</emphasis> to <emphasis>/dev/tty7</emphasis>: it will not
create a <emphasis>/dev/tty8</emphasis>.
</para>

<para>Also be careful of <emphasis>./MAKEDEV all</emphasis>: it first removes existing entries.  If
this happens to you, you can remake them again with a more specific application,
such as in the example above.
</para>
</sect2>
<sect2>
<title>File system types</title>

<para><anchor id="CFBSD-fs-types"/>
FreeBSD supports a number of file system types.  The most important are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>ufs</primary></indexterm>
<indexterm><primary>UNIX</primary><secondary>File System</secondary></indexterm>
<emphasis>ufs</emphasis> is the <emphasis>UNIX File System</emphasis>.  All native disk files are of this
type.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-RockRidge"/>
<indexterm><primary>cd9660</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>Rock</primary><secondary>Ridge Extensions</secondary></indexterm>
<emphasis>cd9660</emphasis> is the ISO 9660 CD-ROM format with the so-called <emphasis>Rock Ridge
Extensions</emphasis> which enable UNIX-like file names to be used.  Use this file
system type for all CD-ROMs, even if they don't have the Rock Ridge Extensions.
</para>
</listitem>
<listitem>

<para><indexterm><primary>nfs</primary></indexterm>
<indexterm><primary>Network</primary><secondary>File System</secondary></indexterm>
<emphasis>nfs</emphasis> is the <emphasis>Network File System</emphasis>, a means of sharing file systems
across a network.  We'll look at it in <xref linkend="CFBSD-chnfs"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>msdos</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<anchor id="CFBSD-msdosfs"/>
<indexterm><primary>mount_msdos</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount_msdos</secondary></indexterm>
You can access Microsoft files with the <emphasis>msdos</emphasis> and <emphasis>ntfs</emphasis> file
systems.  See the man page <emphasis>mount_msdos(8)</emphasis> and page <emphasis>mount_ntfs(8)<emphasis>
for further details.
</para>
</listitem>
</itemizedlist>

<para></emphasis></emphasis></para>
</sect2>
<sect2>
<title>Mounting file systems</title>

<para><indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
<indexterm><primary>/cdrom</primary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<indexterm><primary>/cd0</primary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<anchor id="CFBSD-mount"/>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<indexterm><primary>root</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>mounting</primary></indexterm>
<indexterm><primary>CD-ROM</primary><secondary>mounting</secondary></indexterm>
Microsoft platforms identify partitions by letters which are assigned at boot
time.  There is no obvious relation between the partitions, and you have little
control over the way the system assigns them.  By contrast, all UNIX partitions
have a specific relation to the <emphasis>root file system</emphasis>, which is called simply
<emphasis>/</emphasis>.  This flexibility has one problem: you have the choice of where in the
overall file system structure you put your individual file systems.  You specify
the location with the <emphasis>mount</emphasis> command.  For example, you would typically
mount a CD-ROM in the directory <emphasis>/cdrom</emphasis>, but if you have three CD-ROM
drives attached to your SCSI controller, you might prefer to mount them in the
directories <emphasis>/cd0</emphasis>, <emphasis>/cd1</emphasis>, and <emphasis>/cd2</emphasis>.
<footnote>

<para>This numbering is in keeping with the UNIX tradition of numbering starting from
0.  There's nothing to stop you choosing some other name, of course.
</para>
</footnote>
In order to mount a file system, you need to specify the device to be mounted,
where it is to be mounted, and the type of file system (unless it is ufs).  The
<emphasis>mount point</emphasis>, (the directory where it is to be mounted) must already exist.
To mount your second CD-ROM on <emphasis>/cd1</emphasis>, you would enter:
</para>
<programlisting>
# <command>mkdir /cd1</emphasis>				<emphasis>only if it doesn't exist</command>
# <command>mount -t cd9660 -o ro /dev/cd1a /cd1</command>
</programlisting>

<para><indexterm><primary>/etc/rc</primary></indexterm>
<indexterm><primary>/etc/fstab</primary></indexterm>
When the system boots, it calls the startup script <emphasis>/etc/rc</emphasis>, which amongst
other things automatically mounts the file systems.  All you need to do is to
supply the information: what is to be mounted, and where?  This is in the file
<emphasis>/etc/fstab</emphasis>.  If you come from a System V environment, you'll notice
significant difference in format&mdash;see the man page <emphasis>fstab(5)</emphasis> for the
full story.  A typical <emphasis>/etc/fstab</emphasis> might look like:
</para>
<programlisting>
/dev/wd0a       /               ufs     rw 1 1	<emphasis>root file system</emphasis>
/dev/wd0s1b     none            swap    sw 0 0	<emphasis>swap</emphasis>
/dev/wd0s1e     /usr            ufs     rw 2 2	<emphasis>/usr file system</emphasis>
/dev/sd1e       /src            ufs     rw 2 2	<emphasis>additional file system</emphasis>
proc            /proc           procfs  rw 0 0	<emphasis>proc pseudo-file system</emphasis>
/dev/cd0a       /cdrom          cd9660  ro 0 0	<emphasis>CD-ROM</emphasis>
presto:/        /presto/root    nfs     rw 0 0	<emphasis>NFS file systems on other systems</emphasis>
presto:/usr     /presto/usr     nfs     rw 0 0
presto:/home    /presto/home    nfs     rw 0 0
presto:/S       /S              nfs     rw 0 0
radio:/C        /C              nfs     rw 0 0
</programlisting>

<para>The format of the file is reasonably intelligible:
</para>
<itemizedlist>
<listitem>

<para>The first column gives the name of the device (if it's a real file system), or
the name of the remote file system for NFS mounts.
</para>
</listitem>
<listitem>

<para>The second column specifies the mount point.
</para>
</listitem>
<listitem>

<para>The third column specifies the type of file system.  Local file systems on hard
disk are always <emphasis>ufs</emphasis>, and file systems on CD-ROM are <emphasis>cd9660</emphasis>.  Remote
file systems are always <emphasis>nfs</emphasis>.  Specify swap partitions with <emphasis>swap</emphasis>,
and the <emphasis>proc</emphasis> file system with <emphasis>proc</emphasis>.
</para>
</listitem>
<listitem>

<para>The fourth column contains <emphasis>rw</emphasis> for file systems which can be read or
written, <emphasis>ro</emphasis> for file systems (like CD-ROM) which can only be written,
and <emphasis>sw</emphasis> for swap partitions.
</para>
</listitem>
<listitem>

<para>The fifth and sixth columns are used by the <emphasis>dump</emphasis> and <emphasis>fsck</emphasis>
programs.  You won't normally need to change them.  Enter <emphasis>1</emphasis> for a root
file system, <emphasis>2</emphasis> for other ufs file systems, and 0 for everything else.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Unmounting file systems</title>

<para>When you mount a file system, the system assumes it is going to stay there, and
in the interests of efficiency it delays writing data back to the file system.
This is the same effect we discussed on page <xref linkend="CFBSD-shutdown"/>.  As a result, if you
want to stop using a file system, you need to tell the system about it.  You do
this with the <emphasis>umount</emphasis> command.  Note the spelling&mdash;there's no <keycap>n</keycap>
in the command name.
</para>

<para>You need to do this even with read-only media such as CD-ROMs: the system
assumes it can access the data from a mounted file system, and it gets quite
unhappy if it can't.  Where possible, it locks removable media so that you can't
remove them from the device until you unmount them.
</para>

<para>Using <emphasis>umount</emphasis> is straightforward: just tell it what to unmount, either
the device name or the directory name.  For example, to unmount the CD-ROM we
mounted in the example above, you could enter one of these commands:
</para>
<programlisting>
# <command>umount /dev/cd1a</command>
# <command>umount /cd1</command>
</programlisting>

<para>Before unmounting a file system, <emphasis>umount</emphasis> checks that nobody is using it.
If somebody is using it, it will refuse to unmount it with a message like
<emphasis>umount: /cd1: Device busy</emphasis>.  This message often occurs because you have
changed your directory to a directory on the file system you want to remove.
For example (which also shows the usefulness of having directory names in the
prompt):
</para>
<programlisting>
=== root@freebie (/dev/ttyp2) /cd1 16 -&gt; <command>umount /cd1</command>
umount: /cd1: Device busy
=== root@freebie (/dev/ttyp2) /cd1 17 -&gt; <command>cd</command>
=== root@freebie (/dev/ttyp2) ~ 18 -&gt; <command>umount /cd1</command>
=== root@freebie (/dev/ttyp2) ~ 19 -&gt;
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Overview of FreeBSD devices</title>

<para><anchor id="CFBSD-FreeBSD-devices"/>
Every UNIX system has its own peculiarities when it comes to device names and
usage.  Even if you're used to UNIX, you'll find the following table useful.
<indexterm><primary>devices</primary><secondary>overview</secondary></indexterm>
<table frame='all'><title>FreeBSD device names</title>
box,tab(#) ;
| lfCWp9 | lw68 | .
\s10Device#Description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>fd/0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd/0</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>fd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0a</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>fd0c</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0c</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>bpf0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>bpf0</secondary></indexterm>
<row><entry> bpf0</entry><entry> Berkeley packet filter&mdash;see the description of <emphasis>bpfilter</emphasis> on page <xref linkend="CFBSD-config-bpfilter"/>
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>cd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cd0a</secondary></indexterm>
<row><entry> cd0a</entry><entry> First SCSI CD-ROM drive
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ch0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ch0</secondary></indexterm>
<row><entry> ch0</entry><entry> SCSI CD-ROM changer (juke box)
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>console</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>console</secondary></indexterm>
<row><entry> console</entry><entry> System console, the device which receives console messages.  Initially it is /dev/ttyv0, but it can be changed
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>cuaa0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cuaa0</secondary></indexterm>
<row><entry> cuaa0</entry><entry> First serial port in callout mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>cuaia0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cuaia0</secondary></indexterm>
<row><entry> cuaia0</entry><entry> First serial port in callout mode, initial state.  Note the letter <emphasis>i</emphasis> for <emphasis>initial</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>cuala0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cuala0</secondary></indexterm>
<row><entry> cuala0</entry><entry> First serial port in callout mode, lock state.  Note the letter <emphasis>l</emphasis> for <emphasis>lock</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>da0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>da0</secondary></indexterm>
<row><entry> da0</entry><entry> First SCSI disk drive, block device.  See <xref linkend="CFBSD-chconcepts"/>, page <xref linkend="CFBSD-disk-partitions"/>, for a complete list of disk drive names.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>drum</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>drum</secondary></indexterm>
<row><entry> drum</entry><entry> System paging device (i.e. swap partition).  The name reminds of the days when the system really did page to a magnetic drum.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ersa0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ersa0</secondary></indexterm>
<row><entry> ersa0</entry><entry> First SCSI tape drive, eject on close mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fd</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd</secondary></indexterm>
<row><entry> fd</entry><entry> File descriptor pseudo-devices: a directory containing pseudo-devices which, when opened, return a duplicate of the file descriptor with the same number. For example, if you open <emphasis>/dev/fd/0</emphasis>, you will get another handle on your <emphasis>stdin</emphasis> stream (file descriptor 0).
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0</secondary></indexterm>
<row><entry> fd0</entry><entry> The first floppy disk drive, accessed as a file system
</entry></row>
<!--  XXX .sp .3v -->
<row><entry>
</entry></row>
<indexterm><primary>fd0.1200</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0.1200</secondary></indexterm>
<row><entry> fd0.1200</entry><entry> The first floppy disk drive, accessed as a 5\(14<emphasis>"</emphasis> drive file system (1200 kB)
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fd0.1440</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0.1440</secondary></indexterm>
<row><entry> fd0.1440</entry><entry> The first floppy disk drive, accessed as a 3\(12<emphasis>"</emphasis> drive file system (1440 kB)
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>fd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fd0a</secondary></indexterm>
<row><entry> fd0a</entry><entry> The first floppy disk drive, accessed as a file system.  Floppy disks are not partitioned in the same way as hard disks, and the names <emphasis>fd0a</emphasis>, <emphasis>fd0b</emphasis>, <emphasis>fd0c</emphasis>, <emphasis>fd0d</emphasis>, <emphasis>fd0e</emphasis>, <emphasis>fd0f</emphasis>, <emphasis>fd0g</emphasis>, and <emphasis>fd0h</emphasis> all refer to the same device.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ft0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ft0</secondary></indexterm>
<row><entry> ft0</entry><entry> ``Floppy tape'': A device for QIC-40 and QIC-80 tape devices.  These devices are not fully supported as tape drives&mdash;see the man page on the system for more details.
</entry></row>
<row><entry>
</entry></row>
<!--  io -->
<row><entry>
</entry></row>
<!--  klog -->
<row><entry>
</entry></row>
<indexterm><primary>kmem</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>kmem</secondary></indexterm>
<row><entry> kmem</entry><entry> Kernel virtual memory pseudo-device
</entry></row>
<row><entry>
</entry></row>
<!--  log -->
<row><entry>
</entry></row>
<indexterm><primary>bit</primary><secondary>bucket</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>lpctl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>lpctl0</secondary></indexterm>
<row><entry> lpctl0</entry><entry> Control port of first parallel printer
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>lpt0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>lpt0</secondary></indexterm>
<row><entry> lpt0</entry><entry> First parallel printer
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>matcd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>matcd0a</secondary></indexterm>
<row><entry> matcd0a</entry><entry> Matsushita CD-ROM
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>matcd0la</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>matcd0la</secondary></indexterm>
<row><entry> matcd0la</entry><entry> Matsushita CD-ROM with tray locking: the CD-ROM cannot be removed from the drive until it is unmounted
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>mcd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mcd0a</secondary></indexterm>
<row><entry> mcd0a</entry><entry> Mitsumi CD-ROM
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>mem</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mem</secondary></indexterm>
<row><entry> mem</entry><entry> Physical virtual memory pseudo-device
</entry></row>
<row><entry> mse0</entry><entry> Bus mouse
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>nrsa0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>nrsa0</secondary></indexterm>
<row><entry> nrsa0</entry><entry> First SCSI tape drive, no-rewind mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>nrwt0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>nrwt0</secondary></indexterm>
<row><entry> nrwt0</entry><entry> First QIC-36 tape drive, no-rewind mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>null</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>null</secondary></indexterm>
<row><entry> null</entry><entry> The ``bit bucket''.  Write data to this device if you never want to see it again.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ptyp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ptyp0</secondary></indexterm>
<row><entry> ptyp0</entry><entry> First master pseudo-terminal.  Master pseudo-terminals are named <emphasis>ptyp0</emphasis> through <emphasis>ptypv</emphasis>, <emphasis>ptyq0</emphasis> through <emphasis>ptyqv</emphasis>, <emphasis>ptyr0</emphasis> through <emphasis>ptyrv</emphasis>, <emphasis>ptys0</emphasis> through <emphasis>ptysv</emphasis>, <emphasis>ptyP0</emphasis> through <emphasis>ptyPv</emphasis>, <emphasis>ptyQ0</emphasis> through <emphasis>ptyQv</emphasis>, <emphasis>ptyR0</emphasis> through <emphasis>ptyRv</emphasis> and <emphasis>ptyS0</emphasis> through <emphasis>ptySv</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rcd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rcd0a</secondary></indexterm>
<row><entry> rcd0a</entry><entry> First SCSI CD-ROM drive, raw access
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rch0.ctl</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rch0.ctl</secondary></indexterm>
<row><entry> rch0.ctl</entry><entry> SCSI CD-ROM changer (juke box)
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rda0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rda0</secondary></indexterm>
<row><entry> rda0</entry><entry> First SCSI disk drive, raw mode.  See <xref linkend="CFBSD-chconcepts"/>, page <xref linkend="CFBSD-disk-partitions"/>, for a complete list of disk drive names.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rfd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rfd0</secondary></indexterm>
<row><entry> rfd0</entry><entry> The first floppy disk drive, raw mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rft0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rft0</secondary></indexterm>
<row><entry> rft0</entry><entry> ``Floppy tape'', raw mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rmatcd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rmatcd0a</secondary></indexterm>
<row><entry> rmatcd0a</entry><entry> Matsushita CD-ROM, raw mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rmatcd0la</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rmatcd0la</secondary></indexterm>
<row><entry> rmatcd0la</entry><entry> Matsushita CD-ROM with tray locking, raw mode
</entry></row>
<!--  XXX .sp .3v -->
<row><entry>
</entry></row>
<indexterm><primary>rmcd0c</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rmcd0c</secondary></indexterm>
<row><entry> rmcd0c</entry><entry> Mitsumi CD-ROM, raw mode for playing audio
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-rsa0"/>
<row><entry>
</entry></row>
<indexterm><primary>rsa0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rsa0</secondary></indexterm>
<row><entry> rsa0</entry><entry> First SCSI tape drive, rewind on close mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rscd0c</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rscd0c</secondary></indexterm>
<row><entry> rscd0c</entry><entry> Sony CD-ROM with proprietary interface, raw mode for playing audio
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rwd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rwd0</secondary></indexterm>
<row><entry> rwd0</entry><entry> First IDE or similar disk drive, raw mode.  See <xref linkend="CFBSD-chconcepts"/>, page <xref linkend="CFBSD-disk-partitions"/>, for a complete list of disk drive names.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>rwt0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rwt0</secondary></indexterm>
<row><entry> rwt0</entry><entry> First QIC-36 tape drive, rewind mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>scd0a</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>scd0a</secondary></indexterm>
<row><entry> scd0a</entry><entry> Sony CD-ROM with proprietary interface
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>speaker</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>speaker</secondary></indexterm>
<row><entry> speaker</entry><entry> PC speaker device
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>tty</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>tty</secondary></indexterm>
<row><entry> tty</entry><entry> Current controlling terminal
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ttyd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyd0</secondary></indexterm>
<row><entry> ttyd0</entry><entry> First serial port in callin mode
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ttyid0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyid0</secondary></indexterm>
<row><entry> ttyid0</entry><entry> First serial port in callin mode, initial state
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ttyld0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyld0</secondary></indexterm>
<row><entry> ttyld0</entry><entry> First serial port in callin mode, lock state
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-pty-devname"/>
<row><entry>
</entry></row>
<indexterm><primary>ttyp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyp0</secondary></indexterm>
<row><entry> ttyp0</entry><entry> First slave pseudo-terminal.  Slave pseudo-terminals are named <emphasis>ttyp0</emphasis> through <emphasis>ttypv</emphasis>, <emphasis>ttyq0</emphasis> through <emphasis>ttyqv</emphasis>, <emphasis>ttyr0</emphasis> through <emphasis>ttyrv</emphasis>, <emphasis>ttys0</emphasis> through <emphasis>ttysv</emphasis>, <emphasis>ttyP0</emphasis> through <emphasis>ttyPv</emphasis>, <emphasis>ttyQ0</emphasis> through <emphasis>ttyQv</emphasis>, <emphasis>ttyR0</emphasis> through <emphasis>ttyRv</emphasis> and <emphasis>ttyS0</emphasis> through <emphasis>ttySv</emphasis>.  Some processes, such as <emphasis>xterm</emphasis>, only look at <emphasis>ttyp0</emphasis> through <emphasis>ttysv</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ttyv0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyv0</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/etc/ttys</primary></indexterm>
<row><entry> ttyv0</entry><entry> First virtual tty.  This is the display with which the system starts.  Up to 10 virtual ttys can be activated by adding the appropriate <emphasis>getty</emphasis> information in the file <emphasis>/etc/ttys</emphasis>.  See <xref linkend="CFBSD-chmodems"/>, page <xref linkend="CFBSD-dialin"/>, for further details.
</entry></row>
<row><entry>
</entry></row>
<!--  tun0#  -->
<!--  Tunnel driver, used for -->
<row><entry>
</entry></row>
<indexterm><primary>tw0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>tw0</secondary></indexterm>
<row><entry> tw0</entry><entry> TW-523 power line interface driver
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>ttyv0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ttyv0</secondary></indexterm>
<row><entry> ttyv0</entry><entry> Console virtual terminals
</entry></row>
<row><entry>
</entry></row>
<!--  XXX wcd0c -->
<row><entry>
</entry></row>
<indexterm><primary>wd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>wd0</secondary></indexterm>
<row><entry> wd0</entry><entry> First IDE or similar disk drive, block device.  See <xref linkend="CFBSD-chconcepts"/>, page <xref linkend="CFBSD-disk-partitions"/>, for a complete list of disk drive names.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>zero</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>zero</secondary></indexterm>
<row><entry> zero</entry><entry> Dummy device which always returns the value <emphasis>0</emphasis> when read
</entry></row>
</tbody></tgroup></table>
You'll note a number of different modes associated with the serial ports.  See
\&amp;<xref linkend="CFBSD-chmodems"/>, page <xref linkend="CFBSD-serial-hardware"/>, for more details.
</para>
</sect2>
</sect1>
<sect1>
<title>Virtual terminals</title>

<para><anchor id="CFBSD-vt"/>
<indexterm><primary>virtual</primary><secondary>terminal</secondary></indexterm>
<indexterm><primary>terminal</primary><secondary>virtual</secondary></indexterm>
<indexterm><primary>/dev/ttyv0</primary></indexterm>
<indexterm><primary>/etc/ttys</primary></indexterm>
As we have seen, UNIX is a multitasking operating system, but a PC generally
only has one screen.  FreeBSD solves this problem with <emphasis>virtual
terminals</emphasis>.  When in text mode, you can change between up to 16 different
screens with the combination of the <keycap>Alt</keycap> key and a function key.  The
devices are named <emphasis>/dev/ttyv0</emphasis> through <emphasis>/dev/ttyv15</emphasis>, and
correspond to the keystrokes <keycap>Alt-F1</keycap> through <keycap>Alt-F16</keycap>.  By default,
three virtual terminals are active: <emphasis>/dev/ttyv0</emphasis> through
<emphasis>/dev/ttyv2</emphasis>.  The system console is the virtual terminal
<emphasis>/dev/ttyv0</emphasis>, and that's what you see when you boot the machine.  To
activate additional virtual terminals, edit the file <emphasis>/etc/ttys</emphasis>.  There
you will find:
</para>
<programlisting>
ttyv0	"/usr/libexec/getty Pc"		cons25	on  secure
<!--  # Virtual terminals -->
ttyv1	"/usr/libexec/getty Pc"		cons25	on  secure
ttyv2	"/usr/libexec/getty Pc"		cons25	on  secure
ttyv3	"/usr/libexec/getty Pc"		cons25	off secure
</programlisting>

<para>The keywords <emphasis>on</emphasis> and <emphasis>off</emphasis> refer to the state of the terminal: to
enable one, set its state to <emphasis>on</emphasis>.  To enable extra virtual terminals, add
a line with the corresponding terminal name, in the range <emphasis>/dev/ttyv4</emphasis> to
<emphasis>/dev/ttyv15</emphasis>.
</para>

<para><indexterm><primary>/dev</primary></indexterm>
<indexterm><primary>/dev/MAKEDEV</primary></indexterm>
<indexterm><primary>mknod</primary><secondary>command</secondary></indexterm>
<indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mknod</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
In addition, you may need to create the device nodes if they don't already
exist.  By default, the system contains four virtual terminal devices in the
<emphasis>/dev</emphasis> directory.  If you use more than this number, you must create them,
either with <emphasis>MAKEDEV</emphasis> (see page <xref linkend="CFBSD-MAKEDEV"/>), or with <emphasis>mknod</emphasis> (see
page <emphasis>mknod(8)</emphasis>).  When calculating how many devices you need, note that
if you intend to run X11, you need a terminal device without a <emphasis>getty</emphasis> for
the X server.  For example, if you have enabled <emphasis>/dev/ttyv3</emphasis>,
<emphasis>/dev/ttyv4</emphasis>, and <emphasis>/dev/ttyv5</emphasis>, and you also want to run X, you will
need a total of 7 virtual terminals (<emphasis>/dev/ttyv0</emphasis> through
<emphasis>/dev/ttyv6</emphasis>).  With <emphasis>MAKEDEV</emphasis>, you specify how many virtual terminals
you need:
</para>
<programlisting>
# <command>cd /dev<emphasis>
# </emphasis></command><command>./MAKEDEV vty7		<emphasis>make 7 vtys<emphasis>
</emphasis></emphasis></command></programlisting>

<para>Alternatively, you can do this with <emphasis>mknod</emphasis>:
</para>
<programlisting>
# <command>cd /dev<emphasis>
# </emphasis></command><command>ls -l ttyv0<emphasis>
crw-------  1 root  wheel   12,   0 Nov 28 10:25 ttyv0
# </emphasis></command><command>mknod ttyv3 c 12 3<emphasis>
# </emphasis></command><command>mknod ttyv4 c 12 4<emphasis>
# </emphasis></command><command>mknod ttyv5 c 12 5<emphasis>
# </emphasis></command><command>mknod ttyv6 c 12 6<emphasis>
</emphasis></command></programlisting>

<para><indexterm><primary>major</primary><secondary>device number</secondary></indexterm>
<indexterm><primary>mknod</primary></indexterm>
In this example, you list the entry for <emphasis>/dev/ttyv0</emphasis> in order to check the
<emphasis>major device number</emphasis> of the virtual terminals (that's the <emphasis>12,</emphasis> in
this example; it may change from one release to another).  You need to specify
this number to <emphasis>mknod</emphasis>.  For more details about major and minor device
numbers, see page <xref linkend="CFBSD-devices"/>.
</para>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
After you have edited <emphasis>/etc/ttys</emphasis>, and possibly created the device nodes,
you need to tell the system to re-read it in order to start the terminals.  Do
this as <emphasis>root</emphasis> with this command:
</para>
<programlisting>
# <command>kill -1 1</command>
</programlisting>

<para><indexterm><primary>init</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>init</secondary></indexterm>
Process 1 is <emphasis>init</emphasis>&mdash;see page <xref linkend="CFBSD-init"/> for more details.
</para>
<sect2>
<title>Pseudo-terminals</title>

<para><anchor id="CFBSD-ptys"/>
<indexterm><primary>pty</primary></indexterm>
<indexterm><primary>pity</primary></indexterm>
<indexterm><primary>pseudo-terminal</primary></indexterm>
<indexterm><primary>master</primary><secondary>device</secondary></indexterm>
<indexterm><primary>/dev/ptyp0</primary></indexterm>
<indexterm><primary>slave</primary><secondary>device</secondary></indexterm>
<indexterm><primary>/dev/ttyp0</primary></indexterm>
In addition to virtual terminals, FreeBSD offers an additional class of
terminals called <emphasis>pseudo-terminals</emphasis>.  They come in pairs: a <emphasis>master
device</emphasis>, also called a <emphasis>pty</emphasis> (pronounced <emphasis>pity</emphasis>) is used only by
processes which use the interface, and has a name like <emphasis>/dev/ptyp0</emphasis>.  The
<emphasis>slave device</emphasis> looks like a terminal, and has a name like
<emphasis>/dev/ttyp0</emphasis>.  Any process can open it without any special knowledge of the
interface.  These terminals are used for network connections such as
<emphasis>xterm</emphasis>, <emphasis>telnet</emphasis> and <emphasis>rlogin</emphasis>.  You don't need a <emphasis>getty</emphasis>
for pseudo-terminals.
</para>

<para>You need one pseudo-terminal for each terminal-like connection, for example for
an <emphasis>xterm</emphasis>.  It's quite easy to run out of them; if you do, you can
configure more&mdash;see page <xref linkend="CFBSD-config-pty"/>.  In addition, generate the device
nodes.  For example, to generate a second set of 32 pseudo-terminals, enter:
</para>
<programlisting>
# <command>cd /dev</command>
# <command>./MAKEDEV pty1</command>
</programlisting>

<para>You can generate up to 256 pseudo-terminals.  They are named <emphasis>ttyp0</emphasis>
through <emphasis>ttypv</emphasis>, <emphasis>ttyq0</emphasis> through <emphasis>ttyqv</emphasis>, <emphasis>ttyr0</emphasis> through
<emphasis>ttyrv</emphasis>, <emphasis>ttys0</emphasis> through <emphasis>ttysv</emphasis>, <emphasis>ttyP0</emphasis> through
<emphasis>ttyPv</emphasis>, <emphasis>ttyQ0</emphasis> through <emphasis>ttyQv</emphasis>, <emphasis>ttyR0</emphasis> through
<emphasis>ttyRv</emphasis> and <emphasis>ttyS0</emphasis> through <emphasis>ttySv</emphasis>.  To create each set of 32
terminals, use the number of the set: the first set is <emphasis>pty0</emphasis>, and the
eighth set is <emphasis>pty7</emphasis>.  Note that some processes, such as <emphasis>xterm</emphasis>, only
look at <emphasis>ttyp0</emphasis> through <emphasis>ttysv</emphasis>.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchdisks"><title>Disks</title>

<para>One of the most important parts of running any computer system is handling data
on disk.  We have already looked at UNIX file handling in <xref linkend="CFBSD-chfilesys"/>.  In
this chapter, we'll look at two ways to add another disk to your system.
</para>
<sect1>
<title>Adding a hard disk</title>

<para><indexterm><primary>adding</primary><secondary>hard disk</secondary></indexterm>
<indexterm><primary>disk</primary><secondary>adding</secondary></indexterm>
<anchor id="CFBSD-second-disk"/>
When you installed FreeBSD, you created file systems on a first hard disk.  At
the same time you had the option of creating file systems on other disks on the
system.  As I said at the time, it's a good thing to do it then, because it's
<emphasis>much</emphasis> easier that way.  Unfortunately, that's not always possible: you
might decide that you need more disk space, and so you buy a new hard disk.  In
this section, we'll look at how to set it up to work under FreeBSD.
</para>

<para><indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
The real problem with adding a second disk is that the ``easy-to-use'' programs
to set them up are not always 100% reliable, and you may need to do everything
by hand.  It is possible to use <emphasis>sysinstall</emphasis> to do the job, but there are
a few nasty rough corners that you might run up against.  In this section we'll
look at <emphasis>sysinstall</emphasis>, and on page <xref linkend="CFBSD-the-hard-way"/> we'll see how to do it
manually if <emphasis>sysinstall</emphasis> won't cooperate.
</para>

<para>We've been through all the details of disk layout and slices and partitions in
<xref linkend="CFBSD-chconcepts"/>, so I won't repeat them here.  Basically, to add a new disk to
the system, you need to:
</para>
<itemizedlist>
<listitem>

<para>Possibly, format the disk.  More and more, modern disks come pre-formatted, and
you will only need to format them if there are defects on the disk, or if it's
ancient.
</para>
</listitem>
<listitem>

<para>If you want to share with other operating systems, create a Microsoft style
partition table on the disk.  We looked at the concepts on page
</para>
</listitem>
<listitem>

<para>Define a FreeBSD slice (which Microsoft calls a ``partition'').
</para>
</listitem>
<listitem>

<para>Define the partitions in the FreeBSD slice.
</para>
</listitem>
<listitem>

<para>Tell the system about the file systems and where to mount them.
</para>
</listitem>
<listitem>

<para>Create the file systems.
</para>
</listitem>
</itemizedlist>

<para>These are exactly the same operations as we performed in <xref linkend="CFBSD-chinstall"/>.
</para>
<sect2>
<title>Disk hardware installation</title>

<para><indexterm><primary>installing</primary><secondary>disk hardware</secondary></indexterm>
<indexterm><primary>disks</primary><secondary>installing hardware</secondary></indexterm>
Before you can do anything with the disk, you have to install it in the system.
To do this, you shut down the system and turn the power off.  If the disk is
IDE, and you already have an IDE disk on the controller, you need to set the
second disk as ``slave'' drive.  <emphasis>And</emphasis> you may have to set the first disk
as ``master'' drive: if you only have one drive, you don't set any jumpers, but
if you have two drives, some disks require you to set jumpers on both disks.  If
you don't do this, the system will appear to hang during the power-on self test,
and will finally report some kind of disk error.
</para>

<para>Adding a SCSI disk is more complicated.  Up to 8 SCSI devices can be connected
to most systems (newer SCSI variants allow 16), but this number includes the
host adapter.  Typically, your first SCSI disk will have the SCSI ID 0, and the
host adapter will have the SCSI ID 7.  Traditionally, the IDs 4, 5, and 6 are
reserved for tape and CD-ROM drives, and the IDs 0 to 3 are reserved for disks,
though FreeBSD doesn't impose any restrictions on what goes where.
</para>

<para><indexterm><primary>dmesg</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>dmesg</secondary></indexterm>
Whatever kind of disk you're adding, look at the boot messages, which you can
retrieve with the <emphasis>dmesg</emphasis> command.  For example, if you're planning to add
a SCSI device, you might see:
</para>
<programlisting>
ahc0: &lt;Adaptec 2940 SCSI adapter&gt; rev 0x03 int a irq 11 on pci0.9.0
ahc0: aic7870 Single Channel A, SCSI Id=7, 16/255 SCBs
\&amp;<emphasis>further down...</emphasis>
Waiting 3 seconds for SCSI devices to settle
sa0 at ahc0 bus 0 target 3 lun 0
sa0: &lt;EXABYTE EXB-8505SMBANSH2 0793&gt; Removable Sequential Access SCSI-2 device
sa0: 5.000MB/s transfers (5.000MHz, offset 11)
sa1 at ahc0 bus 0 target 4 lun 0
sa1: &lt;ARCHIVE Python 28849-XXX 4.CM&gt; Removable Sequential Access SCSI-2 device
sa1: 5.000MB/s transfers (5.000MHz, offset 15)
sa2 at ahc0 bus 0 target 5 lun 0
sa2: &lt;TANDBERG TDC 3800 -03:&gt; Removable Sequential Access SCSI-CCS device
sa2: 3.300MB/s transfers
pass4 at ahc0 bus 0 target 4 lun 1
pass4: &lt;ARCHIVE Python 28849-XXX 4.CM&gt; Removable Changer SCSI-2 device
pass4: 5.000MB/s transfers (5.000MHz, offset 15)
da0 at ahc0 bus 0 target 2 lun 0
da0: &lt;CONNER CFP4207S  4.28GB 2847&gt; Fixed Direct Access SCSI-2 device
da0: 3.300MB/s transfers, Tagged Queueing Enabled
da0: 4096MB (8388608 512 byte sectors: 64H 32S/T 4096C)
cd0 at ahc0 bus 0 target 6 lun 0
cd0: &lt;NRC MBR-7 110&gt; Removable CD-ROM SCSI-2 device
cd0: 3.300MB/s transfers
cd0: cd present [322265 x 2048 byte records]
changing root device to wd0s1a
</programlisting>

<para><indexterm><primary>SCSI</primary><secondary>target</secondary></indexterm>
<indexterm><primary>target</primary><secondary>SCSI</secondary></indexterm>
<indexterm><primary>SCSI</primary><secondary>logical unit</secondary></indexterm>
<indexterm><primary>logical</primary><secondary>unit</secondary></indexterm>
<indexterm><primary>LUN</primary></indexterm>
</para>

<para>This output shows three tape drives (<emphasis>sa0</emphasis>, <emphasis>sa1</emphasis> and <emphasis>sa2</emphasis>), a
CD-ROM drive (<emphasis>cd0</emphasis>), a tape changer (<emphasis>pass4</emphasis>), and also a disk
drive <emphasis>da0</emphasis> on target 2.
</para>
<sect3>
<title>Installing an external SCSI device</title>

<para><indexterm><primary>installing</primary><secondary>an external SCSI device</secondary></indexterm>
<indexterm><primary>SCSI</primary><secondary>installing an external device</secondary></indexterm>
<indexterm><primary>daisy</primary><secondary>chaining</secondary></indexterm>
<indexterm><primary>SCSI</primary><secondary>terminator</secondary></indexterm>
<indexterm><primary>terminator</primary><secondary>SCSI</secondary></indexterm>
External SCSI devices are connected together by cables.  Each device has two
connectors: one goes towards the host adapter, and the other towards the next
device.  This method is called <emphasis>daisy chaining</emphasis>.  At the end of the chain,
the spare connector is usually plugged with a <emphasis>terminator</emphasis>, a set of
resistors designed to keep noise off the bus.  Some devices have internal
terminators, however.  When installing an external device, you will have to do
one of the following:
</para>
<itemizedlist>
<listitem>

<para>If you are installing a first external device (one connected via the cable
connector on the backplane of the host adapter), you will have to ensure that
the device provides termination.  Assuming you already have an internal device,
you will also have to stop the host adapter from providing termination.  Modern
SCSI host adapters can decide whether they need to terminate or not, but older
host adapters have resistor packs.  In the latter case, remove these resistor
packs.
</para>
</listitem>
<listitem>

<para>If you are adding an additional external device, you have two choices: you can
remove a cable in the middle of the daisy chain and plug it into your new
device.  You then connect a new cable from your device to the device from which
you removed the original cable.
</para>
</listitem>
<listitem>

<para>Alternatively, you can add the device at the end of the chain.  Remove the
terminator or turn off the termination, and plug your cable into the spare
socket.  Insert the terminator in your device (or turn termination on).
</para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
<sect3>
<title>Installing an internal SCSI device</title>

<para><indexterm><primary>installing</primary><secondary>an internal SCSI device</secondary></indexterm>
<indexterm><primary>SCSI</primary><secondary>installing an internal device</secondary></indexterm>
Installing an internal SCSI device is much the same as installing an external
device.  Instead of daisy chains, you have a flat band cable with a number of
connectors.  Find one which suits you, and plug it into the device.  Again, you
need to think about termination:
</para>
<itemizedlist>
<listitem>

<para>If you are installing the device at the end of the chain, it should have
termination enabled.  You should also remove the terminators from the device
that was previously at the end of the chain.
</para>
</listitem>
<listitem>

<para>If you are installing the device in the middle of the chain, make sure it does
not have termination enabled.
</para>
</listitem>
</itemizedlist>

<para>In this case, we'll install a CDC 94181 drive in the existing SCSI chain.  We
could be in for a surprise: the device ID we get for the new drive depends on
what is currently on the chain.  For example, we might have a chain with a
single drive on it:
</para>
<programlisting>
da0 at ahc0 bus 0 target 2 lun 0
da0: &lt;CONNER CFP4207S  4.28GB 2847&gt; Fixed Direct Access SCSI-2 device
da0: 3.300MB/s transfers, Tagged Queueing Enabled
da0: 4096MB (8388608 512 byte sectors: 64H 32S/T 4096C)
</programlisting>

<para>This drive on target 2.  If we put our new drive on target 0 and reboot, we see:
</para>
<programlisting>
da0 at ahc0 bus 0 target 0 lun 0
da0: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da0: 3.300MB/s transfers
da0: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
da1 at ahc0 bus 0 target 2 lun 0
da1: &lt;CONNER CFP4207S  4.28GB 2847&gt; Fixed Direct Access SCSI-2 device
da1: 3.300MB/s transfers, Tagged Queueing Enabled
da1: 4096MB (8388608 512 byte sectors: 64H 32S/T 4096C)
</programlisting>

<para>Since the target ID of the new disk is lower than the target ID of the old disk,
the system recognizes the new disk as <emphasis>da0</emphasis>, and our previous <emphasis>da0</emphasis>
has become <emphasis>da1</emphasis>.
</para>

<para>This change of disk ID can be a problem.  You'll have to edit <emphasis>/etc/fstab</emphasis>
in order to be able to mount any file systems which are on the disk.
Alternatively, you can wire down the device names&mdash;see page <xref linkend="CFBSD-wiring"/> for
more details.  The alternative is to change the SCSI IDs.  We do that, and the
CDC drive becomes <emphasis>da1</emphasis>:
</para>
<programlisting>
da0 at ahc0 bus 0 target 0 lun 0
da0: &lt;CONNER CFP4207S  4.28GB 2847&gt; Fixed Direct Access SCSI-2 device
da0: 3.300MB/s transfers, Tagged Queueing Enabled
da0: 4096MB (8388608 512 byte sectors: 64H 32S/T 4096C)
da1 at ahc0 bus 0 target 2 lun 0
da1: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da1: 3.300MB/s transfers
da1: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Formatting the disk</title>

<para><indexterm><primary>formatting</primary><secondary>disks</secondary></indexterm>
<indexterm><primary>disks</primary><secondary>formatting</secondary></indexterm>
<indexterm><primary>low-level</primary><secondary>format</secondary></indexterm>
<indexterm><primary>format</primary><secondary>low-level</secondary></indexterm>
<anchor id="CFBSD-format-disk"/>
Formatting is the process of rewriting every sector on the disk with a specific
data pattern, one that the electronics find most difficult to reproduce: if they
can read this pattern, they can read anything.  Microsoft calls this a
<emphasis>low-level format</emphasis>.  Obviously it destroys any existing data, so
</para>
<note>

<para>If you have anything you want to keep, back it up before formatting.
</para>
</note>

<para>Most modern disks don't need formatting unless they're damaged.  In particular,
formatting will not help if you're having configuration problems, if you can't
get PPP to work, or you're running out of disk space.
<footnote>

<para>Well, it <emphasis>will</emphasis> solve the disk space problem, but not in the manner you
probably desire.
</para>
</footnote>
</para>

<para>If you do need to format a SCSI disk, use <emphasis>camcontrol</emphasis>.  <emphasis>camcontrol</emphasis>
is a control program for SCSI devices, and it includes a lot of useful functions
which you can read about in the man page.  To format a disk, use the following
syntax:
</para>
<programlisting>
# <command>camcontrol format da0</command>
</programlisting>

<para>At the time of writing, the <emphasis>format</emphasis> subcommand of <emphasis>camcontrol</emphasis> has
not been implemented.  If it doesn't work for you, you can go back to basics and
issue the raw SCSI format command with this invocation:
</para>
<programlisting>
# <command>camcontrol cmd -n da -u 0 -v -t 7200 -c "4 0 0 0 0 0"</command>
</programlisting>

<para>Note that here you specify the name of the disk as the type (<emphasis>da</emphasis>) and the
unit number (<emphasis>-u 0)</emphasis>.  If you wanted to format <emphasis>/dev/da9</emphasis>, you would
use the option <emphasis>-u 9</emphasis>.
</para>

<para>The other parameters are:
</para>
<itemizedlist>
<listitem>

<para><emphasis>-v</emphasis>: be verbose.
</para>
</listitem>
<listitem>

<para><emphasis>-t 7200</emphasis>: time out after two hours (7200 seconds).  On a very large disk,
you may find that two hours is not enough to format it.  In this case, you'll
need to increase this value.
</para>

<para>If the format finishes very quickly&mdash;in about 5 minutes&mdash;there's a good
chance that it is faking the FORMAT UNIT command.  It doesn't support it, so it
just goes away and returns in a few minutes having done nothing.
</para>
</listitem>
<listitem>

<para><emphasis>-c "4 0 0 0 0 0"</emphasis> is the SCSI ``FORMAT UNIT'' command.  The disk goes
away and formats itself.
</para>
</listitem>
</itemizedlist>

<para></para>
<note>

<para>Remember that low level formatting a disk destroys all data on the disk.  Before
using the command, make sure that you need to do so: there are relatively few
cases that call for low-level formatting a disk.  About the only reasons are if
you want to change the physical sector size of the disk, or if you are getting
``medium format corrupted'' errors from the disk in response to read and write
requests.
</para>
</note>

<para>FreeBSD can format only floppies and SCSI disks.  If you find you have to format
an IDE disk, you'll have to use the format utility in your system BIOS.
Fortunately, you almost never need to reformat a disk.
</para>
</sect2>
</sect1>
<sect1>
<title>Using sysinstall</title>

<para><indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
If you can, use <emphasis>sysinstall</emphasis> to partition your disk.  Looking at the
<emphasis>dmesg</emphasis> output for our CDC 94181 SCSI disk, we see:
</para>
<programlisting>
da1 at ahc0 bus 0 target 2 lun 0
da1: &lt;CDC 94181-15 0293&gt; Fixed Direct Access SCSI-CCS device
da1: 3.300MB/s transfers
da1: 573MB (1173930 512 byte sectors: 64H 32S/T 573C)
</programlisting>

<para>We start <emphasis>sysinstall</emphasis> with:
</para>
<programlisting>
# /stand/sysinstall
</programlisting>

<para>You will see the standard installation screen (see <xref linkend="CFBSD-chinstall"/>, page
<xref linkend="CFBSD-sysinstall-main"/>).  Select <emphasis>Index</emphasis>, then <emphasis>Partition</emphasis>, and you
will see the following screen:
</para>

<para>Don't be put off by the drive names <emphasis>sd0</emphasis> and <emphasis>sd1</emphasis>.  These are the
old names for the SCSI drives <emphasis>da0</emphasis> and <emphasis>da1</emphasis>.  Currently,
<emphasis>sysinstall</emphasis> shows both the old and the new names.
</para>

<para>In this case, we want to partition <emphasis>/dev/da1</emphasis>, so we position the cursor on
<emphasis>da0</emphasis> (as shown) and press <keycap>Space</keycap> (not <keycap>Enter</keycap>; that would just
take us back to the previous menu).  At this point you may see a warning message
that the drive geometry is incorrect.  If you do, it's probably a bug: we saw in
the <emphasis>dmesg</emphasis> output that the probes had no trouble with the geometry, and
geometry is not of great importance for a SCSI drive anyway: you only need it if
you want to boot from the drive.  If you get this message, you press <keycap>Enter</keycap>
to continue.
</para>

<para>Next, we see:
</para>

<para></para>

<para>Here we see that the disk currently contains three partitions:
</para>
<itemizedlist>
<listitem>

<para>The first starts at offset 0, and has a length of 12.  This is <emphasis>not</emphasis>
unused, no matter what the description says.  It's the partition table, padded
to the length of a ``track''.
</para>
</listitem>
<listitem>

<para>The next partition takes up the bulk of the drive and is the current FreeBSD
partition.
</para>
</listitem>
<listitem>

<para>Finally, we have 90 sectors left over as a result of the partitioning scheme.
Sometimes this can be much larger&mdash;I have seen values as high as 35 MB.  This
is the price we pay for compatibility with Microsoft partitioning.
</para>
</listitem>
</itemizedlist>

<para><anchor id="CFBSD-dangerously-dedicated"/>
We're using this disk for FreeBSD only, and we don't want to waste even this
much space, so we'll select the option ``use whole disk for FreeBSD'', the
so-called ``dangerously dedicated'' mode.  This term comes partially from
superstition and partially because some BIOSes expect to find a partition table
on the first sector of a disk, and they can't access the disk if they don't find
one.  If your BIOS has this bug, you'll find this one out pretty quickly when
you try to boot.  If it doesn't fail on the first boot, it won't fail.
</para>

<para>To use the whole disk, we first delete the current partition: we press the
cursor down key until it highlights the FreeBSD partition.  Then we press
<keycap>d</keycap>, and the three partitions are joined into one, marked <emphasis>unused</emphasis>.
</para>

<para>The next step is to create a new partition using the entire disk.  We press
<emphasis>a</emphasis>, and get the following message:
</para>

<para>We've already decided to use the whole disk, so we move the cursor right to
<emphasis>No</emphasis>, as shown in the figure, and press <keycap>Enter</keycap>.  Then we press
<emphasis>q</emphasis> to exit the partition editor, get back to the function index, and
select <emphasis>Label</emphasis>.  We see:
</para>

<para>We want to create two partitions: first, a swap partition of 200 Megabytes, and
then a file system taking up the rest of the disk.  We press C, and are shown a
submenu offering us all 1173930 blocks on the disk.  We erase that and enter
<emphasis>200m</emphasis>, which represents 200 Megabytes.  Then we press <keycap>Enter</keycap>, and
another submenu appears, asking us what kind of slice it is.  We move the cursor
down to select <emphasis>A swap partition</emphasis>:
<!--  XXX one sub menu only .PIC "images/disk-label-1.ps" 4i -->
</para>

<para>Next, we press <emphasis>c</emphasis> again to create a new partition.  This time, we accept
the offer of the rest of the space on the disk, 764330 sectors, we select <emphasis>A
file system</emphasis>, and we are presented with yet another menu asking for the name
of the file system.  We enter the name, which happens to be <emphasis>/S</emphasis>:
</para>

<para>After pressing <keycap>Enter</keycap>, we see:
</para>

<para>Finally, we press <emphasis>W</emphasis> to tell the disk label editor to perform the
function.  We get an additional warning screen:
</para>

<para>Since we're doing this on-line, that's OK.  We select <emphasis>Yes</emphasis>, and
<emphasis>sysinstall</emphasis> creates the file system and mounts both it and the swap
partition.  This can take quite a while.  Don't try to do anything with the
drive until it's finished.
</para>
</sect1>
<sect1>
<title>Doing it the hard way</title>

<para><anchor id="CFBSD-the-hard-way"/>
Unfortunately, sometimes you may not be able to use the <emphasis>sysinstall</emphasis>
method.  That leaves us with the old way to add disks. The only difference is
that this time, we need to use different tools.  In the following sections,
we'll look at what we have to do to install an old CDC SCSI drive, even older
than the one in the previous section.
</para>
<sect2>
<title>Creating a partition table</title>

<para><indexterm><primary>creating</primary><secondary>a partition table</secondary></indexterm>
<indexterm><primary>partition</primary><secondary>table</secondary></indexterm>
We looked at how to format the disk on page <xref linkend="CFBSD-format-disk"/>.  The next step is
to create a Microsoft style partition table on the disk.  We looked at the
concepts on page
<indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
but this time we use different tools.  As in Microsoft, the partitioning program is
called <emphasis>fdisk</emphasis>, and the man page is on page
In the following discussion, you'll find a pocket calculator useful.
</para>

<para>Depending on what was on the disk before, <emphasis>fdisk</emphasis> could get sufficiently
confused to not work correctly.  If you don't format the disk, it's a good idea
to overwrite the beginning of the disk with <emphasis>dd</emphasis>:
</para>
<programlisting>
# <command>dd if=/dev/zero of=/dev/rda1 count=100</command>
100+0 records in
100+0 records out
51200 bytes transferred in 1 secs (51200 bytes/sec)
</programlisting>

<para>Next, we look at what's on the disk.  This doesn't seem to make much sense,
since we have just overwritten the contents, but <emphasis>fdisk</emphasis> will tell us one
thing of importance: the disk geometry.  We'll need this later on.
</para>
<programlisting>
# <command>fdisk /dev/rda1</command>
******* Working on device /dev/rda1 *******
parameters extracted from in-core disklabel are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

parameters to be used for BIOS calculations are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

fdisk: Invalid fdisk partition table found
Warning: BIOS sector numbering starts with sector 1
Information from DOS bootblock is:
The data for partition 0 is:
&lt;UNUSED&gt;
The data for partition 1 is:
&lt;UNUSED&gt;
The data for partition 2 is:
&lt;UNUSED&gt;
The data for partition 3 is:
sysid 165,(FreeBSD/NetBSD/386BSD)
    start 1, size 304604 (148 Meg), flag 80
        beg: cyl 0/ sector 2/ head 0;
        end: cyl 967/ sector 1/ head 0
</programlisting>

<para>You'll notice that <emphasis>fdisk</emphasis> has decided to put a FreeBSD partition in
partition 3.  That's not what we want in this case: we want a Microsoft
partition as well.  This is a small disk by modern standards, only 150 MB, so
we'll assign 100 MB to FreeBSD, and leave 50 MB for Microsoft.  Our resulting
partition table should look like:
</para>

<para>h = .2i
dh = .02i
dw = 1.7i
move right .5i
down
[
	boxht = h; boxwid = 1.7i
	box ht .15i "Master Boot Record"
        box ht .15i "Partition Table"
    P1: box ht .4i
    P2: box ht .4i
    P3:	box ht .4i
    P4:	box ht .4i

	move right 1.65i from P1.ne
	boxwid = 2.2
	down
     C: box ht .25i "Microsoft <emphasis>C:</emphasis> drive"

	move .25i
    FA: box ht .2i "FreeBSD disk label and bootstrap"
        box ht .2i "<emphasis>/dev/da1s2a</emphasis>"
        box ht .2i "<emphasis>/dev/da1s2b</emphasis>: FreeBSD swap"
        box ht .2i "<emphasis>/dev/da1s2d</emphasis>"
	box ht .2i "<emphasis>/dev/da1s2e</emphasis>"
        box ht .2i "<emphasis>/dev/da1s2f</emphasis>"
        box ht .2i "<emphasis>/dev/da1s2g</emphasis>"
        box ht .2i "<emphasis>/dev/da1s2h</emphasis>: <emphasis>/home</emphasis> file system"

	arrow from P1.e to C.w
	arrow from P2.e to FA.w
	move up .08i from P1.c	"Slice 1 - Microsoft primary"
	move down .08i from P1.c  "<emphasis>/dev/da1s1</emphasis>, 48 MB"
	move up .08i from P2.c	"Slice 2 - FreeBSD"
	move down .08i from P2.c  "<emphasis>/dev/da1s2</emphasis>, 100 MB"
	"Slice 3 (unused)" at P3.c
	"Slice 4 (unused)" at P4.c
	]
</para>

<para><figure><title>Partition table on second FreeBSD disk</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
The Master Boot Record and the Partition Table take up the first sector of the
disk, and the rest can be divided between the partitions.  It's easy to make a
mistake in specifying the parameters, and <emphasis>fdisk</emphasis> performs as good as no
checking.  You can easily create a partition table that has absolutely no
relationship with reality, so it's a good idea to calculate them in advance.
For each partition, we need to know three things:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>partition</primary><secondary>type</secondary></indexterm>
The <emphasis>partition type</emphasis>, which <emphasis>fdisk</emphasis> calls <emphasis>sysid</emphasis>.  This is a
number describing what the partition is used for.  FreeBSD partitions have
partition type 165, and modern (release 4 and later) Microsoft partitions have type
6.
</para>
</listitem>
<listitem>

<para>The <emphasis>start sector</emphasis>, the first sector in the partition.
</para>
</listitem>
<listitem>

<para>The <emphasis>end sector</emphasis> for the partition.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>active</primary><secondary>partition</secondary></indexterm>
<indexterm><primary>partition</primary><secondary>active</secondary></indexterm>
In addition, we need to decide which partition is the <emphasis>active</emphasis> partition,
the partition from which we want to boot.  In this case, it doesn't make any
difference, since we won't be booting from the disk, but it's always a good idea
to set it anyway.
</para>

<para>We specify the partitions we don't want by giving them a type, start sector and
end sector of 0.  As we have seen, our disk has 304605 sectors, numbered 0 to
304604.  Partitions should start and end on a cylinder boundary.  We want the
FreeBSD partitions to be about 100 MB, or 204,800 sectors, which leaves 99,806
sectors for the Microsoft partition.  We know the geometry from the <emphasis>fdisk</emphasis>
output above: <emphasis>cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)</emphasis>.  So
our 204,800 sectors would take up 204800 / 315, or 650.1587302 cylinders.  Since
we want to use this disk primarily for FreeBSD, we'll round this value up to 651
cylinders, or 205,065 sectors.  This leaves 316 cylinders, less the first sector
on the disk, for Microsoft, a total of (316 * 315) - 1 or 99,539 sectors.  Our
resulting information is:
<table frame='all'><title>sample <emphasis>fdisk</emphasis> parameters</title>
<indexterm><primary>fdisk</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdisk</secondary></indexterm>
box,center, tab(#) ;
| rfCWp9| rfCWp9| rfCWp9| rfCWp9 | .
Partition#Partition#Start#Size
number#type#sector
=

<tgroup cols='4' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> 1</entry><entry>6</entry><entry>1</entry><entry>99539
</entry></row>
<row><entry> 2</entry><entry>165</entry><entry>304604</entry><entry>205065
</entry></row>
<row><entry> 3</entry><entry>0</entry><entry>0
</entry></row>
<row><entry> 4</entry><entry>0</entry><entry>0
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>

<para>If you're unlucky, <emphasis>fdisk</emphasis> will give you a completely different idea of
the disk geometry from what <emphasis>scsiformat</emphasis> did.  Possibly you can decide by
examination which program is wrong, or maybe you can look at the <emphasis>dmesg</emphasis>
output for a tie-breaker.  In all cases I have seen, it has been <emphasis>fdisk</emphasis>
that returned the incorrect information, and only when the disk did not have a
valid partition table.  For example, this happened with a disk formatted for
BSD/OS:
</para>
<programlisting>
# <command>scsiformat da1</command>
MICROP
2112-15MQ1094802
HQ48

Mode data length:  35
Medium type:  0
Device Specific Parameter:  0
Block descriptor length:  8
Density code:  0
Number of blocks:  2051615
Reserved:  0
Block length:  512
PS:  1
Reserved:  0
Page code:  4
Page length:  22
Number of Cylinders:  1760
Number of Heads:  15
Starting Cylinder-Write Precompensation:  0
Starting Cylinder-Reduced Write Current:  0
Drive Step Rate:  0
Landing Zone Cylinder:  0
Reserved:  0
RPL:  0
Rotational Offset:  0
Reserved:  0
Medium Rotation Rate:  5400
Reserved:  0
Reserved:  0
# <command>fdisk da1</command>
******* Working on device /dev/rda1 *******
parameters extracted from in-core disklabel are:
cylinders=160 heads=256 sectors/track=50 (12800 blks/cyl)

 Figures below won't work with BIOS for partitions not in cyl 1
parameters to be used for BIOS calculations are:
cylinders=160 heads=256 sectors/track=50 (12800 blks/cyl)

Warning: BIOS sector numbering starts with sector 1
Information from DOS bootblock is:
The data for partition 0 is:
sysid 255,(BBT (Bad Blocks Table))
    start 1023744, size 2108293151 (1029440 Meg), flag 0
        beg: cyl 768/ sector 15/ head 147;
        end: cyl 0/ sector 0/ head 255
The data for partition 1 is:
sysid 101,(Novell Netware 3.xx)
    start 1646292846, size 1814062195 (885772 Meg), flag 0
        beg: cyl 356/ sector 50/ head 0;
        end: cyl 256/ sector 50/ head 114
The data for partition 2 is:
sysid 0,(unused)
    start 0, size 0 (0 Meg), flag 61
        beg: cyl 364/ sector 37/ head 98;
        end: cyl 0/ sector 0/ head 0
The data for partition 3 is:
&lt;UNUSED&gt;
</programlisting>

<para>Looking at the output from <emphasis>dmesg</emphasis>, we see:
</para>
<programlisting>
(aha0:1:0): "MICROP 2112-15MQ1094802 HQ48" type 0 fixed SCSI 2
da1(aha0:1:0): Direct-Access 1001MB (2051615 512 byte sectors)
da1(aha0:1:0): with 1760 cyls, 15 heads, and an average 77 sectors/track
</programlisting>

<para>In this case, then, you should use the parameters 1760 cylinders, 15 heads, and
77 sectors per track.  What's less obvious here is the number of cylinders:
<emphasis>fdisk</emphasis> doesn't have an opinion, and <emphasis>scsiformat</emphasis> and <emphasis>dmesg</emphasis>
decided it has 2,051,615 sectors.  Unfortunately, if you calculate the number
according to the formula <emphasis>cylinders</emphasis> \(mu <emphasis>heads</emphasis> \(mu
<emphasis>sectors</emphasis>, you'll come up with a different result: in this case 1760 \(mu 15
\(mu 77 = 2,032,800.  How come?  The disks report the total number of sectors,
including spare tracks and such, but you can't use them all.  The 2,032,800 is
the correct number, and if you try to specify 2,051,615 to <emphasis>disklabel</emphasis>, it
will spit out lots of messages about partitions which go beyond the end of the
disk.
</para>

<para>Next we run <emphasis>fdisk</emphasis> in earnest by specifying the <emphasis>-i</emphasis> option.
During this time, you will see messages on the console:
</para>
<programlisting>
da1: invalid primary partition table: no magic
</programlisting>

<para>The message <emphasis>no magic</emphasis> doesn't mean that <emphasis>fdisk</emphasis> is out of purple
smoke.  It refers to the fact that it didn't find the so-called <emphasis>magic
number</emphasis>, which identifies the partition table.  Since we don't have a
partition table yet, this message isn't surprising. It's also completely
harmless.
</para>

<para><emphasis>fdisk</emphasis> prompts interactively:
</para>
<programlisting>
# <command>fdisk -i /dev/rda1</command>
******* Working on device /dev/rda1 *******
parameters extracted from in-core disklabel are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

parameters to be used for BIOS calculations are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

Do you want to change our idea of what BIOS thinks ? [n] <keycap>Enter <emphasis>pressed<emphasis>
fdisk: Invalid fdisk partition table found
Warning: BIOS sector numbering starts with sector 1
Information from DOS bootblock is:
The data for partition 0 is:
&lt;UNUSED&gt;
Do you want to change it? [n] </emphasis></emphasis></emphasis></keycap><command>y<emphasis>
Supply a decimal value for "sysid" [0] </emphasis></command><command>6<emphasis>
Supply a decimal value for "start" [0] </emphasis></command><command>1<emphasis>
Supply a decimal value for "size" [0] </emphasis></command><command>99539<emphasis>
Explicitly specifiy beg/end address ? [n] </command><keycap>Enter <emphasis>pressed<emphasis>
sysid 6,(Primary 'big' DOS (&gt; 32MB))
    start 1, size 99539 (48 Meg), flag 0
        beg: cyl 0/ sector 2/ head 0;
        end: cyl 315/ sector 35/ head 8
Are we happy with this entry? [n] </emphasis></emphasis></emphasis></keycap><command>y<emphasis>
The data for partition 1 is:
&lt;UNUSED&gt;
Do you want to change it? [n] </emphasis></command><command>y<emphasis>
Supply a decimal value for "sysid" [0] </emphasis></command><command>165<emphasis>
Supply a decimal value for "start" [0] </emphasis></command><command>99540<emphasis>
Supply a decimal value for "size" [0] </emphasis></command><command>205065<emphasis>
Explicitly specifiy beg/end address ? [n] </command><keycap>Enter <emphasis>pressed<emphasis>
sysid 165,(FreeBSD/NetBSD/386BSD)
    start 99540, size 205065 (100 Meg), flag 0
        beg: cyl 316/ sector 1/ head 0;
        end: cyl 966/ sector 35/ head 8
Are we happy with this entry? [n] </emphasis></emphasis></emphasis></keycap><command>y<emphasis>
The data for partition 2 is:
&lt;UNUSED&gt;
Do you want to change it? [n] </command><keycap>Enter <emphasis>pressed<emphasis>
The data for partition 3 is:
sysid 165,(FreeBSD/NetBSD/386BSD)
    start 1, size 304604 (148 Meg), flag 80
        beg: cyl 0/ sector 2/ head 0;
        end: cyl 967/ sector 1/ head 0
Do you want to change it? [n] </emphasis></emphasis></emphasis></keycap><command>y<emphasis>

The static data for the DOS partition 3 has been reinitialized to:
sysid 165,(FreeBSD/NetBSD/386BSD)
    start 1, size 304604 (148 Meg), flag 80
        beg: cyl 0/ sector 2/ head 0;
        end: cyl 967/ sector 1/ head 0
Supply a decimal value for "sysid" [165] </emphasis></command><command>0<emphasis>
Supply a decimal value for "start" [1] </emphasis></command><command>0<emphasis>
Supply a decimal value for "size" [304604] </emphasis></command><command>0<emphasis>
Explicitly specifiy beg/end address ? [n] </command><keycap>Enter <emphasis>pressed<emphasis>
sysid 0,(unused)
    start 0, size 0 (0 Meg), flag 80
        beg: cyl 0/ sector 0/ head 0;
        end: cyl 0/ sector 0/ head 0
Are we happy with this entry? [n] </emphasis></emphasis></emphasis></keycap><command>y<emphasis>
Do you want to change the active partition? [n] </emphasis></command><command>y<emphasis>
Supply a decimal value for "active partition" [3] </emphasis></command><command>1<emphasis>
Are you happy with this choice [n] </emphasis></command><command>y<emphasis>

We haven't changed the partition table yet.  This is your last chance.
parameters extracted from in-core disklabel are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

parameters to be used for BIOS calculations are:
cylinders=967 heads=9 sectors/track=35 (315 blks/cyl)

Information from DOS bootblock is:
0: sysid 6,(Primary 'big' DOS (&gt; 32MB))
    start 1, size 99539 (48 Meg), flag 0
        beg: cyl 0/ sector 2/ head 0;
        end: cyl 315/ sector 35/ head 8
1: sysid 165,(FreeBSD/NetBSD/386BSD)
    start 99540, size 205065 (100 Meg), flag 80
        beg: cyl 316/ sector 1/ head 0;
        end: cyl 966/ sector 35/ head 8
2: &lt;UNUSED&gt;
3: &lt;UNUSED&gt;
Should we write new partition table? [n] </emphasis></command><command>y<emphasis>
</command></programlisting>

<para>By default, <emphasis>fdisk</emphasis> creates a FreeBSD partition in slice 3.  Even though
we didn't have any space left, it created a partition there.  You don't need to
delete it if you don't want to, but since it overlaps the other partitions, it
would probably confuse Microsoft utilities, so it's a good idea.
</para>
</sect2>
<sect2>
<title>Labelling the disk</title>

<para><indexterm><primary>labelling</primary><secondary>disks</secondary></indexterm>
<indexterm><primary>disks</primary><secondary>labelling</secondary></indexterm>
<indexterm><primary>disk</primary><secondary>slice</secondary></indexterm>
<indexterm><primary>slice</primary><secondary>disk</secondary></indexterm>
Once we have a valid Microsoft partition table, we need to pay more attention to
our FreeBSD slice (slice 1, or Microsoft partition 2).  It'll make life easier here
to remember a few things:
</para>
<itemizedlist>
<listitem>

<para>From now on, we're just looking at the slice, which we can think of as a logical
disk.  Names like <emphasis>disk label</emphasis> really refer to the slice, but since many
standard terms use the word <emphasis>disk</emphasis>, we'll continue to use them.
</para>
</listitem>
<listitem>

<para>All offsets are relative to the beginning of the slice, not the beginning of the
disk.  Sizes also refer to the slice and not the disk.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/dev/rda1c</primary></indexterm>
<indexterm><primary>/dev/da1c</primary></indexterm>
Depending on the operation, we may need to take the raw disk
(<emphasis>/dev/rda1c</emphasis>)
or the block device (<emphasis>/dev/da1c</emphasis>).
Sometimes the
programs can recover if you specify the wrong device, but sometimes they produce
some really strange error messages instead.
</para>
</listitem>
</itemizedlist>

<para>The first thing we need is the disk label, which supplies information about the
disk geometry and the layout of the file systems.  These are two different
things, of course: the overall disk geometry is determined by the kind of disk,
but you have decided (with <emphasis>fdisk</emphasis>) what part of the disk represents the
FreeBSD slice, and you also need to define what file systems you want.  As we
saw in <xref linkend="CFBSD-chinstall"/>, page
a typical first disk will contain a root file system, swap space and a
<emphasis>/usr</emphasis> file system.  On other disks, this arrangement may be different.
The arguments in favour of a small root file system are less powerful on other
disks.  On the other hand, you may want to add swap on other disks: firstly,
it's possible that you are a bit low on swap, and secondly, spreading swap over
other disks can improve performance if you are low on memory.  In our example,
let's add 20 MB of swap and make the rest of the slice a <emphasis>/home</emphasis> file
system.  In addition, we need to define the <emphasis>c</emphasis> partition, which
represents the whole disk.  Traditionally, data disks use the <emphasis>h</emphasis>
partition and not the <emphasis>a</emphasis> partition, so we'll stick to that tradition,
though there's nothing to stop you from using the <emphasis>a</emphasis> partition if you
prefer.  For each partition, we need to know the start offset, the size and the
file system type.  In summary, the FreeBSD slice we want to create looks like:
</para>

<para>h = .2i
dh = .02i
dw = 1.7i
boxwid = 2.5i
down
[    S: box invis
    FA: box ht .2i "FreeBSD disk label and bootstrap" at S+(1,0)
        box ht .2i "<emphasis>/dev/da1a</emphasis> (empty)"
        box ht .2i "<emphasis>/dev/da1s2b</emphasis>: FreeBSD swap, 20 MB"
        box ht .2i "<emphasis>/dev/da1s2d</emphasis> (empty)"
	box ht .2i "<emphasis>/dev/da1s2e</emphasis> (empty)"
        box ht .2i "<emphasis>/dev/da1s2f</emphasis> (empty)"
        box ht .2i "<emphasis>/dev/da1s2g</emphasis> (empty)"
        box ht .2i "<emphasis>/dev/da1s2h</emphasis>: <emphasis>/home</emphasis> file system, 80 MB"
	]
</para>

<para><figure><title>FreeBSD slice on second disk</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
<sect2>
<title>Disklabel</title>

<para><indexterm><primary>disklabel</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>disklabel</secondary></indexterm>
<indexterm><primary>/etc/disktab</primary><secondary>file</secondary></indexterm>
<indexterm><primary>file</primary><secondary>/etc/disktab</secondary></indexterm>
The program which writes the disk label is called (wait for it)
<emphasis>disklabel</emphasis>.  You can tell it the geometry and file system layout
information in two different ways: you can find or create an entry in
<emphasis>/etc/disktab</emphasis>, or you can create your own prototype file.  We'll look at
both ways in the following sections.
</para>
<sect3>
<title>/etc/disktab</title>

<para><anchor id="CFBSD-disktab"/>
You can label the disk with a command like
</para>
<programlisting>
# <command>disklabel -w -r da1 <emphasis>disktype</emphasis></command>
</programlisting>

<para><emphasis>disktype</emphasis> is a label in the file <emphasis>/etc/disktab</emphasis>, which contains
definitions of disk geometry for a number of known disks.  There's a good chance
that your disk won't be in it, though.  An entry in <emphasis>disktab</emphasis> looks like:
</para>
<programlisting>
fuji2266|Fujitsu M2266S: \e
	:ty=winchester:dt=SCSI:se#512:nt#15:ns#85:nc#1658:rm#3600:\e
	:pc#2113950:oc#0: \e
	:ph#2107704:oh#0:bh#4096:fh#512:th=4.2BSD:
</programlisting>

<para><indexterm><primary>termcap</primary></indexterm>
<indexterm><primary>disklabel</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>disklabel</secondary></indexterm>
The format of this file is derived from <emphasis>termcap</emphasis>, and it's a bit tough at
first sight.  In fact, there isn't too much you need to understand.  The first
name, up to the <emphasis>|</emphasis> symbol, is the <emphasis>label</emphasis>.  This is the name you
specify to <emphasis>disklabel</emphasis>, so you don't want to make it too long.  The next
name, up to the <emphasis>:</emphasis>, is a more verbose description of the disk.  After the
colon come specifications consisting of a property name, followed by either a
<emphasis>=</emphasis> symbol and a string value, or a <emphasis>#</emphasis> symbol and a numeric value.
See the man page <emphasis>disktab(5)</emphasis> for further details.  The values that
interest us are:
<table frame='all'><title>disktab values</title>
box,tab(#) ;
| lfCWp9 | lw72 | .
Name#Meaning
=

<tgroup cols='9' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> ty</entry><entry> Type of disk. <command>winchester</command> specifies a non-removable hard disk.  dt</entry><entry> Type of controller, in this case SCSI  se</entry><entry> Number of bytes per sector.  For current FreeBSD systems, this must be 512  nt</entry><entry> Number of tracks per cylinder, in this case 15.  ns</entry><entry> Number of sectors per track, in this case 85.  nc</entry><entry> Number of cylinders, in this case 1658.  rm</entry><entry> Rotational speed of the disk, by default 3600.  This is not absolutely essential.  b<emphasis>x</entry><entry></emphasis> The size of ufs file system blocks in partition <emphasis>x</emphasis>, where <emphasis>x</emphasis> is a partition letter from <emphasis>a</emphasis> to <emphasis>h</emphasis>.  See the discussion of partitions in <xref linkend="CFBSD-chconcepts"/>, page
</entry></row>
<row><entry> for more information.  o<emphasis>x</entry><entry></emphasis> Offset (starting sector) of partition <emphasis>x</emphasis>, where <emphasis>x</emphasis> is a partition letter from <emphasis>a</emphasis> to <emphasis>h</emphasis>.  See the discussion of partitions in <xref linkend="CFBSD-chconcepts"/>, page
</entry></row>
<row><entry> for more information.  p<emphasis>x</entry><entry></emphasis> Size in sectors of partition <emphasis>x</emphasis>.  b<emphasis>x</entry><entry></emphasis> The size of ufs file system blocks in partition <emphasis>x</emphasis>.  f<emphasis>x</entry><entry></emphasis> The size of ufs file system fragments in partition <emphasis>x</emphasis>.  t<emphasis>x</entry><entry></emphasis> The type of the partition.  This can be <emphasis>4.2BSD</emphasis> (for ufs; the name is historical) or <emphasis>swap</emphasis> for a swap partition.
</entry></row>
</tbody></tgroup></table>
<indexterm><primary>newfs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>newfs</secondary></indexterm>
We won't look at the block and fragment sizes in this discussion.  See the man
page for <emphasis>newfs</emphasis>
on page
for further details.
</para>

<para>There's no definition in <emphasis>/etc/disktab</emphasis> for our CDC 94161-9 disk, of
course, so we'll have to write one.  We need the following information on the
disk geometry, all of which we can find in the printout from <emphasis>fdisk</emphasis>:
</para>
<itemizedlist>
<listitem>

<para>The number of tracks or heads (<emphasis>nt</emphasis>), 9.
</para>
</listitem>
<listitem>

<para>The number of cylinders (<emphasis>nc</emphasis>).  Well, that should be 967, but don't
forget that we're looking at the slice, not the disk, and our slice only has
651 cylinders, so that's what we say.
</para>
</listitem>
<listitem>

<para>The number of sectors per track (<emphasis>ns</emphasis>), 35.
</para>
</listitem>
<listitem>

<para>The total number of sectors in the partition.  Calculate the number from the
formula <emphasis>cylinders</emphasis> \(mu <emphasis>heads</emphasis> \(mu <emphasis>sectors</emphasis>, even if you are
using the whole disk: the output from <emphasis>dmesg</emphasis> or <emphasis>scsiformat</emphasis> is not
correct here.
</para>
</listitem>
</itemizedlist>

<para>OK, let's roll up our sleeves.  The swap partition comes directly after the
bootstrap and the disk label, each of which take up 1 sector, so the swap
partition starts at offset 2.  It's 20 MB (20,971,520 bytes or 40,960 sectors),
but it would be nice to have it end on a cylinder boundary, so we'll divide by
the number of sectors per cylinder.  40,960 / 315 = 130.031746 cylinders, so
we'll call it 130 cylinders or 40,950 sectors.  Since we don't start on a
cylinder boundary (the bootstrap and disk label come first), we subtract their
length (2) and end up with 40,948 sectors, so the definitions for swap
(partition <emphasis>b</emphasis>) are: start (<emphasis>ob</emphasis>) is 2, size (<emphasis>pb</emphasis>) is 40948,
and type (<emphasis>tb</emphasis>) is <emphasis>swap</emphasis>.
</para>

<para>Next we look at the <emphasis>/home</emphasis> file system.  It starts immediately after the
swap partition (offset 40950), and takes up the rest of the space on the
partition, so the size is 205065 (the length of the partition) - 40950 (the
length of the bootstrap, disk label, and swap space) = 164115 sectors.  The type
(<emphasis>tb</emphasis>) is <emphasis>4.2BSD</emphasis>.
</para>

<para>Finally, we define partition <emphasis>c</emphasis>.  That's easy: the start (<emphasis>oc</emphasis>) is
the 0, and the size (<emphasis>pc</emphasis>) is the size of the FreeBSD partition, 205065,
and the type isn't defined, so we don't have a <emphasis>td</emphasis> parameter.
</para>

<para>Putting all this together, we get:
</para>
<programlisting>
cdc94161|CDC 94161-9: \e
	:ty=winchester:dt=SCSI:se#512:nt#9:ns#35:nc#651:rm#3600:\e
	:ob#2:pb#40948:tb=swap:\e
	:oc#0:pc#205065:\e
	:oh#40950:ph#164115:tb=4.2BSD:
</programlisting>

<para>Finally, we can label the disk:
</para>
<programlisting>
# <command>disklabel -w -r /dev/da1c cdc94161</command>
</programlisting>

<para>When you do this, expect a kernel message (in high-intensity display) saying
``<keycap>Cannot find disk label</keycap>''.  Since there isn't any label, it can't be
found.  This is another harmless chicken and egg problem.
</para>
</sect3>
<sect3>
<title>Disk prototype file</title>

<para><indexterm><primary>disk</primary><secondary>prototype file</secondary></indexterm>
<indexterm><primary>file</primary><secondary>disk prototype</secondary></indexterm>
Alternatively, you can create a <emphasis>disk prototype file</emphasis> just for this disk.
This has the advantage that most of the work is done for you.  Start by
entering:
</para>
<programlisting>
# <command>disklabel /dev/rda1 &gt;diskproto</emphasis>	<emphasis>write info to file diskproto</command>
Warning, revolutions/minute 0
boot block size 0
super block size 0
# <command>cat diskproto</emphasis>					<emphasis>look at what we got</command>
# /dev/rda1:
type: unknown
disk:
label:
flags:
bytes/sector: 512
sectors/track: 35
tracks/cylinder: 9
sectors/cylinder: 315
cylinders: 967
sectors/unit: 304605
rpm: 0
interleave: 0
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0

3 partitions:
#        size   offset    fstype   [fsize bsize bps/cpg]
  c:   304605        0    unused        0     0         # (Cyl.    0 - 966)
</programlisting>

<para>We have to change a number of things in this file:
</para>
<itemizedlist>
<listitem>

<para>The values for <emphasis>interleave</emphasis> (the number of physical sectors between
logical sectors; don't worry if you don't understand this) and <emphasis>prm</emphasis> (the
number of rotations of the disk platter per minute) are both 0, which is
invalid.  FreeBSD doesn't use these values, but it still refuses to label the
disk unless you enter some plausible value.  We set <emphasis>interleave</emphasis> to 1 and
<emphasis>rpm</emphasis> to 3600, which used to be a standard value for disks.
</para>
</listitem>
<listitem>

<para>In addition, although our partition table says that the FreeBSD slice only has
651 cylinders, the value here shows the complete disk.  We need to change this
value to 651.
</para>
</listitem>
<listitem>

<para>The <emphasis>type</emphasis> field says <emphasis>unknown</emphasis>.  We change it to <emphasis>SCSI</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>disklabel</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>disklabel</secondary></indexterm>
For documentation purposes, we set the <emphasis>disk</emphasis> field to <emphasis>cdc94161</emphasis>,
and the <emphasis>label</emphasis> field to <emphasis>FreeBSD</emphasis>.  <emphasis>disklabel</emphasis> doesn't care
what's in these fields, but it copies them to disk.
</para>
</listitem>
<listitem>

<para>In addition, we need to add the definitions of the file system layout.  We'll
look at that in the rest of this section.
</para>
</listitem>
</itemizedlist>

<para>The last part of the prototype file describes the partitions.  In this case, we
have three lines: the number of partitions, a comment describing the format, and
a definition of the <emphasis>c</emphasis> partition.  The disk prototype file here ignores
the partition table completely: it claims that partition <emphasis>c</emphasis> takes up the
whole disk.  We need to fix that, and we need to add information about slices
<emphasis>b</emphasis> and <emphasis>h</emphasis>.
</para>

<para>Since we are using partition <emphasis>h</emphasis>, we need to change the information <emphasis>3
partitions</emphasis> at the bottom of the file to <emphasis>8 partitions</emphasis> so that
<emphasis>disklabel</emphasis> will be able to create partition <emphasis>h</emphasis>.
</para>

<para>We'll use the same sizes as in the previous example: We'll put the swap
partition first.  Remembering that we specify our offsets relative to the start
of the FreeBSD slice, so the swap partition has offset 2, immediately after the
boot sector and the disk label.  It's 20 MB (20,971,520 bytes or 40,960
sectors), but want it to finish at the end of a cylinder, so we divide by the
number of sectors per cylinder.  40,960 / 315 = 130.031746 cylinders, so we'll
call it 130 cylinders, which corresponds to 40,950 sectors.  Since we don't
start on a cylinder boundary (the bootstrap and disk label come first), we
subtract their length (2) and end up with 40,948 sectors, so the definitions for
swap (partition <emphasis>b</emphasis>) are: size is 40948, offset is 2, and type is
<emphasis>swap</emphasis>.
</para>

<para>Next we look at the <emphasis>/home</emphasis> file system.  It starts immediately after the
swap partition (sector 40950 relative to the beginning of the slice), and takes
up the rest of the space on the partition, so the size is 205065 (the length of
the partition) - 40950 (the length of the swap space) = 164115 sectors.
Accordingly, the definitions for <emphasis>/home</emphasis> are: size 164430, offset 49050,
and <emphasis>fstype</emphasis> <emphasis>4.2BSD</emphasis>.
</para>

<para>Finally, we define partition <emphasis>c</emphasis>.  That's easy: the start is 0, and the
size is the size of the FreeBSD partition, 205380.  We leave <emphasis>fstype</emphasis> as
<emphasis>unused</emphasis>.
</para>

<para>With an editor, we make these changes to <emphasis>diskproto</emphasis>.  The result looks
like:
</para>
<programlisting>
# /dev/rda1c:
type: SCSI
disk: cdc94161
label: FreeBSD
flags:
bytes/sector: 512
sectors/track: 35
tracks/cylinder: 9
sectors/cylinder: 315
cylinders: 651
sectors/unit: 205065
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0

8 partitions:
#        size   offset    fstype   [fsize bsize bps/cpg]
  b:    40948        2      swap                        # (Cyl.    0*- 129*)
  c:   205065        0    unused        0     0         # (Cyl.    0 - 650)
  h:   164115    40950    unused        0     0         # (Cyl.  130 - 650)
</programlisting>

<para>Finally, we label the disk:
</para>
<programlisting>
# <command>disklabel -R -r da1 diskproto</command>
</programlisting>

<para></para>
</sect3>
<sect3>
<title>Checking the results</title>

<para>Whichever way we label the disk, it's a good idea to check that it really did
the job.  Along with some strange error messages, <emphasis>disklabel</emphasis> occasionally
forgets to tell you that it didn't do anything&mdash;for example, if the partition
table was defective.  We can list the label with <emphasis>disklabel -r</emphasis>:
</para>
<programlisting>
# <command>disklabel -r da1</command>
# /dev/rda1c:
type: SCSI
disk: cdc94161
label: FreeBSD
flags:
bytes/sector: 512
sectors/track: 35
tracks/cylinder: 9
sectors/cylinder: 315
cylinders: 651
sectors/unit: 205065
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0

8 partitions:
#        size   offset    fstype   [fsize bsize bps/cpg]
  b:    40948        2      swap                        # (Cyl.    0*- 129*)
  c:   205065        0    unused        0     0         # (Cyl.    0 - 650)
  h:   164115    40950    unused        0     0         # (Cyl.  130 - 650)
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Things that can go wrong</title>

<para>To get <emphasis>disklabel</emphasis> to do what you want, you really must stick to every
tiny detail here.  If you don't, you can expect a number of strange error
messages.  Here are some that you could encounter.
</para>
<itemizedlist>
<listitem>

<para><emphasis>No disk label on disk</emphasis> is straightforward enough.  You tried to use
<emphasis>disklabel</emphasis> to look at the label before you had a label to look at.  This
happens when you use <emphasis>/dev/da1</emphasis> instead of <emphasis>/dev/rda1</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>Label magic number or checksum is wrong!</emphasis> tells you that
<emphasis>disklabel</emphasis> thinks it has a label, but it's invalid.  This could be the
result of an incorrect previous attempt to label the disk.  It can be difficult
to get rid of an incorrect label.  The best thing to do is to repartition the
disk with the label in a different position, and then copy <emphasis>/dev/zero</emphasis> to
where the label used to be.  Then you can repartition again the way you want to
have it.
</para>
</listitem>
<listitem>

<para><emphasis>Open partition would move or shrink</emphasis> probably means that you have
specified incorrect values in your slice definitions.  Check particularly that
the <emphasis>c</emphasis> partition corresponds with the definition in the partition table.
</para>
</listitem>
<listitem>

<para><emphasis>write: Read-only file system</emphasis> means that you are trying to do something
invalid with a valid disk label.  FreeBSD write protects the disk label, which
is why you get this message.
</para>
</listitem>
<listitem>

<para>When labelling via <emphasis>/etc/disktab</emphasis>, you might get the message <emphasis>cdc94161:
unknown disk type</emphasis>.  This could mean that you forgot to terminate the last
line in the file&mdash;add a blank line after just to be sure.
</para>
</listitem>
<listitem>

<para>In addition, you might get kernel messages like <emphasis>fixlabel: raw partition
size &gt; slice size</emphasis> or <emphasis>fixlabel: raw partitions offset != slice offset</emphasis>,
whose meanings should be obvious.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Creating the file systems</title>

<para><indexterm><primary>creating</primary><secondary>file systems</secondary></indexterm>
<indexterm><primary>file</primary><secondary>systems</secondary></indexterm>
Now that we have a valid label, the next thing we need to do is to create the
file systems.  In this case, there's only one file system, on <emphasis>/dev/da1h</emphasis>.
Mercifully, this is easier:
</para>
<programlisting>
# <command>newfs /dev/rda1h</command>
Warning: 3822 sector(s) in last cylinder unallocated
/dev/rda1h:     164114 sectors in 41 cylinders of 1 tracks, 4096 sectors
        80.1MB in 3 cyl groups (16 c/g, 32.00MB/g, 7680 i/g)
super-block backups (for fsck -b #) at:
 32, 65568, 131104,
</programlisting>

<para>Well, that warning doesn't look nice.  It looks as if we've lost nearly 2 MB of
space on a very small disk.  In fact, this message is the wrong way round: there
are 3822 sectors not available for the last cylinder group, in other words, it
only has 274 sectors.  This isn't really a problem, since they can be used
anyway.  If you want to be tidy, you can can go back and change the division
between swap and file system if we want: we <emphasis>subtract</emphasis> 274 sectors from
partition <emphasis>h</emphasis>, which gives us the new <emphasis>disktab</emphasis> entry:
</para>
<programlisting>
cdc94161|CDC 94161-9: \e
	:ty=winchester:dt=SCSI:se#512:nt#9:ns#35:nc#651:rm#3600:\e
	:ob#2:pb#41222:tb=swap:\e
	:oc#0:pc#205065:\e
	:oh#41224:ph#163841:tb=4.2BSD:
</programlisting>

<para>or the diskproto entry
</para>
<programlisting>
#        size   offset    fstype   [fsize bsize bps/cpg]
  b:    41222        2      swap                        # (Cyl.    0*- 130*)
  c:   205065        0    unused        0     0         # (Cyl.    0 - 650)
  h:   163841    41224    unused        0     0         # (Cyl.  130*- 650*)
</programlisting>

<para>You can then go back and re-label the disk.  This time, you see:
</para>
<programlisting>
# <command>newfs /dev/rda1h</command>
/dev/rda1h:     163840 sectors in 40 cylinders of 1 tracks, 4096 sectors
        80.0MB in 3 cyl groups (16 c/g, 32.00MB/g, 7680 i/g)
super-block backups (for fsck -b #) at:
 32, 65568, 131104,
</programlisting>

<para>As you can see, the partition has become smaller, but at least the error message
is gone.
</para>
</sect2>
<sect2>
<title>Editing disk labels</title>

<para><indexterm><primary>editing</primary><secondary>disk labels</secondary></indexterm>
<indexterm><primary>disk</primary><secondary>editing labels</secondary></indexterm>
If you already have a disk label, and you just want to change it, as in the
example in the previous section, you have an alternative method: you can start
<emphasis>disklabel</emphasis> in <emphasis>edit</emphasis> mode by entering
</para>
<programlisting>
# <command>disklabel -e da1</command>
</programlisting>

<para>In edit mode, <emphasis>disklabel</emphasis> creates a diskproto entry and edits it with your
favourite editor (if you have set the environment variable <emphasis>EDITOR</emphasis>) or
<emphasis>vi</emphasis> otherwise.  When you leave the editor, it writes the label back to
the disk.  If you use this method, be sure to remove your <emphasis>diskproto</emphasis>
file, since it will be out of date.
</para>
</sect2>
<sect2>
<title>Mounting the file systems</title>

<para><indexterm><primary>mounting</primary><secondary>file systems</secondary></indexterm>
<indexterm><primary>file</primary><secondary>systems</secondary></indexterm>
Finally the job is done.  Well, almost.  You still need to mount the file
system, and to tell the system that it has more swap.  But that's not much of a
problem:
</para>
<programlisting>
# <command>mkdir /home</emphasis>		<emphasis>make sure we have a directory to mount on</command>
# <command>mount /dev/da1h /home</command> <emphasis>and mount it</emphasis>
<anchor id="CFBSD-swapon"/>
# <command>swapon /dev/da1b</command>
# </emphasis><command>df</command>				<emphasis>show free capacity and mounted file systems
Filesystem    1024-blocks     Used    Avail Capacity  Mounted on
/dev/wd0a           19966    17426      944    95%    /
/dev/wd0s1e       1162062   955758   113340    89%    /usr
procfs                  4        4        0   100%    /proc
presto:/            15823     6734     8297    45%    /presto/root
presto:/usr        912271   824927    41730    95%    /presto/usr
presto:/home      1905583  1193721   521303    70%    /presto/home
presto:/S         4065286  3339635   563039    86%    /S
/dev/da1h           79270        1    72928     0%    /home
</programlisting>

<para><indexterm><primary>/etc/fstab</primary></indexterm>
This looks fine, but when you reboot the system, <emphasis>/home</emphasis> will be gone.  To ensure
that it gets mounted every time, you need to add the following line to
<emphasis>/etc/fstab</emphasis>:
</para>
<programlisting>
/dev/da1h			/home		ufs	rw   0 0
</programlisting>

<para><indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
This will cause <emphasis>da1h</emphasis> to be mounted at system startup time&mdash;see the
description of <emphasis>mount</emphasis>
on page
and the man page on page
<!--  .H3 "No geometry information" -->
<!--  If you can't calculate the number of heads.... XXX -->
<!--  Bruce: -->
<!--   -->
<!--  I've had a look at sys/disklabel.h, and -->
<!--  from what I gather, it can be either in sector 0 or 1 of the slice, -->
<!--  depending on whether we have a bootstrap or not.  I've had a look in -->
<!--  sys/ufs/ufs/ufs_disksubr.c and find where it gets looked at, to find -->
<!--  how the system decides, and also found a comment with which I can -->
<!--  agree: -->
<!--   -->
<!--  	/* -->
<!--  	 * We read the label first to see if it's there, -->
<!--  	 * in which case we will put ours at the same offset into the block.. -->
<!--  	 * (I think this is stupid [Julian]) -->
<!--  	 * Note that you can't write a label out over a corrupted label! -->
<!--  	 * (also stupid.. how do you write the first one? by raw writes?) -->
<!--  	 */ -->
<!--   -->
<!--  If I understand the code correctly, it goes through the whole intial -->
<!--  sector 4 bytes at a time until it finds a couple of magic numbers, and -->
<!--  that the disk label *and* the bootstrap must fit in the first sector. -->
<!--  Correct? -->
<!--   -->
</para>
</sect2>
</sect1>
<sect1>
<title>Recovering from disk data errors</title>

<para><indexterm><primary>recovering</primary><secondary>from disk data errors</secondary></indexterm>
<indexterm><primary>disk</primary><secondary>recovering from data errors</secondary></indexterm>
Modern hard disks are a miracle in evolution.  Today you can buy a 16 GB hard
disk for well under $500, and it will fit in your shirt pocket.  30 years ago, a
typical disk was the size of a washing machine and stored 20 MB.  You would need
800 of them to store 16 GB.
</para>

<para>At the same time, reliability has gone up, but disks are still relatively
unreliable devices.  You can achieve maximum reliability by keeping them cool,
but sooner or later you are going to run into some kind of problem.  One kind is
due to surface irregularities: the disk can't read a specific part of the
surface.
</para>

<para>Modern disks make provisions for recovering from such errors by allocating an
alternate sector for the data.  IDE drives do this automatically, but with SCSI
drives you have the option of enabling or disabling reallocation.  Usually it is
turned on when you buy them, but occasionally it is not.  When installing a new
disk, you should check that the parameters <emphasis>ARRE</emphasis> (<emphasis>Auto Read
Reallocation Enable</emphasis>) and <emphasis>AWRE</emphasis> (<emphasis>Auto Write Reallocation
Enable</emphasis>) are turned on.  For example, to check and set the values for disk
<emphasis>da1</emphasis>, you would enter:
</para>
<programlisting>
# <command>scsi -f /dev/rda1c -m 1 -e -P 3</command>
</programlisting>

<para>This command will start up your favourite editor (either the one specified in
the <emphasis>EDITOR</emphasis> environment variable, or <emphasis>vi</emphasis> by default) with the
following data:
</para>
<programlisting>
AWRE (Auto Write Reallocation Enbld):  0
ARRE (Auto Read Reallocation Enbld):  1
TB (Transfer Block):  0
PER (Post Error):  0
DTE (Disable Transfer on Error):  0
DCR (Disable Correction):  0
Read Retry Count:  1
Correction Span:  0
Write Retry Count:  1
</programlisting>

<para>The values for <emphasis>AWRE</emphasis> and <emphasis>ARRE</emphasis> should both be 1.  If they aren't,
as in this case, where <emphasis>AWRE</emphasis> is 0, change the data with the editor, write
it back, and exit.  The <emphasis>scsi</emphasis> program will write the data back to the
disk and enable the option.
</para>
</sect1>
<sect1>
<title>Virtual disks: the Vinum Volume Manager</title>

<para><anchor id="CFBSD-vinum"/>
No matter what disks you have, there will always be limitations:
</para>
<itemizedlist>
<listitem>

<para>They can be too small.
</para>
</listitem>
<listitem>

<para>They can be too slow.
</para>
</listitem>
<listitem>

<para>They can be too unreliable.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>Vinum</primary></indexterm>
<indexterm><primary>Volume</primary><secondary>Manager</secondary></indexterm>
<emphasis>Vinum</emphasis> is a so-called <emphasis>Volume Manager</emphasis>, a virtual disk driver that
addresses these three problems.  Let's look at them in more detail.  Various
solutions to these problems have been proposed and implemented:
</para>
<sect2>
<title>Disks are too small</title>

<para>The <emphasis>ufs</emphasis> file system can theoretically span more than a petabyte
(2\u\s-450\s0\d or 10\u\s-415\s0\d bytes) of storage, but no current disk drive
comes close to this size.  Often you'll find you want a file system that is
bigger than the disks you have available.  Admittedly, this problem is not as
acute as it was ten years ago, but it still exists.  Some systems have solve
this by creating an abstract device which stores its data on a number of disks.
</para>
</sect2>
<sect2>
<title>Access bottlenecks</title>

<para>Modern systems frequently need to access data in a highly concurrent manner.
For example, <emphasis>ftp.FreeBSD.org</emphasis> maintains up to 5,000 concurrent
<emphasis>FTP</emphasis> sessions and has a 100 Mbit/s connection to the outside world,
corresponding to about 12 MB/s.
</para>

<para>Current disk drives can transfer data sequentially at up to 30 MB/s, but this
value is of little importance in an environment where many independent processes
access a drive, where they may achieve only a fraction of these values.  In such
cases it's more interesting to view the problem from the viewpoint of the disk
subsystem: the important parameter is the load that a transfer places on the
subsystem, in other words the time for which a transfer occupies the drives
involved in the transfer.
</para>

<para>In any disk transfer, the drive must first position the heads, wait for the
first sector to pass under the read head, and then perform the transfer.  These
actions can be considered to be atomic: it doesn't make any sense to interrupt
them.
</para>

<para><anchor id="CFBSD-latency"/>
Consider a typical transfer of about 10 kB: the current generation of
high-performance disks can position the heads in an average of 6 ms.  The
fastest drives spin at 10,000 rpm, so the average rotational latency (half a
revolution) is 3 ms.  At 30 MB/s, the transfer itself takes about 350 &mu;s, almost
nothing compared to the positioning time.  In such a case, the effective
transfer rate drops to a little over 1 MB/s and is clearly highly dependent on
the transfer size.
</para>

<para>The traditional and obvious solution to this bottleneck is ``more spindles'':
rather than using one large disk, it uses several smaller disks with the same
aggregate storage space.  Each disk is capable of positioning and transferring
independently, so the effective throughput increases by a factor close to the
number of disks used.
</para>

<para>The exact throughput improvement is, of course, smaller than the number of disks
involved: although each drive is capable of transferring in parallel, there is
no way to ensure that the requests are evenly distributed across the drives.
Inevitably the load on one drive will be higher than on another.
</para>

<para><indexterm><primary>concatenation</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>concatenation</secondary></indexterm>
The evenness of the load on the disks is strongly dependent on the way the data
is shared across the drives.  In the following discussion, it's convenient to
think of the disk storage as a large number of data sectors which are
addressable by number, rather like the pages in a book.  The most obvious method
is to divide the virtual disk into groups of consecutive sectors the size of the
individual physical disks and store them in this manner, rather like taking a
large book and tearing it into smaller sections.  This method is called
<emphasis>concatenation</emphasis> and has the advantage that the disks do not need to have
any specific size relationships.  It works well when the access to the virtual
disk is spread evenly about its address space.  When access is concentrated on a
smaller area, the improvement is less marked.  Figure <xref linkend="CFBSD-concat"/> illustrates the
sequence in which storage units are allocated in a concatenated organization.
</para>

<para>h = .3i
dh = .02i
dw = .8i
down
[
        [
                boxht = h; boxwid = dw
<!--   -->
<!--      ORIG:   box invis "<emphasis>0</emphasis>"  -->
<!--              box invis "<emphasis>1</emphasis>"  -->
<!--              box invis "<emphasis>2</emphasis>"  -->
<!--              box invis "<emphasis>3</emphasis>"  -->
<!--              box invis "<emphasis>4</emphasis>"  -->
<!--              box invis "<emphasis>5</emphasis>"  -->

<!--        A:    box dotted at ORIG.e+(.4,0) ht h "<emphasis>0</emphasis>"  -->
move right 1i; down
          A:    box dotted ht h "<emphasis>0</emphasis>"
          B:    box dotted ht h "<emphasis>1</emphasis>"
          C:    box dotted ht h "<emphasis>2</emphasis>"
          D:    box dotted ht h "<emphasis>3</emphasis>"
          E:    box dotted ht h "<emphasis>4</emphasis>"
          F:    box dotted ht h "<emphasis>5</emphasis>"
                box ht h * 6 at C.s

          A1:   box dotted at A+(dw*1.6,0) ht h "<emphasis>6</emphasis>"
          B1:    box dotted ht h "<emphasis>7</emphasis>"
          C1:    box dotted ht h "<emphasis>8</emphasis>"
          D1:    box dotted ht h "<emphasis>9</emphasis>"
                box ht h * 4 at C1.n

          A2:   box dotted at A1+(dw*1.6,0) "<emphasis>10</emphasis>"
          F2:    box dotted ht h "<emphasis>11</emphasis>"
                box ht h * 2 at A2.s

          A3:   box dotted at A2+(dw*1.6,0) ht h "<emphasis>12</emphasis>"
          B3:    box dotted ht h "<emphasis>13</emphasis>"
          C3:    box dotted ht h "<emphasis>14</emphasis>"
          D3:    box dotted ht h "<emphasis>15</emphasis>"
          E3:    box dotted ht h "<emphasis>16</emphasis>"
          F3:    box dotted ht h "<emphasis>17</emphasis>"
                box ht h * 6 at C3.s

<!--  "Offset" at ORIG.n+(0,.2i) -->
"Disk 1" at A.n+(0,.2i)
"Disk 2" at A1.n+(0,.2i)
"Disk 3" at A2.n+(0,.2i)
"Disk 4" at A3.n+(0,.2i)


<!--  arrow from A.e+(-.07,-.04) to B.e+(-.07,.02) -->
<!--  arrow from B.e+(-.07,-.04) to C.e+(-.07,.02) -->
<!--  arrow from C.e+(-.07,-.04) to D.e+(-.07,.02) -->
<!--  arrow from D.e+(-.07,-.04) to E.e+(-.07,.02) -->
<!--  arrow from E.e+(-.07,-.04) to F.e+(-.07,.02) -->

<!--  line from F.e right .1i; arc radius .1i; line  to A1.w-(.3i,.1i); arc cw radius .1i; arrow to A1.w -->

<!--  arrow from A1.e+(-.07,-.04) to B1.e+(-.07,.02) -->
<!--  arrow from B1.e+(-.07,-.04) to C1.e+(-.07,.02) -->
<!--  arrow from C1.e+(-.07,-.04) to D1.e+(-.07,.02) -->

<!--  line from D1.e right .1i; arc radius .1i; line  to A2.w-(.3i,.1i); arc cw radius .1i; arrow to A2.w -->

<!--  arrow from A2.e+(-.07,-.04) to F2.e+(-.07,.02) -->

<!--  line from F2.e right .1i; arc radius .1i; line  to A3.w-(.3i,.1i); arc cw radius .1i; arrow to A3.w -->

<!--  arrow from A3.e+(-.07,-.04) to B3.e+(-.07,.02) -->
<!--  arrow from B3.e+(-.07,-.04) to C3.e+(-.07,.02) -->
<!--  arrow from C3.e+(-.07,-.04) to D3.e+(-.07,.02) -->
<!--  arrow from D3.e+(-.07,-.04) to E3.e+(-.07,.02) -->
<!--  arrow from E3.e+(-.07,-.04) to F3.e+(-.07,.02) -->
               ]
]
</para>

<para><figure><title>Concatenated organization</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para><indexterm><primary>striping</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>striping</secondary></indexterm>
An alternative mapping is to divide the address space into smaller, even-sized
components and store them sequentially on different devices.  For example, the
first 256 sectors may be stored on the first disk, the next 256 sectors on the
next disk and so on.  After filling the last disk, the process repeats until the
disks are full.  This mapping is called <emphasis>striping</emphasis> or RAID-0,
<footnote>

<para><indexterm><primary>RAID</primary></indexterm>
<indexterm><primary>Redundant</primary><secondary>Array of Inexpensive Disks</secondary></indexterm>
<emphasis>RAID</emphasis> stands for <emphasis>Redundant Array of Inexpensive Disks</emphasis> and offers
various forms of fault tolerance.
</para>
</footnote>
though the latter term is somewhat misleading: it provides no redundancy.
Striping requires somewhat more effort to locate the data, and it can cause
additional I/O load where a transfer is spread over multiple disks, but it can
also provide a more constant load across the disks.  Figure <xref linkend="CFBSD-striped"/>
illustrates the sequence in which storage units are allocated in a striped
organization.
</para>

<para>h = .3i
dh = .02i
dw = .8i
down
[
        [
                boxht = h; boxwid = dw

<!--      ORIG:   box invis "<emphasis>0</emphasis>"  -->
<!--              box invis "<emphasis>1</emphasis>"  -->
<!--              box invis "<emphasis>2</emphasis>"  -->
<!--              box invis "<emphasis>3</emphasis>"  -->
<!--              box invis "<emphasis>4</emphasis>"  -->
<!--              box invis "<emphasis>5</emphasis>"  -->
<!--   -->
<!--            A:    box at ORIG.e+(.4,0) ht h "<emphasis>0</emphasis>"  -->
move right 1i; down
          A:    box ht h "<emphasis>0</emphasis>"
          B:    box ht h "<emphasis>4</emphasis>"
          C:    box ht h "<emphasis>8</emphasis>"
          D:    box ht h "<emphasis>12</emphasis>"
          E:    box ht h "<emphasis>16</emphasis>"
          F:    box ht h "<emphasis>20</emphasis>"

          A1:   box at A+(dw*1.6,0) ht h "<emphasis>1</emphasis>"
          B1:    box ht h "<emphasis>5</emphasis>"
          C1:    box ht h "<emphasis>9</emphasis>"
          D1:    box ht h "<emphasis>13</emphasis>"
          E1:    box ht h "<emphasis>17</emphasis>"
          F1:    box ht h "<emphasis>21</emphasis>"

          A2:   box at A1+(dw*1.6,0) ht h "<emphasis>2</emphasis>"
          B2:    box ht h "<emphasis>6</emphasis>"
          C2:    box ht h "<emphasis>10</emphasis>"
          D2:    box ht h "<emphasis>14</emphasis>"
          E2:    box ht h "<emphasis>18</emphasis>"
          F2:    box ht h "<emphasis>22</emphasis>"

          A3:   box at A2+(dw*1.6,0) ht h "<emphasis>3</emphasis>"
          B3:    box ht h "<emphasis>7</emphasis>"
          C3:    box ht h "<emphasis>11</emphasis>"
          D3:    box ht h "<emphasis>15</emphasis>"
          E3:    box ht h "<emphasis>19</emphasis>"
          F3:    box ht h "<emphasis>23</emphasis>"

<!--  "Offset" at ORIG.n+(0,.2i) -->
"Disk 1" at A.n+(0,.2i)
"Disk 2" at A1.n+(0,.2i)
"Disk 3" at A2.n+(0,.2i)
"Disk 4" at A3.n+(0,.2i)

<!--   -->
<!--    arrow from A.e to A1.w -->
<!--    arrow from B.e to B1.w -->
<!--    arrow from C.e to C1.w -->
<!--    arrow from D.e to D1.w -->
<!--    arrow from E.e to E1.w -->
<!--    arrow from F.e to F1.w -->
<!--   -->
<!--    arrow from A1.e to A2.w -->
<!--    arrow from B1.e to B2.w -->
<!--    arrow from C1.e to C2.w -->
<!--    arrow from D1.e to D2.w -->
<!--    arrow from E1.e to E2.w -->
<!--    arrow from F1.e to F2.w -->
<!--   -->
<!--    arrow from A2.e to A3.w -->
<!--    arrow from B2.e to B3.w -->
<!--    arrow from C2.e to C3.w -->
<!--    arrow from D2.e to D3.w -->
<!--    arrow from E2.e to E3.w -->
<!--    arrow from F2.e to F3.w -->
<!--   -->
<!--    arrow right .2i from A3.e -->
<!--    arrow right .2i from B3.e -->
<!--    arrow right .2i from C3.e -->
<!--    arrow right .2i from D3.e -->
<!--    arrow right .2i from E3.e -->
<!--    arrow right .2i from F3.e -->
               ]
]
</para>

<para><figure><title>Striped organization</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
<sect2>
<title>Data integrity</title>

<para>The final problem with current disks is that they are unreliable.  Although disk
drive reliability has increased tremendously over the last few years, they are
still the most likely core component of a server to fail.  When they do, the
results can be catastrophic: replacing a failed disk drive and restoring data to
it can take days.
</para>

<para><indexterm><primary>mirroring</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>mirroring</secondary></indexterm>
<indexterm><primary>RAID</primary><secondary>level 1</secondary></indexterm>
<indexterm><primary>RAID-1</primary></indexterm>
The traditional way to approach this problem has been <emphasis>mirroring</emphasis>, keeping
two copies of the data on different physical hardware.  Since the advent of the
RAID levels, this technique has also been called <emphasis>RAID level 1</emphasis> or
<emphasis>RAID-1</emphasis>.  Any write to the volume writes to both locations; a read can be
satisfied from either, so if one drive fails, the data is still available on the
other drive.
</para>

<para>Mirroring has two problems:
</para>
<itemizedlist>
<listitem>

<para>The price.  It requires twice as much disk storage as a non-redundant solution.
</para>
</listitem>
<listitem>

<para>The performance impact.  Writes must be performed to both drives, so they take
up twice the bandwidth of a non-mirrored volume.  Reads do not suffer from a
performance penalty: it even looks as if they are faster.
</para>
</listitem>
</itemizedlist>

<para></para>

<para><indexterm><primary>RAID-5</primary></indexterm>
An alternative solution is <emphasis>parity</emphasis>, implemented in the RAID levels 2, 3, 4
and 5.  Of these, RAID-5 is the most interesting.  As implemented in Vinum, it
is a variant on a striped organization which dedicates one block of each stripe
to parity of the other blocks: As implemented by Vinum, a <emphasis>RAID-5</emphasis> plex is
similar to a striped plex, except that it implements RAID-5 by including a
parity block in each stripe.  As required by RAID-5, the location of this parity
block changes from one stripe to the next.  The numbers in the data blocks
indicate the relative block numbers.
</para>

<para>h = .3i
dh = .02i
dw = .8i
down
[
        [
                boxht = h; boxwid = dw

<!--      ORIG:   box invis "<emphasis>0</emphasis>"  -->
<!--              box invis "<emphasis>1</emphasis>"  -->
<!--              box invis "<emphasis>2</emphasis>"  -->
<!--              box invis "<emphasis>3</emphasis>"  -->
<!--              box invis "<emphasis>4</emphasis>"  -->
<!--              box invis "<emphasis>5</emphasis>"  -->
<!--   -->
<!--  -->
move right 1i; down
          A:    box ht h "<emphasis>0</emphasis>"
          B:    box ht h "<emphasis>3</emphasis>"
          C:    box ht h "<emphasis>6</emphasis>"
          D:    box ht h "Parity" filled 0.2
          E:    box ht h "<emphasis>12</emphasis>"
          F:    box ht h "<emphasis>15</emphasis>"

          A1:   box at A+(dw*1.6,0) ht h "<emphasis>1</emphasis>"
          B1:    box ht h "<emphasis>4</emphasis>"
          C1:    box ht h "Parity" filled 0.2
          D1:    box ht h "<emphasis>9</emphasis>"
          E1:    box ht h "<emphasis>13</emphasis>"
          F1:    box ht h "<emphasis>16</emphasis>"

          A2:   box at A1+(dw*1.6,0) ht h "<emphasis>2</emphasis>"
          B2:    box ht h "Parity" filled 0.2
          C2:    box ht h "<emphasis>7</emphasis>"
          D2:    box ht h "<emphasis>10</emphasis>"
          E2:    box ht h "<emphasis>14</emphasis>"
          F2:    box ht h "Parity" filled 0.2

          A3:   box at A2+(dw*1.6,0) ht h "Parity" filled 0.2
          B3:    box ht h "<emphasis>5</emphasis>"
          C3:    box ht h "<emphasis>8</emphasis>"
          D3:    box ht h "<emphasis>11</emphasis>"
          E3:    box ht h "Parity" filled 0.2
          F3:    box ht h "<emphasis>17</emphasis>"

<!--  "Offset" at ORIG.n+(0,.2i) -->
"Disk 1" at A.n+(0,.2i)
"Disk 2" at A1.n+(0,.2i)
"Disk 3" at A2.n+(0,.2i)
"Disk 4" at A3.n+(0,.2i)

<!--    arrow from A.e to A1.w -->
<!--    arrow from B.e to B1.w -->
<!--    arrow from C.e to C1.w -->
<!--    arrow from D.e to D1.w -->
<!--    arrow from E.e to E1.w -->
<!--    arrow from F.e to F1.w -->
<!--   -->
<!--    arrow from A1.e to A2.w -->
<!--    arrow from B1.e to B2.w -->
<!--    arrow from C1.e to C2.w -->
<!--    arrow from D1.e to D2.w -->
<!--    arrow from E1.e to E2.w -->
<!--    arrow from F1.e to F2.w -->
<!--   -->
<!--    arrow from A2.e to A3.w -->
<!--    arrow from B2.e to B3.w -->
<!--    arrow from C2.e to C3.w -->
<!--    arrow from D2.e to D3.w -->
<!--    arrow from E2.e to E3.w -->
<!--    arrow from F2.e to F3.w -->
<!--   -->
<!--    arrow right .2i from A3.e -->
<!--    arrow right .2i from B3.e -->
<!--    arrow right .2i from C3.e -->
<!--    arrow right .2i from D3.e -->
<!--    arrow right .2i from E3.e -->
<!--    arrow right .2i from F3.e -->
               ]
]
</para>

<para><figure><title>RAID-5 organization</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>Compared to mirroring, RAID-5 has the advantage of requiring significantly less
storage space.  Read access is similar to that of striped organizations, but
write access is significantly slower, approximately 25% of the read performance.
If one drive fails, the array can continue to operate in degraded mode: a read
from one of the remaining accessible drives continues normally, but a read from
the failed drive is recalculated from the corresponding block from all the
remaining drives.
</para>
</sect2>
</sect1>
<sect1>
<title>Vinum objects</title>

<para>In order to address these problems, vinum implements a four-level hierarchy of
objects:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>volume</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>volume</secondary></indexterm>
The most visible object is the virtual disk, called a <emphasis>volume</emphasis>.  Volumes
have essentially the same properties as a UNIX disk drive, though there are some
minor differences.  They have no size limitations.
</para>
</listitem>
<listitem>

<para><indexterm><primary>plex</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>plex</secondary></indexterm>
Volumes are composed of <emphasis>plexes</emphasis>, each of which represent the total address
space of a volume.  This level in the hierarchy thus provides redundancy.
</para>
</listitem>
<listitem>

<para><indexterm><primary>drive</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>drive</secondary></indexterm>
<indexterm><primary>subdisk</primary><secondary>Vinum</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>subdisk</secondary></indexterm>
Since Vinum exists within the UNIX disk storage framework, it would be possible
to use UNIX partitions as the building block for multi-disk plexes, but in fact
this turns out to be too inflexible: UNIX disks can have only a limited number
of partitions.  Instead, Vinum subdivides a single UNIX partition (the
<emphasis>drive</emphasis>) into contiguous areas called <emphasis>subdisks</emphasis>, which it uses as
building blocks for plexes.
</para>
</listitem>
<listitem>

<para>Subdisks reside on Vinum <emphasis>drives</emphasis>, currently UNIX partitions.  Vinum drives
can contain any number of subdisks.  With the exception of a small area at the
beginning of the drive, which is used for storing configuration and state
information, the entire drive is available for data storage.
</para>
</listitem>
</itemizedlist>

<para>The following sections describe the way these objects provide the functionality
required of Vinum.
</para>
<sect2>
<title>Volume size considerations</title>

<para>Plexes can include multiple subdisks spread over all drives in the Vinum
configuration.  As a result, the size of an individual drive does not limit the
size of a plex, and thus of a volume.
</para>
</sect2>
<sect2>
<title>Redundant data storage</title>

<para>Vinum
implements mirroring by attaching multiple plexes to a volume.  Each plex is a
representation of the data in a volume.  A volume may contain between one and
eight plexes.
</para>

<para>Although a plex represents the complete data of a volume, it is possible for
parts of the representation to be physically missing, either by design (by not
defining a subdisk for parts of the plex) or by accident (as a result of the
failure of a drive).  As long as at least one plex can provide the data for the
complete address range of the volume, the volume is fully functional.
</para>
</sect2>
<sect2>
<title>Performance issues</title>

<para>Vinum implements both concatenation and striping at the plex level:
</para>
<itemizedlist>
<listitem>

<para>A <emphasis>concatenated plex</emphasis> uses the address space of each subdisk in turn.
</para>
</listitem>
<listitem>

<para>A <emphasis>striped plex</emphasis> stripes the data across each subdisk.  The subdisks must
all have the same size, and there must be at least two subdisks in order to
distinguish it from a concatenated plex.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Which plex organization?</title>

<para>The version of Vinum supplied with FreeBSD <xref linkend="CFBSD-Fver"/> implements two kinds of
plex:
</para>
<itemizedlist>
<listitem>

<para>Concatenated plexes are the most flexible: they can contain any number of
subdisks, and the subdisks may be of different length.  The plex may be extended
by adding additional subdisks.
They require less CPU time than striped
plexes, though the difference in CPU overhead
is not measurable.  On the other hand, they are most susceptible to hot spots,
where one disk is very active and others are idle.
</para>
</listitem>
<listitem>

<para>The greatest advantage of striped (RAID-0) plexes is that they reduce hot spots:
by choosing an optimum sized stripe (about 256 kB), you can even out the load on
the component drives.  The disadvantages of this approach are (fractionally)
more complex code and restrictions on subdisks: they must be all the same size,
and extending a plex by adding new subdisks is so complicated that Vinum
currently does not implement it.  Vinum imposes an additional, trivial
restriction: a striped plex must have at least two subdisks, since otherwise it
is indistinguishable from a concatenated plex.
</para>
</listitem>
</itemizedlist>

<para>Table <xref linkend="CFBSD-comparison"/> summarizes the advantages and disadvantages of each plex
organization.
box,center,tab(#) ;
l | l | l | l | lw26 .
#Minimum#can#must be
Plex type#subdisks#add#equal#application
##subdisks#size
=
concatenated#1#yes#no#T{
Large data storage with maximum placement flexibility and
moderate performance.
T}
striped#2#no#yes#T{
High performance in combination with highly concurrent access.
T}

<tgroup cols='9' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> ty</entry><entry> Type of disk. <command>winchester</command> specifies a non-removable hard disk.  dt</entry><entry> Type of controller, in this case SCSI  se</entry><entry> Number of bytes per sector.  For current FreeBSD systems, this must be 512  nt</entry><entry> Number of tracks per cylinder, in this case 15.  ns</entry><entry> Number of sectors per track, in this case 85.  nc</entry><entry> Number of cylinders, in this case 1658.  rm</entry><entry> Rotational speed of the disk, by default 3600.  This is not absolutely essential.  b<emphasis>x</entry><entry></emphasis> The size of ufs file system blocks in partition <emphasis>x</emphasis>, where <emphasis>x</emphasis> is a partition letter from <emphasis>a</emphasis> to <emphasis>h</emphasis>.  See the discussion of partitions in <xref linkend="CFBSD-chconcepts"/>, page
</entry></row>
<row><entry> for more information.  o<emphasis>x</entry><entry></emphasis> Offset (starting sector) of partition <emphasis>x</emphasis>, where <emphasis>x</emphasis> is a partition letter from <emphasis>a</emphasis> to <emphasis>h</emphasis>.  See the discussion of partitions in <xref linkend="CFBSD-chconcepts"/>, page
</entry></row>
<row><entry> for more information.  p<emphasis>x</entry><entry></emphasis> Size in sectors of partition <emphasis>x</emphasis>.  b<emphasis>x</entry><entry></emphasis> The size of ufs file system blocks in partition <emphasis>x</emphasis>.  f<emphasis>x</entry><entry></emphasis> The size of ufs file system fragments in partition <emphasis>x</emphasis>.  t<emphasis>x</entry><entry></emphasis> The type of the partition.  This can be <emphasis>4.2BSD</emphasis> (for ufs; the name is historical) or <emphasis>swap</emphasis> for a swap partition.
</entry></row>
</tbody></tgroup></table>
<figure><title>Vinum plex organizations</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
</sect1>
<sect1>
<title>Some examples</title>

<para><indexterm><primary>configuration</primary><secondary>database</secondary></indexterm>
<indexterm><primary>Vinum</primary><secondary>configuration database</secondary></indexterm>
Vinum maintains a <emphasis>configuration database</emphasis> which describes the objects
known to an individual system.  Initially, the user creates the configuration
database from one or more configuration files with the aid of the
<emphasis>vinum(8)</emphasis> utility program.  Vinum stores a copy of its configuration
database on each disk slice (which Vinum calls a <emphasis>device</emphasis>) under its
control.  This database is updated on each state change, so that a restart
accurately restores the state of each Vinum object.
</para>
<sect2>
<title>The configuration file</title>

<para>The configuration file describes individual Vinum objects.  The definition of a
simple volume might be:
</para>
<programlisting>
drive a device /dev/da3h
volume myvol
  plex org concat
    sd length 512m drive a
</programlisting>

<para>This file describes four Vinum objects:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>drive</emphasis> line describes a disk partition (<emphasis>drive</emphasis>) and its
location relative to the underlying hardware.  It is given the symbolic name
<emphasis>a</emphasis>.  This separation of the symbolic names from the device names allows
disks to be moved from one location to another without confusion.
</para>
</listitem>
<listitem>

<para>The <emphasis>volume</emphasis> line describes a volume.  The only required attribute is the
name, in this case <emphasis>myvol</emphasis>.
</para>
</listitem>
<listitem>

<para>The <emphasis>plex</emphasis> line defines a plex.  The only required parameter is the
organization, in this case <emphasis>concat</emphasis>.  No name is necessary: the system
automatically generates a name from the volume name by adding the suffix
\&amp;<emphasis>.p<emphasis>x</emphasis></emphasis>, where <emphasis>x</emphasis> is the number of the plex in the volume.
Thus this plex will be called <emphasis>myvol.p0</emphasis>.
</para>
</listitem>
<listitem>

<para>The <emphasis>sd</emphasis> line describes a subdisk.  The minimum specifications are the
name of a drive on which to store it, and the length of the subdisk.  As with
plexes, no name is necessary: the system automatically assigns names derived
from the plex name by adding the suffix <emphasis>.s<emphasis>x</emphasis></emphasis>, where <emphasis>x</emphasis> is
the number of the subdisk in the plex.  Thus Vinum gives this subdisk the name
<emphasis>myvol.p0.s0</emphasis>
</para>
</listitem>
</itemizedlist>

<para>After processing this file, <emphasis>vinum(8)</emphasis> produces the following output:
</para>
<programlisting>
vinum -&gt; <command>create config1</command>
Configuration summary

Drives:         1 (4 configured)
Volumes:        1 (4 configured)
Plexes:         1 (8 configured)
Subdisks:       1 (16 configured)

D a                     State: up       Device /dev/da3h        Avail: 2061/2573 MB (80%)

V myvol                 State: up       Plexes:       1 Size:        512 MB

P myvol.p0            C State: up       Subdisks:     1 Size:        512 MB

S myvol.p0.s0           State: up       PO:        0  B Size:        512 MB
</programlisting>

<para>This output shows the brief listing format of <emphasis>vinum(8)</emphasis>.  It is represented
graphically in Figure <xref linkend="CFBSD-simple-vol"/>.
</para>

<para>move right 1i
T: ellipse ht .3i wid 4i
   line from T.e down 4i
   line from T.w down 4i
B: arc rad 10i to T.e+(0,-4)

P1: S1: box ht 3i wid 1i "Subdisk" above "\s-2<emphasis>myvol.p0.s0</emphasis>\s0" below with .c at T.w+(2,-1.95)
        "Plex 1" at S1.s+(0,-.3)
        move down .17i; "\s-2<emphasis>myvol.p0</emphasis>\s0"

"\s-2\&amp;0 MB\s0" at S1.ne+(.5,0)
"\s-2\&amp;512 MB\s0" at S1.se+(.5,0)

A: arrow from S1.ne+(.1,0) to S1.se+(.1,0)

 "\s-2volume" ljust at A.n+(.1,-.63)
 "address" ljust at A.n+(.1,-.8)
 "space\s0" ljust at A.n+(.1,-.97)
</para>

<para><figure><title>A simple Vinum volume</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>This figure, and the ones which follow, represent a volume, which contains the
plexes, which in turn contain the subdisks.  In this trivial example, the volume
contains one plex, and the plex contains one subdisk.
</para>

<para>This particular volume has no specific advantage over a conventional disk
partition.  It contains a single plex, so it is not redundant.  The plex
contains a single subdisk, so there is no difference in storage allocation from
a conventional disk partition.  The following sections illustrate various more
interesting configuration methods.
</para>
</sect2>
<sect2>
<title>Increased resilience: mirroring</title>

<para>The resilience of a volume can be increased
by mirroring.
When laying out a mirrored volume, it is important to ensure that the subdisks
of each plex are on different drives, so that a drive failure will not take down
both plexes.  The following configuration mirrors a volume:
</para>
<programlisting>
drive b device /dev/da4h
volume mirror
  plex org concat
    sd length 512m drive a
  plex org concat
    sd length 512m drive b
</programlisting>

<para>In this example, it was not necessary to specify a definition of drive <emphasis>a</emphasis>
again, since Vinum keeps track of all objects in its configuration database.
After processing this definition, the configuration looks like:
</para>
<programlisting>
Drives:         2 (4 configured)
Volumes:        2 (4 configured)
Plexes:         3 (8 configured)
Subdisks:       3 (16 configured)

D a                     State: up       Device /dev/da3h        Avail: 1549/2573 MB (60%)
D b                     State: up       Device /dev/da4h        Avail: 2061/2573 MB (80%)

V myvol                 State: up       Plexes:       1 Size:        512 MB
V mirror                State: up       Plexes:       2 Size:        512 MB

P myvol.p0            C State: up       Subdisks:     1 Size:        512 MB
P mirror.p0           C State: up       Subdisks:     1 Size:        512 MB
P mirror.p1           C State: initializing     Subdisks:     1 Size:        512 MB

S myvol.p0.s0           State: up       PO:        0  B Size:        512 MB
S mirror.p0.s0          State: up       PO:        0  B Size:        512 MB
S mirror.p1.s0          State: empty    PO:        0  B Size:        512 MB
</programlisting>

<para>Figure <xref linkend="CFBSD-mirrored-vol"/> shows the structure graphically.
</para>

<para>move right 1i
T: ellipse ht .3i wid 4i
   line from T.e down 4i
   line from T.w down 4i
B: arc rad 10i to T.e+(0,-4)

P1: S1: box ht 3i wid 1i "Subdisk 1" above "\s-2<emphasis>mirror.p0.s0</emphasis>\s0" below with .c at T.c+(-1,-2)
        "Plex 1" at S1.s+(0,-.3)
        move down .17i; "\s-2<emphasis>mirror.p0</emphasis>\s0"
P2: S3: box ht 3i wid 1i "Subdisk 2" above "\s-2<emphasis>mirror.p1.s0</emphasis>\s0" below with .c at T.c+(1,-2)
        "Plex 2" at S3.s+(0,-.3)
        move down .17i; "\s-2<emphasis>mirror.p1</emphasis>\s0"

"\s-2\&amp;0 MB\s0" at S1.ne+(.5,0)
"\s-2\&amp;512 MB\s0" at S1.se+(.5,0)

A: arrow from S1.ne+(.1,0) to S1.se+(.1,0)
   arrow from S1.se+(.1,0) to S1.ne+(.1,0)

 "\s-2volume" ljust at A.n+(.1,-.63)
 "address" ljust at A.n+(.1,-.8)
 "space\s0" ljust at A.n+(.1,-.97)
</para>

<para><figure><title>A mirrored Vinum volume</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>In this example, each plex contains the full 512 MB of address space.  As in the
previous example, each plex contains only a single subdisk.
</para>
</sect2>
<sect2>
<title>Optimizing performance</title>

<para>The mirrored volume in the previous example is more resistant to failure than an
unmirrored volume, but its performance is less: each write to the volume
requires a write to both drives, using up a greater proportion of the total disk
bandwidth.  Performance considerations demand a different approach: instead of
mirroring, the data is striped across as many disk drives as possible.  The
following configuration shows a volume with a plex striped across four disk
drives:
</para>
<programlisting>
drive c device /dev/da5h
drive d device /dev/da6h
volume stripe
  plex org striped 512k
    sd length 128m drive a
    sd length 128m drive b
    sd length 128m drive c
    sd length 128m drive d
</programlisting>

<para></para>

<para>As before, it is not necessary to define the drives which are already known to
Vinum.  After processing this definition, the configuration looks like:
</para>
<programlisting>
Drives:         4 (4 configured)
Volumes:        3 (4 configured)
Plexes:         4 (8 configured)
Subdisks:       7 (16 configured)

D a                     State: up       Device /dev/da3h        Avail: 1421/2573 MB (55%)
D b                     State: up       Device /dev/da4h        Avail: 1933/2573 MB (75%)
D c                     State: up       Device /dev/da5h        Avail: 2445/2573 MB (95%)
D d                     State: up       Device /dev/da6h        Avail: 2445/2573 MB (95%)

V myvol                 State: up       Plexes:       1 Size:        512 MB
V mirror                State: up       Plexes:       2 Size:        512 MB
V striped               State: up       Plexes:       1 Size:        512 MB

P myvol.p0            C State: up       Subdisks:     1 Size:        512 MB
P mirror.p0           C State: up       Subdisks:     1 Size:        512 MB
P mirror.p1           C State: initializing     Subdisks:     1 Size:        512 MB
P striped.p1            State: up       Subdisks:     1 Size:        512 MB

S myvol.p0.s0           State: up       PO:        0  B Size:        512 MB
S mirror.p0.s0          State: up       PO:        0  B Size:        512 MB
S mirror.p1.s0          State: empty    PO:        0  B Size:        512 MB
S striped.p0.s0         State: up       PO:        0  B Size:        128 MB
S striped.p0.s1         State: up       PO:      512 kB Size:        128 MB
S striped.p0.s2         State: up       PO:     1024 kB Size:        128 MB
S striped.p0.s3         State: up       PO:     1536 kB Size:        128 MB
</programlisting>

<para></para>

<para>move right 1i
T: ellipse ht .3i wid 4i
   line from T.e down 4i
   line from T.w down 4i
B: arc rad 10i to T.e+(0,-4)

P1: S1: box ht .7i wid 1i with .c at T.w+(2,-0.825)
    S2: box ht .7i wid 1i
    S3: box ht .7i wid 1i
    S4: box ht .7i wid 1i
        "Plex 1" at S4.s+(0,-.3)
        move down .17i; "\s-2<emphasis>striped.p0</emphasis>\s0"

"\s-2\&amp;0 MB\s0" at S1.ne+(.5,0)
"\s-2\&amp;512 MB\s0" at S4.se+(.5,0)

A: arrow from S1.ne+(.1,0) to S4.se+(.1,0)

 "\s-2volume" ljust at A.n+(.1,-.63)
 "address" ljust at A.n+(.1,-.8)
 "space\s0" ljust at A.n+(.1,-.97)
 "<emphasis>\s-2striped.p0.s0</emphasis>\s0" at S1.w-(.2,0) rjust
 "<emphasis>\s-2striped.p0.s1</emphasis>\s0" at S2.w-(.2,0) rjust
 "<emphasis>\s-2striped.p0.s2</emphasis>\s0" at S3.w-(.2,0) rjust
 "<emphasis>\s-2striped.p0.s3</emphasis>\s0" at S4.w-(.2,0) rjust

<!--  Stripes -->
  box filled .1 wid 1i ht .1i at S1.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S1.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S1.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S1.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S1.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S1.n+(0, -.55)
  box filled .7 wid 1i ht .1i at S1.n+(0, -.65)

  box filled .1 wid 1i ht .1i at S2.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S2.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S2.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S2.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S2.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S2.n+(0, -.55)
  box filled .7 wid 1i ht .1i at S2.n+(0, -.65)

  box filled .1 wid 1i ht .1i at S3.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S3.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S3.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S3.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S3.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S3.n+(0, -.55)
  box filled .7 wid 1i ht .1i at S3.n+(0, -.65)

  box filled .1 wid 1i ht .1i at S4.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S4.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S4.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S4.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S4.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S4.n+(0, -.55)
  box filled .7 wid 1i ht .1i at S4.n+(0, -.65)

</para>

<para><figure><title>A striped Vinum volume</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>This volume is represented in Figure <xref linkend="CFBSD-striped-vol"/>.  The darkness of the
stripes indicates the position within the plex address space: the lightest
stripes come first, the darkest last.
</para>
</sect2>
<sect2>
<title>Resilience and performance</title>

<para><anchor id="CFBSD-resilience"/>
With sufficient hardware, it is possible to build volumes which show both
increased resilience and increased performance compared to standard UNIX
partitions.
A
typical configuration file might be:
</para>
<programlisting>
volume raid10
  plex org striped 512k
    sd length 102480k drive a
    sd length 102480k drive b
    sd length 102480k drive c
    sd length 102480k drive d
    sd length 102480k drive e
  plex org striped 512k
    sd length 102480k drive c
    sd length 102480k drive d
    sd length 102480k drive e
    sd length 102480k drive a
    sd length 102480k drive b
</programlisting>

<para>The subdisks of the second plex are offset by two drives from those of the first
plex: this helps ensure that writes do not go to the same subdisks even if a
transfer goes over two drives.
</para>

<para>Figure <xref linkend="CFBSD-raid10-vol"/> represents the structure of this volume.
</para>

<para>move right 1i
T: ellipse ht .3i wid 4i
   line from T.e down 4i
   line from T.w down 4i
B: arc rad 10i to T.e+(0,-4)

P1: S1: box ht .6i wid 1i with .c at T.w+(1.3,-0.825)
    S2: box ht .6i wid 1i
    S3: box ht .6i wid 1i
    S4: box ht .6i wid 1i
    S5: box ht .6i wid 1i
        "Plex 1" at S5.s+(0,-.3)
        move down .17i; "\s-2<emphasis>striped.p0</emphasis>\s0"

P1: S11: box ht .6i wid 1i with .c at T.w+(3.3,-0.825)
    S12: box ht .6i wid 1i
    S13: box ht .6i wid 1i
    S14: box ht .6i wid 1i
    S15: box ht .6i wid 1i
        "Plex 2" at S15.s+(0,-.3)
        move down .17i; "\s-2<emphasis>striped.p1</emphasis>\s0"

 "<emphasis>\s-2.p0.s0</emphasis>\s0" at S1.w-(.2,0) rjust
 "<emphasis>\s-2.p0.s1</emphasis>\s0" at S2.w-(.2,0) rjust
 "<emphasis>\s-2.p0.s2</emphasis>\s0" at S3.w-(.2,0) rjust
 "<emphasis>\s-2.p0.s3</emphasis>\s0" at S4.w-(.2,0) rjust
 "<emphasis>\s-2.p0.s4</emphasis>\s0" at S5.w-(.2,0) rjust

 "<emphasis>\s-2.p1.s0</emphasis>\s0" at S11.w-(.2,0) rjust
 "<emphasis>\s-2.p1.s1</emphasis>\s0" at S12.w-(.2,0) rjust
 "<emphasis>\s-2.p1.s2</emphasis>\s0" at S13.w-(.2,0) rjust
 "<emphasis>\s-2.p1.s3</emphasis>\s0" at S14.w-(.2,0) rjust
 "<emphasis>\s-2.p1.s4</emphasis>\s0" at S15.w-(.2,0) rjust

<!--  Stripes -->
  box filled .1 wid 1i ht .1i at S1.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S1.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S1.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S1.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S1.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S1.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S2.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S2.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S2.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S2.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S2.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S2.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S3.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S3.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S3.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S3.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S3.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S3.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S4.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S4.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S4.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S4.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S4.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S4.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S5.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S5.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S5.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S5.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S5.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S5.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S11.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S11.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S11.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S11.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S11.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S11.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S12.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S12.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S12.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S12.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S12.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S12.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S13.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S13.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S13.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S13.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S13.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S13.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S14.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S14.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S14.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S14.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S14.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S14.n+(0, -.55)

  box filled .1 wid 1i ht .1i at S15.n+(0, -.05)
  box filled .2 wid 1i ht .1i at S15.n+(0, -.15)
  box filled .3 wid 1i ht .1i at S15.n+(0, -.25)
  box filled .4 wid 1i ht .1i at S15.n+(0, -.35)
  box filled .5 wid 1i ht .1i at S15.n+(0, -.45)
  box filled .6 wid 1i ht .1i at S15.n+(0, -.55)

</para>

<para><figure><title>A mirrored, striped Vinum volume</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect2>
</sect1>
<sect1>
<title>Object naming</title>

<para>As described above, Vinum assigns default names to plexes and subdisks, although
they may be overridden.  Overriding the default names is not recommended:
experience with the VERITAS\(rg volume manager, which allows arbitary naming of
objects, has shown that this flexibility does not bring a significant advantage,
and it can cause confusion.
</para>

<para>Names may contain any non-blank character, but it is recommended to restrict
them to letters, digits and the underscore characters.  The names of volumes,
plexes and subdisks may be up to 64 characters long, and the names of drives may
up to 32 characters long.
</para>

<para><indexterm><primary>/dev/vinum</primary></indexterm>
Vinum objects are assigned device nodes in the hierarchy <emphasis>/dev/vinum</emphasis>.  The
configuration shown above would cause Vinum to create the following device
nodes:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/dev/vinum/control</primary></indexterm>
The control devices <emphasis>/dev/vinum/control</emphasis> and <emphasis>/dev/vinum/controld</emphasis>,
which are used by <emphasis>vinum(8)</emphasis> and the Vinum dæmon respectively.
</para>
</listitem>
<listitem>

<para>Block and character device entries for each volume.  These are the main devices
used by Vinum.  The block device names are the name of the volume, while the
character device names follow the BSD tradition of prepending the letter
<emphasis>r</emphasis> to the name.  Thus the configuration above would include the block
devices <emphasis>/dev/vinum/myvol</emphasis>, <emphasis>/dev/vinum/mirror</emphasis>,
<emphasis>/dev/vinum/striped</emphasis>, <emphasis>/dev/vinum/raid5</emphasis> and <emphasis>/dev/vinum/raid10</emphasis>,
and the character devices <emphasis>/dev/vinum/rmyvol</emphasis>, <emphasis>/dev/vinum/rmirror</emphasis>,
<emphasis>/dev/vinum/rstriped</emphasis>, <emphasis>/dev/vinum/rraid5</emphasis> and
<emphasis>/dev/vinum/rraid10</emphasis>.  There is obviously a problem here: it is possible to
have two volumes called <emphasis>r</emphasis> and <emphasis>rr</emphasis>, but there will be a conflict
creating the device node <emphasis>/dev/vinum/rr</emphasis>: is it a character device for
volume <emphasis>r</emphasis> or a block device for volume <emphasis>rr</emphasis>?  Currently Vinum does
not address this conflict: the first-defined volume will get the name.
</para>
</listitem>
<listitem>

<para>A directory <emphasis>/dev/vinum/drive</emphasis> with entries for each drive.  These entries
are in fact symbolic links to the corresponding disk nodes.
</para>
</listitem>
<listitem>

<para>A directory <emphasis>/dev/vinum/volume</emphasis> with entries for each volume.  It contains
subdirectories for each plex, which in turn contain subdirectories for their
component subdisks.
</para>
</listitem>
<listitem>

<para>The directories <emphasis>/dev/vinum/plex</emphasis> and <emphasis>/dev/vinum/sd</emphasis>,
<emphasis>/dev/vinum/rsd</emphasis>, which contain block device nodes for each plex and block
and character device nodes respectively for subdisk.
</para>
</listitem>
</itemizedlist>

<para>For example, consider the following configuration file:
</para>
<programlisting>
drive drive1 device /dev/sd1h
drive drive2 device /dev/sd2h
drive drive3 device /dev/sd3h
drive drive4 device /dev/sd4h
volume s64 setupstate
 plex org striped 64k
   sd length 100m drive drive1
   sd length 100m drive drive2
   sd length 100m drive drive3
   sd length 100m drive drive4
</programlisting>

<para>After processing this file, <emphasis>vinum(8)</emphasis> creates the following structure in
<emphasis>/dev/vinum</emphasis>:
</para>
<programlisting>
brwx------  1 root  wheel   25, 0x40000001 Apr 13 16:46 Control
brwx------  1 root  wheel   25, 0x40000002 Apr 13 16:46 control
brwx------  1 root  wheel   25, 0x40000000 Apr 13 16:46 controld
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 drive
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 plex
crwxr-xr--  1 root  wheel   91,   2 Apr 13 16:46 rs64
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 rsd
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 rvol
brwxr-xr--  1 root  wheel   25,   2 Apr 13 16:46 s64
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 sd
drwxr-xr-x  3 root  wheel       512 Apr 13 16:46 vol

/dev/vinum/drive:
total 0
lrwxr-xr-x  1 root  wheel  9 Apr 13 16:46 drive1 -&gt; /dev/sd1h
lrwxr-xr-x  1 root  wheel  9 Apr 13 16:46 drive2 -&gt; /dev/sd2h
lrwxr-xr-x  1 root  wheel  9 Apr 13 16:46 drive3 -&gt; /dev/sd3h
lrwxr-xr-x  1 root  wheel  9 Apr 13 16:46 drive4 -&gt; /dev/sd4h

/dev/vinum/plex:
total 0
brwxr-xr--  1 root  wheel   25, 0x10000002 Apr 13 16:46 s64.p0

/dev/vinum/rsd:
total 0
crwxr-xr--  1 root  wheel   91, 0x20000002 Apr 13 16:46 s64.p0.s0
crwxr-xr--  1 root  wheel   91, 0x20100002 Apr 13 16:46 s64.p0.s1
crwxr-xr--  1 root  wheel   91, 0x20200002 Apr 13 16:46 s64.p0.s2
crwxr-xr--  1 root  wheel   91, 0x20300002 Apr 13 16:46 s64.p0.s3

/dev/vinum/rvol:
total 0
crwxr-xr--  1 root  wheel   91,   2 Apr 13 16:46 s64

/dev/vinum/sd:
total 0
brwxr-xr--  1 root  wheel   25, 0x20000002 Apr 13 16:46 s64.p0.s0
brwxr-xr--  1 root  wheel   25, 0x20100002 Apr 13 16:46 s64.p0.s1
brwxr-xr--  1 root  wheel   25, 0x20200002 Apr 13 16:46 s64.p0.s2
brwxr-xr--  1 root  wheel   25, 0x20300002 Apr 13 16:46 s64.p0.s3

/dev/vinum/vol:
total 1
brwxr-xr--  1 root  wheel   25,   2 Apr 13 16:46 s64
drwxr-xr-x  3 root  wheel       512 Apr 13 16:46 s64.plex

/dev/vinum/vol/s64.plex:
total 1
brwxr-xr--  1 root  wheel   25, 0x10000002 Apr 13 16:46 s64.p0
drwxr-xr-x  2 root  wheel       512 Apr 13 16:46 s64.p0.sd

/dev/vinum/vol/s64.plex/s64.p0.sd:
total 0
brwxr-xr--  1 root  wheel   25, 0x20000002 Apr 13 16:46 s64.p0.s0
brwxr-xr--  1 root  wheel   25, 0x20100002 Apr 13 16:46 s64.p0.s1
brwxr-xr--  1 root  wheel   25, 0x20200002 Apr 13 16:46 s64.p0.s2
brwxr-xr--  1 root  wheel   25, 0x20300002 Apr 13 16:46 s64.p0.s3
</programlisting>

<para></para>

<para>Although it is recommended that plexes and subdisks should not be allocated
specific names, Vinum drives must be named.  This makes it possible to move a
drive to a different location and still recognize it automatically.  Drive names
may be up to 32 characters long.
</para>
<sect2>
<title>Creating file systems</title>

<para><indexterm><primary>newfs</primary></indexterm>
Volumes appear to the system to be identical to disks, with one exception.
Unlike UNIX drives, Vinum does not partition volumes, which thus do not contain
a partition table.  This has required modification to some disk utilities,
notably <emphasis>newfs</emphasis>, which previously tried to interpret the last letter of a
Vinum volume name as a partition identifier.  For example, a disk drive may have
a name like <emphasis>/dev/wd0a</emphasis> or <emphasis>/dev/da2h</emphasis>.  These names represent the
first partition (<emphasis>a</emphasis>) on the first (0) IDE disk (<emphasis>wd</emphasis>) and the eight
partition (<emphasis>h</emphasis>) on the third (2) SCSI disk (<emphasis>da</emphasis>) respectively.  By
contrast, a Vinum volume might be called <emphasis>/dev/vinum/concat</emphasis>, a name which
has no relationship with a partition name.
</para>

<para>Normally, <emphasis>newfs(8)</emphasis> interprets the name of the disk and complains if it
cannot understand it.  For example:
</para>
<programlisting>
# <command>newfs /dev/vinum/concat</command>
newfs: /dev/vinum/concat: can't figure out file system partition
</programlisting>

<para>In order to create a file system on this volume, use the <emphasis>-v</emphasis> option to
<emphasis>newfs(8)</emphasis>:
</para>
<programlisting>
# <command>newfs -v /dev/vinum/concat</command>
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Configuring Vinum</title>

<para>The <emphasis>GENERIC</emphasis> kernel does not contain Vinum.  It's possible to build a
special kernel which includes Vinum, but this is not recommended.  The standard
way to start Vinum is as a <emphasis>kld</emphasis> (see page <xref linkend="CFBSD-kld"/> for more details).  You
don't even need to use <emphasis>kldload</emphasis> for Vinum: when you start <emphasis>vinum(8)</emphasis>,
it checks whether the module has been loaded, and if it isn't, it loads it
automatically.
</para>
</sect1>
<sect1>
<title>Startup</title>

<para>Vinum stores configuration information on the disk slices in essentially the
same form as in the configuration files.  When reading from the configuration
database, Vinum recognizes a number of keywords which are not allowed in the
configuration files.  For example, a disk configuration might contain the
following text:
</para>
<programlisting>
volume myvol state up
volume bigraid state down
plex name myvol.p0 state up org concat vol myvol
plex name myvol.p1 state up org concat vol myvol
plex name myvol.p2 state init org striped 512b vol myvol
plex name bigraid.p0 state initializing org raid5 512b vol bigraid
sd name myvol.p0.s0 drive a plex myvol.p0 state up len 1048576b driveoffset 265b plexo
ffset 0b
sd name myvol.p0.s1 drive b plex myvol.p0 state up len 1048576b driveoffset 265b plexo
ffset 1048576b
sd name myvol.p1.s0 drive c plex myvol.p1 state up len 1048576b driveoffset 265b plexo
ffset 0b
sd name myvol.p1.s1 drive d plex myvol.p1 state up len 1048576b driveoffset 265b plexo
ffset 1048576b
sd name myvol.p2.s0 drive a plex myvol.p2 state init len 524288b driveoffset 1048841b
plexoffset 0b
sd name myvol.p2.s1 drive b plex myvol.p2 state init len 524288b driveoffset 1048841b
plexoffset 524288b
sd name myvol.p2.s2 drive c plex myvol.p2 state init len 524288b driveoffset 1048841b
plexoffset 1048576b
sd name myvol.p2.s3 drive d plex myvol.p2 state init len 524288b driveoffset 1048841b
plexoffset 1572864b
sd name bigraid.p0.s0 drive a plex bigraid.p0 state initializing len 4194304b driveoff
set 1573129b plexoffset 0b
sd name bigraid.p0.s1 drive b plex bigraid.p0 state initializing len 4194304b driveoff
set 1573129b plexoffset 4194304b
sd name bigraid.p0.s2 drive c plex bigraid.p0 state initializing len 4194304b driveoff
set 1573129b plexoffset 8388608b
sd name bigraid.p0.s3 drive d plex bigraid.p0 state initializing len 4194304b driveoff
set 1573129b plexoffset 12582912b
sd name bigraid.p0.s4 drive e plex bigraid.p0 state initializing len 4194304b driveoff
set 1573129b plexoffset 16777216b
</programlisting>

<para>The obvious differences here are the presence of explicit location information
and naming (both of which are also allowed, but discouraged, for use by the
user) and the information on the states (which are not available to the user).
Vinum does not store information about drives in the configuration information:
it finds the drives by scanning the configured disk drives for partitions with a
Vinum label.  This enables Vinum to identify drives correctly even if they have
been assigned different UNIX drive IDs.
</para>
<sect2>
<title>Automatic startup</title>

<para>In order to start Vinum automatically when you boot the system, ensure that you
have the following line in your <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
start_vinum="YES"		# set to YES to start vinum
</programlisting>

<para>If you don't have a file <emphasis>/etc/rc.conf</emphasis>, create one with this content.  This
will cause the system to load the Vinum kld at startup, and to start any objects
mentioned in the configuration.  This is done before mounting file systems, so
it's possible to automatically <emphasis>fsck</emphasis> and mount file systems on Vinum
volumes.
</para>

<para>When you start Vinum with the <emphasis>vinum\ start</emphasis> command, Vinum reads the
configuration database from one of the Vinum drives.  Under normal
circumstances, each drive contains an identical copy of the configuration
database, so it does not matter which drive is read.  After a crash, however,
Vinum must determine which drive was updated most recently and read the
configuration from this drive.  It then updates the configuration if necessary
from progressively older drives.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchtapes"><title>Tapes, backups and floppy disks</title>

<para>In the last chapter, we looked at hard disks.  In this chapter, we'll consider
how to guard against data loss, and how to transfer data from one location to
another.  These are functions that UNIX traditionally performs with tapes, and
we'll look at them in the next sections.  Because FreeBSD runs on PCs, however,
you can't completely escape floppy disks, though it would be an excellent idea.
We'll look at floppies on page <xref linkend="CFBSD-bloody-floppies"/>.
</para>
<sect1>
<title>Backing up your data</title>

<para><indexterm><primary>Backing</primary><secondary>up your data</secondary></indexterm>
No matter how reliable your system, you are never completely protected against
loss of data.  The most common reasons are hardware failure and human error.
By comparison, it's <emphasis>very</emphasis> seldom that a software error causes data loss,
but this, too, can happen.
</para>

<para><indexterm><primary>archive</primary></indexterm>
<indexterm><primary>tarball</primary></indexterm>
<indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
UNIX talks about <emphasis>archives</emphasis>, which are copies of disk data in a form
suitable for writing on a serial medium such as tape.  You can, however, write
them to disk files as well, and that's what people do when they want to move a
source tree from one system to another.  You'll also hear the term
<emphasis>tarball</emphasis> for an archive made by the <emphasis>tar</emphasis> program, which we will
discuss below.
</para>
<sect2>
<title>What backup medium?</title>

<para>Traditionally, PCs use floppy disks as a removable storage medium.  We'll look
at floppies below, but you can sum the section up in one statement:
</para>
<note>

<para>Don't use floppy disks.
</para>
</note>

<para>Floppy disks are particularly unsuited as a backup medium for modern computers.
Consider a typical system with a 2 GB hard disk.  Storing 2 GB of data on
floppies requires about 1,500 floppies, which, at $0.30 each, would cost you
$450.  Copying the data to a floppy takes about 50 seconds per floppy, so the
raw backup time would be about 21 hours, plus the time it takes you to change
the floppies, which could easily take another 3 or more hours.  During this time
you have to sit by the computer playing disk jockey, a total of three days' work
during which you could hardly do anything else.  When you try to read in the
data again, there's a virtual certainty that one of the floppies will have a
data error, especially if you read them with a different drive.
</para>

<para>By contrast, a QIC-525 tape cartridge will store 500 MB of data for about $20.
The media for the same operation would cost $80, and it will take about 6 hours,
during which you just need to change the tapes three times.  A single DDS or
Exabyte cassette stores several gigabytes and costs about $6.  The backup time
for 2 GB is about 90 minutes, and the operation can be performed completely
unattended.
</para>

<para>You can currently get a number of relatively cheap tape drives which can connect
to your floppy controller.  Don't buy them.  FreeBSD does have some kind of
support for them, but it's rudimentary, and the drives themselves are unreliable
and slow.  There's no point in making a backup if you can't read the data in
again when you need it.
</para>
</sect2>
<sect2>
<title>Tape devices</title>

<para><indexterm><primary>tape</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-tape-devices"/>
<indexterm><primary>/dev/nrsa0</primary></indexterm>
FreeBSD tape devices have names like <emphasis>/dev/nrsa0</emphasis> (see page <xref linkend="CFBSD-rsa0"/>).
Each letter has a significance:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>tape</primary><secondary>non-rewinding</secondary></indexterm>
<indexterm><primary>tape</primary><secondary>rewind device</secondary></indexterm>
<indexterm><primary>/dev/rsa0</primary></indexterm>
<emphasis>n</emphasis> means <emphasis>non-rewinding</emphasis>.  When the process which accesses the tape
closes it, the tape remains at the same position.  This is inconvenient if you
want to remove the tape (before which you should rewind it), but it's the only
way if you want to handle multiple archives on the tape.  The name of the
corresponding <emphasis>rewind device</emphasis> has no <emphasis>n</emphasis> (for example, the rewind
device corresponding to <emphasis>/dev/nrsa0</emphasis> is <emphasis>/dev/rsa0</emphasis>).  A rewind
device rewinds the tape when it is closed.
</para>
</listitem>
<listitem>

<para><emphasis>r</emphasis> stands for <emphasis>raw</emphasis>, in other words a character device.  Modern tape
devices are always raw.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/dev/rwst0</primary></indexterm>
<emphasis>sa</emphasis> stands for <emphasis>serial access</emphasis>, and is always SCSI.  You can also
have a QIC-02 interface tape, which would be called <emphasis>/dev/rwst0</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>0</emphasis> is the <emphasis>unit number</emphasis>.  If you have more than one tape, the next
will be called <emphasis>/dev/nrsa1</emphasis>, and so on.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Backup software</title>

<para><indexterm><primary>backup</primary><secondary>software</secondary></indexterm>
FreeBSD does not require special ``backup software''.  The base operating system
supplies all the programs you need.  The tape driver is part of the kernel, and
the system includes a number of backup programs.  The most popular are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
<indexterm><primary>tape</primary><secondary>archiver</secondary></indexterm>
<emphasis>tar</emphasis>, the <emphasis>tape archiver</emphasis>, has been around longer than anybody can
remember.  It is particularly useful for data exchange, since everybody has it.
There are even versions of <emphasis>tar</emphasis> for Microsoft platforms.  It's also an
adequate backup program.
</para>
</listitem>
<listitem>

<para><indexterm><primary>cpio</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>cpio</secondary></indexterm>
<emphasis>cpio</emphasis>
is an alternative backup program.  About its only advantage over
<emphasis>tar</emphasis> is that it can read <emphasis>cpio</emphasis> format archives.
</para>
</listitem>
<listitem>

<para><indexterm><primary>pax</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pax</secondary></indexterm>
<emphasis>pax</emphasis> is another alternative backup program.  It has the advantage that it
can also read and write <emphasis>tar</emphasis> and <emphasis>cpio</emphasis> archives.
</para>
</listitem>
<listitem>

<para><indexterm><primary>dump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>dump</secondary></indexterm>
<emphasis>dump</emphasis> is geared more towards backups than towards archiving.  It can
maintain multiple levels of backup, each of which backs up only those files
which have changed since the last backup of the next higher (numerically lower)
level.  It is less suited towards data exchange, since its formats are very
specific to BSD.
</para>
</listitem>
<listitem>

<para><indexterm><primary>amanda</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>amanda</secondary></indexterm>
<emphasis>amanda</emphasis>, in the Ports Collection, is another popular backup program.
</para>
</listitem>
</itemizedlist>

<para>Backup strategies are frequently the subject of religious wars.  I personally
find that <emphasis>tar</emphasis> does everything I want, but you'll find plenty of people
who will recommend <emphasis>dump</emphasis> or <emphasis>amanda</emphasis> instead.  In the following
section, we'll look at the basics of using <emphasis>tar</emphasis>.  See the man page
<emphasis>dump(8)</emphasis> for more information on <emphasis>dump</emphasis>.
</para>
</sect2>
<sect2>
<title><emphasis>tar</emphasis> </title>

<para><indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
<indexterm><primary>tape</primary><secondary>archiver</secondary></indexterm>
<emphasis>tar</emphasis>, the <emphasis>tape archiver</emphasis>, performs the following functions:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>archive</primary></indexterm>
Creating an <emphasis>archive</emphasis>, which can be a serial device such as a tape, or a
disk file, from the contents of a number of directories.
</para>
</listitem>
<listitem>

<para>Extracting files from an archive.
</para>
</listitem>
<listitem>

<para>Listing the contents of an archive.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>gzip</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>gzip</secondary></indexterm>
<emphasis>tar</emphasis> does not compress the data.  The resulting archive is slightly
larger than the sum of the files which it contains, since it also contains a
certain amount of header information.  You can, however, use the <emphasis>gzip</emphasis>
program to compress a <emphasis>tar</emphasis> archive, and <emphasis>tar</emphasis> will invoke it for
you automatically.  The resultant archives are typically 80% smaller than the
constituent files.
</para>
<sect3>
<title>Creating a <emphasis>tar</emphasis> archive</title>

<para><indexterm><primary>creating</primary><secondary>a <emphasis>tar</emphasis> archive</secondary></indexterm>
<indexterm><primary>tar</primary><secondary>creating an archive</secondary></indexterm>
Create an archive with the <emphasis>c</emphasis> option.  Unlike most UNIX programs,
<emphasis>tar</emphasis> does not require a hyphen (<emphasis>-</emphasis>) in front of the options.  For
example, to save your complete kernel source tree, you could write:
</para>
<programlisting>
# <command>tar cvf source-archive.tar /usr/src/sys</command>
tar: Removing leading / from absolute path names in the archive.
usr/src/sys/
usr/src/sys/CVS/
usr/src/sys/CVS/Root
usr/src/sys/CVS/Repository
usr/src/sys/CVS/Entries
usr/src/sys/compile/
usr/src/sys/compile/CVS/
<emphasis>\&amp;(etc)</emphasis>
</programlisting>

<para>The parameters have the following meaning:
</para>
<itemizedlist>
<listitem>

<para><emphasis>cvf</emphasis> are the options.  <emphasis>c</emphasis> stands for <emphasis>create</emphasis> an archive,
<emphasis>v</emphasis> specifies <emphasis>verbose</emphasis> operation (in this case, this causes
<emphasis>tar</emphasis> to produce the list of files being archived), and <emphasis>f</emphasis>
specifies that the next parameter is the name of the archive file.
</para>
</listitem>
<listitem>

<para><emphasis>source-archive.tar</emphasis> is the name of the archive.  In this case, it's a
disk file.
</para>
</listitem>
<listitem>

<para><emphasis>/usr/src/sys</emphasis> is the name of the directory to archive.  <emphasis>tar</emphasis>
archives all files in the directory, including most devices.  For historical
reasons, <emphasis>tar</emphasis> can't back up devices with minor numbers greater than
65536, and changing the format would make it incompatible with other systems.
</para>
</listitem>
</itemizedlist>

<para>The message on the first line (<emphasis>Removing leading / ...</emphasis>) indicates that,
although the directory name was specified as <emphasis>/usr/src/sys</emphasis>, <emphasis>tar</emphasis>
treats it as <emphasis>usr/src/sys</emphasis>.  This makes it possible to restore the files
into another directory at a later time.
</para>

<para>You can back up to tape in exactly the same way:
</para>
<programlisting>
# <command>tar cvf /dev/nrsa0 /usr/src/sys</command>
</programlisting>

<para>There is a simpler way, however: if you don't specify a file name, <emphasis>tar</emphasis>
looks for the environment variable <emphasis>TAPE</emphasis>.  If it finds it, it interprets
it as the name of the tape drive.  You can make things a lot easier by setting
the following line in the configuration file for your shell (<emphasis>.profile</emphasis>
for <emphasis>sh</emphasis>,  <emphasis>.bashrc</emphasis> for <emphasis>bash</emphasis>, <emphasis>.login</emphasis> for <emphasis>csh</emphasis>
and <emphasis>tcsh</emphasis>):
</para>
<programlisting>
TAPE=/dev/nrsa0 export TAPE			<emphasis>for sh and bash</emphasis>
setenv TAPE /dev/nrsa0				<emphasis>for csh and tcsh</emphasis>
</programlisting>

<para>After this, the previous example simplifies to:
</para>
<programlisting>
# <command>tar cv /usr/src/sys</command>
</programlisting>

<para></para>
</sect3>
<sect3>
<title>Listing an archive</title>

<para><indexterm><primary>listing</primary><secondary>a <emphasis>tar</emphasis> archive</secondary></indexterm>
<indexterm><primary>tar</primary><secondary>listing an archive</secondary></indexterm>
To list an archive, use the option <emphasis>t</emphasis>:
</para>
<programlisting>
# <command>tar t</emphasis>							<emphasis>from tape</command>
usr/src/sys/
usr/src/sys/CVS/
usr/src/sys/CVS/Root
usr/src/sys/CVS/Repository
usr/src/sys/CVS/Entries
usr/src/sys/compile/
usr/src/sys/compile/CVS/
usr/src/sys/compile/CVS/Root
<emphasis>\&amp;(etc)</emphasis>
# <command>tar tvf source-archive.tar</emphasis>			<emphasis>from disk</command>
drwxrwxrwx root/bin          0 Oct 25 15:07 1997 usr/src/sys/
drwxrwxrwx root/bin          0 Oct 25 15:08 1997 usr/src/sys/CVS/
-rw-rw-rw- root/wheel        9 Sep 30 23:13 1996 usr/src/sys/CVS/Root
-rw-rw-rw- root/wheel       17 Sep 30 23:13 1996 usr/src/sys/CVS/Repository
-rw-rw-rw- root/bin        346 Oct 25 15:08 1997 usr/src/sys/CVS/Entries
drwxrwxrwx root/bin          0 Oct 27 17:11 1997 usr/src/sys/compile/
drwxrwxrwx root/bin          0 Jul 30 10:52 1997 usr/src/sys/compile/CVS/
<emphasis>\&amp;(etc)</emphasis>
</programlisting>

<para>This example shows the use of the <emphasis>v</emphasis> (<emphasis>verbose</emphasis>) option with
<emphasis>t</emphasis>.  If you don't use it, <emphasis>tar</emphasis> displays only the names of the
files (first example, from tape).  If you do use it, <emphasis>tar</emphasis> also displays
the permissions, ownerships, sizes and last modification date in a form
reminiscent of <emphasis>ls -l</emphasis> (second example, which is from the disk file
<emphasis>source-archive.tar</emphasis>).
</para>
</sect3>
<sect3>
<title>Extracting files</title>

<para><indexterm><primary>tar</primary><secondary>extracting files</secondary></indexterm>
To extract a file from the archive, use the <emphasis>x</emphasis> option:
</para>
<programlisting>
# <command>tar xv usr/src/sys/Makefile</emphasis>			<emphasis>from tape</command>
usr/src/sys/Makefile					<emphasis>confirms that the file was extracted</emphasis>
</programlisting>

<para>As with the <emphasis>c</emphasis> option, if you don't use the <emphasis>v</emphasis> option, <emphasis>tar</emphasis>
will not list any file names.  If you omit the names of the files to extract,
<emphasis>tar</emphasis> will extract the complete archive.
</para>
</sect3>
<sect3>
<title>Compressed archives</title>

<para><indexterm><primary>tar</primary><secondary>compressed archives</secondary></indexterm>
<indexterm><primary>gzip</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>gzip</secondary></indexterm>
<indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
You can use the <emphasis>gzip</emphasis> program in combination with <emphasis>tar</emphasis> by
specifying the <emphasis>z</emphasis> option.  For example, to create the archive
<emphasis>source-archive.tar.gz</emphasis> in compressed format, write:
</para>
<programlisting>
# <command>tar czf source-archive.tar.gz /usr/src/sys</command>
</programlisting>

<para>You <emphasis>must</emphasis> specify the <emphasis>z</emphasis> option when listing or extracting
compressed archives, and you must not do so when listing or extracting
non-compressed archives.  Otherwise you will get messages like:
</para>
<programlisting>
# <command>tar tzvf source-archive.tar </command>

gzip: stdin: not in gzip format
tar: child returned status 1
# <command>tar tvf source-archive.tar.gz </command>
tar: only read 2302 bytes from archive source-archive.tar.gz
</programlisting>

<para></para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Using floppy disks under FreeBSD</title>

<para><indexterm><primary>floppy</primary><secondary>disks</secondary></indexterm>
<anchor id="CFBSD-bloody-floppies"/>
I don't like floppy disks.  UNIX doesn't like floppy disks.  Probably you don't
like floppy disks either, but we occasionally have to live with them.
</para>

<para>FreeBSD requires floppy disks for one thing only: for initially booting the
system.  This is only because this is still the only way to boot most PC which
don't have an operating system on disk.  We've already seen that they're
unsuitable for archival data storage and data transfer.  For this purpose,
FreeBSD uses tapes and CD-ROMs, which are much more reliable, and for the data
volumes involved in modern computers, they're cheaper and faster.
</para>

<para>So why use floppies?  The only good reasons are:
</para>
<itemizedlist>
<listitem>

<para>You have a floppy drive.  You may not have a tape drive.  Before you go out and
buy all those floppies, though, consider that it might be cheaper to buy a tape
drive and some tapes instead.
</para>
</listitem>
<listitem>

<para>You need to exchange data with people using Microsoft platforms, or with people
who don't have the same kind of tape as you do.
</para>
</listitem>
</itemizedlist>

<para>In the following sections, we'll look at how to handle floppies under FreeBSD,
with particular regard to coexisting with Microsoft.  Here's an overview:
</para>
<itemizedlist>
<listitem>

<para>Always format floppies before using them on your system for the first time, even
if they've been formatted before.  We'll look at that in the next section.
</para>
</listitem>
<listitem>

<para>Just occasionally, you need to create a UNIX file system on floppy.  We'll look
at that on page
</para>
</listitem>
<listitem>

<para>When exchanging with Microsoft users, you need to create a Microsoft file system.  We'll
look at that on page <xref linkend="CFBSD-DOS-fs"/>.
</para>
</listitem>
<listitem>

<para>When exchanging with other UNIX users, whether FreeBSD or not, use <emphasis>tar</emphasis> or
<emphasis>cpio</emphasis>.  We'll look at how to do that on page <xref linkend="CFBSD-frisbee"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Formatting a floppy</title>

<para><indexterm><primary>formatting</primary><secondary>floppy disks</secondary></indexterm>
<indexterm><primary>floppy</primary><secondary>disks</secondary></indexterm>
<anchor id="CFBSD-fdformat"/>
<indexterm><primary>FORMAT</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>low-level</primary><secondary>format</secondary></indexterm>
<indexterm><primary>format</primary><secondary>low-level</secondary></indexterm>
<indexterm><primary>high-level</primary><secondary>format</secondary></indexterm>
<indexterm><primary>format</primary><secondary>high-level</secondary></indexterm>
<indexterm><primary>fdformat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdformat</secondary></indexterm>
Even if you buy preformatted floppies, it's a good idea to reformat them.  Track
alignment can vary significifantly between individual floppy drives, and the
result can be that your drive doesn't write quite on top of the pre-written
tracks.  I have seen read failure rates as high as 2% on pre-formatted floppies:
in other words, after writing 100 floppies with valuable data, the chances are
that two of them will have read errors.  You can reduce this problem by
reformatting the floppy in the drive in which it is to be written, but you can't
eliminate it.
</para>

<para><indexterm><primary>FORMAT</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>low-level</primary><secondary>format</secondary></indexterm>
<indexterm><primary>high-level</primary><secondary>format</secondary></indexterm>
<indexterm><primary>format</primary><secondary>low-level</secondary></indexterm>
<indexterm><primary>format</primary><secondary>high-level</secondary></indexterm>
<indexterm><primary>fdformat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fdformat</secondary></indexterm>
On Microsoft platforms, you format floppies with the <emphasis>FORMAT</emphasis> program,
which performs two different functions when invoked on floppies: it performs
both a <emphasis>low-level</emphasis> format, which re-writes the physical sector
information, and then it performs a <emphasis>high-level</emphasis> format, which writes the
information necessary for Microsoft platforms to use it as a file system.  UNIX
calls the second operation creating a file system.  It's not always necessary to
have a file system on the diskette&mdash;in fact, as we'll see, it can be a
disadvantage.  In addition, FreeBSD offers different kinds of file system, so it
performs the two functions with different programs.  In this section, we'll look
at <emphasis>fdformat</emphasis>, which performs the low-level format.  We'll look at how to
create a <emphasis>ufs</emphasis> or Microsoft file system in the next section.
</para>

<para><indexterm><primary>/dev/rfd0</primary></indexterm>
To format the first floppy drive, <emphasis>/dev/rfd0</emphasis>, you would enter:
</para>
<programlisting>
$ <command>fdformat /dev/rfd0</command>
Format 1440K floppy `/dev/rfd0'? (y/n): <command>y</command>
Processing ----------------------------------------
</programlisting>

<para>Each of the hyphen characters (<emphasis>-</emphasis>) represent two tracks.  As the format
proceeds, they change individually to an <command>F</command> (Format) and then to
<command>V</command> (Verify) in turn, so at the end the line reads
</para>
<programlisting>
Processing VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV done.
</programlisting>

<para></para>
</sect2>
<sect2>
<title>File systems on floppy</title>

<para><indexterm><primary>File</primary><secondary>systems on floppy</secondary></indexterm>
<anchor id="CFBSD-make-floppy-fs"/>
<indexterm><primary>ufs</primary></indexterm>
<indexterm><primary>/etc/disktab</primary></indexterm>
It's possible to use floppies as file systems under FreeBSD.  You can create a
<emphasis>ufs</emphasis> file system on a floppy just like on a hard disk.  This is not
necessarily a good idea: the <emphasis>ufs</emphasis> file system is designed for
performance, not maximum capacity.  By default, it doesn't use the last 8% of
disk space, and it includes a lot of structure information which further reduces
the space available on the disk.  Here's an example of creating a file system,
mounting it on the directory <emphasis>/A</emphasis>, and listing the remaining space available
on an empty 3\(12<emphasis>"</emphasis> floppy.  We use the <emphasis>disktab</emphasis> approach to
labelling the disk, as we saw on page
<indexterm><primary>/etc/disktab</primary></indexterm>
<emphasis>/etc/disktab</emphasis> does have labels for floppy disks: use <emphasis>fd1440</emphasis> for a
3\(12<emphasis>"</emphasis> 1.44 MB floppy, and <emphasis>fd1200</emphasis> for a 5\(14<emphasis>"</emphasis> 1.2 MB
floppy:
</para>
<programlisting>
# <command>disklabel -w -r /dev/rfd0 fd1440</emphasis>	<emphasis>label the floppy</command>
# <command>disklabel -r /dev/rfd0</emphasis>			<emphasis>and list the information</command>
# /dev/rfd0:
type: unknown
disk: fd1440
label:
flags:
bytes/sector: 512
sectors/track: 18
tracks/cylinder: 2
sectors/cylinder: 36
cylinders: 80
sectors/unit: 2880
rpm: 300
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
drivedata: 0

3 partitions:
#        size   offset    fstype   [fsize bsize bps/cpg]
  a:     2880        0    unused      512  4096         # (Cyl.    0 - 79)
  b:     2880        0    unused      512  4096         # (Cyl.    0 - 79)
  c:     2880        0    unused      512  4096         # (Cyl.    0 - 79)
# <command>newfs /dev/rfd0</emphasis>				<emphasis>create a new file system</command>
Warning: Block size restricts cylinders per group to 6.
Warning: 1216 sector(s) in last cylinder unallocated
/dev/rfd0.1440: 2880 sectors in 1 cylinders of 1 tracks, 4096 sectors
        1.4MB in 1 cyl groups (6 c/g, 12.00MB/g, 736 i/g)
super-block backups (for fsck -b #) at:
 32,
# <command>mount /dev/fd0 /A</emphasis>				<emphasis>mount the floppy on /A</command>
# <command>df /A</emphasis>						<emphasis>display the space available</command>
Filesystem  1024-blocks     Used    Avail Capacity  Mounted on
/dev/fd0           1319        0     1213     0%    /mnt
</programlisting>

<para>Let's look at this in a little more detail:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>disklabel</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>disklabel</secondary></indexterm>
<indexterm><primary>newfs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>newfs</secondary></indexterm>
<indexterm><primary>ufs</primary></indexterm>
The first invocation of <emphasis>disklabel</emphasis>, with the <emphasis>-w</emphasis> option, writes a
disk label to the floppy, which supplies enough information for <emphasis>newfs</emphasis> to
create a <emphasis>ufs</emphasis> file system on it.
</para>
</listitem>
<listitem>

<para>The second invocation of <emphasis>disklabel</emphasis>, just with the <emphasis>-r</emphasis> option, lists
the information written by the first invocation.  This isn't necessary for
creating the file system, but it helps to check that the disk is labelled
correctly.
</para>
</listitem>
<listitem>

<para><emphasis>newfs</emphasis> creates the <emphasis>ufs</emphasis> file system on the floppy.
</para>
</listitem>
<listitem>

<para><indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
We have already seen <emphasis>mount</emphasis> on page <xref linkend="CFBSD-mount"/>.  In this case, we use it
to mount the floppy on the file system <emphasis>/A</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>df</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>df</secondary></indexterm>
The <emphasis>df</emphasis> program shows the maximum and available space on a file system.
By default, <emphasis>df</emphasis> displays usage in blocks of 512 bytes, an inconvenient
size.  In this example, the environment variable <emphasis>BLOCKSIZE</emphasis> was set to
1024 to display the usage in 1 kB (1024 byte) blocks.  See page
<xref linkend="CFBSD-environment-variables"/> for more details of environment variables.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>tunefs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tunefs</secondary></indexterm>
The output of <emphasis>df</emphasis> looks terrible!  Our floppy only has 1213 kB left for
normal user data, even though there is nothing on it and even <emphasis>df</emphasis> claims
that it can really store 1319 kB.  This is because <emphasis>ufs</emphasis> keeps a default
of 8% of the space free for performance reasons.  You can change this, however,
with <emphasis>tunefs</emphasis>, the file system tune program:
<footnote>

<para>To quote the man page: <emphasis>You can tune a file system, but you can't tune a
fish</emphasis>.
</para>
</footnote>
</para>
<programlisting>
# <command>umount /A</emphasis>					<emphasis>first unmount the floppy</command>
# <command>tunefs -m 0 /dev/rfd0</emphasis>			<emphasis>and change the minimum free to 0</command>
tunefs: minimum percentage of free space changes from 8% to 0%
tunefs: should optimize for space with minfree &lt; 8%
# <command>mount /dev/fd0 /A</emphasis>				<emphasis>mount the file system again</command>
# <command>df /A</emphasis>						<emphasis>and take another look</command>
Filesystem  1024-blocks     Used    Avail Capacity  Mounted on
/dev/fd0           1319        0     1319     0%    /A
</programlisting>

<para>Still, this is a far cry from the claimed data storage of a Microsoft disk.  In
fact, Microsoft disks can't store the full 1.4 MB either, since it also needs
space for storing directories and allocation tables.  The moral of the story:
only use file systems on floppy if you don't have any alternative.
</para>
</sect2>
<sect2>
<title>Microsoft file systems</title>

<para><indexterm><primary>Microsoft</primary><secondary>file systems</secondary></indexterm>
<anchor id="CFBSD-DOS-fs"/>
To create an MS-DOS file system, use the <emphasis>mkdosfs</emphasis> command:
</para>
<programlisting>
$ <command>mkdosfs -f 1440 /dev/rfd0</command>
</programlisting>

<para>The specification <emphasis>-f 1440</emphasis> tells <emphasis>mkdosfs</emphasis> that this is a 1.4 MB
floppy.
<indexterm><primary>mformat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mformat</secondary></indexterm>
Alternatively, you can use the <emphasis>mformat</emphasis> command:
</para>
<programlisting>
$ <command>mformat A: </command>
</programlisting>

<para>You can specify the number of tracks with the <emphasis>-t</emphasis> option, and the number
of sectors with the <emphasis>-s</emphasis> option.  To explicitly specify a floppy with 80
tracks and 18 sectors (a standard 3\(12<emphasis>"</emphasis> 1.44 MB floppy), you could
enter:
</para>
<programlisting>
$ mformat -t 80 -s 18 A:
</programlisting>

<para><indexterm><primary>mtools</primary></indexterm>
<emphasis>mformat</emphasis> is one of the <emphasis>mtools </emphasis>\ that we will look at in the next
section.
</para>
</sect2>
<sect2>
<title>Other uses of floppies</title>

<para><indexterm><primary>frisbee</primary></indexterm>
<anchor id="CFBSD-frisbee"/>
<indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
Well, you could take the disks out of the cover and use them as a kind of
frisbee.  But there is one other useful thing you can do with floppies: as an
archive medium, they don't need a file system on them.  They just need to be
low-level formatted.  For example, to write the contents of the current
directory onto a floppy, you could enter:
</para>
<programlisting>
$ <command>tar cvfM /dev/rfd0 .</command>
\&amp;./
\&amp;.xfmrc
\&amp;.x6530modkey
\&amp;.uwmrc
\&amp;.twmrc
\&amp;.rnsoft
\&amp;.rnlast
\&amp;.rhosts~
\&amp;.rhosts
<emphasis>\&amp;...etc</emphasis>
Prepare volume #2 for /dev/rfd0 and hit return:
</programlisting>

<para>Since we are writing to the floppy as a character device, the name is
<emphasis>/dev/<emphasis>r</emphasis><emphasis>fd0</emphasis>&mdash;as with tapes, the <emphasis>r</emphasis> stands for the
<emphasis>raw</emphasis> device.  Note also the solitary dot (<emphasis>.</emphasis>) at the end of the
command line.  That's the name of the current directory, and that's what you're
backing up.  Note also the option <emphasis>M</emphasis>, which is short for
<emphasis>--multi-volume</emphasis>.  There's a very good chance that you'll run out of space
on a floppy, and this option says that you have a sufficient supply of floppies
to perform the complete backup.
</para>

<para><indexterm><primary>tar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tar</secondary></indexterm>
To extract the data again, use <emphasis>tar</emphasis> with the <emphasis>x</emphasis> option:
</para>
</emphasis><programlisting>
$ <command>tar xvfM /dev/rfd0</command>
\&amp;./
\&amp;.xfmrc
\&amp;.x6530modkey
\&amp;.uwmrc
<emphasis>\&amp;...etc</emphasis>
</programlisting>

<para>See the man page <emphasis>tar(1)</emphasis> for other things you can do with <emphasis>tar</emphasis>.
</para>
</sect2>
<sect2>
<title>Accessing Microsoft floppies</title>

<para><anchor id="CFBSD-mtools"/>
<indexterm><primary>mtools</primary></indexterm>
<indexterm><primary>ATTRIB</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>CD</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>COPY</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>DEL</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>DIR</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>FORMAT</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>LABEL</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>MD</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>RD</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>READ</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
<indexterm><primary>REN</primary><secondary>MS-DOS command</secondary></indexterm>
<indexterm><primary>MS-DOS</primary><secondary>command</secondary></indexterm>
Of course, most of the time you get data on a floppy, it's not in <emphasis>tar</emphasis>
format: it has a Microsoft file system on it.  We've already seen the Microsoft
file system type on page <xref linkend="CFBSD-msdosfs"/>, but that's a bit of overkill if you just
want to copy files from floppy.  In this case, use the <emphasis>mtools</emphasis> package.
<emphasis>mtools</emphasis> is an implementation of the MS-DOS commands <emphasis>ATTRIB</emphasis>,
<emphasis>CD</emphasis>, <emphasis>COPY</emphasis>, <emphasis>DEL</emphasis>, <emphasis>DIR</emphasis>, <emphasis>FORMAT</emphasis>, <emphasis>LABEL</emphasis>, <emphasis>MD</emphasis>,
<emphasis>RD</emphasis>, <emphasis>READ</emphasis>, <emphasis>REN</emphasis>, and <emphasis>TYPE</emphasis> under UNIX.  To avoid confusion
with existing utilities, the UNIX versions of these commands start with the
letter <emphasis>m</emphasis>.  They are also written in lower case.  For example, to list
the contents of a floppy and copy one of the files to the current (FreeBSD)
directory, you might enter:
</para>
<programlisting>
$ </emphasis><command>mdir</command>						<emphasis>list the current directory on A:
 Volume in drive A is MESSED OS
 Directory for A:/

IO       SYS       33430    4-09-91   5:00a
MSDOS    SYS       37394    4-09-91   5:00a
COMMAND  COM       47845   12-23-92   5:22p
NFS              &lt;DIR&gt;     12-24-92  11:03a
DOSEDIT  COM        1728   10-07-83   7:40a
CONFIG   SYS         792   10-07-94   7:31p
AUTOEXEC BAT         191   12-24-92  11:10a
MOUSE            &lt;DIR&gt;     12-24-92  11:09a
      12 File(s)      82944 bytes free
$ <command>mcd nfs</emphasis>						<emphasis>Change to directory A:\eNFS</command>
$ </emphasis><command>mdir</command>						<emphasis>and list the directory
 Volume in drive A is MESSED OS
 Directory for A:/NFS

\&amp;.                &lt;DIR&gt;     12-24-92  11:03a
\&amp;..               &lt;DIR&gt;     12-24-92  11:03a
HOSTS               5985   10-07-94   7:34p
NETWORK  BAT         103   12-24-92  12:28p
DRIVES   BAT          98   11-07-94   5:24p
\&amp;<emphasis>...and many more</emphasis>
      51 File(s)      82944 bytes free
$ <command>mtype drives.bat</emphasis>				<emphasis>type the contents of DRIVES.BAT</command>
net use c: presto:/usr/dos
c:
cd \enfs
# net use f: porsche:/dos
# net use g: porsche:/usr
$ <command>mcopy a:hosts .</emphasis>				<emphasis>copy A:HOSTS to local UNIX directory</command>
Copying HOSTS
$ <command>ls -l hosts</emphasis>					<emphasis>and list it</command>
-rw-rw-rw-   1 root     wheel        5985 Jan 28 18:04 hosts
</programlisting>

<para>You must specify the drive letter to <emphasis>mcopy</emphasis>, since it uses this
indication to decide whether the file name is a UNIX file name or a Microsoft
file name.  You can copy files from FreeBSD to the floppy as well, of course.
</para>

<para><anchor id="CFBSD-Microsoft-staircase"/>
<emphasis>A word of warning</emphasis>.  UNIX uses a different text data format from Microsoft: in
UNIX, lines end with a single character, called <keycap>Newline</keycap>, and represented
by the characters <emphasis>\en</emphasis> in the C programming language.  It corresponds to
the ASCII character <keycap>Line Feed</keycap> (represented by <emphasis>^J</emphasis>).  Microsoft uses
two characters, a <keycap>Carriage Return</keycap> (<emphasis>^M</emphasis>) followed by a <keycap>Line
Feed</keycap>.  This unfortunate difference causes a number of unexpected
compatibility problems, since both characters are usually invisible on the
screen.
</para>

<para>In FreeBSD, you won't normally have many problems.  Occasionally a program will
complain about non-printable characters in an input line.  Some, like
<emphasis>Emacs</emphasis>, will show them.  For example, our last file, <emphasis>drives.bat</emphasis>,
would show as:
</para>
<programlisting>
net use c: presto:/usr/dos^M
c:^M
cd \enfs^M
# net use f: porsche:/dos^M
# net use g: porsche:/usr^M
</programlisting>

<para>This may seem relatively harmless, but it confuses some programs, including the
C compiler and pagers like <emphasis>more</emphasis>, which may react in confusing ways.  You
can remove them with the <emphasis>-t</emphasis> option of <emphasis>mcopy</emphasis>:
</para>
<programlisting>
$ <command>mcopy -t a:drives.bat .</command>
</programlisting>

<para>Transferring files in the other direction is more likely to cause problems.  For
example, you might edit this file under FreeBSD and then copy it back to the
diskette.  The results depend on the editor, but assuming we changed all
occurrences of the word <emphasis>porsche</emphasis> to <emphasis>freedom</emphasis>, and then copied the
file back to the diskette, Microsoft might then find:
</para>
<programlisting>
C:&gt; <command>type drives.bat</command>
net use c: presto:/usr/dos
                          c:
                            cd \enfs
                                   # net use f: freedom:/dos
                                                            # net use g: freedom:/usr
</programlisting>

<para><indexterm><primary>mcopy</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mcopy</secondary></indexterm>
This is a typical result of removing the <keycap>Carriage Return</keycap> characters.  The
<emphasis>-t</emphasis> option to <emphasis>mcopy</emphasis> can help here, too.  If you use it when
copying <emphasis>to</emphasis> a Microsoft file system, it will reinsert the <keycap>Carriage
Return</keycap> characters.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchprinters"><title>Printers</title>

<para><anchor id="CFBSD-printers"/>
<indexterm><primary>spooler</primary></indexterm>
<indexterm><primary>lpr</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>lpr</secondary></indexterm>
<indexterm><primary>lpd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>lpd</secondary></indexterm>
In this chapter, we'll look at some aspects of using printers with FreeBSD.
FreeBSD users do not access printers directly.  Instead, a series of processes,
collectively called the <emphasis>spooler</emphasis>, manage print data.  One process,
<emphasis>lpr</emphasis>, writes user print data to disk, and another, <emphasis>lpd</emphasis>, copies the
print data to the printers.  This method enables processes to write print data
even if the printers are busy and ensures optimum printer availability.
</para>

<para>In this section, we'll look briefly at what you need to do to set up printers.
For more details, look in the online handbook section on printing, from which
this section is derived.
</para>

<para><emphasis>lpd</emphasis> is the central spooler process.  It is responsible for a number of
things:
</para>
<itemizedlist>
<listitem>

<para>It controls access to attached printers and printers attached to other hosts on
the network.
</para>
</listitem>
<listitem>

<para>It enables users to submit files to be printed.  These submissions are known as
jobs.
</para>
</listitem>
<listitem>

<para>It prevents multiple users from accessing a printer at the same time by
maintaining a queue for each printer.
</para>
</listitem>
<listitem>

<para>It can print header pages, also known as banner or burst pages, so users can
easily find jobs they have printed in a stack of printouts.
</para>
</listitem>
<listitem>

<para>It takes care of communications parameters for printers connected on serial
ports.
</para>
</listitem>
<listitem>

<para>It can send jobs over the network to another spooler on another host.
</para>
</listitem>
<listitem>

<para>It can run special filters to format jobs to be printed for various printer
languages or printer capabilities.
</para>
</listitem>
<listitem>

<para>It can account for printer usage.
</para>
</listitem>
</itemizedlist>

<para>Through a configuration file, and by providing the special filter programs, you
can enable the spooler to do all or some subset of the above for a great variety
of printer hardware.
</para>

<para>This may sound like overkill if you are the only user on the system.  It
<emphasis>is</emphasis> possible to access the printer directly, but it's not a good idea:
</para>
<itemizedlist>
<listitem>

<para>The spooler prints jobs in the background.  You don't have to wait for data to
be copied to the printer.
</para>
</listitem>
<listitem>

<para>The spooler can conveniently run a job to be printed through filters to add
headers or convert special formats (such as PostScript) into a format the
printer will understand.
</para>
</listitem>
<listitem>

<para>Most programs that provide a print feature expect to talk to the spooler on your
system.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Printer configuration</title>

<para><indexterm><primary>printer</primary><secondary>configuration</secondary></indexterm>
<indexterm><primary>parallel</primary><secondary>port</secondary></indexterm>
Nowadays, most printers are connected by the <emphasis>parallel port</emphasis>.  Parallel
ports enable faster communication with the printer, up to about 100,000 bytes
per second, while serial printers seldom transmit more than 1,920 characters per
second.
</para>
<note>

<para>Older UNIX systems frequently used serial printers, but they are no longer in
common use.  Look at the handbook article for specifies of serial printers.
</para>
</note>

<para>More modern printers may also have an Ethernet interface, which enables them to
connect to several machines at once.
</para>

<para>It's pretty straightforward to connect a parallel printer: plug in the cable
between the printer and the computer.  You don't need any adjustments.  If you
have more than one parallel interface, of course, you'll have to decide which
one to use.  Parallel printer devices are called <emphasis>/dev/lpt<emphasis>n</emphasis></emphasis>, where
<emphasis>n</emphasis> is the number, starting with <emphasis>0</emphasis>.  See table
<xref linkend="CFBSD-FreeBSD-devices-table"/> on page <xref linkend="CFBSD-FreeBSD-devices-table-page"/> for further
details.
</para>

<para>You don't need to do anything special to configure the line printer driver
<emphasis>lpt</emphasis>: it's in the kernel by default.  Of course, if you have previously
removed it, you'll have to replace it.  See page <xref linkend="CFBSD-config-lpt0"/> for more
details.
</para>
<sect2>
<title>Testing the printer</title>

<para><indexterm><primary>testing</primary><secondary>printers</secondary></indexterm>
<indexterm><primary>printer</primary><secondary>testing</secondary></indexterm>
When you have connected and powered on the printer, run the manufacture's test
if one is supplied.  Typically there's a function which produces a printout
describing the printer's features.  After that, check the communication between
the computer and the printer.
</para>
<programlisting>
# <command>lptest &gt; /dev/lpt0</command>
</programlisting>

<para>This will not produce any output with a pure PostScript printer, but you should
see some reaction on the status display.  See the description in the online
handbook for testing PostScript printers.
</para>
</sect2>
<sect2>
<title>Configuring <emphasis>/etc/printcap</emphasis> </title>

<para><indexterm><primary>/etc/printcap</primary></indexterm>
<anchor id="CFBSD-printcap"/>
The next step is to configure the central configuration file,
<emphasis>/etc/printcap</emphasis>.  This file is not the easiest to read, but after a while
you'll get used to it.  Here are some typical entries:
</para>
<programlisting>
lp|lj|ps|local LaserJet 6MP printer:\e
	:lp=/dev/lpt0:sd=/var/spool/output/lpd:lf=/var/log/lpd-errs:sh:mx#0:\e
	:if=/usr/local/libexec/lpfilter:

rlp|sample remote printer:\e
	:rm=freebie:sd=/var/spool/output/freebie:lf=/var/log/lpd-errs:
</programlisting>

<para>Let's look at this in detail:
</para>
<itemizedlist>
<listitem>

<para>All fields are delimited by a colon (<emphasis>:</emphasis>).
</para>
</listitem>
<listitem>

<para>Continuation lines require a backslash character (<emphasis>\e</emphasis>).  Note
particularly that you require a colon at the end of a continued line, and
another at the beginning of the following line.
</para>
</listitem>
<listitem>

<para>The first line of each entry specifies a number of names separated by vertical
bar symbols <emphasis>|</emphasis>.  By tradition, the last name is a more verbose
description.
</para>
</listitem>
<listitem>

<para>The following fields have an identification followed by an optional delimiter.
If the field takes a string parameter, the delimiter is <emphasis>=</emphasis>, and if it
takes a numeric value, the delimiter is <emphasis>#</emphasis>.
</para>
</listitem>
<listitem>

<para>The first entry defines a local printer, called <emphasis>lp</emphasis>, <emphasis>lj</emphasis>,
<emphasis>ps</emphasis> and <emphasis>local LaserJet 6MP printer</emphasis>.  Why so many names?
<emphasis>lp</emphasis> is the default, so you should have it somewhere.  <emphasis>lj</emphasis> is
frequently used to talk to printers which understand HP's LaserJet language (now
PCL), and <emphasis>ps</emphasis> might be used to talk to a printer which understands
PostScript.  The final name is more of a description.
</para>
</listitem>
<listitem>

<para>The entry <emphasis>lp</emphasis> tells the spooler the name of the physical device to which
the printer is connected.  Remote printers don't have physical devices.
</para>
</listitem>
<listitem>

<para><emphasis>sd</emphasis> tells the spooler the directory in which to store jobs awaiting
printing.  You must check that this directory exists.
</para>
</listitem>
<listitem>

<para><emphasis>lf</emphasis> specifies the name of a file into which to log errors.
</para>
</listitem>
<listitem>

<para><indexterm><primary>lpd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>lpd</secondary></indexterm>
<emphasis>sh</emphasis> is a flag telling <emphasis>lpd</emphasis> to omit a header page.  If you don't
have that, every job will be preceded by a descriptor page.  In a small
environment, this doesn't make sense, and is just a waste of paper.
</para>
</listitem>
<listitem>

<para>The parameter <emphasis>mx</emphasis> tells <emphasis>lpd</emphasis> the maximum size of a spool job in
kilobytes.  If the job is larger than this value, <emphasis>lpd</emphasis> refuses to print
it.  In our case, we don't want to limit the size.  We do this by setting
<emphasis>mx</emphasis> to 0.
</para>
</listitem>
<listitem>

<para><indexterm><primary>print</primary><secondary>filter</secondary></indexterm>
<indexterm><primary>filter</primary><secondary>print</secondary></indexterm>
<emphasis>if</emphasis> tells <emphasis>lpd</emphasis> to apply a <emphasis>filter</emphasis> to the job before
printing.  We'll look at this below.
</para>
</listitem>
<listitem>

<para>In the remote printer entry, <emphasis>rm</emphasis> tells <emphasis>lpd</emphasis> the name of the system
to which to send the data.  This could be a fully qualified domain name, of
course.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Spooler filters</title>

<para><indexterm><primary>spooler</primary><secondary>filter</secondary></indexterm>
<indexterm><primary>print</primary><secondary>filter</secondary></indexterm>
<indexterm><primary>filter</primary><secondary>print</secondary></indexterm>
<anchor id="CFBSD-staircase"/>
Probably the least intelligible entry in the previous configuration file was the
<emphasis>if</emphasis> entry.  It specifies the name of an <emphasis>input filter</emphasis>, a program
through which <emphasis>lpd</emphasis> passes the complete print data before printing.
</para>

<para>What does it do that for?  There can be a number of reasons.  Maybe you have
data in a format which isn't fit to print.  For example, it might be PostScript,
and your printer might not understand PostScript.  Or it could be the other way
around: your printer understands <emphasis>only</emphasis> PostScript, and the input isn't
PostScript.
</para>

<para>There's a more likely reason to require a filter, though: most printers still
emulate the old teletypes, so they require a carriage return character
(<keycap>Ctrl-M</keycap> or <command>^M</command>) to start at the beginning of the line, and a new
line character (<keycap>Ctrl-J</keycap> or <command>^J</command>) to advance to the next line.  UNIX
uses only <command>^J</command>, so if you copy data to it, you're liable to see a
staircase effect.  For example, <emphasis>ps</emphasis> may tell you:
</para>
<programlisting>
$ <command>ps</command>
  PID  TT  STAT      TIME COMMAND
 2252  p1  Ss     0:01.35 /bin/bash
 2287  p1  IW     0:04.77 e /etc/printcap
 2346  p1  R+     0:00.05 ps
</programlisting>

<para>When you try to print it, however, you get:
</para>
<programlisting>
  PID  TT  STAT      TIME COMMAND
                                  2252  p1  Ss     0:01.35 /bin/bash
                                                                     2287  p1  IW   0

</programlisting>

<para>The rest of the page is empty: you've gone off the right margin.
</para>

<para>There are a number of ways to solve this problem:
</para>
<itemizedlist>
<listitem>

<para>You may be able to configure your printer to interpret <keycap>Ctrl-J</keycap> as both
<keycap>newline</keycap> and <keycap>return</keycap>, and to ignore <keycap>Ctrl-M</keycap>.  Check your printer
handbook.
</para>
</listitem>
<listitem>

<para>You may be able to issue a control sequence to your printer to tell it to
interpret <keycap>Ctrl-J</keycap> as both new line and return to the beginning of the line,
and to ignore <keycap>Ctrl-M</keycap>.  For example, HP LaserJets and compatibles will do
this if you send them the control sequence <keycap>ESC<emphasis>&amp;k2G</emphasis></keycap>.
</para>
</listitem>
<listitem>

<para>You can write an <emphasis>input filter</emphasis> which transforms the print job into a form
which the printer understands.  We'll look at this option below.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/usr/local/libexec/lpfilter</primary></indexterm>
There are a couple of options for the print filter.  One of them, taken from the
online handbook, sends out a LaserJet control sequence before every job.  Put
the following shell script in <emphasis>/usr/local/libexec/lpfilter</emphasis>:
</para>
<programlisting>
#!/bin/sh
printf "\e033&amp;k2G" &amp;&amp; cat &amp;&amp; printf "\ef" &amp;&amp; exit 0
exit 2
</programlisting>

<para><figure><title>Simple print filter</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
This approach does not work well with some printers, such as my HP LaserJet 6MP,
which can print both PostScript and LaserJet (natural) formats at random.  They
do this by recognizing the text at the beginning of the job.  This particular
filter confuses them by sending a LaserJet command code, so the printer prints
the PostScript as if it were plain text.
The source file <emphasis><xref linkend="CFBSD-skelc"/>/scripts/lpfilter.c</emphasis> contains a filter which
replaces all <keycap>Ctrl-J</keycap>s with <keycap>Ctrl-J</keycap> <keycap>Ctrl-M</keycap>.  Compile this program
and store the executable in <emphasis>/usr/local/libexec/lpfilter</emphasis>:
</para>
<programlisting>
# <command>cc <xref linkend="CFBSD-skelc"/>/scripts/lpfilter.c -o /usr/local/libexec/lpfilter</command>
</programlisting>

<para></para>

<para>That's all you normally need to do to set up your printers.  Next, you should
test them.
</para>
</sect2>
</sect1>
<sect1>
<title>Starting the spooler</title>

<para>As we saw above, the line printer dæmon <emphasis>lpd</emphasis> is responsible for printing
spooled jobs.  By default it isn't started at boot time.  If you're
<emphasis>root</emphasis>, you can start it by name:
</para>
<programlisting>
# <command>lpd</command>
</programlisting>

<para>Normally, however, you will want it to be started automatically when the system
starts up.  You do this by setting the variable <emphasis>lpd_enable</emphasis> in
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
lpd_enable="YES"			# Run the line printer daemon
</programlisting>

<para>See page <xref linkend="CFBSD-rc.conf"/> for more details of <emphasis>/etc/rc.conf</emphasis>.
</para>

<para>Another line in <emphasis>/etc/rc.conf</emphasis> refers to the line printer dæmon:
</para>
<programlisting>
lpd_flags=""				# Flags to lpd (if enabled).
</programlisting>

<para>You don't normally need to change this line.  See the man page for <emphasis>lpd</emphasis>
for details of the flags.
</para>
</sect1>
<sect1>
<title>Testing the spooler</title>

<para><indexterm><primary>testing</primary><secondary>the spooler</secondary></indexterm>
<indexterm><primary>spooler</primary><secondary>testing</secondary></indexterm>
To test the spooler, you can run the <emphasis>lptest</emphasis> program again.  This time,
however, instead of sending it directly to the printer, you send it to the
spooler:
</para>
<programlisting>
$ <command>lptest 20 5 | lpr</command>
</programlisting>

<para>The results should look like:
</para>
<programlisting>
!"#$%&amp;'()*+,-./01234
"#$%&amp;'()*+,-./012345
#$%&amp;'()*+,-./0123456
$%&amp;'()*+,-./01234567
%&amp;'()*+,-./012345678
</programlisting>

<para></para>
</sect1>
<sect1>
<title>Troubleshooting</title>

<para><indexterm><primary>troubleshooting</primary><secondary>spooler</secondary></indexterm>
<indexterm><primary>spooler</primary><secondary>troubleshooting</secondary></indexterm>
Here's a list of the most common problems and how to solve them:
<table frame='all'><title>Common printer problems</title>
box,center,tab(#) ;
| lw25 | lw53 | .
Problem#Cause
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>  The printer prints, but the last page doesn't appear.  The status shows that the printer still has data in the buffer.  After several minutes, the last page may appear. </entry><entry> Your output data is not ejecting the last page.  The printer is configured to either wait for an explicit eject request (the ASCII <emphasis>Form feed</emphasis> character, <keycap>Ctrl-L</keycap>) or to eject after a certain period of time.
</entry></row>
</para>

<para><row><entry> You have a choice as to what you do about this.  Usually you can configure the printer, or you could get the print filter to print a form feed character at the end of the job.  Figure <xref linkend="CFBSD-print-filter"/> already does this&mdash;that's the <emphasis>printf "\ef".
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>staircase</primary><secondary>effect</secondary></indexterm>
<row><entry>  The lines wander off to the right edge of the paper and are never seen again. </entry><entry> This is the <emphasis>staircase effect</emphasis> that we saw on page <xref linkend="CFBSD-print-filter-page"/>. See there for a couple of solutions.
</entry></row>
<row><entry>  Individual characters or whole sections of text are missing. </entry><entry> This problem occurs almost only on serial printers.  It's a result of incorrect handshaking&mdash;see page <xref linkend="CFBSD-handshaking"/> and the online handbook for more details.
</entry></row>
<row><entry>  The output was completely unintelligible random characters. </entry><entry> On a serial printer, if the characters appear slowly, and there's a predominance of the characters <emphasis>{|}~</emphasis>, this probably means that you have set up the communication parameters incorrectly.  Check the online handbook for a solution. Make sure you don't confuse this problem with the following one.
</entry></row>
<row><entry>  The text was legible, but it bore no relationship to what you wanted to print. </entry><entry> One possibility is that you are sending PostScript output to your printer.  Look at the example on page <xref linkend="CFBSD-PostScript"/> to check if it is PostScript.  If it is, your printer is not interpreting it correctly, either because it doesn't understand PostScript, or because it has been confused (see the discussion on page <xref linkend="CFBSD-print-filter-page"/> for one reason).  We'll look at PostScript in more detail on page <xref linkend="CFBSD-PostScript"/>.
</entry></row>
<row><entry>  The display on the printer shows that data are arriving, but the printer doesn't print anything. </entry><entry> You might be sending normal text to a PostScript printer which doesn't understand normal text.  In this case, too, you will need a filter to convert the text to PostScript&mdash;the opposite of the previous problem.
</entry></row>
</para>

<para><row><entry> Alternatively, your printer port may not be interrupting correctly.  This will not stop the printer from printing, but it can take up to 20 minutes to print a page.  You can fix this by issuing the following command, which puts the printer <emphasis>/dev/lpt0</emphasis> into polled mode:
</entry></row>
</para>
</emphasis><programlisting>
<row><entry> </entry><entry> <command>lptcontrol -p</command>
</entry></row>
<row><entry>
</entry></row>
</programlisting>

<para><row><entry>
</entry></row>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
<row><entry>  You get the message <emphasis>lpr: cannot create /var/spool/output/freebie/.seq</emphasis> </entry><entry> You have forgotten to create the spool directory <emphasis>/var/spool/output/freebie</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>
</sect1>
<sect1>
<title>Using the spooler</title>

<para><indexterm><primary>Using</primary><secondary>the spooler</secondary></indexterm>
<indexterm><primary>lpr</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>lpr</secondary></indexterm>
Using the spooler is relatively simple.  Instead of outputting data directly to
the printer, you <emphasis>pipe</emphasis> it to the spooler <emphasis>lpr</emphasis> command.  For
example, here is the same print command, first printing directly to the printer,
and secondly via the spooler:
</para>
<programlisting>
# <command>ps waux &gt; /dev/lpt0</command>
# <command>ps waux | lpr</command>
</programlisting>

<para><indexterm><primary>job</primary><secondary>spooler</secondary></indexterm>
<indexterm><primary>spooler</primary><secondary>job</secondary></indexterm>
<indexterm><primary>lpq</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>lpq</secondary></indexterm>
The spooler creates a <emphasis>job</emphasis> from this data.  You can look at the current
print queue with the <emphasis>lpq</emphasis> program:
</para>
<programlisting>
$ <command>lpq</command>
waiting for lp to become ready (offline ?)
Rank   Owner      Job  Files                                 Total Size
1st    grog       313  (standard input)                      9151 bytes
2nd    grog       30   (standard input)                      3319 bytes
3rd    yvonne     31   (standard input)                      3395 bytes
4th    root       0    (standard input)                      2611 bytes
</programlisting>

<para><indexterm><primary>lpd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>lpd</secondary></indexterm>
The first line is a warning that <emphasis>lpd</emphasis> can't currently print.  You should
take it seriously.  In this example, the printer was deliberately turned off so
that the queue did not change from one example to the next.
</para>

<para>Normally, the job numbers increase sequentially: this particular example came
from three different machines.  You can get more detail with the <emphasis>-l</emphasis>
option:
</para>
<programlisting>
$ <command>lpq -l</command>
waiting for lp to become ready (offline ?)

grog: 1st                                [job 313freebie.example.org]
        (standard input)                 9151 bytes

grog: 2nd                                [job 030presto.example.org]
        (standard input)                 3319 bytes

yvonne: 3rd                              [job 031presto.example.org]
        (standard input)                 3395 bytes

root: 4th                                [job 000bumble.example.org]
        (standard input)                 2611 bytes
</programlisting>

<para></para>
<sect2>
<title>Removing print jobs</title>

<para><indexterm><primary>Removing</primary><secondary>print jobs</secondary></indexterm>
<indexterm><primary>lprm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>lprm</secondary></indexterm>
Sometimes you may want to delete spool output without printing it.  You don't
need to do this because of a printer configuration error: just turn the printer
off, fix the configuration error, and turn the printer on again.  The job should
then be printed correctly.  But if you discover that the print job itself
contains garbage, you can remove it with the <emphasis>lprm</emphasis>
program.  First,
though, you need to know the job number.  Assuming the list we have above, we
might want to remove job 30:
</para>
<programlisting>
# <command>lprm 30</command>
dfA030presto.example.org dequeued
cfA030presto.example.org dequeued
# <command>lpq</command>
waiting for lp to become ready (offline ?)
Rank   Owner      Job  Files                                 Total Size
1st    grog       313  (standard input)                      9151 bytes
2nd    yvonne     31   (standard input)                      3395 bytes
3rd    root       0    (standard input)                      2611 bytes
</programlisting>

<para>If the printer is offline, it may take some time for the <emphasis>lprm</emphasis> to
complete.
</para>
</sect2>
</sect1>
<sect1>
<title>PostScript</title>

<para><anchor id="CFBSD-PostScript"/>
<indexterm><primary>PostScript</primary></indexterm>
<indexterm><primary>Page</primary><secondary>Description Language</secondary></indexterm>
We've encountered the term <emphasis>PostScript</emphasis> several times already.  It's a
powerful <emphasis>Page Description Language</emphasis>.  With it, you can transmit detailed
documents such as this book electronically and print them out in exactly the
same form elsewhere.  PostScript is a very popular format on the World-Wide Web,
and browsers like Netscape usually print in PostScript format.
</para>

<para><indexterm><primary>escape</primary><secondary>sequences</secondary></indexterm>
Most other document formats describe special print features with <emphasis>escape
sequences</emphasis>, special commands which start with a special character.  For
example, the HP LaserJet and PCL formats use the ASCII <keycap>ESC</keycap> character
(<emphasis>0x1b</emphasis>) to indicate the beginning of an escape sequence.  PostScript uses
the opposite approach: unless defined otherwise, the contents of a PostScript
file are commands, and the printable data is enclosed in parentheses.
PostScript documents start with something like:
</para>
<programlisting>
%!PS-Adobe-3.0
%%Creator: groff version 1.10
%%CreationDate: Fri Oct 31 18:36:45 1997
%%DocumentNeededResources: font Symbol
%%+ font Courier
%%+ font Times-Roman
%%DocumentSuppliedResources: file images/vipw.ps
%%Pages: 32
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
</programlisting>

<para><indexterm><primary>prologue</primary><secondary>PostScript</secondary></indexterm>
<indexterm><primary>PostScript</primary><secondary>prologue</secondary></indexterm>
This is the <emphasis>prologue</emphasis> (the beginning) of the PostScript output for this
chapter.  The <emphasis>prologue</emphasis> of such a program can be several hundred
kilobytes long if it includes embedded fonts or images.  A more typical size is
about 500 lines.
</para>

<para>You can do a number of things with PostScript:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>ghostscript</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ghostscript</secondary></indexterm>
<indexterm><primary>ghostview</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ghostview</secondary></indexterm>
You can look at it with <emphasis>ghostscript</emphasis> or <emphasis>ghostview</emphasis>, both of which
are in the Ports Collection.
</para>
</listitem>
<listitem>

<para>Many printers understand PostScript and print it directly.  You should know
this, since it's an expensive option, but in case of doubt check your printer
manual.
</para>
</listitem>
<listitem>

<para>If your printer doesn't understand PostScript, you can print with the aid of
ghostscript.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Installing <emphasis>ghostscript</emphasis> and <emphasis>ghostview</emphasis> </title>

<para><emphasis>ghostview</emphasis> is an interface to <emphasis>ghostscript</emphasis>, so you need to install
it in any case.  Older versions supplied the fonts separately, but you no longer
need to worry about that: they're now part of the package.
</para>

<para>Install the packages by first checking the names on the CD-ROM:
</para>
<programlisting>
# <command>cd /cdrom/packages/All</command>
# <command>ls gh*</command>
ghostscript-2.6.2.tgz ghostscript-3.53.tgz  ghostscript-4.03.tgz  ghostview-1.5.tgz
# <command>pkg_add ghostscript-4.03.tgz ghostview-1.5.tgz</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Viewing with <emphasis>ghostview</emphasis> </title>

<para><indexterm><primary>viewing</primary><secondary>with ghostview</secondary></indexterm>
<indexterm><primary>ghostview</primary><secondary>viewing with</secondary></indexterm>
</para>

<para><figure><title><emphasis>ghostview</emphasis> display</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>ghostview</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ghostview</secondary></indexterm>
To view a file with <emphasis>ghostview</emphasis>, simply start it:
</para>
<programlisting>
$ <command>ghostview &amp;</command>
</programlisting>

<para><indexterm><primary>selFile</primary><secondary>ghostview window</secondary></indexterm>
You will get a blank display, but you can open a file window by pressing
<emphasis>o</emphasis>, after which you can select files and display them.  Figure
\&amp;<xref linkend="CFBSD-ghostview"/> shows the display of a draft version of this page with an
overlaid open window at the top left.  The <emphasis>selFile</emphasis>
window contains a
field at the top into which you can type the name of a file.  Alternatively, the
three columns below, with scroll bars, allow you to browse the current directory
and the parent and grandparent directories.  The interface looks relatively
primitive, but it works.
</para>

<para>The window below shows the text of the previous page (roughly) on the right hand
side. with drag scroll bars operated by the middle button.  At top left are five
oval menu buttons which you can select with the left mouse button.  Note
particularly the <emphasis>Magstep</emphasis> button, which sets the size of the display.
</para>

<para>The column to the right of these buttons is a list of page numbers.  You can
select a page number with the middle mouse button.  You can also get an
enlargement display of the text area around the mouse cursor by pressing the
left button.  Press the area marked <emphasis>Dismiss</emphasis> to remove the enlargement.
</para>
</sect2>
<sect2>
<title>Printing with <emphasis>ghostscript</emphasis> </title>

<para><indexterm><primary>printing</primary><secondary>with ghostscript</secondary></indexterm>
<indexterm><primary>ghostscript</primary><secondary>printing with</secondary></indexterm>
<indexterm><primary>ghostscript</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ghostscript</secondary></indexterm>
If your printer doesn't support PostScript, you can still print some semblance
of the intended text with the help of <emphasis>ghostscript</emphasis>.  The results are very
acceptable with laser and inkjet printers, less so with matrix printers, even 24
pin versions.
</para>

<para><indexterm><primary>driver</primary><secondary>ghostscript</secondary></indexterm>
<indexterm><primary>ghostscript</primary><secondary>driver</secondary></indexterm>
To print on your particular printer, you first need to find a <emphasis>driver</emphasis> for
it in <emphasis>ghostscript</emphasis>.  In this context, the term <emphasis>driver</emphasis> means some
code inside <emphasis>ghostscript</emphasis> which converts the data into something that the
printer can print.  Unfortunately, the man page doesn't help much.  To find out
which driver it supports, start <emphasis>ghostscript</emphasis> and enter the following in
the text window, ignoring the display window that it opens:
</para>
<programlisting>
$ </emphasis><command>gs</command>							<emphasis>that's the name of the ghostscript program
Aladdin Ghostscript 5.03 (1997-8-8)
Copyright (C) 1997 Aladdin Enterprises, Menlo Park, CA.  All rights reserved.
This software comes with NO WARRANTY: see the file PUBLIC for details.
GS&gt;<command>devicenames ==</emphasis>				<emphasis>list device names</command>
[/tiff24nc /ppm /pcxgray /cgm8 /sgirgb /pnm /mgr8 /bmp16m /psmono /pgnm /mgrgray8 /bmp
16 /png256 /pgm /mgrgray2 /bitcmyk /pnggray /pbm /miff24 /bit /nullpage /pkmraw /pcx24
b /jpeg /pdfwrite /tifflzw /ppmraw /pcx16 /cgm24 /tiff12nc /pnmraw /pcxmono /cgmmono /
psgray /pgnmraw /mgr4 /bmp256 /png16m /pgmraw /mgrgray4 /bmpmono /png16 /pbmraw /mgrmo
no /bitrgb /pngmono /pcxcmyk /jpeggray /pswrite /tiffpack /pkm /pcx256 /cif /t4693d8 /
paintjet /ljet3d /iwlq /declj250 /appledmp /tiffg32d /t4693d2 /oki182 /ljet2p /iwhi /c
dj850 /sxlcrt /tiffcrle /st800 /necp6 /ln03 /ibmpro /cdj500 /x11gray2 /faxg32d /r4081
/lp8000 /lbp8 /eps9high /cdjcolor /x11alpha /dfaxlow /pxlmono /lj5gray /la75 /epson /c
cr /xes /pjxl /ljetplus /la50 /djet500c /bjc600 /tek4696 /pj /ljet4 /jetp3852 /deskjet
 /bj10e /tiffg4 /t4693d4 /okiibm /ljet3 /iwlo /cp50 /ap3250 /tiffg3 /stcolor /oce9050
/lj250 /imagen /cdj550 /x11mono /faxg4 /sj48 /m8510 /lips3 /epsonc /cdjmono /x11cmyk /
faxg3 /pxlcolor /lp2563 /la75plus /eps9mid /cdeskjet /x11 /dfaxhigh /pjxl300 /lj5mono
/la70 /dnj650c /bjc800 /uniprint /pjetxl /lj4dith /laserjet /djet500 /bj200 /epswrite]
</emphasis>GS&gt;<command>^D							<emphasis>exit</command>
</programlisting>

<para>Unfortunately, it's very difficult to decide which of these drivers does what
without looking at the source code, or at least the <emphasis>Makefile</emphasis>, so it's
comforting to know that the most common non-PostScript printer, the
Hewlett-Packard LaserJet series, uses the driver prefix <emphasis>ljet</emphasis>.  Modern
versions will all run with <emphasis>ljet4</emphasis>; if you run into trouble, try one of
the older ones.  In particular, the original LaserJet requires the driver
<emphasis>ljet</emphasis>.
</para>

<para>The following one-line script will print PostScript documents to the spooler.
It is present on the CD-ROM as <emphasis><xref linkend="CFBSD-skelc"/>/scripts/gsp</emphasis>.
</para>
<programlisting>
#!/bin/sh
gs -dNOPAUSE -q -sDEVICE=ljet4 -sOutputFile=\e|lpr -- $*
</programlisting>

<para>Note that the output to the printer is binary data, so a filter of the kind
shown in <emphasis><xref linkend="CFBSD-skelc"/>/scripts/lpfilter.c</emphasis> will destroy the format and produce
nonsensical output.  This shouldn't be a problem, since that filter is intended
specifically for PostScript printers, which don't need <emphasis>ghostscript</emphasis>.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchdesktop"><title>Setting up your FreeBSD desktop</title>

<para>So far, we've looked at FreeBSD from a system administration viewpoint.  You
didn't install FreeBSD in order to perform system administration: you want to do
some work with it.
</para>

<para><indexterm><primary>desktop</primary></indexterm>
Nowadays, every computer system has the concept of a <emphasis>desktop</emphasis>, a surface on
the glass of your monitor on which you do your work.  For years, UNIX users have
worked with a single 80x25 character mode display.  Users of Microsoft Windows
considered this old-fashioned in the extreme, but in fact the flexibility of the
UNIX system made this quite a good way to work.
</para>

<para>Still, there's no doubt of the advantage of a system which offers the
possibility of performing multiple operations at once, and this is one of the
declared advantages of UNIX.  But you normally need a terminal to interact with
each task.  Under UNIX, the best way to do this is with the X window system.
</para>

<para>FreeBSD comes with over a thousand ported software packets.  One user described
putting them together as trying to do a jigsaw puzzle without the picture on the
box.
</para>

<para>In fact, it's even worse than that: you can imagine your own picture.  Depending
on your imagination and your luck, the results can be good, bad, or unusable.
In this chapter, I describe a framework for how to work with FreeBSD.  Not
surprisingly, this closely resembles the environment in which I work, and it may
not be to everybody's taste.  It will, however, give you a usable start from
which you can diverge when you have the time, the inclination and the
understanding.
</para>
<sect1>
<title>The hardware</title>

<para><indexterm><primary>hardware</primary><secondary>for X</secondary></indexterm>
<indexterm><primary>X</primary><secondary>hardware</secondary></indexterm>
The desktop I describe will run on almost any hardware.  That doesn't mean that
all hardware is equal, of course.  Here are some considerations:
</para>
<sect2>
<title>The display board and monitor</title>

<para>X enables you to do a lot more in parallel than other windowing environments.
As a result, screen real estate is at a premium.  Use as big a monitor as you
can afford, and as high a resolution as your monitor can handle.  You should be
able to display a resolution of 1600x1200 on a good 21" monitor, 1280x1024 on an
average 21" monitor, and 1024x768 on a 17" monitor.  If you're using a 14"
monitor, you will have to compromise: it's difficult to use 1024x768 on a
monitor of this size, but any lower resolution is just too low for reasonable
use.  I use 1024x768 when I have to use a 14" monitor.
</para>
</sect2>
<sect2>
<title>The keyboard</title>

<para>Keyboards have not changed much since the function keys were moved to the top of
the keyboard, where you have to search for them.  It's obvious that keyboard
layouts are dictated by people who can't touch-type.  In my opinion, this
applies particularly to the so-called ``ergonomic'' keyboards, which require a
lot of learning to use correctly, and don't seem to give anything in return.
Your mileage may vary, but bear in mind that FreeBSD places more emphasis on the
keyboard and less on the mouse than other systems.
</para>
</sect2>
<sect2>
<title>The mouse</title>

<para><indexterm><primary>mouse</primary><secondary>double-click</secondary></indexterm>
<indexterm><primary>double-click</primary><secondary>mouse</secondary></indexterm>
<indexterm><primary>CTS</primary></indexterm>
PC mice originally had three buttons.  To be different, Microsoft introduced a
two-button mouse, and to make it work anyway, they require the use of
<emphasis>double-click</emphasis> to execute many standard functions.  In my opinion, more
arm injuries are caused by double-clicking mice than anything else I know.  Ask
anybody with <emphasis>CTS</emphasis>
<footnote>

<para><indexterm><primary>Carpal</primary><secondary>tunnel syndrome</secondary></indexterm>
<emphasis>Carpal tunnel syndrome</emphasis>, an inflammation of the forearm caused by
repetitive strain.
</para>
</footnote>
what they think about double-clicking.  X generally does not require a
double-click.
</para>

<para>Get the best mouse you can.  Prefer a short, light switch.  It <emphasis>must</emphasis> have
three buttons.  Accept no substitutes.  Three-button mice are usually cheaper
than the Microsoft mice, so there's no financial incentive to buy a Microsoft
mouse.  Even if you want to use Microsoft with your computer as well, you should
choose a three-button mouse.  Logitech makes some nice mice which are supplied
with drivers for Microsoft products which can optionally simulate a double-click
with a press on the middle button.
</para>
</sect2>
</sect1>
<sect1>
<title>Running X</title>

<para><indexterm><primary>X</primary><secondary>running</secondary></indexterm>
<indexterm><primary>running</primary><secondary>X</secondary></indexterm>
There are a number of ways to start X:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>startx</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>startx</secondary></indexterm>
<indexterm><primary>xinit</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xinit</secondary></indexterm>
You can run the programs <emphasis>startx</emphasis> or <emphasis>xinit</emphasis> from a shell prompt.
They will start X directly.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xdm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xdm</secondary></indexterm>
<indexterm><primary>display</primary><secondary>manager</secondary></indexterm>
If you don't want to even see a character mode display, you can run <emphasis>xdm</emphasis>, a
<emphasis>display manager</emphasis> which makes your PC look like an X terminal: it presents
you with a login screen that runs under X.  This requires some configuration,
which we'll look at in the next section.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Configuring <emphasis>xdm</emphasis> </title>

<para><indexterm><primary>xdm</primary><secondary>command</secondary></indexterm>
<anchor id="CFBSD-xdm"/>
<indexterm><primary>display</primary><secondary>manager</secondary></indexterm>
<indexterm><primary>/etc/ttys</primary></indexterm>
To enable <emphasis>xdm</emphasis>,
</para>
<itemizedlist>
<listitem>

<para>Add the following line (in
</para>

<para><command>bold face)</command>
</para>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
to <emphasis>/etc/rc.local</emphasis>:
</para>
<programlisting>
# put your local stuff here
<command>echo " xdm"; /usr/X11R6/bin/xdm</command>

echo '.'
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/X11R6/lib/X11/xdm/Xservers</primary></indexterm>
Add a line to the <emphasis>xdm</emphasis> configuration file
<emphasis>/usr/X11R6/lib/X11/xdm/Xservers</emphasis>:
</para>
<programlisting>
:0 local /usr/X11R6/bin/X :0 vt03	 <emphasis>you can add more options here</emphasis>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para><indexterm><primary>xdm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xdm</secondary></indexterm>
<indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
<indexterm><primary>/etc/ttys</primary></indexterm>
This will start an <emphasis>xdm</emphasis> login window on <emphasis>/dev/ttyv3</emphasis> when you start
the system.  You must ensure that <emphasis>/dev/ttyv3</emphasis> is disabled in
<emphasis>/etc/ttys</emphasis>.  See page <xref linkend="CFBSD-getty-setup"/> for more details.
</para>

<para>You can also test the display manager manually by logging in as <emphasis>root</emphasis> on
the console and typing:
</para>
<programlisting>
$ <command>xdm -nodaemon &amp;</command>
</programlisting>

<para>Yet another way to start the display manager automatically when the system boots
is to add a line in <emphasis>/etc/ttys</emphasis> to start it on one of the unoccupied
virtual terminals.  This is a very dangerous method: if you make a mess of your
X configuration, you may no longer be able to access the system.
</para>
</sect2>
<sect2>
<title>Running <emphasis>xinit</emphasis> </title>

<para><indexterm><primary>xinit</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xinit</secondary></indexterm>
<indexterm><primary>startx</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>startx</secondary></indexterm>
Running <emphasis>xinit</emphasis> or <emphasis>startx</emphasis> is simpler: after logging in, you just
run the program.
</para>

<para><emphasis>startx</emphasis> and <emphasis>xinit</emphasis> both output messages to their standard output,
which is the virtual terminal on which you started it.  Sometimes they produce
copious output.  If you're having trouble getting X running, you might like to
redirect the output to a file:
</para>
<programlisting>
$ <command>startx 2&gt;&amp;1 &gt; /tmp/startx.log</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Stopping X</title>

<para>X stops automatically when the <emphasis>.xinitrc</emphasis> script finishes.  For this
reason, you should not include an ampersand (<emphasis>&amp;</emphasis>) after the last program
you start&mdash;we'll look at this in more detail when we look at the sample
\&amp;<emphasis>.xinitrc</emphasis> below.  Of course, this isn't the easiest way to stop X: you
have to know which process was started last, and then you have to stop it.
There's an easier way: press the key combination
<keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Backspace</keycap>, which is deliberately chosen to resemble
the key combination <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Delete</keycap> used to reboot the
machine.  <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Backspace</keycap> will stop X and return you to the
virtual terminal in which you started it.
</para>
</sect2>
<sect2>
<title>Changing screen resolution</title>

<para><indexterm><primary>CTRL-ALT-Keypad</primary><secondary>-</secondary></indexterm>
<indexterm><primary>keystroke</primary><secondary>CTRL-ALT-Keypad -</secondary></indexterm>
<indexterm><primary>CTRL-ALT-Keypad</primary><secondary>+</secondary></indexterm>
<indexterm><primary>keystroke</primary><secondary>CTRL-ALT-Keypad +</secondary></indexterm>
<indexterm><primary>X</primary><secondary>changing screen resolution</secondary></indexterm>
<indexterm><primary>screen</primary><secondary>resolution</secondary></indexterm>
When you set up your <emphasis>XF86Config</emphasis> file, you may have specified more than
one resolution.  For example, on page <xref linkend="CFBSD-screen-resolutions"/> we selected the
resolutions 640x480, 800x600 and 1024x768 pixels when running at 8 bits per
pixel (bpp).  When you start X, it will automatically select the first
resolution, in this case 640x480.  You can change to the previous resolution
(the one to the left in the list) by pressing the <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Keypad
-</keycap> key, and to the following resolution (the one to the right in the list)
with <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Keypad +</keycap>.  <emphasis>Keypad +</emphasis> and <emphasis>Keypad -</emphasis>
refer to the <keycap>+</keycap> and <keycap>-</keycap> symbols on the numeric keypad at the right of
the keyboard; you can't use the <keycap>+</keycap> and <keycap>-</keycap> symbols on the main keyboard
for this purpose.  The lists wrap around: in our example, if your current
resolution is 640x480, and you press <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>Keypad -</keycap>, the
display will change to 1024x768.  It's a very good idea to keep the default
resolution at 640x480 until you have debugged your <emphasis>XF86Config</emphasis>
parameters: 640x480 almost always works, so if your display is messed up, you
can just switch back to a known good display with a single keystroke.
</para>
</sect2>
<sect2>
<title>Selecting pixel depth</title>

<para>On page <xref linkend="CFBSD-screen-resolutions"/> we also saw that you can configure most display
boards to display a different pixel depth (a different number of bits per pixel,
which translates to a different number of colours).  When you start X, however,
it defaults to 8 bits per pixel (256 colours).  In order to start it with a
different number, specify the number of planes.  For example, to start with 16
bits per pixel (65,536 colours), enter:
</para>
<programlisting>
$ <command>startx -- -bpp 16</command>
</programlisting>

<para>This will normally limit the maximum resolution available.
</para>
</sect2>
</sect1>
<sect1>
<title>Customizing X</title>

<para><indexterm><primary>customizing</primary><secondary>X</secondary></indexterm>
<indexterm><primary>X</primary><secondary>customizing</secondary></indexterm>
<indexterm><primary>.xinitrc</primary></indexterm>
<emphasis>startx</emphasis> and <emphasis>xinit</emphasis> both look for a file called <emphasis>.xinitrc</emphasis>
when they start up.  This file typically contains commands for starting up X
clients such as terminal windows and a window manager If you don't have this
file, you will get a single <emphasis>xterm</emphasis> window without a frame, as in figure
<xref linkend="CFBSD-vanilla-X"/>.
</para>

<para><figure><title>Vanilla X display</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
<indexterm><primary>xdm</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
<indexterm><primary>twm</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
<indexterm><primary>fvwm2</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
Here you have a single <emphasis>xterm</emphasis> window in the top left corner.  You can't
move it, you have no menus.  To make life worth living, you need at least a
<emphasis>window manager</emphasis>, a program which controls other windows on the display.  If
you start X from <emphasis>xdm</emphasis>, you will get the <emphasis>twm</emphasis> window manager and a
default environment.  <emphasis>twm</emphasis> is a pretty basic window manager.  In this
example, I use <emphasis>fvwm2</emphasis>, which has more features than <emphasis>twm</emphasis>.
</para>

<para><indexterm><primary>fvwm95</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
A large number of window managers are available for X11.  I prefer a relatively
sober looking manager, but there are many more with other features.  You can get
a good overview at <emphasis>http://www.plig.org/xwinman/</emphasis>.  If you like
Microsoft's ``Windows 95'' environment, you might prefer <emphasis>fvwm95</emphasis>, which is
similar.  Before you do, however, consider the advantages of other window
managers: Microsoft's environment does not scale well.
</para>

<para>You can start a window manager from a shell prompt, but it's easier to put the
invocation in the <emphasis>.xinitrc</emphasis> file.  A simple <emphasis>.xinitrc</emphasis> might be:
</para>
<programlisting>
xhost presto bumble gw							<emphasis>allow access from other hosts</emphasis>
xrdb -load .Xdefaults							<emphasis>load default settings</emphasis>
xmodmap -e 'keysym Alt_L = Meta_L Meta_L'				<emphasis>remap keys for Emacs</emphasis>
xterm -s -sl 256 -sb -ls -j -rw -geometry 100x55 &amp;		<emphasis>start xterm left</emphasis>
xterm -s -sl 256 -sb -ls -j -rw -geometry 100x55-0+0 &amp;	<emphasis>and right</emphasis>
xearth &amp;										<emphasis>start a root background</emphasis>
emacs -name "grog emacs"  -geometry 100x55-0+0 -font 6x13&amp; <emphasis>and biff at the bottom</emphasis>
xbiff -geometry +450-0 -fg green -bg black&amp;
fvwm2											<emphasis>start fvwm</emphasis>
</programlisting>

<para>This file performs the following functions:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>xhost</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xhost</secondary></indexterm>
The <emphasis>xhost</emphasis> line allows connections from all systems in the Internet.  In
the interests of security, you will probably want to limit the systems to your
local network.  Check the man page <emphasis>xhost(1)</emphasis> for how to do this.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xrdb</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xrdb</secondary></indexterm>
The <emphasis>xrdb</emphasis> line loads your local preferences.  See the man page
<emphasis>X(1)</emphasis> for more details.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xmodmap</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xmodmap</secondary></indexterm>
The <emphasis>xmodmap</emphasis> invocation sets the <keycap>Alt</keycap> key to perform the <keycap>Meta</keycap>
function for <emphasis>Emacs</emphasis>.  If this doesn't say anything to you, don't worry.
You'll see more of it when you get to know <emphasis>Emacs</emphasis>.
</para>

<para>The two <emphasis>xterm</emphasis> lines start two <emphasis>xterm</emphasis>s, one on the left of the
screen, one on the right.  The <emphasis>geometry</emphasis> keyword determines this: they
have 55 lines of 100 characters each, suitable for a standard 1024x768 display.
If your display is larger, you can expand the size of these windows to
advantage.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xearth</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xearth</secondary></indexterm>
The invocation of <emphasis>xearth</emphasis> starts a program which updates the <emphasis>root
window</emphasis>
<footnote>

<para>The root window is the background on which the other windows are displayed,.
</para>
</footnote>
<indexterm><primary>screen</primary><secondary>saver</secondary></indexterm>
with a current view of the world.  In Microsoft circles, this might be called a
<emphasis>screen saver</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>Emacs</emphasis> takes a relatively long time to start, so it's a good idea to
start one when you start X, and leave it running.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xbiff</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xbiff</secondary></indexterm>
<emphasis>xbiff</emphasis> is a little program which shows a picture of a US-style mailbox.
When mail arrives, it changes colour, beeps, and raises the flag.
</para>
</listitem>
<listitem>

<para><indexterm><primary>fvwm2</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>fvwm2</secondary></indexterm>
Finally, we start the window manager, <emphasis>fvwm2</emphasis>.  As noted above, we don't
specify an ampersand (<emphasis>&amp;</emphasis>) at the end of this command, so that the
\&amp;<emphasis>.xinitrc</emphasis> script does not complete.  If you stop the window manager,
however, the script will complete, and the X session will stop.  We'll look at
what we can do with <emphasis>fvwm2</emphasis> in more detail below.
</para>
</listitem>
</itemizedlist>

<para></para>

<para><figure><title>Typical X display with <emphasis>fvwm2</emphasis></title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para><indexterm><primary>.xinitrc</primary></indexterm>
You'll find this <emphasis>.xinitrc</emphasis> file on the installation CD-ROM
<emphasis><xref linkend="CFBSD-skelc"/>/scripts/.xinitrc</emphasis>.  On page <xref linkend="CFBSD-install-desktop"/> we'll see how to
install this and the other files I describe in this chapter.
</para>

<para><indexterm><primary>Netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>Netscape</secondary></indexterm>
Now, when you start X, you will be given a somewhat better looking screen.
After opening a <emphasis>Netscape</emphasis> window and iconifying it and one of the
<emphasis>xterm</emphasis> windows, it might look like figure <xref linkend="CFBSD-base-display"/>.  Here we see
a Netscape window on the right and four icons:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
On the left are two <emphasis>xterm</emphasis> icons.  The first has the name
(<emphasis>yvonne@presto</emphasis>: it has been truncated to fit the box) and a small
picture.  The second has the name <emphasis>mutt</emphasis>, indicating that it is running
the <emphasis>mutt</emphasis> mail reader.
</para>
</listitem>
<listitem>

<para><indexterm><primary>StarWriter</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>StarWriter</secondary></indexterm>
Underneath the <emphasis>xterm</emphasis> icons is a <emphasis>StarWriter</emphasis> icon.  The name of
this icon has been truncated to fit.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Lehey</primary><secondary>Yvonne</secondary></indexterm>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
On the right is an <emphasis>Emacs</emphasis> icon, the figure of a gnu.  The name
<emphasis>yvonne</emphasis> is the name of the user, not the program.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>fvwm2</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
You'll notice that some of the names in the icons have been truncated.  This is
because the names can get <emphasis>very</emphasis> long.  The text on a <emphasis>Netscape</emphasis>
icon is the name on the title, which can be over 100 characters long.  If this
text were in the icon, it would take up half the width of the screen.
<emphasis>fvwm2</emphasis> makes a compromise: the text expands to full size when you run the
mouse cursor over the icon.
</para>

<para>In addition, we can see a couple of nested menus.  We'll look at them later.
</para>
</sect1>
<sect1>
<title>Navigating the desktop</title>

<para>If you're used to Microsoft Windows, X may seem strange to you at first.  On the
one hand, you can recognize parallels, but on the other hand there are enormous
differences.  One of the most obvious things is the layout of the screen.  The
Microsoft desktop is not really suited to a large number of objects on the
screen.  As I write this, I have a total of 28 windows open on the
screens&mdash;this does not scale well with Microsoft.
</para>

<para><indexterm><primary>icon</primary></indexterm>
One similarity is that you can <emphasis>iconify</emphasis> windows: when you don't need
them, you can reduce them to a small symbol, as we saw in Figure
<xref linkend="CFBSD-base-display"/>.  One of the consequences of this is that you may want smaller
icons.  Do you really need a picture of a terminal for each of 10 different
<emphasis>xterm</emphasis>s?  Maybe just the bar beneath would do.  It's your choice, but you
have the choice.
</para>

<para>You'll also notice that the windows have much more text in them than in a
Microsoft environment.  This is not simply primitive: you can do more things
with text.  Compared to Microsoft, an X environment uses the keyboard more and
the mouse less.  When you do use the mouse, you'll find that there are many more
ways to use it.  Although an X mouse should have at least three buttons,
<footnote>

<para>X supports up to 5 mouse buttons.  No, I've never seen a mouse with more than
three buttons.
</para>
</footnote>
many operations require the keyboard as well.  In addition, the function of the
mouse depends on where the cursor is positioned at the time.  We'll look at that
in the next section.
</para>
<sect2>
<title>Mouse menus</title>

<para><indexterm><primary>menus</primary><secondary>mouse</secondary></indexterm>
<indexterm><primary>mouse</primary><secondary>menus</secondary></indexterm>
<indexterm><primary>fvwm</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
<emphasis>fvwm</emphasis> and X distinguish several places on the screen:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>root</primary><secondary>window</secondary></indexterm>
<indexterm><primary>window</primary><secondary>root</secondary></indexterm>
The <emphasis>root window</emphasis> is the ``background'', the window that is left behind
when all the other ones are closed or iconified.  You can't use it for much, you
can't iconify it, and you can't put it on top of other window.  Typically you'll
display some pattern or picture on it.  In figure <xref linkend="CFBSD-base-display"/> we display a
map of the world on it.
</para>
</listitem>
<listitem>

<para><indexterm><primary>icon</primary></indexterm>
We've already seen an <emphasis>icon</emphasis>: it's a small symbol or picture representing
a window which is not currently being displayed.
</para>
</listitem>
<listitem>

<para><indexterm><primary>window</primary></indexterm>
<indexterm><primary>netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netscape</secondary></indexterm>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
A <emphasis>window</emphasis> is a unit of display.  You might think of a window as equal to
a process, but this isn't correct.  For example, <emphasis>Netscape</emphasis> and
<emphasis>Emacs</emphasis> frequently display more than one window at a time.
</para>
</listitem>
<listitem>

<para><indexterm><primary>window</primary><secondary>frame</secondary></indexterm>
Windows typically have a <emphasis>frame</emphasis>, which contains a number of elements:
</para>
</listitem>
<listitem>

<para><indexterm><primary>window</primary><secondary>title</secondary></indexterm>
<indexterm><primary>window</primary><secondary>buttons</secondary></indexterm>
The <emphasis>title</emphasis> is at the top of the window, and typically contains a text
identifying the window and possibly some <emphasis>buttons</emphasis> which provide mouse
functions.
</para>
</listitem>
<listitem>

<para><indexterm><primary>fvwm</primary><secondary>window manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>manager</secondary></indexterm>
<indexterm><primary>window</primary><secondary>sides</secondary></indexterm>
<emphasis>fvwm</emphasis> treats the <emphasis>sides</emphasis> of the frame separately from the corners.
We'll see the difference in the tables below.
</para>
</listitem>
<listitem>

<para>Finally, an <emphasis>fvwm</emphasis> frame may have up to 10 buttons, which <emphasis>fvwm</emphasis>
numbers 0 to 9.
</para>
</listitem>
</itemizedlist>

<para>You can see the typical <emphasis>fvwm</emphasis> border in example <xref linkend="CFBSD-base-display"/>. The
most important part is the title bar:
</para>

<para></para>

<para>There are a total of three fields, called <emphasis>buttons</emphasis>, on the title bar: one
on the left and two on the right.  If you position the mouse cursor on the left
button and press any any mouse button, you will get a menu:
</para>

<para><figure><title>Window Operations Menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>This looks familiar to Microsoft users, but in time, you will find that this
menu is less useful that it appears, since you can perform most functions
without a menu.
</para>

<para><indexterm><primary>icon</primary></indexterm>
There are two buttons on the right of the title bar.  The left-hand button is
the <emphasis>iconify</emphasis> button.  If you click here with any mouse button, the window
will be <emphasis>iconified</emphasis>: it will disappear and be replaced by a small symbol
or <emphasis>icon</emphasis>, such as the ones on the left and bottom of figure
<xref linkend="CFBSD-base-display"/>.  Iconification frees up screen area, but it doesn't stop or
suspend process execution.  If you want to stop a program, you should either
exit the application or close the window.  It's preferable to exit, since the
application is more likely to perform its housekeeping before stopping.
</para>

<para><indexterm><primary>window</primary><secondary>maximize</secondary></indexterm>
The right-hand button is the <emphasis>maximize</emphasis> button.  If you click here with
any mouse button, the window will be expanded to fill the screen.  If you click
again, the window will be returned to its former size and position.
</para>

<para>Pressing mouse buttons elsewhere performs other functions.  For example, when
you move the mouse cursor to one of the corners, it changes shape to a corner
with an arrow.  This cursor shape indicates that you can extend the window in
that direction by keeping the mouse button down and dragging the border.
</para>

<para><indexterm><primary>.fvwm2rc</primary></indexterm>
In most windows, the mouse keys will produce an application-specific menu.  By
convention, however, combinations of the mouse key and the <keycap>Alt</keycap> key are
interpreted by the window manager even when the cursor is in a window.  For
example, with the sample <emphasis>.fvwm2rc</emphasis>, <keycap>Alt-Mouse2</keycap> (the <keycap>Alt</keycap> key
and the middle mouse button) iconifies the window.
</para>

<para>In the next few sections, we'll look at all the mouse functions:
</para>
</sect2>
<sect2>
<title>Mouse key functions on the root window</title>

<para>On the root window, the mouse keys are used only to produce menus.  Table
<xref linkend="CFBSD-root-mouse"/> gives an overview.
<table frame='all'><title>Mouse key functions on the root window</title>
center,box,tab(#) ;
| lfCWp9| lf(B)p9 | lw61 | .
\s10Mouse
\^\s10Key#\s10Keyboard#Function
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>xterm</primary><secondary>command</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>command</primary><secondary>xterm</secondary></indexterm>
<row><entry> 1</entry><entry></entry><entry> Produce a menu of <emphasis>xterm</emphasis>s for the left side of the screen.  This is the menu <emphasis>LeftHosts</emphasis>.  2</entry><entry></entry><entry> Produce a menu of other applications, the menu <emphasis>Applications</emphasis>
</entry></row>
<indexterm><primary>Applications</primary><secondary>menu</secondary></indexterm>
<row><entry>  3</entry><entry></entry><entry> Produce a menu of <emphasis>xterm</emphasis>s for the right side of the screen.  This is the menu <emphasis>RightHosts</emphasis>.
</entry></row>
<indexterm><primary>RightHosts</primary><secondary>menu</secondary></indexterm>
<row><entry>  1</entry><entry>Shift</entry><entry> Produce the <emphasis>Control</emphasis>
</entry></row>
<indexterm><primary>Control</primary><secondary>menu</secondary></indexterm>
<row><entry> menu.  This menu includes various control functions.  This is the left-hand of the menus displayed in figure <xref linkend="CFBSD-base-display"/>.  2</entry><entry>Shift</entry><entry> Display a list of the active windows.  Selecting a window will deiconify it if necessary and bring it to the top of the screen (in other words, no other window will cover it).  3</entry><entry>Shift</entry><entry> Bring up the ``Window operations'' menu on page <xref linkend="CFBSD-window-ops-page"/>.
</entry></row>
</tbody></tgroup></table>
It's desirable for some menus to be independent of the position on the screen.
That way, you don't have to look carefully before selecting them.  To ensure
that they don't clash with anything else, select all of them with the key
combination <keycap>Shift-Alt</keycap>:
<table frame='all'><title>Position-independent mouse key functions</title>
center, box,tab(#) ;
| lfCWp9| lf(B)p9 | lw61 | .
\s10Mouse
\^\s10Key#\s10Keyboard#Function
=

<tgroup cols='3' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> 1</entry><entry>Shift-Alt</entry><entry> Produce the <emphasis>Control</emphasis>
</entry></row>
<indexterm><primary>Control</primary><secondary>menu</secondary></indexterm>
<row><entry> menu.  This menu includes various control functions.  This is the left-hand of the menus displayed in figure <xref linkend="CFBSD-base-display"/>.  2</entry><entry>Shift-Alt</entry><entry> Display the <emphasis>Applications</emphasis>
</entry></row>
<indexterm><primary>Applications</primary><secondary>menu</secondary></indexterm>
<row><entry> menu.  3</entry><entry>Shift-Alt</entry><entry> Move the current window.  This doesn't work on the root window.
</entry></row>
</tbody></tgroup></table>
</para>
</sect2>
<sect2>
<title>Use of colour</title>

<para><indexterm><primary>colour</primary><secondary>in X</secondary></indexterm>
You'll find that your X display doesn't look as brightly coloured as, say, a
Microsoft desktop.  In particular, <emphasis>xterm</emphasis> is monochrome black on pale.
If you want <emphasis>xterm</emphasis> to display in colour, you need two things:
</para>
<itemizedlist>
<listitem>

<para>Change the <emphasis>TERM</emphasis> environment variable from <emphasis>xterm</emphasis> to
<emphasis>xterm-color</emphasis>.  This enables the control sequences which <emphasis>xterm</emphasis>
uses to display in colour.
</para>
</listitem>
<listitem>

<para>You need applications which display in colour.  The <emphasis>mutt</emphasis>
<indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
mail reader will do this&mdash;see <xref linkend="CFBSD-chemail"/>, page <xref linkend="CFBSD-mutt"/>, for further details.
So will some programs in the Ports Collection, such as <emphasis>colorls</emphasis>,
<indexterm><primary>colorls</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>colorls</secondary></indexterm>
a version of <emphasis>ls</emphasis> which displays different kinds of files in different
colors when you supply it the <emphasis>-G</emphasis> option.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Network windowing</title>

<para><indexterm><primary>X</primary><secondary>in network</secondary></indexterm>
FreeBSD is an operating system which is designed to run in a networked
environment, so it should come as no surprise that you a system can create
windows on a display on a different system.  To avoid confusion, it's a good
idea to look at some terminology before we continue:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>X</primary><secondary>Server</secondary></indexterm>
An <emphasis>X Server</emphasis> is the display manager, so it runs on the machine with the
display.  Theoretically there can be multiple X servers on one machine, though
I've never seen this implemented.
</para>
</listitem>
<listitem>

<para><indexterm><primary>screen</primary><secondary>X</secondary></indexterm>
<indexterm><primary>X</primary><secondary>screen</secondary></indexterm>
A <emphasis>screen</emphasis> is one of possibly many display board and monitor combinations
controlled by a specific X server.  Some X servers, notably the server from Xi
Graphics, do support multiple screens.
</para>
</listitem>
<listitem>

<para><indexterm><primary>X</primary><secondary>Client</secondary></indexterm>
<indexterm><primary>Client</primary><secondary>X</secondary></indexterm>
<indexterm><primary>X</primary><secondary>Client</secondary></indexterm>
An <emphasis>X Client</emphasis> is a program which uses an X Server to display its data.
The prototypical example is <emphasis>xterm</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>A special notation exists to address X servers and screens:
<emphasis>System </emphasis></emphasis>name<command>:</command><emphasis>server </emphasis>number<command>.</command><emphasis>screen number
When looking at X client-server interaction, remember that the server is the
software component that manages the display.  This means that you're always
sitting at the server, not at the client.  For example, if you want to start an
<emphasis>xterm</emphasis> client on <emphasis>freebie</emphasis> and display it on <emphasis>presto</emphasis>, you'll
be sitting at <emphasis>presto</emphasis>.  To do this, you could type in, on <emphasis>presto</emphasis>,
</para>
<programlisting>
$ <command>rsh freebie xterm -ls -display presto:0 &amp;</command>
</programlisting>

<para><indexterm><primary>~/.rhosts</primary></indexterm>
<indexterm><primary>xhost</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xhost</secondary></indexterm>
The flag <emphasis>-ls</emphasis> tells <emphasis>xterm</emphasis> that this is a <emphasis>login shell</emphasis>, which
causes it to read in the startup files.  It might work without this flag, but
there's a good chance that some environment variables, such as <emphasis>PATH</emphasis>, may
not be set.
</para>

<para>In practice, the <emphasis>xterms</emphasis> menus in the window manager will perform this
function for you when you select the appropriate menu item.  For this to work,
you'll need to have remote access enabled via the <emphasis>~/.rhosts</emphasis> file (see
<xref linkend="CFBSD-chbasics"/>, page <xref linkend="CFBSD-.rhosts"/>).  In addition, you'll need to tell the X server
to allow the connection.  You do this with the <emphasis>xhost</emphasis> command, specifying
the names of the systems which have access:
</para>
<programlisting>
$ <command>xhost freebie presto bumble wait gw</command>
</programlisting>

<para>This will enable access from all the systems on our reference network, including
the one on which it is run.  You don't need to include your own system, which is
enabled by default, but if you do, you can use the same script on all systems on
the network.
</para>
</sect2>
</sect1>
<sect1>
<title>Installing the sample desktop</title>

<para><anchor id="CFBSD-install-desktop"/>
<indexterm><primary>install-desktop</primary><secondary>script</secondary></indexterm>
You'll find all the files described in this chapter on the first CD-ROM
(Installation CD-ROM) in the directory <emphasis><xref linkend="CFBSD-skelc"/></emphasis>.  Remember that you must
mount the CD-ROM before you can access the files&mdash;see page <xref linkend="CFBSD-mount"/> for
further details.  The individual scripts are in the directory
<emphasis><xref linkend="CFBSD-skelc"/>/scripts</emphasis>, but you'll probably find it easier to install them with
the script <emphasis>install-desktop</emphasis>:
</para>
<programlisting>
# <command>/cdrom<xref linkend="CFBSD-skelc"/>/scripts/install-desktop</command>
</programlisting>

<para>The sample desktop uses a number of packages from the Ports Collection.  Look at
the file <emphasis><xref linkend="CFBSD-skelc"/>/scripts/install-desktop</emphasis> for more details.
</para>
</sect1>
<sect1>
<title>The shell</title>

<para>One of the big differences between X and Microsoft environments is that X has
not gone overboard and eliminated typing.  You will find that you still spend a
considerable amount of time with the old-style shell.  You don't have to: UNIX
always gives you the choice, but most users find that once you have relatively
complicated things to to, it is easier to tell the system what they want rather
than to wade through lots of menus.
</para>

<para><indexterm><primary>bash</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>bash</secondary></indexterm>
We looked at the <emphasis>bash</emphasis> shell in <xref linkend="CFBSD-chunixref"/>, page <xref linkend="CFBSD-shell"/>.  When you
start up an <emphasis>xterm</emphasis>, you will automatically have a <emphasis>bash</emphasis> shell
running.
</para>
</sect1>
<sect1>
<title>The <emphasis>Emacs</emphasis> editor</title>

<para><indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
<anchor id="CFBSD-Emacs"/>
Another divergence of concept between UNIX and Microsoft environments is that
UNIX gives you a choice of editors in just about anything you do.  Microsoft
products frequently try to redefine the whole environment, so if you change
mailers, you may also have to change the editor you use to write mail.  This has
a profound effect on the way you work.  In particular, the Microsoft way makes
it uninteresting to write a really good editor, since you can't use it all the
time.
</para>

<para><indexterm><primary>vi</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vi</secondary></indexterm>
You may have heard of the <emphasis>vi</emphasis> editor, about which people speak with a
mixture of admiration, awe and horror.  <emphasis>vi</emphasis> is one of the oldest parts of
BSD.  It is a very powerful editor, but nobody would say that it is easy to
learn.  There are two reasons to use <emphasis>vi</emphasis>:
</para>
<itemizedlist>
<listitem>

<para>If you're already an experienced <emphasis>vi</emphasis> hacker, you probably won't want to
change.
</para>
</listitem>
<listitem>

<para>If you do a lot of work on different UNIX systems, you can rely on <emphasis>vi</emphasis>
being there.  There's no other editor about which you can say the same.
</para>
</listitem>
</itemizedlist>

<para>If, on the other hand, you don't know <emphasis>vi</emphasis>, and you only work on systems
whose software you can control, you probably shouldn't use <emphasis>vi</emphasis>.
<emphasis>Emacs</emphasis> is much easier to learn, and it is more powerful than <emphasis>vi</emphasis>.
</para>
<note>

<para><indexterm><primary>The</primary><secondary>New Hackers' Dictionary</secondary></indexterm>
I'm sticking my neck out here.  Holy wars have been fought about the differences
between <emphasis>vi</emphasis> and <emphasis>Emacs</emphasis>, and they continue to be fought.  To quote
version 4.0 of Eric Raymond's <emphasis>The New Hackers' Dictionary</emphasis>:
<keycap>holy wars</keycap> /n./ [from {Usenet}, but may predate it] /n./ {flame war}s over
{religious issues}.  The paper by Danny Cohen that popularized the terms
{big-endian} and {little-endian} in connection with the LSB-first/MSB-first
controversy was entitled "On Holy Wars and a Plea for Peace".  Other perennial
Holy Wars have included {EMACS} vs. {vi}, my personal computer vs. everyone
else's personal computer, {{ITS}} vs. {{Unix}}, {{Unix}} vs. {VMS}, {BSD} Unix
vs. {USG Unix}, {C} vs. {{Pascal}}, {C} vs.  FORTRAN, etc., ad nauseam.  The
characteristic that distinguishes holy wars from normal technical disputes is
that in a holy war most of the participants spend their time trying to pass off
personal value choices and cultural attachments as objective technical
evaluations.  See also {theology}.
</para>

<para>:EMACS: /ee'maks/ /n./ [from Editing MACroS] The ne plus ultra of hacker
editors, a programmable text editor with an entire LISP system inside it.  It
was originally written by Richard Stallman in {TECO} under {{ITS}} at the MIT AI
lab; AI Memo 554 described it as "an advanced, self-documenting, customizable,
extensible real-time display editor".  It has since been reimplemented any
number of times, by various hackers, and versions exist that run under most
major operating systems.  Perhaps the most widely used version, also written by
Stallman and now called "{GNU} EMACS" or {GNUMACS}, runs principally under Unix.
It includes facilities to run compilation subprocesses and send and receive
mail; many hackers spend up to 80% of their {tube time} inside it.  Other
variants include {GOSMACS}, CCA EMACS, UniPress EMACS, Montgomery EMACS, jove,
epsilon, and MicroEMACS.

Some EMACS versions running under window managers iconify as an overflowing
kitchen sink, perhaps to suggest the one feature the editor does not (yet)
include.  Indeed, some hackers find EMACS too {heavyweight} and {baroque} for
their taste, and expand the name as `Escape Meta Alt Control Shift' to spoof its
heavy reliance on keystrokes decorated with {bucky bits}.  Other spoof
expansions include `Eight Megabytes And Constantly Swapping', `Eventually
`malloc()'s All Computer Storage', and `EMACS Makes A Computer Slow' (see
{{recursive acronym}}).  See also {vi}.
</para>
</note>

<para>When running under X, <emphasis>Emacs</emphasis> displays its own window (<emphasis>vi</emphasis> always
uses an <emphasis>xterm</emphasis>).  As a result, if you start <emphasis>Emacs</emphasis> from an
<emphasis>xterm</emphasis>, you should use the <emphasis>&amp;</emphasis> character to start it in the
background:
</para>
<programlisting>
$ <command>emacs &amp;</command>
</programlisting>

<para>The resulting display looks like:
</para>

<para><indexterm><primary>Files</primary><secondary>menu</secondary></indexterm>
As you can see, the first thing that <emphasis>Emacs</emphasis> offers you is a tutorial.
You should take it.  You'll also notice the menu bars at the top.  Although they
look primitive compared to graphics toolbars, they offer all the functionality
of graphics-oriented menus.  In addition, they will tell you the keystrokes
which you can use to invoke the same functions.  Here's an example of the
<emphasis>Files</emphasis> menu:
</para>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: post-3rd edition -->
<!--  -->
<!--  To do: add info about disabled devices -->
<!--  -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  XXX These are dummy references.  I don't want to take them out in case they -->
<!--  XXX really start to exist, but they annoy me with their warnings. -->
<chapter id="CFBSD-nchbuild"><title>Configuring the kernel</title>

<para>So far, everything we've done has been with the standard <emphasis>GENERIC</emphasis> kernel
distributed with FreeBSD.  But we've seen that the <emphasis>GENERIC</emphasis> kernel has
its limitations, and you may find advantages in a custom kernel:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
<indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>Packet Filter</secondary></indexterm>
As we saw in <xref linkend="CFBSD-chconcepts"/>, <emphasis>GENERIC</emphasis> doesn't support everything that
FreeBSD knows about.  For example, if you want to install a Yoyodyne frobulator,
you'll need to install special support for it.
</para>
<note>

<para>In fact, the developer working on the Yoyodyne has defected to the Free Software
Foundation.  See the appendix to the GNU General Public License, reprinted in
<xref linkend="CFBSD-licenses"/>, for further details.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>It will take less time to boot because it does not have to spend time probing
for hardware which you do not have.
</para>
</listitem>
<listitem>

<para>A custom kernel often uses less memory, which is important because the kernel is
the one system component which must always be present in memory, so unused code
ties up memory which would otherwise be available to the virtual memory system.
On a system with limited RAM, you can save some memory by building a custom
kernel.  Don't overestimate the savings: a minimal kernel might save 500 kB over
the <emphasis>GENERIC</emphasis> kernel supplied with the system.
</para>
</listitem>
<listitem>

<para>Finally, there are several kernel options which you can tune to fit your needs.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>Kernel</primary><secondary>Loadable Module</secondary></indexterm>
<indexterm><primary>kld</primary></indexterm>
If you just need to add device support, you may be able to load a <emphasis>Kernel
Loadable Module</emphasis>, or <emphasis>kld</emphasis>.  In all other cases you'll need to build a new
kernel.  See page <xref linkend="CFBSD-kld"/> for more information on klds.
</para>

<para>FreeBSD is distributed in source, and building a kernel primarily involves
compiling the source files needed for the kernel.  To build a kernel, you
perform the following steps:
</para>
<itemizedlist>
<listitem>

<para>Install the system source, if you haven't already done so.
</para>
</listitem>
<listitem>

<para><indexterm><primary>kernel</primary><secondary>configuration file</secondary></indexterm>
Define your kernel configuration in a <emphasis>kernel configuration file</emphasis>.  This
file defines parameters to use during the build process.  We'll look at how to
do this starting on page
</para>
</listitem>
<listitem>

<para><indexterm><primary>command</primary><secondary>config</secondary></indexterm>
<indexterm><primary>config</primary><secondary>command</secondary></indexterm>
Create the configuration directory with the program <emphasis>config</emphasis>.  We'll discuss
this on page <xref linkend="CFBSD-run-config"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>make</primary><secondary>depend</secondary></indexterm>
Run <emphasis>make depend</emphasis> to create the dependency information for the kernel build.
</para>
</listitem>
<listitem>

<para>Run <emphasis>make</emphasis> to build the kernel.  We'll look at this step on page
</para>
</listitem>
<listitem>

<para>Install the kernel, which we'll discuss on page
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Configuring I/O devices</title>

<para>A lot of the configuration file relates to the I/O devices that you may connect
to your machine.  Recall from <xref linkend="CFBSD-chconcepts"/>, that in the most cases you will
need to specify some of IRQ, DMA channel, board memory, and I/O addresses for
the devices you configure.  Note particularly that the config file will not
handle references to IRQ 2 correctly: you <emphasis>must</emphasis> specify them as IRQ 9.
See page <xref linkend="CFBSD-IRQ"/> for further details.
</para>
</sect1>
<sect1>
<title>The kernel build directory</title>

<para><indexterm><primary>kernel</primary><secondary>build directory</secondary></indexterm>
<indexterm><primary>/usr/src/sys</primary></indexterm>
<indexterm><primary>/sys</primary></indexterm>
<indexterm><primary>i386/conf</primary></indexterm>
<indexterm><primary>alpha/conf</primary></indexterm>
<indexterm><primary>/usr/src/sys/alpha/conf/LINT</primary></indexterm>
The kernel sources are kept in the directory <emphasis>/usr/src/sys</emphasis>.  The symbolic
link <emphasis>/sys</emphasis> also points to this directory.  There are a number of
subdirectories of <emphasis>/usr/src/sys</emphasis> which represent different parts of the
kernel, but for our purposes, the most important are the architecture dependent
directories <emphasis>i386/conf</emphasis> (for the i386 architecture) or <emphasis>alpha/conf</emphasis>
(for the Alpha architecture), where you edit your custom kernel configuration,
and <emphasis>compile</emphasis>, where you build your kernel.  Notice the logical organization
of the directory tree: each supported device, file system, and option has its
own subdirectory.  In the rest of this chapter, we'll look at the i386
architecture.  Most of this applies to the Alpha architecture as well, but there
are differences not covered here.  See <emphasis>/usr/src/sys/alpha/conf/LINT</emphasis> for
more information.
</para>

<para><indexterm><primary>/usr/src/sys</primary></indexterm>
If your system doesn't have the directory <emphasis>/usr/src/sys</emphasis>, then the kernel
source has not been installed.  The sources are on the first CD-ROM in the
directory <emphasis>/src</emphasis>.  To install from the CD-ROM, perform the following steps:
</para>
<programlisting>
# <command>mkdir -p /usr/src/sys<emphasis>
# </emphasis></command><command>ln -s /usr/src/sys /sys<emphasis>
# </emphasis></command><command>cd /<emphasis>
# </emphasis></command><command>cat /cdrom/src/ssys.[a-d]* | tar xzvf -<emphasis>
</emphasis></command></programlisting>

<para>The symbolic link <emphasis>/sys</emphasis> for <emphasis>/usr/src/sys</emphasis> is not strictly
necessary, but it's a good idea: some software uses it, and otherwise you may
end up with two different copies of the sources.
</para>

<para><indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
Next, move to the directory <emphasis>i386/conf</emphasis> and copy the <emphasis>GENERIC</emphasis>
configuration file to the name you want to give your kernel.  For example:
</para>
<programlisting>
# <command>cd /usr/src/sys/i386/conf</command>
# cp <command>GENERIC FREEBIE</command>
</programlisting>

<para><indexterm><primary>kernel</primary><secondary>FREEBIE</secondary></indexterm>
Traditionally, this name is in all capital letters and, if you are maintaining
multiple FreeBSD machines with different hardware, it's a good idea to name it
after your machine's hostname.  In this example we call it <emphasis>FREEBIE</emphasis>.
</para>

<para><indexterm><primary>kernel</primary><secondary>FREEBIE</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
Now, edit <emphasis>FREEBIE</emphasis> with your favorite text editor.  Change the comment
lines at the top to reflect your configuration or the changes you've made to
differentiate it from <emphasis>GENERIC</emphasis>:
</para>
<programlisting>
#
# <command>FREEBIE</command> -- <command>My personal configuration file</command>
#
# For more information read the handbook part System Administration -&gt;
# Configuring the FreeBSD Kernel -&gt; The Configuration File.
# The handbook is available in /usr/share/doc/handbook or online as
# latest version from the FreeBSD World Wide Web server
# &lt;URL:http://www.FreeBSD.ORG/&gt;
#
# An exhaustive list of options and more detailed explanations of the
# device lines is present in the ./LINT configuration file. If you are
# in doubt as to the purpose or necessity of a line, check first in LINT.
#
#       $\&amp;Id: <command>FREEBIE</command>,v 1.101 1997/10/31 22:10:02 jseger Exp $

machine         "i386"
cpu             "I386_CPU"
cpu             "I486_CPU"
cpu             "I586_CPU"
cpu             "I686_CPU"
ident           <command>FREEBIE</command>
maxusers        10
</programlisting>

<para><indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
If you've build a kernel under SunOS or some other BSD operating system, much of
this file will be very familiar to you.  If you're coming from some other
operating system such as MS-DOS, on the other hand, the <emphasis>GENERIC</emphasis> configuration
file might seem overwhelming to you, so follow the descriptions in the following
section slowly and carefully.
</para>
</sect1>
<sect1>
<title>The configuration file</title>

<para><indexterm><primary>kernel</primary><secondary>configuration file</secondary></indexterm>
<indexterm><primary>configuration</primary><secondary>file</secondary></indexterm>
<anchor id="CFBSD-configuration-file"/>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>LINT</secondary></indexterm>
The directory <emphasis>/sys/i386/conf</emphasis> contains a number of configuration files:
tab(#) ;
lfCWp9 lw65 .
GENERIC#T{
General-purpose configuration file
T}
LINT#T{
Complete configuration file with copious comments.  This file is intended for
regression testing and documentation, not for building kernels, which would be
far too bloated.
T}
PCCARD#T{
A configuration file for laptops which use PCCARD controllers.
T}
SMP-GENERIC#T{
A generic configuration file for symmetrical multiprocessor machines.
T}
</para>

<para>
</tbody></tgroup></table>
</para>

<para>The general format of a configuration file is quite simple.  Each line contains
a keyword and one or more arguments.  For simplicity, most lines only contain
one argument.  Anything following a <emphasis>#</emphasis> is considered a comment and
ignored.  Keywords which contain numbers used as text must be enclosed in
quotation marks.
</para>

<para>One of the results of this simplicity is that you can put in options which have
absolutely no effect.  For example, you could add a line like this:
</para>
<programlisting>
<anchor id="CFBSD-config-APPLE_MAC_COMPATIBILITY"/>
options         APPLE_MAC_COMPATIBILITY
</programlisting>

<para>You can build a kernel with this option.  It will make no difference whatsoever.
Now it's unlikely that you'll think up a non-existent option like this, but it's
much more possible that you'll misspell a valid option, especially
finger-twisters like <emphasis>SYSVSHM</emphasis>, with the result that you don't compile in
the option you wanted.  The <emphasis>config</emphasis> program warns if you use unknown
options, so take these warnings seriously.
</para>

<para>The following sections describe the keywords not in the order they are listed in
<emphasis>LINT</emphasis>: instead, related keywords have been grouped together in a single
section (such as Networking), but in <emphasis>LINT</emphasis> they might be scattered
throughout the file.  Following this overview we'll look at some of the more
important ones.  You can find more information from the comments in the
<emphasis>LINT</emphasis> file.  Here's an overview in alphabetical order.  The keywords
without a page number are not discussed in more detail.
<table frame='all'><title>Configuration file keywords</title>
box,center,tab(#) ;
lfCWp9w10 | l | lw45 .
\s10Keyword#Page#Purpose
=

<tgroup cols='28' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> adv0</entry><entry><xref linkend="CFBSD-config-adv0"/></entry><entry> AdvanSys narrow SCSI host adaptor  adw0</entry><entry><xref linkend="CFBSD-config-adw0"/></entry><entry> Second Generation AdvanSys controllers including the ADV940UW.  aha0</entry><entry><xref linkend="CFBSD-config-aha0"/></entry><entry> Adaptec 154x SCSI host adapters  ahb0</entry><entry><xref linkend="CFBSD-config-ahb0"/></entry><entry> Adaptec 174x SCSI host adapters  ahc0</entry><entry><xref linkend="CFBSD-config-ahc0"/></entry><entry> Adaptec 274X and 284X adapters  AHC_ALLOW_MEMIO</entry><entry><xref linkend="CFBSD-config-AHC_ALLOW_MEMIO"/></entry><entry> enable memory mapped I/O on Adaptec 274X and 284X adapters  alpha</entry><entry><xref linkend="CFBSD-config-alpha"/></entry><entry> Define the alpha architecture  alpm0</entry><entry><xref linkend="CFBSD-config-alpm0"/></entry><entry> Acer Aladdin-IV/V/Pro2 Power Management Unit  APIC_IO</entry><entry><xref linkend="CFBSD-config-APIC_IO"/></entry><entry> enable the use of the IO APIC for Symmetric I/O  apm0</entry><entry><xref linkend="CFBSD-config-apm0"/></entry><entry> Laptop Advanced Power Management  ar0</entry><entry><xref linkend="CFBSD-config-ar0"/></entry><entry> Arnet SYNC/570i hdlc sync 2/4 port V.35/X.21 serial driver (requires sppp)  asc0</entry><entry><xref linkend="CFBSD-config-asc0"/></entry><entry> GI1904-based hand scanners, e.g. the Trust Amiscan Grey  atkbd0</entry><entry><xref linkend="CFBSD-config-atkbd0"/></entry><entry> The keyboard controller.  It controls the keyboard and the PS/2 mouse.  atkbdc0</entry><entry><xref linkend="CFBSD-config-atkbdc0"/>
</entry></row>
<row><entry> ATKBD_DFLT_KEYMAP</entry><entry><xref linkend="CFBSD-config-ATKBD_DFLT_KEYMAP"/></entry><entry> specify the built-in keymap  atm</entry><entry><xref linkend="CFBSD-config-atm"/></entry><entry> generic ATM functions  ATM_CORE</entry><entry><xref linkend="CFBSD-config-ATM_CORE"/></entry><entry> core ATM protocol family  ATM_IP</entry><entry><xref linkend="CFBSD-config-ATM_IP"/></entry><entry> IP over ATM support  ATM_SIGPVC</entry><entry><xref linkend="CFBSD-config-ATM_SIGPVC"/></entry><entry> SIGPVC signalling manager  ATM_SPANS</entry><entry><xref linkend="CFBSD-config-ATM_SPANS"/></entry><entry> SPANS signalling manager  ATM_UNI</entry><entry><xref linkend="CFBSD-config-ATM_UNI"/></entry><entry> UNI signalling manager  AUTO_EOI_1</entry><entry><xref linkend="CFBSD-config-AUTO_EOI_1"/></entry><entry> Enable the automatic EOI feature for the master 8259A interrupt controller  AVM_A1</entry><entry><xref linkend="CFBSD-config-AVM_A1"/></entry><entry> AVM A1 or AVM Fritz!Card ISDN adaptor  AVM_A1_PCMCIA</entry><entry><xref linkend="CFBSD-config-AVM_A1_PCMCIA"/></entry><entry> AVM A1 or AVM Fritz!Card ISDN adaptor, PCMCIA  ax0</entry><entry><xref linkend="CFBSD-config-ax0"/></entry><entry> PCI fast ethernet adapters based on the ASIX Electronics AX88140A chip, including the Alfa Inc. GFC2204.  bktr0</entry><entry><xref linkend="CFBSD-config-bktr0"/></entry><entry> Bt848 capture boards (http://www.freebsd.org/~fsmp/HomeAuto/Bt848.html)  BOOTP</entry><entry><xref linkend="CFBSD-config-BOOTP"/></entry><entry> Use BOOTP to obtain IP address/hostname  BOOTP_COMPAT</entry><entry><xref linkend="CFBSD-config-BOOTP_COMPAT"/></entry><entry> Workaround for broken bootp daemons.  BOOTP_NFSROOT</entry><entry><xref linkend="CFBSD-config-BOOTP_NFSROOT"/></entry><entry> NFS mount root filesystem using BOOTP info  BOOTP_NFSV3</entry><entry><xref linkend="CFBSD-config-BOOTP_NFSV3"/></entry><entry> Use NFS v3 to NFS mount root  BOOTP_WIRED_TO</entry><entry><xref linkend="CFBSD-config-BOOTP_WIRED_TO"/></entry><entry> Use interface fxp0 for BOOTP  bpfilter</entry><entry><xref linkend="CFBSD-config-bpfilter"/></entry><entry> Berkeley packet filter  BREAK_TO_DEBUGGER</entry><entry><xref linkend="CFBSD-config-BREAK_TO_DEBUGGER"/></entry><entry> A BREAK on a comconsole goes to <emphasis>ddb</emphasis>  BRIDGE</entry><entry><xref linkend="CFBSD-config-BRIDGE"/></entry><entry> Enable bridging between ethernet boards.  bt0</entry><entry><xref linkend="CFBSD-config-bt0"/></entry><entry> Most Buslogic SCSI host adapters  card0</entry><entry><xref linkend="CFBSD-config-card0"/></entry><entry> PCMCIA slot controller.  ccd</entry><entry><xref linkend="CFBSD-config-ccd"/></entry><entry> Concatenated disk driver  cd0</entry><entry><xref linkend="CFBSD-config-cd0"/></entry><entry> SCSI CD-ROMs  CD9660</entry><entry><xref linkend="CFBSD-config-CD9660"/></entry><entry> ISO 9660 filesystem  CD9660_ROOT</entry><entry><xref linkend="CFBSD-config-CD9660_ROOT"/></entry><entry> CD-ROM usable as root device  CD9660_ROOTDELAY</entry><entry><xref linkend="CFBSD-config-CD9660_ROOTDELAY"/></entry><entry> Timeout on mounting CD-ROM root  ch0</entry><entry><xref linkend="CFBSD-config-ch0"/></entry><entry> SCSI media changers  CODA</entry><entry><xref linkend="CFBSD-config-CODA"/></entry><entry> CODA filesystem.  COMPAT_43</entry><entry><xref linkend="CFBSD-config-COMPAT_43"/></entry><entry> Implement system calls compatible with 4.3BSD   COM_ESP</entry><entry><xref linkend="CFBSD-config-COM_ESP"/></entry><entry> code for Hayes ESP  COM_MULTIPORT</entry><entry><xref linkend="CFBSD-config-COM_MULTIPORT"/></entry><entry> code for some serial boards with shared IRQs  config</entry><entry><xref linkend="CFBSD-config-config"/></entry><entry> Define kernel parameters  CONSPEED</entry><entry><xref linkend="CFBSD-config-CONSPEED"/></entry><entry> Default speed for serial console  cpu</entry><entry><xref linkend="CFBSD-config-cpu"/></entry><entry> Specify the CPU chip (not the hardware)  CPU_UPGRADE_HW_CACHE</entry><entry><xref linkend="CFBSD-config-CPU_UPGRADE_HW_CACHE"/>
</entry></row>
<row><entry> CRTX_S0_P</entry><entry><xref linkend="CFBSD-config-CRTX_S0_P"/>
</entry></row>
<row><entry> cs0</entry><entry><xref linkend="CFBSD-config-cs0"/></entry><entry> IBM Etherjet and other Crystal Semi CS89x0-based Ethernet adapters.  css0</entry><entry><xref linkend="CFBSD-config-css0"/></entry><entry> Crystal Sound System (CSS 423x PnP).  ctx0</entry><entry><xref linkend="CFBSD-config-ctx0"/></entry><entry> Cortex-I frame grabber  cx0</entry><entry><xref linkend="CFBSD-config-cx0"/></entry><entry> Cronyx/Sigma multiport sync/async (with Cisco or PPP framing)  cy0</entry><entry><xref linkend="CFBSD-config-cy0"/></entry><entry> Cyclades serial driver  CYRIX_CACHE_REALLY_WORKS</entry><entry><xref linkend="CFBSD-config-CYRIX_CACHE_REALLY_WORKS"/></entry><entry> Enables CPU cache on Cyrix 486 CPUs without cache flush at hold state, and write-back CPU cache on early-revision Cyrix 6x86  CYRIX_CACHE_WORKS</entry><entry><xref linkend="CFBSD-config-CYRIX_CACHE_WORKS"/></entry><entry> Enable CPU cache on Cyrix 486 CPUs with cache flush at hold state.  CY_PCI_FASTINTR</entry><entry><xref linkend="CFBSD-config-CY_PCI_FASTINTR"/></entry><entry> Use with cy_pci unless irq is shared  da0</entry><entry><xref linkend="CFBSD-config-da0"/></entry><entry> SCSI direct access devices (aka disks)  DDB</entry><entry><xref linkend="CFBSD-config-DDB"/></entry><entry> Enable the kernel debugger  DDB_UNATTENDED</entry><entry><xref linkend="CFBSD-config-DDB_UNATTENDED"/></entry><entry> Dont drop into DDB for a panic  de0</entry><entry><xref linkend="CFBSD-config-de0"/></entry><entry> Digital Equipment DC21040 Ethernet adapter  DEVFS</entry><entry><xref linkend="CFBSD-config-DEVFS"/></entry><entry> Device filesystem  DFLDSIZ</entry><entry><xref linkend="CFBSD-config-DFLDSIZ"/></entry><entry> Soft maximum data size  dgb0</entry><entry><xref linkend="CFBSD-config-dgb0"/></entry><entry> Digiboard PC/Xi and PC/Xe series driver (ALPHA QUALITY!)  dgm0</entry><entry><xref linkend="CFBSD-config-dgm0"/>
</entry></row>
<row><entry> DIAGNOSTIC</entry><entry><xref linkend="CFBSD-config-DIAGNOSTIC"/></entry><entry> Enable extra sanity checking of internal structures  disc</entry><entry><xref linkend="CFBSD-config-disc"/></entry><entry> Discard device&mdash;discard all packets  DONTPROBE_1284</entry><entry><xref linkend="CFBSD-config-DONTPROBE_1284"/></entry><entry> Avoid boot detection of PnP parallel devices  dpt0</entry><entry><xref linkend="CFBSD-config-dpt0"/></entry><entry> Support for DPT RAID controllers.  DRN_NGO</entry><entry><xref linkend="CFBSD-config-DRN_NGO"/></entry><entry> Dr. Neuhaus Niccy Go@ ISDN board  DUMMYNET</entry><entry><xref linkend="CFBSD-config-DUMMYNET"/></entry><entry> Enable the ``dummynet'' bandwidth limiter  DYNALINK</entry><entry><xref linkend="CFBSD-config-DYNALINK"/></entry><entry> Dynalink IS64PH ISDN board  ed0</entry><entry><xref linkend="CFBSD-config-ed0"/></entry><entry> Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503  eisa0</entry><entry><xref linkend="CFBSD-config-eisa0"/></entry><entry> EISA bus  EISA_SLOTS</entry><entry><xref linkend="CFBSD-config-EISA_SLOTS"/></entry><entry> Number of EISA slots to probe  el0</entry><entry><xref linkend="CFBSD-config-el0"/></entry><entry> 3Com 3C501  ELSA_QS1ISA</entry><entry><xref linkend="CFBSD-config-ELSA_QS1ISA"/></entry><entry> ELSA QuickStep 1000pro ISA ISDN board  ELSA_QS1PCI</entry><entry><xref linkend="CFBSD-config-ELSA_QS1PCI"/></entry><entry> ELSA QuickStep 1000pro PCI ISDN board  en0</entry><entry><xref linkend="CFBSD-config-en0"/></entry><entry> Efficient Networks (ENI) ENI-155 PCI midway cards and Adaptec 155Mbps PCI ATM cards (ANA-59x0)  ENABLE_ALART</entry><entry><xref linkend="CFBSD-config-ENABLE_ALART"/>
</entry></row>
<row><entry> ep0</entry><entry><xref linkend="CFBSD-config-ep0"/></entry><entry> 3Com 3C509  ether</entry><entry><xref linkend="CFBSD-config-ether"/></entry><entry> Generic Ethernet support  ex0</entry><entry><xref linkend="CFBSD-config-ex0"/></entry><entry> Intel EtherExpress Pro/10 and other i82595-based Ethernet adapters  EXPORTMFS</entry><entry><xref linkend="CFBSD-config-EXPORTMFS"/></entry><entry> Allow MFS filesystems to be exported via NFS.  EXT2FS</entry><entry><xref linkend="CFBSD-config-EXT2FS"/></entry><entry> Linux ext2fs file system.  EXTRA_SIO</entry><entry><xref linkend="CFBSD-config-EXTRA_SIO"/></entry><entry> number of extra sio ports to allocate  FAILSAFE</entry><entry><xref linkend="CFBSD-config-FAILSAFE"/></entry><entry> Be particularly conservative in various parts of the kernel and choose functionality over speed (on the widest variety of systems).  FAT_CURSOR</entry><entry><xref linkend="CFBSD-config-FAT_CURSOR"/></entry><entry> start with block cursor  fd0</entry><entry><xref linkend="CFBSD-config-fd0"/></entry><entry> Floppy disk  fdc0</entry><entry><xref linkend="CFBSD-config-fdc0"/></entry><entry> Floppy disk controller  FDC_DEBUG</entry><entry><xref linkend="CFBSD-config-FDC_DEBUG"/></entry><entry> Enable floppy debugging  FDC_YE</entry><entry><xref linkend="CFBSD-config-FDC_YE"/>
</entry></row>
<row><entry> fddi</entry><entry><xref linkend="CFBSD-config-fddi"/></entry><entry> Generic FDDI support  FDESC</entry><entry><xref linkend="CFBSD-config-FDESC"/></entry><entry> File descriptor filesystem  fe0</entry><entry><xref linkend="CFBSD-config-fe0"/></entry><entry> Fujitsu MB86960A/MB86965A Ethernet  fea0</entry><entry><xref linkend="CFBSD-config-fea0"/></entry><entry> DEC DEFEA EISA FDDI adapter  FFS</entry><entry><xref linkend="CFBSD-config-FFS"/></entry><entry> Fast filesystem  FFS_ROOT</entry><entry><xref linkend="CFBSD-config-FFS_ROOT"/></entry><entry> FFS usable as root device  fpa0</entry><entry><xref linkend="CFBSD-config-fpa0"/></entry><entry> Digital DEFPA PCI FDDI adapter  fxp0</entry><entry><xref linkend="CFBSD-config-fxp0"/></entry><entry> Intel EtherExpress Pro/100B PCI Fast Ethernet adapters  GDB_REMOTE_CHAT</entry><entry><xref linkend="CFBSD-config-GDB_REMOTE_CHAT"/></entry><entry> Use <emphasis>gdb</emphasis> protocol for remote debugging  gp0</entry><entry><xref linkend="CFBSD-config-gp0"/></entry><entry>  National Instruments AT-GPIB and AT-GPIB/TNT board  GPL_MATH_EMULATE</entry><entry><xref linkend="CFBSD-config-GPL_MATH_EMULATE"/></entry><entry> Alternate x87 math emulation  gsc0</entry><entry><xref linkend="CFBSD-config-gsc0"/></entry><entry> Genius GS-4500 hand scanner.  gus0</entry><entry><xref linkend="CFBSD-config-gus0"/></entry><entry> Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX  gzip</entry><entry><xref linkend="CFBSD-config-gzip"/></entry><entry> Exec gzipped <emphasis>a.out</emphasis>s  hea0</entry><entry><xref linkend="CFBSD-config-hea0"/></entry><entry> Efficient ENI-155p ATM PCI  hfa0</entry><entry><xref linkend="CFBSD-config-hfa0"/></entry><entry> FORE PCA-200E ATM PCI  HW_WDOG</entry><entry><xref linkend="CFBSD-config-HW_WDOG"/>
</entry></row>
<row><entry> i386</entry><entry><xref linkend="CFBSD-config-i386"/></entry><entry> Define the i386 architecture  I386_CPU</entry><entry><xref linkend="CFBSD-config-I386_CPU"/></entry><entry> Intel i386 processor  I486_CPU</entry><entry><xref linkend="CFBSD-config-I486_CPU"/></entry><entry> Intel i486 processor  i4b</entry><entry><xref linkend="CFBSD-config-i4b"/></entry><entry> ISDN subsystem  I586_CPU</entry><entry><xref linkend="CFBSD-config-I586_CPU"/></entry><entry> Intel Pentium processor  I686_CPU</entry><entry><xref linkend="CFBSD-config-I686_CPU"/></entry><entry> Intel Pentium Pro and Pentium 2 processors  IBCS2</entry><entry><xref linkend="CFBSD-config-IBCS2"/></entry><entry> SCO UNIX binary emulation.  ic0</entry><entry><xref linkend="CFBSD-config-ic0"/></entry><entry> Philips i2c bus support.  ident</entry><entry><xref linkend="CFBSD-config-ident"/></entry><entry> Identify the kernel configuration  IDE_DELAY</entry><entry><xref linkend="CFBSD-config-IDE_DELAY"/></entry><entry> Specify probe delay for IDE devices  ie0</entry><entry><xref linkend="CFBSD-config-ie0"/></entry><entry> AT&amp;T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210  iicbus0</entry><entry><xref linkend="CFBSD-config-iicbus0"/></entry><entry> Philips i2c bus support.  INCLUDE_CONFIG_FILE</entry><entry><xref linkend="CFBSD-config-INCLUDE_CONFIG_FILE"/></entry><entry> Store this configuration file into the kernel binary itself  INET</entry><entry><xref linkend="CFBSD-config-INET"/></entry><entry> Internet communications protocols  intpm0</entry><entry><xref linkend="CFBSD-config-intpm0"/>
</entry></row>
<row><entry> INTRO_USERCONFIG</entry><entry><xref linkend="CFBSD-config-INTRO_USERCONFIG"/></entry><entry> imply -c and show intro screen  INVARIANTS</entry><entry><xref linkend="CFBSD-config-INVARIANTS"/></entry><entry> Enable extra sanity checking of internal structures.  IPDIVERT</entry><entry><xref linkend="CFBSD-config-IPDIVERT"/></entry><entry> Divert sockets  IPFILTER</entry><entry><xref linkend="CFBSD-config-IPFILTER"/></entry><entry> kernel ipfilter support  IPFIREWALL</entry><entry><xref linkend="CFBSD-config-IPFIREWALL"/></entry><entry> Firewall  IPSTEALTH</entry><entry><xref linkend="CFBSD-config-IPSTEALTH"/></entry><entry> support for stealth forwarding  IPX</entry><entry><xref linkend="CFBSD-config-IPX"/></entry><entry> Include IPX/SPX communications protocols  IPXIP</entry><entry><xref linkend="CFBSD-config-IPXIP"/></entry><entry> Include IPX in IP encapsulation  isa0</entry><entry><xref linkend="CFBSD-config-isa0"/></entry><entry> ISA bus  joy0</entry><entry><xref linkend="CFBSD-config-joy0"/></entry><entry> joystick  KERNFS</entry><entry><xref linkend="CFBSD-config-KERNFS"/></entry><entry> Kernel filesystem  KTRACE</entry><entry><xref linkend="CFBSD-config-KTRACE"/></entry><entry> Enable kernel tracing  labpc0</entry><entry><xref linkend="CFBSD-config-labpc0"/></entry><entry> National Instruments Lab-PC and Lab-PC+  le0</entry><entry><xref linkend="CFBSD-config-le0"/></entry><entry> Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100, DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)  lnc0</entry><entry><xref linkend="CFBSD-config-lnc0"/></entry><entry> Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)  LOCKF_DEBUG</entry><entry><xref linkend="CFBSD-config-LOCKF_DEBUG"/>
</entry></row>
<row><entry> loop</entry><entry><xref linkend="CFBSD-config-loop"/></entry><entry> Network loopback device support  lpt0</entry><entry><xref linkend="CFBSD-config-lpt0"/></entry><entry> Printer port  LPT_DEBUG</entry><entry><xref linkend="CFBSD-config-LPT_DEBUG"/></entry><entry> Printer driver debug  matcd0</entry><entry><xref linkend="CFBSD-config-matcd0"/></entry><entry> Matsushita/Panasonic CD-ROM  MATH_EMULATE</entry><entry><xref linkend="CFBSD-config-MATH_EMULATE"/></entry><entry> Support for x87 emulation  MAXCONS</entry><entry><xref linkend="CFBSD-config-MAXCONS"/></entry><entry> Number of virtual consoles for <emphasis>syscons</emphasis>  MAXDSIZ</entry><entry><xref linkend="CFBSD-config-MAXDSIZ"/></entry><entry> Maximum data size  MAXMEM</entry><entry><xref linkend="CFBSD-config-MAXMEM"/></entry><entry> Specify explicit memory size  maxusers</entry><entry><xref linkend="CFBSD-config-maxusers"/></entry><entry> Set kernel parameters based on the number of expected users.  This parameter <emphasis>doesn't limit the number of users</emphasis>  mcd0</entry><entry><xref linkend="CFBSD-config-mcd0"/></entry><entry> Mitsumi CD-ROM  MD5</entry><entry><xref linkend="CFBSD-config-MD5"/></entry><entry> Include an MD5 encryption routine in the kernel  meteor0</entry><entry><xref linkend="CFBSD-config-meteor0"/></entry><entry> Matrox Meteor video capture board  meteor0</entry><entry><xref linkend="CFBSD-config-meteor0"/></entry><entry> PCI video capture board  MFS</entry><entry><xref linkend="CFBSD-config-MFS"/></entry><entry> Memory File System  MFS_ROOT</entry><entry><xref linkend="CFBSD-config-MFS_ROOT"/></entry><entry> MFS root file system  mpu0</entry><entry><xref linkend="CFBSD-config-mpu0"/></entry><entry> Roland MPU-401 stand-alone card  MROUTING</entry><entry><xref linkend="CFBSD-config-MROUTING"/></entry><entry> Multicast routing  MSDOSFS</entry><entry><xref linkend="CFBSD-config-MSDOSFS"/></entry><entry> MS DOS File System  mse0</entry><entry><xref linkend="CFBSD-config-mse0"/></entry><entry> Logitech and ATI InPort bus mouse ports  MSGBUF_SIZE</entry><entry><xref linkend="CFBSD-config-MSGBUF_SIZE"/></entry><entry> Set size of kernel internal message buffer.  mss0</entry><entry><xref linkend="CFBSD-config-mss0"/></entry><entry> Microsoft Sound System  mx0</entry><entry><xref linkend="CFBSD-config-mx0"/></entry><entry> Fast ethernet adapters based on the Macronix 98713, 987615 ans 98725 series chips.  NAPIC</entry><entry><xref linkend="CFBSD-config-NAPIC"/></entry><entry> Set number of IO APICs on SMP  NATM</entry><entry><xref linkend="CFBSD-config-NATM"/></entry><entry> Native ATM  NBUS</entry><entry><xref linkend="CFBSD-config-NBUS"/></entry><entry> Set number of busses on SMP  NCPU</entry><entry><xref linkend="CFBSD-config-NCPU"/></entry><entry> Set number of CPUs on SMP  ncr0</entry><entry><xref linkend="CFBSD-config-ncr0"/></entry><entry> NCR 53C810 and 53C825 SCSI host adapters  NDGBPORTS</entry><entry><xref linkend="CFBSD-config-NDGBPORTS"/></entry><entry> Defaults to 16*NDGB  NETATALK</entry><entry><xref linkend="CFBSD-config-NETATALK"/></entry><entry> Appletalk communications protocols  NFS</entry><entry><xref linkend="CFBSD-config-NFS"/></entry><entry> Network File System  NINTR</entry><entry><xref linkend="CFBSD-config-NINTR"/></entry><entry> Set number of INTs on SMP  npx0</entry><entry><xref linkend="CFBSD-config-npx0"/></entry><entry> Numeric Processing eXtension driver, for machines with math co-processor  NSFBUFS</entry><entry><xref linkend="CFBSD-config-NSFBUFS"/></entry><entry> Number of virtual buffers to map file VM pages for sendfile(2).  NSWAPDEV</entry><entry><xref linkend="CFBSD-config-NSWAPDEV"/></entry><entry> Allow this many swap-devices.  NTFS</entry><entry><xref linkend="CFBSD-config-NTFS"/></entry><entry> Microsoft NT File System  NULLFS</entry><entry><xref linkend="CFBSD-config-NULLFS"/></entry><entry> NULL filesystem  opl0</entry><entry><xref linkend="CFBSD-config-opl0"/></entry><entry> Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum  P1003_1B</entry><entry><xref linkend="CFBSD-config-P1003_1B"/></entry><entry> Set 1993 POSIX real time extensions.  pas0</entry><entry><xref linkend="CFBSD-config-pas0"/></entry><entry> ProAudioSpectrum PCM and MIDI  pass0</entry><entry><xref linkend="CFBSD-config-pass0"/></entry><entry> CAM passthrough driver  pca0</entry><entry><xref linkend="CFBSD-config-pca0"/></entry><entry> PCM audio through your PC speaker  pcf0</entry><entry><xref linkend="CFBSD-config-pcf0"/></entry><entry> Philips PCF8584 ISA-bus controller.  pci0</entry><entry><xref linkend="CFBSD-config-pci0"/></entry><entry> PCI bus  pcic0</entry><entry><xref linkend="CFBSD-config-pcic0"/></entry><entry> PCCARD/PCMCIA slots  pcm0</entry><entry><xref linkend="CFBSD-config-pcm0"/></entry><entry> PCM audio through various sound cards.  PERFMON</entry><entry><xref linkend="CFBSD-config-PERFMON"/></entry><entry> Include driver for Pentium/Pentium Pro performance counters  PERIPH_1284</entry><entry><xref linkend="CFBSD-config-PERIPH_1284"/></entry><entry> Makes your computer act as a IEEE1284  plip0</entry><entry><xref linkend="CFBSD-config-plip0"/></entry><entry> Parallel IP interface.  PMAP_SHPGPERPROC</entry><entry><xref linkend="CFBSD-config-PMAP_SHPGPERPROC"/></entry><entry> The number of PV entries per process.   pn0</entry><entry><xref linkend="CFBSD-config-pn0"/></entry><entry> Fast ethernet adapters based on the Lite-On 82c168 and 82c169 PNIC chips, including the LinkSys LNE100TX, the NetGear FA310TX rev. D1 and the Matrox FastNIC 10/100.  pnp0</entry><entry><xref linkend="CFBSD-config-pnp0"/></entry><entry> Enable PnP support in the kernel  PORTAL</entry><entry><xref linkend="CFBSD-config-PORTAL"/></entry><entry> Portal filesystem  POWERFAIL_NMI</entry><entry><xref linkend="CFBSD-config-POWERFAIL_NMI"/></entry><entry> Don't panic on laptop power fail  ppbus0</entry><entry><xref linkend="CFBSD-config-ppbus0"/></entry><entry> Parallel port bus support  ppc0</entry><entry><xref linkend="CFBSD-config-ppc0"/></entry><entry> ISA-bus parallel port interfaces.  ppi0</entry><entry><xref linkend="CFBSD-config-ppi0"/></entry><entry> Parallel port general-purpose I/O  ppp</entry><entry><xref linkend="CFBSD-config-ppp"/></entry><entry> Kernel PPP support  PROCFS</entry><entry><xref linkend="CFBSD-config-PROCFS"/></entry><entry> Process filesystem  psm0</entry><entry><xref linkend="CFBSD-config-psm0"/></entry><entry> PS/2 mouse interface.  pt0</entry><entry><xref linkend="CFBSD-config-pt0"/></entry><entry> SCSI processor type  pty</entry><entry><xref linkend="CFBSD-config-pty"/></entry><entry> Pseudo ttys  QUOTA</entry><entry><xref linkend="CFBSD-config-QUOTA"/></entry><entry> enable disk quotas  rc0</entry><entry><xref linkend="CFBSD-config-rc0"/></entry><entry> RISCom/8 multiport card  rdp0</entry><entry><xref linkend="CFBSD-config-rdp0"/></entry><entry> RealTek RTL 8002-based pocket ethernet adapters.  rp0</entry><entry><xref linkend="CFBSD-config-rp0"/></entry><entry> Comtrol Rocketport(ISA) - single card  sa0</entry><entry><xref linkend="CFBSD-config-sa0"/></entry><entry> SCSI tapes  sb0</entry><entry><xref linkend="CFBSD-config-sb0"/></entry><entry> SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum  sbmidi0</entry><entry><xref linkend="CFBSD-config-sbmidi0"/></entry><entry> SoundBlaster 16 MIDI interface  sbxvi0</entry><entry><xref linkend="CFBSD-config-sbxvi0"/></entry><entry> SoundBlaster 16  sc0</entry><entry><xref linkend="CFBSD-config-sc0"/></entry><entry> The default <emphasis>syscons</emphasis> console driver  scd0</entry><entry><xref linkend="CFBSD-config-scd0"/></entry><entry> Sony CD-ROM  sctarg0</entry><entry><xref linkend="CFBSD-config-sctarg0"/></entry><entry> SCSI target  SHOW_BUSYBUFS</entry><entry><xref linkend="CFBSD-config-SHOW_BUSYBUFS"/></entry><entry> List buffers that prevent root unmount  si0</entry><entry><xref linkend="CFBSD-config-si0"/></entry><entry> Specialix SI/XIO 4-32 port terminal multiplexor  SIMPLELOCK_DEBUG</entry><entry><xref linkend="CFBSD-config-SIMPLELOCK_DEBUG"/>
</entry></row>
<row><entry> sio0</entry><entry><xref linkend="CFBSD-config-sio0"/></entry><entry> Serial I/O port  sl</entry><entry><xref linkend="CFBSD-config-sl"/></entry><entry> Serial Line IP  smb0</entry><entry><xref linkend="CFBSD-config-smb0"/></entry><entry> System Management Bus support.  SMP</entry><entry><xref linkend="CFBSD-config-SMP"/></entry><entry> Symmetric Multiprocessor Kernel  snd0</entry><entry><xref linkend="CFBSD-config-snd0"/></entry><entry> Voxware sound support code  snp</entry><entry><xref linkend="CFBSD-config-snp"/></entry><entry> Snoop device  speaker</entry><entry><xref linkend="CFBSD-config-speaker"/></entry><entry> Play IBM BASIC-style noises out your speaker  spigot0</entry><entry><xref linkend="CFBSD-config-spigot0"/></entry><entry> The Creative Labs Video Spigot video-acquisition board  splash</entry><entry><xref linkend="CFBSD-config-splash"/></entry><entry> Splash screen at start up.  sppp</entry><entry><xref linkend="CFBSD-config-sppp"/></entry><entry> Generic Synchronous PPP  sr0</entry><entry><xref linkend="CFBSD-config-sr0"/></entry><entry> RISCom/N2 hdlc sync 1/2 port V.35/X.21 serial driver (requires sppp)  sscape0</entry><entry><xref linkend="CFBSD-config-sscape0"/></entry><entry> Ensoniq Soundscape MIDI interface  STD8X16FONT</entry><entry><xref linkend="CFBSD-config-STD8X16FONT"/></entry><entry> <emphasis>syscons</emphasis>: compile font in  stl0</entry><entry><xref linkend="CFBSD-config-stl0"/></entry><entry> Stallion EasyIO and EasyConnection 8/32 (cd1400 based)  stli0</entry><entry><xref linkend="CFBSD-config-stli0"/></entry><entry> Stallion EasyConnection 8/64, ONboard, Brumby (intelligent)  SYSVMSG</entry><entry><xref linkend="CFBSD-config-SYSVMSG"/></entry><entry> Support for System V message queues  SYSVSEM</entry><entry><xref linkend="CFBSD-config-SYSVSEM"/></entry><entry> Support for System V semaphores  SYSVSHM</entry><entry><xref linkend="CFBSD-config-SYSVSHM"/></entry><entry> Support for System V shared memory  TCP_COMPAT_42</entry><entry><xref linkend="CFBSD-config-TCP_COMPAT_42"/></entry><entry> emulate 4.2BSD TCP bugs  tun</entry><entry><xref linkend="CFBSD-config-tun"/></entry><entry> Tunnel driver, used mainly for User PPP.  TUNE_1542</entry><entry><xref linkend="CFBSD-config-TUNE_1542"/></entry><entry> Enable automatic ISA bus speed selection for Adaptec 1542 boards  tw0</entry><entry><xref linkend="CFBSD-config-tw0"/></entry><entry> TW-523 power line interface for use with X-10 home control products  tx0</entry><entry><xref linkend="CFBSD-config-tx0"/></entry><entry> SMC 9432TX based Ethernet boards.  uart0</entry><entry><xref linkend="CFBSD-config-uart0"/></entry><entry> stand-alone 6850 UART for MIDI  UCONSOLE</entry><entry><xref linkend="CFBSD-config-UCONSOLE"/></entry><entry> Allow ordinary users to take the console  ugen0</entry><entry><xref linkend="CFBSD-config-ugen0"/></entry><entry> Generic USB interface  UMAPFS</entry><entry><xref linkend="CFBSD-config-UMAPFS"/></entry><entry> UID map filesystem  ums0</entry><entry><xref linkend="CFBSD-config-ums0"/></entry><entry> USB mouse.  UNION</entry><entry><xref linkend="CFBSD-config-UNION"/></entry><entry> Union filesystem  usb0</entry><entry><xref linkend="CFBSD-config-usb0"/></entry><entry> Base USB support  USERCONFIG</entry><entry><xref linkend="CFBSD-config-USERCONFIG"/></entry><entry> Include <emphasis>UserConfig</emphasis> editor  USER_LDT</entry><entry><xref linkend="CFBSD-config-USER_LDT"/></entry><entry> allow user-level control of i386 LDT  vcoda</entry><entry><xref linkend="CFBSD-config-vcoda"/></entry><entry> coda minicache &lt;-&gt; venus comm.  VESA</entry><entry><xref linkend="CFBSD-config-VESA"/></entry><entry> Support for VESA video modes  vga0</entry><entry><xref linkend="CFBSD-config-vga0"/></entry><entry> VGA driver  vinum</entry><entry><xref linkend="CFBSD-config-vinum"/></entry><entry> Vinum volume manager  VISUAL_USERCONFIG</entry><entry><xref linkend="CFBSD-config-VISUAL_USERCONFIG"/></entry><entry> With <emphasis>USERCONFIG</emphasis>: enable visual editor  VM86</entry><entry><xref linkend="CFBSD-config-VM86"/></entry><entry> Allow processes to switch to VM86 mode  vn</entry><entry><xref linkend="CFBSD-config-vn"/></entry><entry> Vnode driver (turns a file into a device)  VP0_DEBUG</entry><entry><xref linkend="CFBSD-config-VP0_DEBUG"/></entry><entry> ZIP/ZIP+ debug  vpo0</entry><entry><xref linkend="CFBSD-config-vpo0"/></entry><entry> Parallel port Iomega Zip Drive  vr0</entry><entry><xref linkend="CFBSD-config-vr0"/></entry><entry> Fast ethernet adapters based on the VIA Technologies VT3043 `Rhine I' and VT86C100A `Rhine II' chips, including the D-Link DFE530TX.  vt0</entry><entry><xref linkend="CFBSD-config-vt0"/></entry><entry> pcvt vt220 compatible console driver  vx0</entry><entry><xref linkend="CFBSD-config-vx0"/></entry><entry> 3Com 3C590 and 3C595  wb0</entry><entry><xref linkend="CFBSD-config-wb0"/></entry><entry> Fast ethernet adapters based on the Winbond W89C840F chip.  wd0</entry><entry><xref linkend="CFBSD-config-wd0"/></entry><entry> IDE disk  wdc0</entry><entry><xref linkend="CFBSD-config-wdc0"/></entry><entry> IDE disk controller  wfd0</entry><entry><xref linkend="CFBSD-config-wfd0"/></entry><entry> IDE floppy interface.  wl0</entry><entry><xref linkend="CFBSD-config-wl0"/></entry><entry> Lucent Wavelan (ISA card only).  WLCACHE</entry><entry><xref linkend="CFBSD-config-WLCACHE"/></entry><entry> Enable the RISCom/N2 signal-strength cache  wst0</entry><entry><xref linkend="CFBSD-config-wst0"/></entry><entry> IDE tape driver  xl0</entry><entry><xref linkend="CFBSD-config-xl0"/></entry><entry> 3Com 3c900, 3c905 and 3c905B (Fast) Etherlink XL cards and integrated controllers.  xrpu0</entry><entry><xref linkend="CFBSD-config-xrpu0"/></entry><entry> HOT1 Xilinx 6200 board.  XSERVER</entry><entry><xref linkend="CFBSD-config-XSERVER"/></entry><entry> support for running an X server.  ze0</entry><entry><xref linkend="CFBSD-config-ze0"/></entry><entry> IBM/National Semiconductor PCMCIA ethernet controller.  zp0</entry><entry><xref linkend="CFBSD-config-zp0"/></entry><entry> 3Com PCMCIA Etherlink III
</entry></row>
</tbody></tgroup></table>
</para>
<sect2>
<title>Naming the kernel</title>

<para><indexterm><primary>kernel</primary><secondary>naming</secondary></indexterm>
Every kernel you build requires the keywords <emphasis>machine</emphasis>, <emphasis>cpu</emphasis>, and
<emphasis>ident</emphasis>.  For example,
</para>
<programlisting>
<anchor id="CFBSD-config-i386"/>
machine         "i386"                          <emphasis>For i386 architecture</emphasis>
<anchor id="CFBSD-config-alpha"/>
machine         "alpha"                         <emphasis>For alpha architecture</emphasis>
<anchor id="CFBSD-config-I386_CPU"/>
cpu             "I386_CPU"
<anchor id="CFBSD-config-I486_CPU"/>
cpu             "I486_CPU"
<anchor id="CFBSD-config-I586_CPU"/>
cpu             "I586_CPU"
<anchor id="CFBSD-config-I686_CPU"/>
cpu             "I686_CPU"
ident           FREEBIE
</programlisting>

<para></para>
<sect3>
<title>machine</title>

<para><indexterm><primary>machine</primary><secondary>config keyword</secondary></indexterm>
<indexterm><primary>config</primary><secondary>keyword</secondary></indexterm>
<anchor id="CFBSD-config-machine"/>
The keyword <emphasis>machine</emphasis> describes the machine architecture for which the
kernel is to be built.  Currently it should be <emphasis>i386</emphasis> for the Intel
architecture, and <emphasis>alpha</emphasis> for the AXP architecture.  Don't confuse this
with the processor: for example, the <emphasis>i386</emphasis> architecture refers to the
Intel 80386 and all its successors, including lookalikes made by AMD, Cyrix and
IBM.
</emphasis></para>
</sect3>
<sect3>
<title>cpu <emphasis>cpu_type </title>

<para><indexterm><primary>cpu</primary><secondary><emphasis>cpu_type</secondary></indexterm>
<anchor id="CFBSD-config-cpu"/>
<emphasis>cpu</emphasis></emphasis> describes which CPU chip is to be supported by this kernel.  For the
<emphasis>i386</emphasis> architecture, the possible values are <emphasis>I386_CPU</emphasis>,
<emphasis>I486_CPU</emphasis>, <emphasis>I586_CPU</emphasis> and <emphasis>I686_CPU</emphasis>, and you can specify any
combination of these values.  For a custom kernel, it is best to specify only
the cpu you have.  If, for example, you have an Intel Pentium, use
<emphasis>I586_CPU</emphasis> for <emphasis>cpu_type</emphasis>.
</para>
</sect3>
<sect3>
<title>ident <emphasis>machine_name</emphasis> </title>

<para><indexterm><primary>ident</primary><secondary><emphasis>machine_name</emphasis></secondary></indexterm>
<anchor id="CFBSD-config-ident"/>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>FREEBIE</secondary></indexterm>
<emphasis>ident</emphasis> specifies a name used to identify the kernel.  In the file
<emphasis>GENERIC</emphasis> it is <emphasis>GENERIC</emphasis>.  Change this to whatever you named your
kernel, in this example, <emphasis>FREEBIE</emphasis>.  The value you put in <emphasis>ident</emphasis>
will print when you boot up the kernel, so it's useful to give a kernel a
different name if you want to keep it separate from your usual kernel (if you
want to build an experimental kernel, for example).  As with <emphasis>machine</emphasis> and
<emphasis>cpu</emphasis>, enclose your kernel's name in quotation marks if it contains any
numbers.
</para>

<para>Since this name is passed to the C compiler as a variable, don't use names like
<emphasis>DEBUG</emphasis>, or something that could be confused with another machine or CPU
name, like <emphasis>vax</emphasis>.
</emphasis></para>
</sect3>
<sect3>
<title>maxusers <emphasis>number </title>

<para><indexterm><primary>maxusers</primary><secondary><emphasis>number</secondary></indexterm>
<anchor id="CFBSD-config-maxusers"/>
<indexterm><primary>error</primary><secondary>proc table full</secondary></indexterm>
<indexterm><primary>Walnut</primary><secondary>Creek CDROM</secondary></indexterm>
<indexterm><primary>wcarchive.cdrom.com</primary></indexterm>
This value sets the size of a number of important system tables.  It is intended
to be roughly equal to the number of simultaneous users you expect to have on
your machine.  However, even if you are the only person to use the machine, you
shouldn't set <emphasis>maxusers</emphasis></emphasis> lower than the default value 32, especially if
you're using X or compiling software.  The reason is that the most important
table set by <emphasis>maxusers</emphasis> is the maximum number of processes, which is set
to <emphasis>20\0+\016\0* maxusers</emphasis>, so if you set <emphasis>maxusers</emphasis> to one, then
you can only have 36 simultaneous processes, including the 18 or so that the
system starts up at boot time, and the 15 or so you will probably create when
you start X.  Even a simple task like reading a man page can start up nine
processes to filter, decompress, and view it.  Setting <emphasis>maxusers</emphasis> to 32
will allow you to have up to 532 simultaneous processes, which is normally
ample.  If, however, you see the dreaded <emphasis>proc table full</emphasis> error when trying
to start another program, or are running a server with a large number of
simultaneous users (like Walnut Creek CDROM's FTP site
<emphasis>wcarchive.cdrom.com</emphasis>), you can always increase this number and rebuild.
</para>
<note>

<para><emphasis>maxusers</emphasis> does <emphasis>not</emphasis> limit the number of users which can log into
your machine.  It simply sets various table sizes to reasonable values
considering the maximum number of users you will likely have on your system and
how many processes each of them will be running.  One keyword which <emphasis>does</emphasis>
limit the number of simultaneous <emphasis>remote</emphasis> logins is <emphasis>pseudo-device
pty</emphasis>.
</para>
</note>

<para></para>
</sect3>
<sect3>
<title>config <emphasis>kernel_name</emphasis> </title>

<para><indexterm><primary>config</primary><secondary><emphasis>kernel_name</emphasis></secondary></indexterm>
<anchor id="CFBSD-config-config"/>
<indexterm><primary>vmunix</primary></indexterm>
This line specifies the location and name of the kernel.  Traditionally the BSD
kernel is called <emphasis>vmunix</emphasis>,
<indexterm><primary>kernel</primary></indexterm>
but for copyright reasons FreeBSD calls it <emphasis>kernel</emphasis>.  A number of system
utilities rely on this name, so don't change it.  The second part of the line
specifies the disk and partition where the root file system and kernel can be
found.  Typically this will be <emphasis>wd0</emphasis> for systems with non-SCSI drives, or
<emphasis>sd0</emphasis> for systems with SCSI drives.
</para>
<note>

<para>The name <emphasis>vmunix</emphasis> came into usage at Berkeley with the first versions of
UNIX with support for virtual memory.  UNIX System V still calls the kernel
<emphasis>unix</emphasis>, and you can often use this to distinguish between a BSD and a System
V system.
</para>
</note>

<para></para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Kernel options</title>

<para><indexterm><primary>kernel</primary><secondary>options</secondary></indexterm>
<indexterm><primary>options</primary><secondary>kernel</secondary></indexterm>
</para>
<programlisting>
makeoptions     DEBUG=-g                # Build kernel with gdb(1) debug symbols
<anchor id="CFBSD-config-MATH_EMULATE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MATH_EMULATE</primary><secondary>config option</secondary></indexterm>
options         MATH_EMULATE            # Support for x87 emulation
<anchor id="CFBSD-config-GPL_MATH_EMULATE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>GPL_MATH_EMULATE</primary><secondary>config option</secondary></indexterm>
options         GPL_MATH_EMULATE        # Support for x87 emulation via new math emulator
<anchor id="CFBSD-config-COMPAT_43"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>COMPAT_43</primary><secondary>config option</secondary></indexterm>
options         "COMPAT_43"             # Compatible with BSD 4.3 [KEEP THIS!]
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>UCONSOLE</primary><secondary>config option</secondary></indexterm>
options         UCONSOLE                # Allow users to grab the console
<anchor id="CFBSD-config-FAILSAFE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>FAILSAFE</primary><secondary>config option</secondary></indexterm>
options         FAILSAFE                # Be conservative
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>USERCONFIG</primary><secondary>config option</secondary></indexterm>
options         USERCONFIG              # boot -c editor
<anchor id="CFBSD-config-VISUAL_USERCONFIG"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>VISUAL_USERCONFIG</primary><secondary>config option</secondary></indexterm>
options         VISUAL_USERCONFIG       # visual boot -c editor
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>INCLUDE_CONFIG_FILE</primary><secondary>config option</secondary></indexterm>
options         INCLUDE_CONFIG_FILE     # Include this file in kernel
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>USER_LDT</primary><secondary>config option</secondary></indexterm>
options         USER_LDT                # allow user-level control of i386 ldt
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MSGBUF_SIZE</primary><secondary>config option</secondary></indexterm>
options		"MSGBUF_SIZE=40960"
</programlisting>

<para>These lines provide global kernel options.  In the <emphasis>GENERIC</emphasis> configuration
file you'll also find file system options here; we'll look at them on page
<xref linkend="CFBSD-filesys-options"/>.
</para>
<sect2>
<sect3>
<title>makeoptions</title>

<para><anchor id="CFBSD-config-makeoptions"/>
<indexterm><primary>debug</primary><secondary>kernel</secondary></indexterm>
<emphasis>makeoptions</emphasis> specifies options to be processed by <emphasis>config</emphasis>.  Use the
<emphasis>-g</emphasis> option to create a <emphasis>debug kernel</emphasis> unless you're seriously short
of space; it doesn't run any more slowly, but it gives you the chance of
analysing dumps if you have any problems with the system.
</para>
</sect3>
<sect3>
<title>MATH_EMULATE and GPL_MATH_EMULATE</title>

<para><indexterm><primary>GPL_MATH_EMULATE</primary></indexterm>
<indexterm><primary>MATH_EMULATE</primary></indexterm>
<anchor id="CFBSD-config-math-emulate"/>
<anchor id="CFBSD-config-gpl-math"/>
This line allows the kernel to simulate a math coprocessor if your computer does
not have one (386 or 486SX).  If you have a Pentium, a 486DX, or a 386 or 486SX
with a separate 387 or 487 chip, you can comment this line out.
</para>
<note>

<para>The normal math coprocessor emulation routines that come with FreeBSD are
<emphasis>not</emphasis> very accurate.  If you do not have a math coprocessor, and you need
the best accuracy, I recommend that you change this option to
<emphasis>GPL_MATH_EMULATE</emphasis> to use the GNU math support, which is better, but which
is not included by default for licensing reasons.
</para>
</note>

<para></para>
</sect3>
<sect3>
<title>COMPAT_43</title>

<para><indexterm><primary>COMPAT_43</primary></indexterm>
<anchor id="CFBSD-config-compat"/>
Compatibility with 4.3BSD.  Leave this in: some programs will act strangely if
you comment this out.
</para>
</sect3>
<sect3>
<title>USERCONFIG and VISUAL_USERCONFIG</title>

<para><anchor id="CFBSD-config-USERCONFIG"/>
<indexterm><primary>UserConfig</primary></indexterm>
These options enable the <emphasis>UserConfig</emphasis> configuration editor that we looked
at on page <xref linkend="CFBSD-UserConfig"/>.  <emphasis>USERCONFIG</emphasis> enables the base editor, and you
need <emphasis>VISUAL_USERCONFIG</emphasis> to enable the full-screen editor as well.
</para>
</sect3>
<sect3>
<title>INCLUDE_CONFIG_FILE</title>

<para><anchor id="CFBSD-config-INCLUDE_CONFIG_FILE"/>
<emphasis>INCLUDE_CONFIG_FILE</emphasis> allows you to actually store this configuration file
into the kernel binary itself.   You can extract it later (into a file <emphasis>MYKERNEL)</emphasis> with:
</para>
<programlisting>
$ <command>strings -n 3 /kernel | grep ^___ | sed -e 's/^___//' &gt; MYKERNEL</command>
</programlisting>

<para></para>
</sect3>
<sect3>
<title>USER_LDT</title>

<para><indexterm><primary>USER_LDT</primary></indexterm>
<anchor id="CFBSD-config-USER_LDT"/>
<indexterm><primary>local</primary><secondary>descriptor table</secondary></indexterm>
<indexterm><primary>WINE</primary></indexterm>
<emphasis>USER_LDT</emphasis> allows user processes to manipulate their <emphasis>local descriptor
table</emphasis>.  This is required for some Linux programs, in particular <emphasis>WINE</emphasis>.
</para>
</sect3>
<sect3>
<title>MSGBUF_SIZE</title>

<para><anchor id="CFBSD-config-MSGBUF_SIZE"/>
<indexterm><primary>dmesg(8)</primary></indexterm>
<emphasis>MSGBUF_SIZE</emphasis> is the size of the kernel message buffer.  You read this
buffer with <emphasis>dmesg(8)</emphasis>.  If you write a lot of kernel messages (for example,
as a result of verbose booting) you may need to increase this value.  Make sure
you keep it a multiple of the virtual memory page size, currently 4096 bytes.
</para>
</sect3>
</sect2>
<sect2>
<title>System V compatibility</title>

<para></para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SYSVSHM</primary><secondary>config option</secondary></indexterm>
options         SYSVSHM
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SYSVSEM</primary><secondary>config option</secondary></indexterm>
options         SYSVSEM
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SYSVMSG</primary><secondary>config option</secondary></indexterm>
options         SYSVMSG
</programlisting>

<para>These options provide support for some UNIX System V features:
</para>
<sect3>
<title>SYSVSHM</title>

<para><indexterm><primary>SYSVSHM</primary></indexterm>
<anchor id="CFBSD-config-SYSVSHM"/>
<indexterm><primary>XAnim</primary></indexterm>
<indexterm><primary>DOOM</primary></indexterm>
This option provides for System V shared memory.  The most common use of this is
the <emphasis>XSHM</emphasis> extension in X, which many graphics-intensive programs (such as
the movie player <emphasis>XAnim</emphasis>, and Linux <emphasis>DOOM</emphasis>) will automatically take
advantage of for extra speed.  If you use X, you'll definitely want to include
this.
</para>
</sect3>
<sect3>
<title>SYSVSEM</title>

<para><indexterm><primary>SYSVSEM</primary></indexterm>
<anchor id="CFBSD-config-SYSVSEM"/>
Support for System V semaphores.  Less commonly used but only adds a few hundred
bytes to the kernel.
</para>
</sect3>
<sect3>
<title>SYSVMSG</title>

<para><indexterm><primary>SYSVMSG</primary></indexterm>
<anchor id="CFBSD-config-SYSVMSG"/>
Support for System V messages.  Again, this option only adds a few hundred bytes
to the kernel.
</para>
<note>

<para><indexterm><primary>command</primary><secondary>ipcs</secondary></indexterm>
<indexterm><primary>ipcs</primary><secondary>command</secondary></indexterm>
Use the <emphasis>ipcs</emphasis> command to find processes using these facilities.
</para>
</note>

<para></para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MD5</primary><secondary>config option</secondary></indexterm>
options         "MD5"
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>VM86</primary><secondary>config option</secondary></indexterm>
options         "VM86"
</programlisting>

<para></para>
</sect3>
<sect3>
<title>MD5</title>

<para><anchor id="CFBSD-config-MD5"/>
<emphasis>MD5</emphasis> includes a MD5 routine in the kernel, for various authentication and
privacy uses.
</para>
</sect3>
<sect3>
<title>VM86</title>

<para><anchor id="CFBSD-config-VM86"/>
<indexterm><primary>vm86</primary></indexterm>
<indexterm><primary>doscmd</primary></indexterm>
<emphasis>VM86</emphasis> allows processes to switch to <emphasis>vm86</emphasis> mode, as well as
enabling direct user-mode access to the I/O port space.  This option is
necessary for the <emphasis>doscmd</emphasis> emulator to run and the VESA modes in syscons
to be available.
</para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DDB</primary><secondary>config option</secondary></indexterm>
options         DDB
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>BREAK_TO_DEBUGGER</primary><secondary>config option</secondary></indexterm>
options         BREAK_TO_DEBUGGER
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DDB_UNATTENDED</primary><secondary>config option</secondary></indexterm>
options         DDB_UNATTENDED          # Don't drop into DDB for a panic
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>GDB_REMOTE_CHAT</primary><secondary>config option</secondary></indexterm>
options         GDB_REMOTE_CHAT         # Use <emphasis>gdb</emphasis> remote debugging protocol
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>KTRACE</primary><secondary>config option</secondary></indexterm>
options         KTRACE
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DIAGNOSTIC</primary><secondary>config option</secondary></indexterm>
options         DIAGNOSTIC
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>UCONSOLE</primary><secondary>config option</secondary></indexterm>
options         UCONSOLE                # Allow users to grab the console
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>INVARIANTS</primary><secondary>config option</secondary></indexterm>
options         INVARIANTS
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>INVARIANT_SUPPORT</primary><secondary>config option</secondary></indexterm>
options         INVARIANT_SUPPORT
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PERFMON</primary><secondary>config option</secondary></indexterm>
options         PERFMON
</programlisting>

<para>These options provide support for various debugging features.
</para>
</sect3>
<sect3>
<title>DDB</title>

<para><indexterm><primary>DDB</primary></indexterm>
<anchor id="CFBSD-config-DDB"/>
<indexterm><primary>ddb</primary></indexterm>
Specify <emphasis>DDB</emphasis> to include the kernel debugger, <emphasis>ddb</emphasis>.  If you set this
option, you might also want to set the <emphasis>BREAK_TO_DEBUGGER</emphasis> option,
</para>
</sect3>
<sect3>
<title>BREAK_TO_DEBUGGER</title>

<para><anchor id="CFBSD-config-BREAK_TO_DEBUGGER"/>
Use the option <emphasis>BREAK_TO_DEBUGGER</emphasis> if you have installed the kernel
debugger and you have the system console on a serial line&mdash;see page
<xref linkend="CFBSD-config-COMCONSOLE"/>).
</para>
</sect3>
<sect3>
<title>DDB_UNATTENDED</title>

<para><anchor id="CFBSD-config-DDB_UNATTENDED"/>
If you have a panic on a system with <emphasis>ddb</emphasis>, it will not reboot
automatically.  Instead, it will enter <emphasis>ddb</emphasis> and give you a chance to
examine the remains of the system before rebooting.  This can be a disadvantage
on systems which run unattended: after a panic, they would wait until somebody
comes past before rebooting.  Use the <emphasis>DDB_UNATTENDED</emphasis> option to cause a
system with <emphasis>ddb</emphasis> to reboot automatically on panic.
</para>
</sect3>
<sect3>
<title>GDB_REMOTE_CHAT</title>

<para><anchor id="CFBSD-config-GDB_REMOTE_CHAT"/>
<emphasis>ddb</emphasis> supports remote debugging from another FreeBSD machine via a serial
connection.  See the online handbook for more details.  To use this feature, set
the option <emphasis>GDB_REMOTE_CHAT</emphasis>.
</para>
</sect3>
<sect3>
<title>KTRACE</title>

<para><anchor id="CFBSD-config-KTRACE"/>
<indexterm><primary>command</primary><secondary>ktrace</secondary></indexterm>
<indexterm><primary>ktrace</primary><secondary>command</secondary></indexterm>
Set <emphasis>KTRACE</emphasis> if you want to use the system call trace program <emphasis>ktrace</emphasis>.
</para>
</sect3>
<sect3>
<title>DIAGNOSTIC</title>

<para><anchor id="CFBSD-config-DIAGNOSTIC"/>
<indexterm><primary>DIAGNOSTIC</primary></indexterm>
A number of source files use the <emphasis>DIAGNOSTIC</emphasis> option to enable extra sanity
checking of internal structures.  This support is not enabled by default because
of the extra time it would take to check for these conditions, which can only
occur as a result of programming errors.
</para>
</sect3>
<sect3>
<title>UCONSOLE</title>

<para><indexterm><primary>UCONSOLE</primary></indexterm>
<anchor id="CFBSD-config-UCONSOLE"/>
<indexterm><primary>command</primary><secondary>write</secondary></indexterm>
<indexterm><primary>write</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>talk</secondary></indexterm>
<indexterm><primary>talk</primary><secondary>command</secondary></indexterm>
<emphasis>UCONSOLE</emphasis> allows users to grab the console.  This is useful if you're
running X:, you can create a console xterm by typing <command>xterm -C</command>, which
will display any <emphasis>write</emphasis>, <emphasis>talk</emphasis>, and other messages you receive, as
well as any console messages sent by the kernel.
</para>
</sect3>
<sect3>
<title>INVARIANTS and INVARIANT_SUPPORT</title>

<para><anchor id="CFBSD-config-INVARIANTS"/>
<anchor id="CFBSD-config-INVARIANT_SUPPORT"/>
<emphasis>INVARIANTS</emphasis> is used in a number of source files to enable extra sanity
checking of internal structures.  This support is not enabled by default because
of the extra time it would take to check for these conditions, which can only
occur as a result of programming errors.
</para>

<para><emphasis>INVARIANT_SUPPORT</emphasis> option compiles in support for verifying some of the
internal structures.  It is a prerequisite for <emphasis>INVARIANTS</emphasis>.  The intent
is that you can set <emphasis>INVARIANTS</emphasis> for single source files (by changing the
source file or specifying it on the command line) if you have
<emphasis>INVARIANT_SUPPORT</emphasis> enabled.
</para>
</sect3>
<sect3>
<title>PERFMON</title>

<para><anchor id="CFBSD-config-PERFMON"/>
<indexterm><primary>perfmon(4)</primary></indexterm>
<emphasis>PERFMON</emphasis> causes the driver for Pentium/Pentium Pro performance counters
to be compiled.  See <emphasis>perfmon(4)</emphasis> for more information.
</para>
</sect3>
</sect2>
<sect2>
<title>Multiple processors</title>

<para>FreeBSD <xref linkend="CFBSD-Fver"/> supports most modern multiprocessor systems with i386
architecture.  The <emphasis>GENERIC</emphasis> kernel does not support them by default: set
the following options:
</para>
<programlisting>
# To make an SMP kernel, the next two are needed
<anchor id="CFBSD-config-SMP"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SMP</primary><secondary>config option</secondary></indexterm>
options SMP                     # Symmetric MultiProcessor Kernel
<anchor id="CFBSD-config-APIC_IO"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>APIC_IO</primary><secondary>config option</secondary></indexterm>
options APIC_IO                 # Symmetric (APIC) I/O
# Optionally these may need tweaked, (defaults shown):
<anchor id="CFBSD-config-NCPU"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NCPU</primary><secondary>config option</secondary></indexterm>
options NCPU=2                  # number of CPUs
<anchor id="CFBSD-config-NBUS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NBUS</primary><secondary>config option</secondary></indexterm>
options NBUS=4                  # number of busses
<anchor id="CFBSD-config-NAPIC"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NAPIC</primary><secondary>config option</secondary></indexterm>
options NAPIC=1                 # number of IO APICs
<anchor id="CFBSD-config-NINTR"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NINTR</primary><secondary>config option</secondary></indexterm>
options NINTR=24                # number of INTs
</programlisting>

<para>An SMP kernel will only run on a motherboard which adheres to the Intel MP
specification.  Be sure to disable the <emphasis>cpu "I386_CPU"</emphasis> and <emphasis>cpu
"I486_CPU"</emphasis> options for SMP kernels.  Note also that currently only genuine
Intel processors will run in SMP mode; at the time of writing, processors by AMD
and Cyrix do not support multiprocessor operation, though the AMD K7 will
support it.
</para>

<para><indexterm><primary>Rogue</primary><secondary>SMP hardware</secondary></indexterm>
At the time of writing, no SMP hardware is known on which FreeBSD will not run.
Before buying a board, though, check the <emphasis>Rogue SMP hardware</emphasis> section in
<emphasis>/usr/src/sys/i386/conf/LINT</emphasis>.  Note that the MP tables of most of the
current generation MP motherboards do not properly support bridged PCI cards.
</para>
</sect2>
<sect2>
<title>CPU options</title>

<para>A number of options exist for specific processors:
</para>
<programlisting>
<anchor id="CFBSD-config-CPU_BLUELIGHTNING_FPU_OP_CACHE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_BLUELIGHTNING_FPU_OP_CACHE</primary><secondary>config option</secondary></indexterm>
options         "CPU_BLUELIGHTNING_FPU_OP_CACHE"
<anchor id="CFBSD-config-CPU_BLUELIGHTNING_3X"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_BLUELIGHTNING_3X</primary><secondary>config option</secondary></indexterm>
options         "CPU_BLUELIGHTNING_3X"
<anchor id="CFBSD-config-CPU_BTB_EN"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_BTB_EN</primary><secondary>config option</secondary></indexterm>
options         "CPU_BTB_EN"
<anchor id="CFBSD-config-CPU_DIRECT_MAPPED_CACHE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_DIRECT_MAPPED_CACHE</primary><secondary>config option</secondary></indexterm>
options         "CPU_DIRECT_MAPPED_CACHE"
<anchor id="CFBSD-config-CPU_DISABLE_5X86_LSSER"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_DISABLE_5X86_LSSER</primary><secondary>config option</secondary></indexterm>
options         "CPU_DISABLE_5X86_LSSER"
<anchor id="CFBSD-config-CPU_FASTER_5X86_FPU"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_FASTER_5X86_FPU</primary><secondary>config option</secondary></indexterm>
options         "CPU_FASTER_5X86_FPU"
<anchor id="CFBSD-config-CPU_I486_ON_386"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_I486_ON_386</primary><secondary>config option</secondary></indexterm>
options         "CPU_I486_ON_386"
<anchor id="CFBSD-config-CPU_IORT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_IORT</primary><secondary>config option</secondary></indexterm>
options         "CPU_IORT"
<anchor id="CFBSD-config-CPU_LOOP_EN"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_LOOP_EN</primary><secondary>config option</secondary></indexterm>
options         "CPU_LOOP_EN"
<anchor id="CFBSD-config-CPU_RSTK_EN"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_RSTK_EN</primary><secondary>config option</secondary></indexterm>
options         "CPU_RSTK_EN"
<anchor id="CFBSD-config-CPU_SUSP_HLT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_SUSP_HLT</primary><secondary>config option</secondary></indexterm>
options         "CPU_SUSP_HLT"
<anchor id="CFBSD-config-CPU_WT_ALLOC"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CPU_WT_ALLOC</primary><secondary>config option</secondary></indexterm>
options         "CPU_WT_ALLOC"
<anchor id="CFBSD-config-CYRIX_CACHE_WORKS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CYRIX_CACHE_WORKS</primary><secondary>config option</secondary></indexterm>
options         "CYRIX_CACHE_WORKS"
<anchor id="CFBSD-config-CYRIX_CACHE_REALLY_WORKS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CYRIX_CACHE_REALLY_WORKS</primary><secondary>config option</secondary></indexterm>
options         "CYRIX_CACHE_REALLY_WORKS"
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NO_F00F_HACK</primary><secondary>config option</secondary></indexterm>
options "NO_F00F_HACK"
</programlisting>

<para><indexterm><primary>BlueLightning</primary></indexterm>
<emphasis>CPU_BLUELIGHTNING_FPU_OP_CACHE</emphasis> enables FPU operand cache on IBM
<emphasis>BlueLightning</emphasis> CPU.  It works only with Cyrix FPU.  Don't use this option
with an Intel FPU.
</para>

<para><emphasis>CPU_BLUELIGHTNING_3X</emphasis> enables triple-clock mode on IBM Blue Lightning CPU
if CPU supports it. The default is double-clock mode on BlueLightning CPU box.
</para>

<para><emphasis>CPU_DIRECT_MAPPED_CACHE</emphasis> sets the L1 cache of Cyrix 486DLC CPU in direct
mapped mode.  The default is 2-way set associative mode.
</para>

<para><emphasis>CPU_CYRIX_NO_LOCK</emphasis> enables weak locking for the entire address space of
Cyrix 6x86 and 6x86MX CPUs.  If this option is not set and <emphasis>FAILSAFE</emphasis> is
defined, the <emphasis>NO_LOCK</emphasis> bit of register <emphasis>CCR1</emphasis> is cleared.
<footnote>

<para>This option may cause failures for software that requires locked cycles in order
to operate correctly.
</para>
</footnote>
</para>

<para><emphasis>CPU_DISABLE_5X86_LSSER</emphasis> disables load store serialize (in other words, it
enables reorder).  Don't use this option if you use memory mapped I/O devices.
</para>

<para><emphasis>CPU_FASTER_5X86_FPU</emphasis> enables a faster FPU exception handler.
</para>

<para><emphasis>CPU_I486_ON_386</emphasis> enables CPU cache on i486 based CPU upgrade products for
i386 machines.
</para>

<para><emphasis>CPU_SUSP_HLT</emphasis> enables suspend on the <emphasis>HALT</emphasis> instruction.  If this
option is set, CPU enters suspend mode following execution of HALT instruction.
</para>

<para><emphasis>CPU_WT_ALLOC</emphasis> enables write allocation on Cyrix 6x86/6x86MX and AMD
K5/K6/K6-2 cpus.
</para>

<para><emphasis>CYRIX_CACHE_WORKS</emphasis> enables CPU cache on Cyrix 486 CPUs with cache flush
at hold state.
</para>

<para><emphasis>CYRIX_CACHE_REALLY_WORKS</emphasis> enables CPU cache on Cyrix 486 CPUs without
cache flush at hold state, and write-back CPU cache on Cyrix 6x86 chips with
revision levels below 2.7.  It has no effect on Cyrix 6x86 chips with revision
levels of 2.7 or above.
</para>

<para><anchor id="CFBSD-config-NO_F00F_HACK"/>
<emphasis>NO_F00F_HACK</emphasis> disables the hack that prevents Pentiums (and only original
Pentiums, not including Pentium Pro and Pentium II) from locking up when a
<emphasis>LOCK CMPXCHG8B</emphasis> instruction is executed.  Include this option for all
kernels that won't run on a Pentium.
</para>

<para><emphasis>NO_MEMORY_HOLE</emphasis> is an optimisation for systems with AMD K6 processors
which indicates that the 15-16MB range is not being occupied by an ISA memory
hole.
</para>
</sect2>
</sect1>
<sect1>
<title>Basic controllers and devices</title>

<para>These sections describe the basic disk, tape, and CD-ROM controllers supported
by FreeBSD.  We'll look at SCSI host adapters on page
and network boards on page
</para>
<programlisting>
controller      isa0
controller      eisa0
controller      pci0
controller      card0

device          npx0 at isa? port "IO_NPX" irq 13

<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>AUTO_EOI_1</primary><secondary>config option</secondary></indexterm>
options         "AUTO_EOI_1"
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>AUTO_EOI_2</primary><secondary>config option</secondary></indexterm>
options         "AUTO_EOI_2"
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MAXMEM</primary><secondary>config option</secondary></indexterm>
options         "MAXMEM=(96*1024)"      # 96 MB memory
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>EISA_SLOTS</primary><secondary>config option</secondary></indexterm>
options		"EISA_SLOTS=12"
</programlisting>

<para></para>
<sect2>
<sect3>
<title>controller isa0</title>

<para><indexterm><primary>controller</primary><secondary>isa0</secondary></indexterm>
<indexterm><primary>isa0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-isa0"/>
All PC's supported by FreeBSD have one of these, including motherboards with
EISA and PCI support.  FreeBSD <xref linkend="CFBSD-Fver"/> does not support the IBM PS/2 (Micro
Channel Architecture).
</para>
</sect3>
<sect3>
<title>controller eisa0</title>

<para><indexterm><primary>controller</primary><secondary>eisa0</secondary></indexterm>
<indexterm><primary>eisa0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-eisa0"/>
<indexterm><primary>controller</primary><secondary>eisa0</secondary></indexterm>
<indexterm><primary>eisa0</primary><secondary>controller</secondary></indexterm>
Specify <emphasis>eisa0</emphasis> in addition to <emphasis>isa0</emphasis> if you have an EISA motherboard.
It provides auto-detection and configuration support for all devices on the EISA
bus.
</para>
</sect3>
<sect3>
<title>controller pci0</title>

<para><indexterm><primary>controller</primary><secondary>pci0</secondary></indexterm>
<indexterm><primary>pci0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-pci0"/>
<indexterm><primary>controller</primary><secondary>pci0</secondary></indexterm>
<indexterm><primary>pci0</primary><secondary>controller</secondary></indexterm>
<indexterm><primary>controller</primary><secondary>isa0</secondary></indexterm>
<indexterm><primary>isa0</primary><secondary>controller</secondary></indexterm>
Specify <emphasis>pci0</emphasis> in addition to <emphasis>isa0</emphasis> if you have a PCI motherboard.
This enables auto-detection of PCI boards and gatewaying from the PCI to the ISA
bus.
</para>

<para></para>
</sect3>
<sect3>
<title>EISA_SLOTS</title>

<para><anchor id="CFBSD-config-EISA_SLOTS"/>
<indexterm><primary>HP</primary><secondary>NetServer LC</secondary></indexterm>
By default, only 10 EISA slots are probed, since the slot numbers above clash
with the configuration address space of the PCI subsystem, and the EISA probe is
not very smart about this.  This is sufficient for most machines, but in
particular the HP NetServer LC series comes with an onboard AIC7770 dual-channel
SCSI controller on EISA slot 11, which the <emphasis>GENERIC</emphasis> kernel will not find.
Build a kernel with options "EISA_SLOTS=12" for this machine.
</para>
</sect3>
<sect3>
<title>card0</title>

<para><indexterm><primary>controller</primary><secondary>isa0</secondary></indexterm>
<indexterm><primary>isa0</primary><secondary>controller</secondary></indexterm>
<indexterm><primary>controller</primary><secondary>card0</secondary></indexterm>
<indexterm><primary>card0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-card0"/>
<indexterm><primary>controller</primary><secondary>card0</secondary></indexterm>
<indexterm><primary>card0</primary><secondary>controller</secondary></indexterm>
<indexterm><primary>controller</primary><secondary>isa0</secondary></indexterm>
<indexterm><primary>isa0</primary><secondary>controller</secondary></indexterm>
Specify <emphasis>card0</emphasis> in addition to <emphasis>isa0</emphasis> if you have a PCMCIA bus
controller (laptop).
</para>
</sect3>
<sect3>
<title>device npx0</title>

<para><anchor id="CFBSD-config-device npx0"/>
<indexterm><primary>npx0</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>npx0</secondary></indexterm>
<indexterm><primary>coprocessor</primary><secondary>math</secondary></indexterm>
<indexterm><primary>math</primary><secondary>coprocessor</secondary></indexterm>
<indexterm><primary>floating</primary><secondary>point coprocessor</secondary></indexterm>
<anchor id="CFBSD-config-npx0"/>
<indexterm><primary>MATH_EMULATE</primary></indexterm>
<emphasis>npx0</emphasis> is the interface to the math (floating point) coprocessor.  This
entry is required whether your CPU has a math coprocessor or not.  If you don't
have a coprocessor, make sure that you also define the option
<emphasis>MATH_EMULATE</emphasis> (page
</para>
</sect3>
<sect3>
<title>AUTO_EOI_1</title>

<para><anchor id="CFBSD-config-AUTO_EOI_1"/>
<emphasis>AUTO_EOI_1</emphasis>
enables the ``automatic EOI'' feature for the master 8259A
interrupt controller.  This saves about 0.7 to 1.25 \(*msec for each interrupt,
but it breaks suspend/resume on some portables.
</para>
</sect3>
<sect3>
<title>AUTO_EOI_2</title>

<para><anchor id="CFBSD-config-AUTO_EOI_2"/>
<emphasis>AUTO_EOI_2</emphasis> enables the ``automatic EOI'' feature for the slave 8259A
interrupt controller.  This saves about 0.7 to 1.25 \(*msec usec for each
interrupt.  Automatic EOI is documented not to work for the slave with the
original i8259A, but it works for some clones and some integrated versions.
</para>
</sect3>
<sect3>
<title>MAXMEM</title>

<para><anchor id="CFBSD-config-MAXMEM"/>
<emphasis>MAXMEM</emphasis> specifies the amount of RAM on the machine; if this is not
specified, FreeBSD will first read the amount of memory from the CMOS
RAM.  Some BIOSes don't report the amount of RAM correctly, so if FreeBSD
reports a different amount of RAM from what is actually installed, use
<emphasis>MAXMEM</emphasis> to tell it the true value.
</para>
</sect3>
</sect2>
<sect2>
<title>Keyboard, console, bus mouse, and X server</title>

<para>The most basic peripherals on a PC are the keyboard and display.  FreeBSD offers
a choice of two different console drivers.  We'll also look at the PS/2 mouse
here, since it is used together with the keyboard.  See page <xref linkend="CFBSD-othermice"/> for
other kinds of mouse.
</para>
<programlisting>
controller      atkbdc0 at isa? port IO_KBD tty                 <emphasis>keyboard controller</emphasis>
device          atkbd0  at isa? tty irq 1 flags 0               <emphasis>keyboard</emphasis>
# `flags' for atkbd:
#       0x01    Force detection of keyboard, else we always assume a keyboard
#       0x02    Don't reset keyboard, useful for some newer ThinkPads
#       0x04    Old-style (XT) keyboard support, useful for older ThinkPads

device          psm0    at isa? tty irq 12                      <emphasis>PS/2 mouse</emphasis>
device          vga0    at isa? port ? conflicts                <emphasis>VGA display</emphasis>
pseudo-device   splash                                          <emphasis>splash screen</emphasis>
# syscons is the default console driver, resembling an SCO console
device          sc0     at isa? tty
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MAXCONS</primary><secondary>config option</secondary></indexterm>
options		MAXCONS=16			   # number of virtual consoles
# Enable this and PCVT_FREEBSD for pcvt vt220 compatible console driver
# device        vt0     at isa? tty
# options         XSERVER               # support for X server
# options       FAT_CURSOR              # start with block cursor
# If you have a ThinkPAD, uncomment this along with the rest of the PCVT lines
# options       PCVT_SCANSET=2          # IBM keyboards are non-std

#
`flags' for sc0:
      0x01    Use a 'visual' bell
      0x02    Use a 'blink' cursor
      0x04    Use a 'underline' cursor
      0x06    Use a 'blinking underline' (destructive) cursor
#     0x40    Make the bell quiet if it is rung in the backgroud vty.
</programlisting>

<para></para>
<sect3>
<title>atkbdc0 and atkbd0</title>

<para><anchor id="CFBSD-config-atkbdc0"/>
<anchor id="CFBSD-config-atkbd0"/>
These devices define the keyboard.  You never need to change them, except
possibly for the flags, but you should check that they exist: older versions of
FreeBSD did not define them.
</para>
</sect3>
<sect3>
<title>psm0</title>

<para><indexterm><primary>device</primary><secondary>psm0</secondary></indexterm>
<indexterm><primary>psm0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-psm0"/>
Use this device if your mouse plugs into the PS/2 mouse port.  Note the options
for notebooks.  Try them if you run into problems after a power-management
suspend.
</para>
</sect3>
<sect3>
<title>splash</title>

<para><anchor id="CFBSD-config-splash"/>
<indexterm><primary>splash</primary><secondary>screen</secondary></indexterm>
<emphasis>splash</emphasis> is a pseudo-device which allows the system to display a so-called
<emphasis>splash screen</emphasis>, an arbitrary bitmap image file as welcome banner on the
screen when the system is booting.  This image will remain on the screen during
kernel initialization process until the ``Login'' prompt appears on the screen
or until a screen saver is loaded and initialized.  The image will also
disappear if you hit any key, although this may not work immediately if the
kernel is still probing devices.  This device is also used for screen savers.
</para>
</sect3>
<sect3>
<title>sc0</title>

<para><indexterm><primary>device</primary><secondary>sc0</secondary></indexterm>
<indexterm><primary>sc0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-sc0"/>
<indexterm><primary>termcap</primary></indexterm>
<indexterm><primary>scoansi</primary></indexterm>
<indexterm><primary>termcap</primary></indexterm>
<emphasis>sc0</emphasis> is the default console driver.  It resembles the console of SCO
UNIX, and includes support for colour.  Since most full-screen programs access
the console through a terminal database library like <emphasis>termcap</emphasis>, it should
not matter much whether you use this or <emphasis>vt0</emphasis>, the VT220 compatible
console driver.  When you log in, set your TERM variable to <emphasis>scoansi</emphasis> if
full-screen programs have trouble running under this console.  The following
options can be used with the <emphasis>sc0</emphasis> driver:
</para>
</sect3>
<sect3>
<title>vt0</title>

<para><indexterm><primary>device</primary><secondary>vt0</secondary></indexterm>
<indexterm><primary>vt0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-vt0"/>
<indexterm><primary>vt100</primary></indexterm>
<indexterm><primary>vt220</primary></indexterm>
<indexterm><primary>termcap</primary></indexterm>
<indexterm><primary>terminfo</primary></indexterm>
<indexterm><primary>vt100</primary></indexterm>
<indexterm><primary>pcvt</primary></indexterm>
<emphasis>vt0</emphasis> is the driver name for <emphasis>pcvt</emphasis>, a VT220-compatible console driver
which is backwards compatible to VT100 and VT102.  It works well on some laptops
which have hardware incompatibilities with <emphasis>sc0</emphasis>.  This driver might also
prove useful when connecting to a large number of different machines over the
network, where the <emphasis>termcap</emphasis> or <emphasis>terminfo</emphasis> entries for the <emphasis>sc0</emphasis>
device are often not available&mdash;<emphasis>vt100</emphasis> should be available on virtually
any platform.  When using this driver, set your TERM variable to <emphasis>vt100</emphasis>
or <emphasis>vt220</emphasis>.
</para>
</sect3>
<sect3>
<title>MAXCONS</title>

<para><anchor id="CFBSD-config-MAXCONS"/>
<indexterm><primary>MAXCONS</primary></indexterm>
Both drivers support multiple virtual consoles.  By pressing <keycap>ALT</keycap> and a
function key, you can switch between them.  <emphasis>MAXCONS</emphasis> is maximum number of
virtual consoles.  Due to restrictions in the number of function keys, this can
be no more than 16.
</para>
</sect3>
<sect3>
<title>XSERVER</title>

<para><indexterm><primary>XSERVER</primary></indexterm>
<anchor id="CFBSD-config-XSERVER"/>
This includes code required to run the <emphasis>XFree86</emphasis> X Server.  You only need
this if you're using both the <emphasis>pcvt</emphasis> console driver and X, so it is
normally commented out.
</para>
</sect3>
<sect3>
<title>FAT_CURSOR</title>

<para><indexterm><primary>FAT_CURSOR</primary></indexterm>
<anchor id="CFBSD-config-FAT_CURSOR"/>
<indexterm><primary>cursor</primary></indexterm>
By default, <emphasis>pcvt</emphasis> displays a block cursor.  If you don't like it, comment
out this line.  You can also change the cursor with the <emphasis>cursor</emphasis> program if
you're using the pcvt VT220 driver.
</para>
</sect3>
</sect2>
<sect2>
<title>Serial and parallel ports</title>

<para><indexterm><primary>serial</primary><secondary>ports</secondary></indexterm>
<indexterm><primary>parallel</primary><secondary>ports</secondary></indexterm>
<indexterm><primary>port</primary><secondary>serial</secondary></indexterm>
<indexterm><primary>port</primary><secondary>parallel</secondary></indexterm>
<anchor id="CFBSD-othermice "/>
<indexterm><primary>bus</primary><secondary>mouse</secondary></indexterm>
Almost every PC has two serial ports and a parallel port.  Nowadays they are
usually integrated on the motherboard.  Nowadays most mice are connected via a
serial port or the PS/2 port, but some still use a separate board, the so-called
<emphasis>bus mice</emphasis>.  We looked at PS/2 mice on page <xref linkend="CFBSD-config-psm0"/>.  We'll look at
the others here.
</para>
<programlisting>
device		mse0	at isa? port 0x23c tty irq 5
device		sio0	at isa? port "IO_COM1" tty flags 0x10 irq 4

#
# `flags' for serial drivers that support consoles (only for sio now):
#	0x10	enable console support for this unit.  The other console flags
#		are ignored unless this is set.  Enabling console support does
#		not make the unit the preferred console - boot with -h or set
#		the 0x20 flag for that.  Currently, at most one unit can have
#		console support; the first one (in config file order) with
#		this flag set is preferred.  Setting this flag for sio0 gives
#		the old behaviour.
#	0x20	force this unit to be the console (unless there is another
#		higher priority console).  This replaces the COMCONSOLE option.
#	0x40	reserve this unit for low level console operations.  Do not
#		access the device in any normal way.
#
# PnP `flags' (set via userconfig using pnp x flags y)
#	0x1	disable probing of this device.  Used to prevent your modem
#		from being attached as a PnP modem.
#

<anchor id="CFBSD-config-CONSPEED"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CONSPEED</primary><secondary>config option</secondary></indexterm>
options		CONSPEED=9600		# default speed for serial console (default 9600)

<anchor id="CFBSD-config-COM_ESP"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>COM_ESP</primary><secondary>config option</secondary></indexterm>
options		COM_ESP			# code for Hayes ESP
<anchor id="CFBSD-config-COM_MULTIPORT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>COM_MULTIPORT</primary><secondary>config option</secondary></indexterm>
options		COM_MULTIPORT		# code for some cards with shared IRQs
<anchor id="CFBSD-config-EXTRA_SIO"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>EXTRA_SIO</primary><secondary>config option</secondary></indexterm>
options		"EXTRA_SIO=2"		# number of extra sio ports to allocate

# Other flags for sio that aren't documented in the man page.
#	0x20000	enable hardware RTS/CTS and larger FIFOs.  Only works for
#		ST16650A-compatible UARTs.
</programlisting>

<para></para>
<sect3>
<title>COMCONSOLE</title>

<para><anchor id="CFBSD-config-COMCONSOLE"/>
Setting serial port flag <emphasis>0x20</emphasis> specifies that you would prefer to have
the system console on a serial line.  This replaces the old <emphasis>COMCONSOLE</emphasis>
option.
</para>
</sect3>
<sect3>
<title>mse0</title>

<para><indexterm><primary>device</primary><secondary>mse0</secondary></indexterm>
<indexterm><primary>mse0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-mse0"/>
Use this device if you have a Logitech or ATI InPort bus mouse board.
<indexterm><primary>/dev/sio0</primary></indexterm>
<indexterm><primary>/dev/sio1</primary></indexterm>
</para>
</sect3>
<sect3>
<title>sio0</title>

<para><indexterm><primary>device</primary><secondary>sio0</secondary></indexterm>
<indexterm><primary>sio0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-sio0"/>
<indexterm><primary>COM1:</primary></indexterm>
<indexterm><primary>COM4:</primary></indexterm>
<indexterm><primary>device</primary><secondary>sio0</secondary></indexterm>
<indexterm><primary>sio0</primary><secondary>device</secondary></indexterm>
<emphasis>sio0</emphasis> through <emphasis>sio3</emphasis> are the four serial ports referred to as
<emphasis>COM1</emphasis> through <emphasis>COM4</emphasis> in the MS-DOS world.  By default, <emphasis>sio0</emphasis> and
<emphasis>sio2</emphasis> both use IRQ 4, and <emphasis>sio1</emphasis> and <emphasis>sio3</emphasis> both use IRQ 3.  Due to
the brain-damaged design of the standard serial board, each serial port requires
a unique IRQ, so the default IRQs for <emphasis>sio2</emphasis> and <emphasis>sio3</emphasis> cannot be used:
you will have to select a different IRQ.
</para>
<note>

<para>So how can MS-DOS use them? It's hard to believe, but MS-DOS doesn't use the
interrupt.  Other software can use them, as long as both interrupts aren't
enabled at the same time.  This is clearly an impossible restriction for a
multitasking operating system.
</para>
</note>

<para>More modern multiport boards don't have this problem.  If you have a multiport
serial board, check the manual page for <emphasis>sio</emphasis> for more information on the
proper values for these lines.  Some video boards (notably those based on S3
chips) use IO addresses of the form <emphasis>0x*2e8</emphasis>, and since many cheap serial
boards do not fully decode the 16-bit IO address space, they clash with these
boards, making the sio3 port practically unavailable.
</para>

<para>See <xref linkend="CFBSD-chmodems"/>, for more details on serial ports.
</para>
</sect3>
</sect2>
<sect2>
<title>Parallel-port bus</title>

<para></para>
<programlisting>
<anchor id="CFBSD-config-ppbus0"/>
controller	ppbus0
<anchor id="CFBSD-config-vpo0"/>
controller	vpo0	at ppbus?
<anchor id="CFBSD-config-lpt0"/>
device		lpt0	at ppbus?
<anchor id="CFBSD-config-plip0"/>
device		plip0	at ppbus?
<anchor id="CFBSD-config-ppi0"/>
device		ppi0	at ppbus?
<anchor id="CFBSD-config-pps0"/>
device		pps0	at ppbus?
<anchor id="CFBSD-config-lpbb0"/>
device		lpbb0	at ppbus?
<anchor id="CFBSD-config-ppc0"/>
device		ppc0	at isa? disable port? tty irq 7
</programlisting>

<para><indexterm><primary>ppbus</primary></indexterm>
Once upon a time, a parallel port was used only for printing.  Nowadays, it is
used for a lot of different things, and since version 3.0 FreeBSD has a new
driver called <emphasis>ppbus</emphasis>.  The following devices are supported:
<indexterm><primary>scbus</primary></indexterm>
<indexterm><primary>olpt</primary></indexterm>
center,tab(#) ;
lfCWp9  lw76 .
<indexterm><primary>vpo</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>vpo</secondary></indexterm>
vpo#T{
Iomega Zip Drive.  This requires SCSI disk support (<emphasis>scbus</emphasis> and
<emphasis>da</emphasis>).  You'll get best performance with ports in EPP 1.9 mode.
T}
<indexterm><primary>lpt</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>lpt</secondary></indexterm>
lpt#T{
Parallel Printer.  The old driver, which is now deprecated, is called <emphasis>olpt</emphasis>.
T}
<indexterm><primary>plip</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>plip</secondary></indexterm>
plip#T{
Parallel network interface.
T}
<indexterm><primary>ppi</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>ppi</secondary></indexterm>
ppi#T{
General-purpose I/O (``Geek Port'')
T}
<indexterm><primary>pps</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>pps</secondary></indexterm>
pps#T{
Pulse per second Timing Interface.
T}
<indexterm><primary>lpbb</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>lpbb</secondary></indexterm>
lpbb#T{
Philips official parallel port I2C bit-banging interface
T}

<tgroup cols='28' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> adv0</entry><entry><xref linkend="CFBSD-config-adv0"/></entry><entry> AdvanSys narrow SCSI host adaptor  adw0</entry><entry><xref linkend="CFBSD-config-adw0"/></entry><entry> Second Generation AdvanSys controllers including the ADV940UW.  aha0</entry><entry><xref linkend="CFBSD-config-aha0"/></entry><entry> Adaptec 154x SCSI host adapters  ahb0</entry><entry><xref linkend="CFBSD-config-ahb0"/></entry><entry> Adaptec 174x SCSI host adapters  ahc0</entry><entry><xref linkend="CFBSD-config-ahc0"/></entry><entry> Adaptec 274X and 284X adapters  AHC_ALLOW_MEMIO</entry><entry><xref linkend="CFBSD-config-AHC_ALLOW_MEMIO"/></entry><entry> enable memory mapped I/O on Adaptec 274X and 284X adapters  alpha</entry><entry><xref linkend="CFBSD-config-alpha"/></entry><entry> Define the alpha architecture  alpm0</entry><entry><xref linkend="CFBSD-config-alpm0"/></entry><entry> Acer Aladdin-IV/V/Pro2 Power Management Unit  APIC_IO</entry><entry><xref linkend="CFBSD-config-APIC_IO"/></entry><entry> enable the use of the IO APIC for Symmetric I/O  apm0</entry><entry><xref linkend="CFBSD-config-apm0"/></entry><entry> Laptop Advanced Power Management  ar0</entry><entry><xref linkend="CFBSD-config-ar0"/></entry><entry> Arnet SYNC/570i hdlc sync 2/4 port V.35/X.21 serial driver (requires sppp)  asc0</entry><entry><xref linkend="CFBSD-config-asc0"/></entry><entry> GI1904-based hand scanners, e.g. the Trust Amiscan Grey  atkbd0</entry><entry><xref linkend="CFBSD-config-atkbd0"/></entry><entry> The keyboard controller.  It controls the keyboard and the PS/2 mouse.  atkbdc0</entry><entry><xref linkend="CFBSD-config-atkbdc0"/>
</entry></row>
<row><entry> ATKBD_DFLT_KEYMAP</entry><entry><xref linkend="CFBSD-config-ATKBD_DFLT_KEYMAP"/></entry><entry> specify the built-in keymap  atm</entry><entry><xref linkend="CFBSD-config-atm"/></entry><entry> generic ATM functions  ATM_CORE</entry><entry><xref linkend="CFBSD-config-ATM_CORE"/></entry><entry> core ATM protocol family  ATM_IP</entry><entry><xref linkend="CFBSD-config-ATM_IP"/></entry><entry> IP over ATM support  ATM_SIGPVC</entry><entry><xref linkend="CFBSD-config-ATM_SIGPVC"/></entry><entry> SIGPVC signalling manager  ATM_SPANS</entry><entry><xref linkend="CFBSD-config-ATM_SPANS"/></entry><entry> SPANS signalling manager  ATM_UNI</entry><entry><xref linkend="CFBSD-config-ATM_UNI"/></entry><entry> UNI signalling manager  AUTO_EOI_1</entry><entry><xref linkend="CFBSD-config-AUTO_EOI_1"/></entry><entry> Enable the automatic EOI feature for the master 8259A interrupt controller  AVM_A1</entry><entry><xref linkend="CFBSD-config-AVM_A1"/></entry><entry> AVM A1 or AVM Fritz!Card ISDN adaptor  AVM_A1_PCMCIA</entry><entry><xref linkend="CFBSD-config-AVM_A1_PCMCIA"/></entry><entry> AVM A1 or AVM Fritz!Card ISDN adaptor, PCMCIA  ax0</entry><entry><xref linkend="CFBSD-config-ax0"/></entry><entry> PCI fast ethernet adapters based on the ASIX Electronics AX88140A chip, including the Alfa Inc. GFC2204.  bktr0</entry><entry><xref linkend="CFBSD-config-bktr0"/></entry><entry> Bt848 capture boards (http://www.freebsd.org/~fsmp/HomeAuto/Bt848.html)  BOOTP</entry><entry><xref linkend="CFBSD-config-BOOTP"/></entry><entry> Use BOOTP to obtain IP address/hostname  BOOTP_COMPAT</entry><entry><xref linkend="CFBSD-config-BOOTP_COMPAT"/></entry><entry> Workaround for broken bootp daemons.  BOOTP_NFSROOT</entry><entry><xref linkend="CFBSD-config-BOOTP_NFSROOT"/></entry><entry> NFS mount root filesystem using BOOTP info  BOOTP_NFSV3</entry><entry><xref linkend="CFBSD-config-BOOTP_NFSV3"/></entry><entry> Use NFS v3 to NFS mount root  BOOTP_WIRED_TO</entry><entry><xref linkend="CFBSD-config-BOOTP_WIRED_TO"/></entry><entry> Use interface fxp0 for BOOTP  bpfilter</entry><entry><xref linkend="CFBSD-config-bpfilter"/></entry><entry> Berkeley packet filter  BREAK_TO_DEBUGGER</entry><entry><xref linkend="CFBSD-config-BREAK_TO_DEBUGGER"/></entry><entry> A BREAK on a comconsole goes to <emphasis>ddb</emphasis>  BRIDGE</entry><entry><xref linkend="CFBSD-config-BRIDGE"/></entry><entry> Enable bridging between ethernet boards.  bt0</entry><entry><xref linkend="CFBSD-config-bt0"/></entry><entry> Most Buslogic SCSI host adapters  card0</entry><entry><xref linkend="CFBSD-config-card0"/></entry><entry> PCMCIA slot controller.  ccd</entry><entry><xref linkend="CFBSD-config-ccd"/></entry><entry> Concatenated disk driver  cd0</entry><entry><xref linkend="CFBSD-config-cd0"/></entry><entry> SCSI CD-ROMs  CD9660</entry><entry><xref linkend="CFBSD-config-CD9660"/></entry><entry> ISO 9660 filesystem  CD9660_ROOT</entry><entry><xref linkend="CFBSD-config-CD9660_ROOT"/></entry><entry> CD-ROM usable as root device  CD9660_ROOTDELAY</entry><entry><xref linkend="CFBSD-config-CD9660_ROOTDELAY"/></entry><entry> Timeout on mounting CD-ROM root  ch0</entry><entry><xref linkend="CFBSD-config-ch0"/></entry><entry> SCSI media changers  CODA</entry><entry><xref linkend="CFBSD-config-CODA"/></entry><entry> CODA filesystem.  COMPAT_43</entry><entry><xref linkend="CFBSD-config-COMPAT_43"/></entry><entry> Implement system calls compatible with 4.3BSD   COM_ESP</entry><entry><xref linkend="CFBSD-config-COM_ESP"/></entry><entry> code for Hayes ESP  COM_MULTIPORT</entry><entry><xref linkend="CFBSD-config-COM_MULTIPORT"/></entry><entry> code for some serial boards with shared IRQs  config</entry><entry><xref linkend="CFBSD-config-config"/></entry><entry> Define kernel parameters  CONSPEED</entry><entry><xref linkend="CFBSD-config-CONSPEED"/></entry><entry> Default speed for serial console  cpu</entry><entry><xref linkend="CFBSD-config-cpu"/></entry><entry> Specify the CPU chip (not the hardware)  CPU_UPGRADE_HW_CACHE</entry><entry><xref linkend="CFBSD-config-CPU_UPGRADE_HW_CACHE"/>
</entry></row>
<row><entry> CRTX_S0_P</entry><entry><xref linkend="CFBSD-config-CRTX_S0_P"/>
</entry></row>
<row><entry> cs0</entry><entry><xref linkend="CFBSD-config-cs0"/></entry><entry> IBM Etherjet and other Crystal Semi CS89x0-based Ethernet adapters.  css0</entry><entry><xref linkend="CFBSD-config-css0"/></entry><entry> Crystal Sound System (CSS 423x PnP).  ctx0</entry><entry><xref linkend="CFBSD-config-ctx0"/></entry><entry> Cortex-I frame grabber  cx0</entry><entry><xref linkend="CFBSD-config-cx0"/></entry><entry> Cronyx/Sigma multiport sync/async (with Cisco or PPP framing)  cy0</entry><entry><xref linkend="CFBSD-config-cy0"/></entry><entry> Cyclades serial driver  CYRIX_CACHE_REALLY_WORKS</entry><entry><xref linkend="CFBSD-config-CYRIX_CACHE_REALLY_WORKS"/></entry><entry> Enables CPU cache on Cyrix 486 CPUs without cache flush at hold state, and write-back CPU cache on early-revision Cyrix 6x86  CYRIX_CACHE_WORKS</entry><entry><xref linkend="CFBSD-config-CYRIX_CACHE_WORKS"/></entry><entry> Enable CPU cache on Cyrix 486 CPUs with cache flush at hold state.  CY_PCI_FASTINTR</entry><entry><xref linkend="CFBSD-config-CY_PCI_FASTINTR"/></entry><entry> Use with cy_pci unless irq is shared  da0</entry><entry><xref linkend="CFBSD-config-da0"/></entry><entry> SCSI direct access devices (aka disks)  DDB</entry><entry><xref linkend="CFBSD-config-DDB"/></entry><entry> Enable the kernel debugger  DDB_UNATTENDED</entry><entry><xref linkend="CFBSD-config-DDB_UNATTENDED"/></entry><entry> Dont drop into DDB for a panic  de0</entry><entry><xref linkend="CFBSD-config-de0"/></entry><entry> Digital Equipment DC21040 Ethernet adapter  DEVFS</entry><entry><xref linkend="CFBSD-config-DEVFS"/></entry><entry> Device filesystem  DFLDSIZ</entry><entry><xref linkend="CFBSD-config-DFLDSIZ"/></entry><entry> Soft maximum data size  dgb0</entry><entry><xref linkend="CFBSD-config-dgb0"/></entry><entry> Digiboard PC/Xi and PC/Xe series driver (ALPHA QUALITY!)  dgm0</entry><entry><xref linkend="CFBSD-config-dgm0"/>
</entry></row>
<row><entry> DIAGNOSTIC</entry><entry><xref linkend="CFBSD-config-DIAGNOSTIC"/></entry><entry> Enable extra sanity checking of internal structures  disc</entry><entry><xref linkend="CFBSD-config-disc"/></entry><entry> Discard device&mdash;discard all packets  DONTPROBE_1284</entry><entry><xref linkend="CFBSD-config-DONTPROBE_1284"/></entry><entry> Avoid boot detection of PnP parallel devices  dpt0</entry><entry><xref linkend="CFBSD-config-dpt0"/></entry><entry> Support for DPT RAID controllers.  DRN_NGO</entry><entry><xref linkend="CFBSD-config-DRN_NGO"/></entry><entry> Dr. Neuhaus Niccy Go@ ISDN board  DUMMYNET</entry><entry><xref linkend="CFBSD-config-DUMMYNET"/></entry><entry> Enable the ``dummynet'' bandwidth limiter  DYNALINK</entry><entry><xref linkend="CFBSD-config-DYNALINK"/></entry><entry> Dynalink IS64PH ISDN board  ed0</entry><entry><xref linkend="CFBSD-config-ed0"/></entry><entry> Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503  eisa0</entry><entry><xref linkend="CFBSD-config-eisa0"/></entry><entry> EISA bus  EISA_SLOTS</entry><entry><xref linkend="CFBSD-config-EISA_SLOTS"/></entry><entry> Number of EISA slots to probe  el0</entry><entry><xref linkend="CFBSD-config-el0"/></entry><entry> 3Com 3C501  ELSA_QS1ISA</entry><entry><xref linkend="CFBSD-config-ELSA_QS1ISA"/></entry><entry> ELSA QuickStep 1000pro ISA ISDN board  ELSA_QS1PCI</entry><entry><xref linkend="CFBSD-config-ELSA_QS1PCI"/></entry><entry> ELSA QuickStep 1000pro PCI ISDN board  en0</entry><entry><xref linkend="CFBSD-config-en0"/></entry><entry> Efficient Networks (ENI) ENI-155 PCI midway cards and Adaptec 155Mbps PCI ATM cards (ANA-59x0)  ENABLE_ALART</entry><entry><xref linkend="CFBSD-config-ENABLE_ALART"/>
</entry></row>
<row><entry> ep0</entry><entry><xref linkend="CFBSD-config-ep0"/></entry><entry> 3Com 3C509  ether</entry><entry><xref linkend="CFBSD-config-ether"/></entry><entry> Generic Ethernet support  ex0</entry><entry><xref linkend="CFBSD-config-ex0"/></entry><entry> Intel EtherExpress Pro/10 and other i82595-based Ethernet adapters  EXPORTMFS</entry><entry><xref linkend="CFBSD-config-EXPORTMFS"/></entry><entry> Allow MFS filesystems to be exported via NFS.  EXT2FS</entry><entry><xref linkend="CFBSD-config-EXT2FS"/></entry><entry> Linux ext2fs file system.  EXTRA_SIO</entry><entry><xref linkend="CFBSD-config-EXTRA_SIO"/></entry><entry> number of extra sio ports to allocate  FAILSAFE</entry><entry><xref linkend="CFBSD-config-FAILSAFE"/></entry><entry> Be particularly conservative in various parts of the kernel and choose functionality over speed (on the widest variety of systems).  FAT_CURSOR</entry><entry><xref linkend="CFBSD-config-FAT_CURSOR"/></entry><entry> start with block cursor  fd0</entry><entry><xref linkend="CFBSD-config-fd0"/></entry><entry> Floppy disk  fdc0</entry><entry><xref linkend="CFBSD-config-fdc0"/></entry><entry> Floppy disk controller  FDC_DEBUG</entry><entry><xref linkend="CFBSD-config-FDC_DEBUG"/></entry><entry> Enable floppy debugging  FDC_YE</entry><entry><xref linkend="CFBSD-config-FDC_YE"/>
</entry></row>
<row><entry> fddi</entry><entry><xref linkend="CFBSD-config-fddi"/></entry><entry> Generic FDDI support  FDESC</entry><entry><xref linkend="CFBSD-config-FDESC"/></entry><entry> File descriptor filesystem  fe0</entry><entry><xref linkend="CFBSD-config-fe0"/></entry><entry> Fujitsu MB86960A/MB86965A Ethernet  fea0</entry><entry><xref linkend="CFBSD-config-fea0"/></entry><entry> DEC DEFEA EISA FDDI adapter  FFS</entry><entry><xref linkend="CFBSD-config-FFS"/></entry><entry> Fast filesystem  FFS_ROOT</entry><entry><xref linkend="CFBSD-config-FFS_ROOT"/></entry><entry> FFS usable as root device  fpa0</entry><entry><xref linkend="CFBSD-config-fpa0"/></entry><entry> Digital DEFPA PCI FDDI adapter  fxp0</entry><entry><xref linkend="CFBSD-config-fxp0"/></entry><entry> Intel EtherExpress Pro/100B PCI Fast Ethernet adapters  GDB_REMOTE_CHAT</entry><entry><xref linkend="CFBSD-config-GDB_REMOTE_CHAT"/></entry><entry> Use <emphasis>gdb</emphasis> protocol for remote debugging  gp0</entry><entry><xref linkend="CFBSD-config-gp0"/></entry><entry>  National Instruments AT-GPIB and AT-GPIB/TNT board  GPL_MATH_EMULATE</entry><entry><xref linkend="CFBSD-config-GPL_MATH_EMULATE"/></entry><entry> Alternate x87 math emulation  gsc0</entry><entry><xref linkend="CFBSD-config-gsc0"/></entry><entry> Genius GS-4500 hand scanner.  gus0</entry><entry><xref linkend="CFBSD-config-gus0"/></entry><entry> Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX  gzip</entry><entry><xref linkend="CFBSD-config-gzip"/></entry><entry> Exec gzipped <emphasis>a.out</emphasis>s  hea0</entry><entry><xref linkend="CFBSD-config-hea0"/></entry><entry> Efficient ENI-155p ATM PCI  hfa0</entry><entry><xref linkend="CFBSD-config-hfa0"/></entry><entry> FORE PCA-200E ATM PCI  HW_WDOG</entry><entry><xref linkend="CFBSD-config-HW_WDOG"/>
</entry></row>
<row><entry> i386</entry><entry><xref linkend="CFBSD-config-i386"/></entry><entry> Define the i386 architecture  I386_CPU</entry><entry><xref linkend="CFBSD-config-I386_CPU"/></entry><entry> Intel i386 processor  I486_CPU</entry><entry><xref linkend="CFBSD-config-I486_CPU"/></entry><entry> Intel i486 processor  i4b</entry><entry><xref linkend="CFBSD-config-i4b"/></entry><entry> ISDN subsystem  I586_CPU</entry><entry><xref linkend="CFBSD-config-I586_CPU"/></entry><entry> Intel Pentium processor  I686_CPU</entry><entry><xref linkend="CFBSD-config-I686_CPU"/></entry><entry> Intel Pentium Pro and Pentium 2 processors  IBCS2</entry><entry><xref linkend="CFBSD-config-IBCS2"/></entry><entry> SCO UNIX binary emulation.  ic0</entry><entry><xref linkend="CFBSD-config-ic0"/></entry><entry> Philips i2c bus support.  ident</entry><entry><xref linkend="CFBSD-config-ident"/></entry><entry> Identify the kernel configuration  IDE_DELAY</entry><entry><xref linkend="CFBSD-config-IDE_DELAY"/></entry><entry> Specify probe delay for IDE devices  ie0</entry><entry><xref linkend="CFBSD-config-ie0"/></entry><entry> AT&amp;T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210  iicbus0</entry><entry><xref linkend="CFBSD-config-iicbus0"/></entry><entry> Philips i2c bus support.  INCLUDE_CONFIG_FILE</entry><entry><xref linkend="CFBSD-config-INCLUDE_CONFIG_FILE"/></entry><entry> Store this configuration file into the kernel binary itself  INET</entry><entry><xref linkend="CFBSD-config-INET"/></entry><entry> Internet communications protocols  intpm0</entry><entry><xref linkend="CFBSD-config-intpm0"/>
</entry></row>
<row><entry> INTRO_USERCONFIG</entry><entry><xref linkend="CFBSD-config-INTRO_USERCONFIG"/></entry><entry> imply -c and show intro screen  INVARIANTS</entry><entry><xref linkend="CFBSD-config-INVARIANTS"/></entry><entry> Enable extra sanity checking of internal structures.  IPDIVERT</entry><entry><xref linkend="CFBSD-config-IPDIVERT"/></entry><entry> Divert sockets  IPFILTER</entry><entry><xref linkend="CFBSD-config-IPFILTER"/></entry><entry> kernel ipfilter support  IPFIREWALL</entry><entry><xref linkend="CFBSD-config-IPFIREWALL"/></entry><entry> Firewall  IPSTEALTH</entry><entry><xref linkend="CFBSD-config-IPSTEALTH"/></entry><entry> support for stealth forwarding  IPX</entry><entry><xref linkend="CFBSD-config-IPX"/></entry><entry> Include IPX/SPX communications protocols  IPXIP</entry><entry><xref linkend="CFBSD-config-IPXIP"/></entry><entry> Include IPX in IP encapsulation  isa0</entry><entry><xref linkend="CFBSD-config-isa0"/></entry><entry> ISA bus  joy0</entry><entry><xref linkend="CFBSD-config-joy0"/></entry><entry> joystick  KERNFS</entry><entry><xref linkend="CFBSD-config-KERNFS"/></entry><entry> Kernel filesystem  KTRACE</entry><entry><xref linkend="CFBSD-config-KTRACE"/></entry><entry> Enable kernel tracing  labpc0</entry><entry><xref linkend="CFBSD-config-labpc0"/></entry><entry> National Instruments Lab-PC and Lab-PC+  le0</entry><entry><xref linkend="CFBSD-config-le0"/></entry><entry> Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100, DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)  lnc0</entry><entry><xref linkend="CFBSD-config-lnc0"/></entry><entry> Lance/PCnet cards (Isolan, Novell NE2100, NE32-VL)  LOCKF_DEBUG</entry><entry><xref linkend="CFBSD-config-LOCKF_DEBUG"/>
</entry></row>
<row><entry> loop</entry><entry><xref linkend="CFBSD-config-loop"/></entry><entry> Network loopback device support  lpt0</entry><entry><xref linkend="CFBSD-config-lpt0"/></entry><entry> Printer port  LPT_DEBUG</entry><entry><xref linkend="CFBSD-config-LPT_DEBUG"/></entry><entry> Printer driver debug  matcd0</entry><entry><xref linkend="CFBSD-config-matcd0"/></entry><entry> Matsushita/Panasonic CD-ROM  MATH_EMULATE</entry><entry><xref linkend="CFBSD-config-MATH_EMULATE"/></entry><entry> Support for x87 emulation  MAXCONS</entry><entry><xref linkend="CFBSD-config-MAXCONS"/></entry><entry> Number of virtual consoles for <emphasis>syscons</emphasis>  MAXDSIZ</entry><entry><xref linkend="CFBSD-config-MAXDSIZ"/></entry><entry> Maximum data size  MAXMEM</entry><entry><xref linkend="CFBSD-config-MAXMEM"/></entry><entry> Specify explicit memory size  maxusers</entry><entry><xref linkend="CFBSD-config-maxusers"/></entry><entry> Set kernel parameters based on the number of expected users.  This parameter <emphasis>doesn't limit the number of users</emphasis>  mcd0</entry><entry><xref linkend="CFBSD-config-mcd0"/></entry><entry> Mitsumi CD-ROM  MD5</entry><entry><xref linkend="CFBSD-config-MD5"/></entry><entry> Include an MD5 encryption routine in the kernel  meteor0</entry><entry><xref linkend="CFBSD-config-meteor0"/></entry><entry> Matrox Meteor video capture board  meteor0</entry><entry><xref linkend="CFBSD-config-meteor0"/></entry><entry> PCI video capture board  MFS</entry><entry><xref linkend="CFBSD-config-MFS"/></entry><entry> Memory File System  MFS_ROOT</entry><entry><xref linkend="CFBSD-config-MFS_ROOT"/></entry><entry> MFS root file system  mpu0</entry><entry><xref linkend="CFBSD-config-mpu0"/></entry><entry> Roland MPU-401 stand-alone card  MROUTING</entry><entry><xref linkend="CFBSD-config-MROUTING"/></entry><entry> Multicast routing  MSDOSFS</entry><entry><xref linkend="CFBSD-config-MSDOSFS"/></entry><entry> MS DOS File System  mse0</entry><entry><xref linkend="CFBSD-config-mse0"/></entry><entry> Logitech and ATI InPort bus mouse ports  MSGBUF_SIZE</entry><entry><xref linkend="CFBSD-config-MSGBUF_SIZE"/></entry><entry> Set size of kernel internal message buffer.  mss0</entry><entry><xref linkend="CFBSD-config-mss0"/></entry><entry> Microsoft Sound System  mx0</entry><entry><xref linkend="CFBSD-config-mx0"/></entry><entry> Fast ethernet adapters based on the Macronix 98713, 987615 ans 98725 series chips.  NAPIC</entry><entry><xref linkend="CFBSD-config-NAPIC"/></entry><entry> Set number of IO APICs on SMP  NATM</entry><entry><xref linkend="CFBSD-config-NATM"/></entry><entry> Native ATM  NBUS</entry><entry><xref linkend="CFBSD-config-NBUS"/></entry><entry> Set number of busses on SMP  NCPU</entry><entry><xref linkend="CFBSD-config-NCPU"/></entry><entry> Set number of CPUs on SMP  ncr0</entry><entry><xref linkend="CFBSD-config-ncr0"/></entry><entry> NCR 53C810 and 53C825 SCSI host adapters  NDGBPORTS</entry><entry><xref linkend="CFBSD-config-NDGBPORTS"/></entry><entry> Defaults to 16*NDGB  NETATALK</entry><entry><xref linkend="CFBSD-config-NETATALK"/></entry><entry> Appletalk communications protocols  NFS</entry><entry><xref linkend="CFBSD-config-NFS"/></entry><entry> Network File System  NINTR</entry><entry><xref linkend="CFBSD-config-NINTR"/></entry><entry> Set number of INTs on SMP  npx0</entry><entry><xref linkend="CFBSD-config-npx0"/></entry><entry> Numeric Processing eXtension driver, for machines with math co-processor  NSFBUFS</entry><entry><xref linkend="CFBSD-config-NSFBUFS"/></entry><entry> Number of virtual buffers to map file VM pages for sendfile(2).  NSWAPDEV</entry><entry><xref linkend="CFBSD-config-NSWAPDEV"/></entry><entry> Allow this many swap-devices.  NTFS</entry><entry><xref linkend="CFBSD-config-NTFS"/></entry><entry> Microsoft NT File System  NULLFS</entry><entry><xref linkend="CFBSD-config-NULLFS"/></entry><entry> NULL filesystem  opl0</entry><entry><xref linkend="CFBSD-config-opl0"/></entry><entry> Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum  P1003_1B</entry><entry><xref linkend="CFBSD-config-P1003_1B"/></entry><entry> Set 1993 POSIX real time extensions.  pas0</entry><entry><xref linkend="CFBSD-config-pas0"/></entry><entry> ProAudioSpectrum PCM and MIDI  pass0</entry><entry><xref linkend="CFBSD-config-pass0"/></entry><entry> CAM passthrough driver  pca0</entry><entry><xref linkend="CFBSD-config-pca0"/></entry><entry> PCM audio through your PC speaker  pcf0</entry><entry><xref linkend="CFBSD-config-pcf0"/></entry><entry> Philips PCF8584 ISA-bus controller.  pci0</entry><entry><xref linkend="CFBSD-config-pci0"/></entry><entry> PCI bus  pcic0</entry><entry><xref linkend="CFBSD-config-pcic0"/></entry><entry> PCCARD/PCMCIA slots  pcm0</entry><entry><xref linkend="CFBSD-config-pcm0"/></entry><entry> PCM audio through various sound cards.  PERFMON</entry><entry><xref linkend="CFBSD-config-PERFMON"/></entry><entry> Include driver for Pentium/Pentium Pro performance counters  PERIPH_1284</entry><entry><xref linkend="CFBSD-config-PERIPH_1284"/></entry><entry> Makes your computer act as a IEEE1284  plip0</entry><entry><xref linkend="CFBSD-config-plip0"/></entry><entry> Parallel IP interface.  PMAP_SHPGPERPROC</entry><entry><xref linkend="CFBSD-config-PMAP_SHPGPERPROC"/></entry><entry> The number of PV entries per process.   pn0</entry><entry><xref linkend="CFBSD-config-pn0"/></entry><entry> Fast ethernet adapters based on the Lite-On 82c168 and 82c169 PNIC chips, including the LinkSys LNE100TX, the NetGear FA310TX rev. D1 and the Matrox FastNIC 10/100.  pnp0</entry><entry><xref linkend="CFBSD-config-pnp0"/></entry><entry> Enable PnP support in the kernel  PORTAL</entry><entry><xref linkend="CFBSD-config-PORTAL"/></entry><entry> Portal filesystem  POWERFAIL_NMI</entry><entry><xref linkend="CFBSD-config-POWERFAIL_NMI"/></entry><entry> Don't panic on laptop power fail  ppbus0</entry><entry><xref linkend="CFBSD-config-ppbus0"/></entry><entry> Parallel port bus support  ppc0</entry><entry><xref linkend="CFBSD-config-ppc0"/></entry><entry> ISA-bus parallel port interfaces.  ppi0</entry><entry><xref linkend="CFBSD-config-ppi0"/></entry><entry> Parallel port general-purpose I/O  ppp</entry><entry><xref linkend="CFBSD-config-ppp"/></entry><entry> Kernel PPP support  PROCFS</entry><entry><xref linkend="CFBSD-config-PROCFS"/></entry><entry> Process filesystem  psm0</entry><entry><xref linkend="CFBSD-config-psm0"/></entry><entry> PS/2 mouse interface.  pt0</entry><entry><xref linkend="CFBSD-config-pt0"/></entry><entry> SCSI processor type  pty</entry><entry><xref linkend="CFBSD-config-pty"/></entry><entry> Pseudo ttys  QUOTA</entry><entry><xref linkend="CFBSD-config-QUOTA"/></entry><entry> enable disk quotas  rc0</entry><entry><xref linkend="CFBSD-config-rc0"/></entry><entry> RISCom/8 multiport card  rdp0</entry><entry><xref linkend="CFBSD-config-rdp0"/></entry><entry> RealTek RTL 8002-based pocket ethernet adapters.  rp0</entry><entry><xref linkend="CFBSD-config-rp0"/></entry><entry> Comtrol Rocketport(ISA) - single card  sa0</entry><entry><xref linkend="CFBSD-config-sa0"/></entry><entry> SCSI tapes  sb0</entry><entry><xref linkend="CFBSD-config-sb0"/></entry><entry> SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum  sbmidi0</entry><entry><xref linkend="CFBSD-config-sbmidi0"/></entry><entry> SoundBlaster 16 MIDI interface  sbxvi0</entry><entry><xref linkend="CFBSD-config-sbxvi0"/></entry><entry> SoundBlaster 16  sc0</entry><entry><xref linkend="CFBSD-config-sc0"/></entry><entry> The default <emphasis>syscons</emphasis> console driver  scd0</entry><entry><xref linkend="CFBSD-config-scd0"/></entry><entry> Sony CD-ROM  sctarg0</entry><entry><xref linkend="CFBSD-config-sctarg0"/></entry><entry> SCSI target  SHOW_BUSYBUFS</entry><entry><xref linkend="CFBSD-config-SHOW_BUSYBUFS"/></entry><entry> List buffers that prevent root unmount  si0</entry><entry><xref linkend="CFBSD-config-si0"/></entry><entry> Specialix SI/XIO 4-32 port terminal multiplexor  SIMPLELOCK_DEBUG</entry><entry><xref linkend="CFBSD-config-SIMPLELOCK_DEBUG"/>
</entry></row>
<row><entry> sio0</entry><entry><xref linkend="CFBSD-config-sio0"/></entry><entry> Serial I/O port  sl</entry><entry><xref linkend="CFBSD-config-sl"/></entry><entry> Serial Line IP  smb0</entry><entry><xref linkend="CFBSD-config-smb0"/></entry><entry> System Management Bus support.  SMP</entry><entry><xref linkend="CFBSD-config-SMP"/></entry><entry> Symmetric Multiprocessor Kernel  snd0</entry><entry><xref linkend="CFBSD-config-snd0"/></entry><entry> Voxware sound support code  snp</entry><entry><xref linkend="CFBSD-config-snp"/></entry><entry> Snoop device  speaker</entry><entry><xref linkend="CFBSD-config-speaker"/></entry><entry> Play IBM BASIC-style noises out your speaker  spigot0</entry><entry><xref linkend="CFBSD-config-spigot0"/></entry><entry> The Creative Labs Video Spigot video-acquisition board  splash</entry><entry><xref linkend="CFBSD-config-splash"/></entry><entry> Splash screen at start up.  sppp</entry><entry><xref linkend="CFBSD-config-sppp"/></entry><entry> Generic Synchronous PPP  sr0</entry><entry><xref linkend="CFBSD-config-sr0"/></entry><entry> RISCom/N2 hdlc sync 1/2 port V.35/X.21 serial driver (requires sppp)  sscape0</entry><entry><xref linkend="CFBSD-config-sscape0"/></entry><entry> Ensoniq Soundscape MIDI interface  STD8X16FONT</entry><entry><xref linkend="CFBSD-config-STD8X16FONT"/></entry><entry> <emphasis>syscons</emphasis>: compile font in  stl0</entry><entry><xref linkend="CFBSD-config-stl0"/></entry><entry> Stallion EasyIO and EasyConnection 8/32 (cd1400 based)  stli0</entry><entry><xref linkend="CFBSD-config-stli0"/></entry><entry> Stallion EasyConnection 8/64, ONboard, Brumby (intelligent)  SYSVMSG</entry><entry><xref linkend="CFBSD-config-SYSVMSG"/></entry><entry> Support for System V message queues  SYSVSEM</entry><entry><xref linkend="CFBSD-config-SYSVSEM"/></entry><entry> Support for System V semaphores  SYSVSHM</entry><entry><xref linkend="CFBSD-config-SYSVSHM"/></entry><entry> Support for System V shared memory  TCP_COMPAT_42</entry><entry><xref linkend="CFBSD-config-TCP_COMPAT_42"/></entry><entry> emulate 4.2BSD TCP bugs  tun</entry><entry><xref linkend="CFBSD-config-tun"/></entry><entry> Tunnel driver, used mainly for User PPP.  TUNE_1542</entry><entry><xref linkend="CFBSD-config-TUNE_1542"/></entry><entry> Enable automatic ISA bus speed selection for Adaptec 1542 boards  tw0</entry><entry><xref linkend="CFBSD-config-tw0"/></entry><entry> TW-523 power line interface for use with X-10 home control products  tx0</entry><entry><xref linkend="CFBSD-config-tx0"/></entry><entry> SMC 9432TX based Ethernet boards.  uart0</entry><entry><xref linkend="CFBSD-config-uart0"/></entry><entry> stand-alone 6850 UART for MIDI  UCONSOLE</entry><entry><xref linkend="CFBSD-config-UCONSOLE"/></entry><entry> Allow ordinary users to take the console  ugen0</entry><entry><xref linkend="CFBSD-config-ugen0"/></entry><entry> Generic USB interface  UMAPFS</entry><entry><xref linkend="CFBSD-config-UMAPFS"/></entry><entry> UID map filesystem  ums0</entry><entry><xref linkend="CFBSD-config-ums0"/></entry><entry> USB mouse.  UNION</entry><entry><xref linkend="CFBSD-config-UNION"/></entry><entry> Union filesystem  usb0</entry><entry><xref linkend="CFBSD-config-usb0"/></entry><entry> Base USB support  USERCONFIG</entry><entry><xref linkend="CFBSD-config-USERCONFIG"/></entry><entry> Include <emphasis>UserConfig</emphasis> editor  USER_LDT</entry><entry><xref linkend="CFBSD-config-USER_LDT"/></entry><entry> allow user-level control of i386 LDT  vcoda</entry><entry><xref linkend="CFBSD-config-vcoda"/></entry><entry> coda minicache &lt;-&gt; venus comm.  VESA</entry><entry><xref linkend="CFBSD-config-VESA"/></entry><entry> Support for VESA video modes  vga0</entry><entry><xref linkend="CFBSD-config-vga0"/></entry><entry> VGA driver  vinum</entry><entry><xref linkend="CFBSD-config-vinum"/></entry><entry> Vinum volume manager  VISUAL_USERCONFIG</entry><entry><xref linkend="CFBSD-config-VISUAL_USERCONFIG"/></entry><entry> With <emphasis>USERCONFIG</emphasis>: enable visual editor  VM86</entry><entry><xref linkend="CFBSD-config-VM86"/></entry><entry> Allow processes to switch to VM86 mode  vn</entry><entry><xref linkend="CFBSD-config-vn"/></entry><entry> Vnode driver (turns a file into a device)  VP0_DEBUG</entry><entry><xref linkend="CFBSD-config-VP0_DEBUG"/></entry><entry> ZIP/ZIP+ debug  vpo0</entry><entry><xref linkend="CFBSD-config-vpo0"/></entry><entry> Parallel port Iomega Zip Drive  vr0</entry><entry><xref linkend="CFBSD-config-vr0"/></entry><entry> Fast ethernet adapters based on the VIA Technologies VT3043 `Rhine I' and VT86C100A `Rhine II' chips, including the D-Link DFE530TX.  vt0</entry><entry><xref linkend="CFBSD-config-vt0"/></entry><entry> pcvt vt220 compatible console driver  vx0</entry><entry><xref linkend="CFBSD-config-vx0"/></entry><entry> 3Com 3C590 and 3C595  wb0</entry><entry><xref linkend="CFBSD-config-wb0"/></entry><entry> Fast ethernet adapters based on the Winbond W89C840F chip.  wd0</entry><entry><xref linkend="CFBSD-config-wd0"/></entry><entry> IDE disk  wdc0</entry><entry><xref linkend="CFBSD-config-wdc0"/></entry><entry> IDE disk controller  wfd0</entry><entry><xref linkend="CFBSD-config-wfd0"/></entry><entry> IDE floppy interface.  wl0</entry><entry><xref linkend="CFBSD-config-wl0"/></entry><entry> Lucent Wavelan (ISA card only).  WLCACHE</entry><entry><xref linkend="CFBSD-config-WLCACHE"/></entry><entry> Enable the RISCom/N2 signal-strength cache  wst0</entry><entry><xref linkend="CFBSD-config-wst0"/></entry><entry> IDE tape driver  xl0</entry><entry><xref linkend="CFBSD-config-xl0"/></entry><entry> 3Com 3c900, 3c905 and 3c905B (Fast) Etherlink XL cards and integrated controllers.  xrpu0</entry><entry><xref linkend="CFBSD-config-xrpu0"/></entry><entry> HOT1 Xilinx 6200 board.  XSERVER</entry><entry><xref linkend="CFBSD-config-XSERVER"/></entry><entry> support for running an X server.  ze0</entry><entry><xref linkend="CFBSD-config-ze0"/></entry><entry> IBM/National Semiconductor PCMCIA ethernet controller.  zp0</entry><entry><xref linkend="CFBSD-config-zp0"/></entry><entry> 3Com PCMCIA Etherlink III
</entry></row>
</tbody></tgroup></table>
</para>
</sect2>
</sect1>
<sect1>
<title>Disk controllers</title>

<para><indexterm><primary>disk</primary><secondary>controllers</secondary></indexterm>
</para>
<sect2>
<sect3>
<title>controller fdc0</title>

<para><indexterm><primary>controller</primary><secondary>fdc0</secondary></indexterm>
<indexterm><primary>fdc0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-fdc0"/>
<anchor id="CFBSD-config-fd0"/>
</para>
<programlisting>
controller fdc0 at isa? port "IO_FD1" bio irq 6 drq 2
disk        fd0     at fdc0 drive 0
disk        fd1     at fdc0 drive 1
</programlisting>

<para><emphasis>fd0</emphasis> is the first floppy drive (<emphasis>A:</emphasis> in MS-DOS parlance), and
<emphasis>fd1</emphasis> is the second drive (<emphasis>B:</emphasis>).  Comment out any lines
corresponding to devices you do not have.
</para>

<para>The <emphasis>ft0</emphasis> driver for QIC-80 tape drives attached to the floppy controller
was never reliable (nor were the drives), and it is no longer supported.
</para>
</sect3>
<sect3>
<title>controller wdc0</title>

<para><indexterm><primary>controller</primary><secondary>wdc0</secondary></indexterm>
<indexterm><primary>wdc0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-wdc0"/>
<anchor id="CFBSD-config-wd0"/>
</para>
<programlisting>
<emphasis>First IDE controller</emphasis>
controller	wdc0	at isa? port "IO_WD1" bio irq 14
disk		wd0	at wdc0 drive 0
disk		wd1	at wdc0 drive 1

<emphasis>Second IDE controller</emphasis>
controller	wdc1	at isa? port "IO_WD2" bio irq 15
disk		wd2	at wdc1 drive 0
disk		wd3	at wdc1 drive 1

<emphasis>Third IDE controller</emphasis>
# controller	wdc2	at isa? port "0" bio irq ? flags 0xa0ffa0ff
# disk		wd4	at wdc2 drive 0
# disk		wd5	at wdc2 drive 1

<anchor id="CFBSD-config-CMD640"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CMD640</primary><secondary>config option</secondary></indexterm>
options         "CMD640"	     # Enable work around for CMD640 h/w bug
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATAPI</primary><secondary>config option</secondary></indexterm>
options         ATAPI	     # Enable ATAPI support for IDE bus
<anchor id="CFBSD-config-ATAPI_STATIC"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATAPI_STATIC</primary><secondary>config option</secondary></indexterm>
options		ATAPI_STATIC	# Don't do it as an LKM
<anchor id="CFBSD-config-IDE_DELAY"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IDE_DELAY</primary><secondary>config option</secondary></indexterm>
options		IDE_DELAY=8000	# Be optimistic about Joe IDE device

device          acd0			<emphasis>ATAPI (IDE) CD-ROM</emphasis>
device          wfd0			<emphasis>ATAPI  floppy</emphasis>
device          wst0			<emphasis>ATAPI  tape units</emphasis>
</programlisting>

<para><indexterm><primary>controller</primary><secondary>wdc0</secondary></indexterm>
<indexterm><primary>wdc0</primary><secondary>controller</secondary></indexterm>
<emphasis>wdc0</emphasis> is the primary IDE controller, and <emphasis>wd0</emphasis> and <emphasis>wd1</emphasis> are the
master and slave hard drive, respectively.  <emphasis>wdc1</emphasis> is a secondary IDE
controller where you might have a third or fourth hard drive, or an IDE CD-ROM.
Comment out the lines which do not apply. If you have only a SCSI hard drive,
you can comment out all six lines.
</para>

<para>A number of flags and options apply to <emphasis>wdc0</emphasis>:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>flags</emphasis> fields are used to enable the multi-sector I/O and the 32 bit
I/O modes.  You can use them either in the controller definition or in the
individual disk definitions.  If you want to use them during boot configuration,
specify them in the controller definition.
</para>

<para>16 flag bits are provided for each drive.  The first 16 flag bits refer to drive
1, and the second 16 bits refer to drive 0.  In each set of flags,
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>Bit 15 (<emphasis>0x8000</emphasis>) specifies to probe for 32 bit transfers.
</para>
</listitem>
<listitem>

<para>Bit 14 (<emphasis>0x4000</emphasis>) enables waking powered-down laptop drives.
</para>
</listitem>
<listitem>

<para>Bit 13 (<emphasis>0x2000</emphasis>) allows probing for PCI IDE DMA controllers.
</para>
</listitem>
<listitem>

<para>Bit 12 (<emphasis>0x1000</emphasis>) enables LBA (logical block addressing mode).  If this
bit is not set, the driver accesses the disk in CHS (cylinder/head/sector)
mode.  See page <xref linkend="CFBSD-LBA"/> for a discussion of LBA.
<anchor id="CFBSD-IDE-DMA"/>
</para>
</listitem>
<listitem>

<para>The low 8 bits specify the maximum number of sectors per transfer.  The special
case <emphasis>0xff</emphasis> represents the maximum transfer size which the drive can
handle.
</para>
</listitem>
</orderedlist>
See the man page <emphasis>wd(4)</emphasis> for more details.

<para>Thus, we can break down the example value <emphasis>0xff8004</emphasis> (the full 32 bits are
<emphasis>0x00ff8004</emphasis>) into <emphasis>0x00ff</emphasis> for drive 1 (use the maximum transfer
size) and <emphasis>0x8004</emphasis> for drive 0 (allow probing for 32 bit support, and use
a transfer size of 4 sectors).  We use CHS addressing for this drive.
<itemizedlist>
</para>
<listitem>

<para>The option <emphasis>CMD640</emphasis> enables serializing access to primary and secondary
channel of the CMD640B IDE chip if the chip is probed by the PCI system.  This
works around a bug in this particular chip.
</para>
</listitem>
<listitem>

<para><indexterm><primary>acd0</primary></indexterm>
<indexterm><primary>wfd0</primary></indexterm>
<indexterm><primary>wst0</primary></indexterm>
The option <emphasis>ATAPI</emphasis> enables support for the ATAPI-compatible IDE devices
<emphasis>acd0</emphasis>, <emphasis>wfd0</emphasis> and <emphasis>wst0</emphasis>.
</para>
</listitem>
<listitem>

<para>If you specify <emphasis>ATAPI_STATIC</emphasis> in addition to <emphasis>ATAPI</emphasis>, the kernel
will not allow ATAPI support as an LKM (loadable kernel module).
</para>
</listitem>
</itemizedlist>

<para>It's particularly important to use DMA if you possibly can: programmed I/O (PIO,
the alternative to DMA) is an order of magnitude slower.  See page <xref linkend="CFBSD-use-DMA"/>
for more details.
</para>
</sect3>
<sect3>
<title>controller wdc2</title>

<para><anchor id="CFBSD-config-wdc2"/>
<indexterm><primary>wdc2</primary></indexterm>
Most modern machines have two IDE controllers on the motherboard.  You can add
additional plug-in boards.  The example <emphasis>wdc2</emphasis> shows how to do this: you
specify dummy port and irq numbers, and the kernel will fill the values in
during the probes.
</para>
</sect3>
<sect3>
<title>controller acd0</title>

<para><indexterm><primary>controller</primary><secondary>acd0</secondary></indexterm>
<indexterm><primary>acd0</primary><secondary>controller</secondary></indexterm>
<anchor id="CFBSD-config-acd0"/>
<anchor id="CFBSD-config-ATAPI"/>
<indexterm><primary>controller</primary><secondary>acd0</secondary></indexterm>
<indexterm><primary>acd0</primary><secondary>controller</secondary></indexterm>
<indexterm><primary>acd0</primary></indexterm>
<emphasis>acd0</emphasis> provides ATAPI (IDE) CD-ROM support.  This controller requires
<emphasis>options ATAPI</emphasis>.
</para>
</sect3>
<sect3>
<title>device wfd0</title>

<para><anchor id="CFBSD-config-wfd0"/>
<indexterm><primary>wfd0</primary></indexterm>
<emphasis>wfd0</emphasis> controls floppy drives on IDE interfaces.  You don't need it for
normal floppy drives.
</para>
</sect3>
<sect3>
<title>device wst0</title>

<para><indexterm><primary>device</primary><secondary>wst0</secondary></indexterm>
<indexterm><primary>wst0</primary><secondary>device</secondary></indexterm>
<anchor id="CFBSD-config-wst0"/>
Wangtek and Archive QIC-02/QIC-36 tape drive support.
</para>
</sect3>
</sect2>
<sect2>
<title>SCSI devices</title>

<para><indexterm><primary>SCSI</primary></indexterm>
<anchor id="CFBSD-config-SCSI"/>
<anchor id="CFBSD-config-scbus0"/>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>Common</primary><secondary>Access Method</secondary></indexterm>
<indexterm><primary>CAM</primary></indexterm>
FreeBSD <xref linkend="CFBSD-Fver"/> includes a new SCSI driver based on the ANSI ratified <emphasis>Common
Access Method</emphasis> or <emphasis>CAM</emphasis> specification which defines a software
interface for talking to SCSI and ATAPI devices.  The FreeBSD driver is not
completely CAM compliant, but it follows many of the precepts of CAM.  More
importantly, it addresses many of the shortcomings of the previous SCSI layer
and should provide better performance, reliability, and ease the task of adding
support for new controllers.
</para>

<para><indexterm><primary>/dev/da0a</primary></indexterm>
For most users, the most obvious difference between the old SCSI driver and CAM
is the way they named SCSI devices.  In the old driver, disks were called
<emphasis>sd<emphasis>n</emphasis></emphasis>, and tapes were called <emphasis>st<emphasis>n</emphasis></emphasis>, where <emphasis>n</emphasis> was a
small positive number.  The CAM driver calls disks <emphasis>da<emphasis>n</emphasis></emphasis> (for
<emphasis>direct access</emphasis>), and tapes are called <emphasis>sa<emphasis>n</emphasis></emphasis> (for <emphasis>serial
access</emphasis>).  Part of the upgrade procedure will create these new device names,
though they are not strictly necessary: the CAM driver uses the same major
numbers and the same device encoding scheme for the minor numbers as the old
driver did, so <emphasis>/dev/sd0a</emphasis> and <emphasis>/dev/da0a</emphasis> are, in fact, the same
device.  Nevertheless, if you don't create the new device names, you may have
some subtle problems.
</para>

<para>The SCSI subsystem consists of the base SCSI code, a number of high-level SCSI
device `type' drivers, and the low-level host-adapter device drivers.
</para>
<sect3>
<title>SCSI units</title>

<para><indexterm><primary>SCSI</primary><secondary>units</secondary></indexterm>
CAM supports the following kinds of SCSI device:
</para>
<programlisting>
controller	scbus0				#base SCSI code
<anchor id="CFBSD-config-ch0"/>
device		ch0				#SCSI media changers
<anchor id="CFBSD-config-da0"/>
device		da0				#SCSI direct access devices (aka disks)
<anchor id="CFBSD-config-sa0"/>
device		sa0				#SCSI tapes
<anchor id="CFBSD-config-cd0"/>
device		cd0				#SCSI CD-ROMs
# device	od0					#SCSI optical disk
<anchor id="CFBSD-config-pass0"/>
device		pass0				#CAM passthrough driver
<anchor id="CFBSD-config-pt0"/>
device		pt0 at scbus?	   	# SCSI processor type
<anchor id="CFBSD-config-sctarg0"/>
device		sctarg0 at scbus? 	# SCSI target
</programlisting>

<para>The number <keycap>0</keycap> in the above entries is slightly misleading: all these
devices are automatically configured as they are found, regardless of how many
of them there are, and which target IDs they have.
</para>
</sect3>
<sect3>
<title>Defining names for specific targets</title>

<para><indexterm><primary>SCSI</primary><secondary>target names</secondary></indexterm>
<indexterm><primary>target</primary><secondary>names</secondary></indexterm>
<indexterm><primary>/etc/fstab</primary></indexterm>
<indexterm><primary>wiring</primary><secondary>down SCSI devices</secondary></indexterm>
<indexterm><primary>SCSI</primary><secondary>wiring down devices</secondary></indexterm>
<indexterm><primary>LUN</primary></indexterm>
<anchor id="CFBSD-wiring"/>
By default, FreeBSD assigns SCSI unit numbers in the order in which it finds the
devices on the SCSI bus.  This means that if you remove or add a disk drive, you
may have to rewrite your <emphasis>/etc/fstab</emphasis> file.  To avoid this problem, you can
<emphasis>wire down</emphasis> your SCSI devices so that a given bus, target, and unit
(<emphasis>LUN</emphasis>) always come on line as the same device unit.
</para>

<para>The unit assignment begins with the first non-wired down unit for a device type.
Units that are not specified are treated as if specified as LUN 0.  For example,
if you wire a disk as <emphasis>sd3</emphasis> then the first non-wired disk will be assigned
<emphasis>sd4</emphasis>.
</para>

<para>The syntax for wiring down devices is:
</para>
<programlisting>
controller	scbus0 at ahc0		# Single bus device
controller	scbus1 at ahc1 bus 0	# Single bus device
controller	scbus3 at ahc2 bus 0	# Twin bus device
controller	scbus2 at ahc2 bus 1	# Twin bus device
disk 		da0 at scbus0 target 0 unit 0
disk		da1 at scbus3 target 1
disk		da2 at scbus2 target 3
tape		sa1 at scbus1 target 6
device	cd0 at scbus?
</programlisting>

<para>Units that are not specified are treated as if specified as LUN 0.
</para>
</sect3>
</sect2>
<sect2>
<title>SCSI options</title>

<para><indexterm><primary>SCSI</primary><secondary>options</secondary></indexterm>
<indexterm><primary>options</primary><secondary>SCSI</secondary></indexterm>
A number of options allow you to modify the behaviour of the SCSI subsystem.
Most of them are for debugging purposes, and are not discussed here.  The ones
that might be of interest are:
</para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SCSI_REPORT_GEOMETRY</primary><secondary>config option</secondary></indexterm>
options		SCSI_REPORT_GEOMETRY
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SCSI_DELAY</primary><secondary>config option</secondary></indexterm>
options		SCSI_DELAY=8000	# Be pessimistic about Joe SCSI device

<anchor id="CFBSD-config-CHANGER_MIN_BUSY_SECONDS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CHANGER_MIN_BUSY_SECONDS</primary><secondary>config option</secondary></indexterm>
options		"CHANGER_MIN_BUSY_SECONDS=2"
<anchor id="CFBSD-config-CHANGER_MAX_BUSY_SECONDS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CHANGER_MAX_BUSY_SECONDS</primary><secondary>config option</secondary></indexterm>
options		"CHANGER_MAX_BUSY_SECONDS=10"

Options for the CAM sequential access driver:
SA_SPACE_TIMEOUT: Timeout for space operations, in minutes
SA_REWIND_TIMEOUT: Timeout for rewind operations, in minutes
SA_ERASE_TIMEOUT: Timeout for erase operations, in minutes
<anchor id="CFBSD-config-SA_SPACE_TIMEOUT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SA_SPACE_TIMEOUT</primary><secondary>config option</secondary></indexterm>
options		"SA_SPACE_TIMEOUT=(60)"
<anchor id="CFBSD-config-SA_REWIND_TIMEOUT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SA_REWIND_TIMEOUT</primary><secondary>config option</secondary></indexterm>
options		"SA_REWIND_TIMEOUT=(2*60)"
<anchor id="CFBSD-config-SA_ERASE_TIMEOUT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SA_ERASE_TIMEOUT</primary><secondary>config option</secondary></indexterm>
options		"SA_ERASE_TIMEOUT=(4*60)"

<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>TUNE_1542</primary><secondary>config option</secondary></indexterm>
options         "TUNE_1542"
</programlisting>

<para></para>
<sect3>
<title>SCSI_REPORT_GEOMETRY</title>

<para><anchor id="CFBSD-config-SCSI_REPORT_GEOMETRY"/>
<indexterm><primary>dmesg</primary></indexterm>
Use <emphasis>SCSI_REPORT_GEOMETRY</emphasis> to always report disk geometry at boot up
instead of only when booting verbosely.  This shows in the last line of the
following excerpt from <emphasis>dmesg</emphasis>:
</para>
<programlisting>
da0: &lt;Quantum XP34300W L915&gt; Fixed Direct Access SCSI-2 device
da0: 20.000MB/s transfers (10.000MHz, offset 15, 16bit), Tagged Queueing Enabled
da0: 4303MB (8813920 512 byte sectors: 255H 63S/T 548C)
</programlisting>

<para></para>
</sect3>
<sect3>
<title>SCSI_DELAY</title>

<para><anchor id="CFBSD-config-SCSI_DELAY"/>
<emphasis>SCSI_DELAY</emphasis> is the number of <emphasis>milliseconds</emphasis> to wait after resetting
the SCSI bus.  Some devices spend a considerable period of times performing
internal checks when after a bus reset.  This is most evident when probing.
This value used to be in seconds: be careful when upgrading.
</para>
</sect3>
<sect3>
<title>Changer parameters</title>

<para>A number of SCSI devices, such as CD-ROMs and tapes, can use changers, devices
which automatically load a number of media into a single drive.  This can be a
performance problem: the change operation is much slower than the I/O
operations.  If you change too often, you will get poor performance.  If you
wait too long before changing, you will also get poor performance.  CAM attempts
to control this with two build parameters: <emphasis>CHANGER_MIN_BUSY_SECONDS</emphasis>
(default 2 seconds) is the guaranteed minimum time that a changer will wait
before changing the medium.  <emphasis>CHANGER_MAX_BUSY_SECONDS</emphasis> (default 10
seconds) is the maximum time that a changer will wait before changing the medium
if a request is outstanding for another logical unit.  Note that these values
are far too low for tape units, where they should be set to between 100 and 500
seconds.
</para>

<para><indexterm><primary>sysctl(8)</primary></indexterm>
You don't need to rebuild the kernel to set these values: instead, you can
change them with <emphasis>sysctl(8)</emphasis> by setting the variables
<emphasis>kern.cam.cd.changer.min_busy_seconds</emphasis> and
<emphasis>kern.cam.cd.changer.max_busy_seconds</emphasis>:
</para>
<programlisting>
# <command>sysctl kern.cam.cd.changer</command>
kern.cam.cd.changer.min_busy_seconds: 2
kern.cam.cd.changer.max_busy_seconds: 10
# <command>sysctl -w kern.cam.cd.changer.min_busy_seconds=6</command>
kern.cam.cd.changer.min_busy_seconds: 2 -&gt; 6
</programlisting>

<para></para>
</sect3>
<sect3>
<title>TUNE_1542</title>

<para><indexterm><primary>TUNE_1542</primary></indexterm>
<anchor id="CFBSD-config-TUNE_1542"/>
<emphasis>TUNE_1542</emphasis> enables the automatic ISA bus speed selection for the Adaptec
1542 boards.  It doesn't work for all boards, so use it with caution.
</para>
</sect3>
</sect2>
<sect2>
<title>SCSI host adapters</title>

<para>FreeBSD <xref linkend="CFBSD-Fver"/> supports the following SCSI host adapters:
<indexterm><primary>Adaptec</primary><secondary>154X</secondary></indexterm>
<indexterm><primary>Ultrastore</primary><secondary>14F</secondary></indexterm>
<indexterm><primary>Ultrastore</primary><secondary>34F</secondary></indexterm>
<indexterm><primary>Adaptec</primary><secondary>152X</secondary></indexterm>
<indexterm><primary>ProAudio</primary><secondary>Spectrum</secondary></indexterm>
<indexterm><primary>Seagate</primary><secondary>ST01</secondary></indexterm>
<indexterm><primary>Seagate</primary><secondary>ST02</secondary></indexterm>
<indexterm><primary>WD7000</primary></indexterm>
<indexterm><primary>Adaptec</primary><secondary>274X</secondary></indexterm>
<indexterm><primary>Adaptec</primary><secondary>174X</secondary></indexterm>
box,center,tab(#) ;
lfCWp9 | lw72 .
\s10Device#Description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-adv0"/>
<row><entry>
</entry></row>
<indexterm><primary>adv0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>adv0</secondary></indexterm>
<row><entry> adv</entry><entry> All Narrow SCSI bus AdvanSys controllers.
</entry></row>
<anchor id="CFBSD-config-adw0"/>
<row><entry>
</entry></row>
<indexterm><primary>adw0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>adw0</secondary></indexterm>
<row><entry> adw</entry><entry> Second Generation AdvanSys controllers including the ADV940UW.
</entry></row>
<anchor id="CFBSD-config-aha0"/>
<row><entry>
</entry></row>
<indexterm><primary>aha0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>aha0</secondary></indexterm>
<row><entry> aha</entry><entry> Adaptec 154x
</entry></row>
<anchor id="CFBSD-config-ahb0"/>
<row><entry>
</entry></row>
<indexterm><primary>ahb0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ahb0</secondary></indexterm>
<row><entry> ahb</entry><entry>Adaptec 174X adapter.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ahc0"/>
<row><entry>
</entry></row>
<indexterm><primary>ahc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ahc0</secondary></indexterm>
<row><entry> ahc</entry><entry> Adaptec 274x/284x/294x, 29/3940(U)(W) and motherboard based AIC7870/AIC7880 adapters.
</entry></row>
<anchor id="CFBSD-config-bt0"/>
<row><entry>
</entry></row>
<indexterm><primary>bt0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>bt0</secondary></indexterm>
<row><entry> bt</entry><entry> Most Buslogic controllers
</entry></row>
<anchor id="CFBSD-config-isp0"/>
<row><entry>
</entry></row>
<indexterm><primary>isp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>isp0</secondary></indexterm>
<row><entry> isp</entry><entry> Qlogic ISP 1020, 1040 and 1040B PCI SCSI host adapters, as well as the Qlogic ISP 2100 FC/AL Host Adapter.
</entry></row>
<anchor id="CFBSD-config-ncr0"/>
<row><entry>
</entry></row>
<indexterm><primary>ncr0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ncr0</secondary></indexterm>
<row><entry> ncr</entry><entry> NCR 53C810 and 53C825 self-contained SCSI host adapters.
</entry></row>
</tbody></tgroup></table>
For example, to configure an Adaptec 2940 host adapter, you might enter the
following line in the configuration file:
</para>
<programlisting>
controller ahc0
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Virtual disks</title>

<para></para>
<programlisting>
<anchor id="CFBSD-config-ccd"/>
<indexterm><primary>Concatenated</primary><secondary>disk driver</secondary></indexterm>
pseudo-device	ccd	4	<emphasis>Concatenated disk driver</emphasis>
<anchor id="CFBSD-config-vinum"/>
<indexterm><primary>Vinum</primary><secondary>volume manager</secondary></indexterm>
pseudo-device	vinum		<emphasis>Vinum volume manager</emphasis>
<anchor id="CFBSD-config-VINUMDEBUG"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>VINUMDEBUG</primary><secondary>config option</secondary></indexterm>
options 	VINUMDEBUG		<emphasis>enable Vinum debugging hooks</emphasis>
</programlisting>

<para>FreeBSD supplies two kinds of virtual disks:
</para>
<itemizedlist>
<listitem>

<para><emphasis>ccd</emphasis> is the old <emphasis>Concatenated disk</emphasis> driver, which provides
concatenation, mirroring and striping.
</para>
</listitem>
<listitem>

<para><emphasis>Vinum</emphasis> is a new volume manager with greatly increased functionality.  See
page <xref linkend="CFBSD-vinum"/> for more details.
</para>

<para>The <emphasis>vinum</emphasis> pseudo-device is included for completeness' sake.  You should
use the <emphasis>kld</emphasis> instead.
</para>

<para>Note that the <emphasis>VINUMDEBUG</emphasis> option must match the <emphasis>CFLAGS</emphasis>
specification in <emphasis>/usr/src/sbin/vinum/Makefile</emphasis>.  If this file defines
<emphasis>VINUMDEBUG</emphasis>, your kernel must also define it.  If this file does not
define <emphasis>VINUMDEBUG</emphasis>, your kernel must also not define it.  If you mix
these components, <emphasis>vinum(8)</emphasis> will not be able to control the kernel
module.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>DPT SmartRAID controllers</title>

<para><indexterm><primary>dpt</primary></indexterm>
The <emphasis>dpt</emphasis> driver provides support for DPT hardware RAID controllers (see
<emphasis>http://www.dpt.com/</emphasis> for more details).  The DPT controllers are commonly
re-licensed under other brand-names - some controllers by Olivetti, Dec, HP,
AT&amp;T, SNI, AST, Alphatronic, NEC and Compaq are actually DPT controllers.
<anchor id="CFBSD-config-dpt0"/>
</para>
<programlisting>
controller      dpt0

<anchor id="CFBSD-config-DPT_VERIFY_HINTR"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_VERIFY_HINTR</primary><secondary>config option</secondary></indexterm>
options DPT_VERIFY_HINTR
<anchor id="CFBSD-config-DPT_RESTRICTED_FREELIST"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_RESTRICTED_FREELIST</primary><secondary>config option</secondary></indexterm>
options DPT_RESTRICTED_FREELIST
<anchor id="CFBSD-config-DPT_FREELIST_IS_STACK"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_FREELIST_IS_STACK</primary><secondary>config option</secondary></indexterm>
options DPT_FREELIST_IS_STACK
<anchor id="CFBSD-config-DPT_TIMEOUT_FACTOR"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_TIMEOUT_FACTOR</primary><secondary>config option</secondary></indexterm>
options DPT_TIMEOUT_FACTOR=4
<anchor id="CFBSD-config-DPT_INTR_DELAY"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_INTR_DELAY</primary><secondary>config option</secondary></indexterm>
options	DPT_INTR_DELAY=200      # Some motherboards need that
<anchor id="CFBSD-config-DPT_LOST_IRQ"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_LOST_IRQ</primary><secondary>config option</secondary></indexterm>
options DPT_LOST_IRQ
<anchor id="CFBSD-config-DPT_RESET_HBA"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DPT_RESET_HBA</primary><secondary>config option</secondary></indexterm>
options DPT_RESET_HBA
</programlisting>

<para></para>
<sect3>
<title>DPT_VERIFY_HINTR</title>

<para><emphasis>DPT_VERIFY_HINTR</emphasis> performs some strict hardware interrupts testing.  Use
this only if you suspect PCI bus corruption problems
</para>
</sect3>
<sect3>
<title>DPT_RESTRICTED_FREELIST</title>

<para><emphasis>DPT_RESTRICTED_FREELIST</emphasis> restricts the number of queue slots to exactly
what the DPT can hold at one time.  This growth will NOT shrink. Normally, the
freelist used by the DPT for queue will grow to accomodate increased use.
</para>
</sect3>
<sect3>
<title>DPT_FREELIST_IS_STACK</title>

<para>Enable <emphasis>DPT_FREELIST_IS_STACK</emphasis> for optimal CPU cache utilization.
Otherwise, the transaction queue is a LIFO.  This option does not appear to make
any difference to performance.
</para>
</sect3>
<sect3>
<title>DPT_TIMEOUT_FACTOR</title>

<para>Use <emphasis>DPT_TIMEOUT_FACTOR</emphasis> to compute the excessive amount of time to wait
when timing out with <emphasis>DPT_HANDLE_TIMEOUTS</emphasis>.
</para>
</sect3>
<sect3>
<title>DPT_LOST_IRQ</title>

<para>Enable <emphasis>DPT_LOST_IRQ</emphasis> to try, once per second, to catch any interrupt that
got lost.  This option seems to help in some cases where the DPT firmware
appears not to be compatible with the motherboard.
</para>
</sect3>
<sect3>
<title>DPT_RESET_HBA</title>

<para>Use <emphasis>DPT_RESET_HBA</emphasis> to make the <emphasis>reset</emphasis> command actually reset the
controller instead of fudging it.  Only enable this if you are 100% certain you
need it.
</para>
</sect3>
<sect3>
<title>DPT_SHUTDOWN_SLEEP</title>

<para>Set <emphasis>DPT_SHUTDOWN_SLEEP</emphasis> to reset the controller if a request take more
than this number of seconds.  Do NOT enable this unless you are really certain
you need it.  Don't set this value to less than 300s (5 minutes).
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>File system options</title>

<para><indexterm><primary>file</primary><secondary>system options</secondary></indexterm>
<indexterm><primary>loadable</primary><secondary>kernel module</secondary></indexterm>
<indexterm><primary>/lkm</primary></indexterm>
<anchor id="CFBSD-filesys-options"/>
These options specify which file systems the kernel will support.  You must
include at least support for the device you boot from.
</para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>FFS</primary><secondary>config option</secondary></indexterm>
options         FFS                     # Berkeley Fast Filesystem
<anchor id="CFBSD-config-FFS_ROOT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>FFS_ROOT</primary><secondary>config option</secondary></indexterm>
options         FFS_ROOT                # FFS usable as root device [keep this!]
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NFS</primary><secondary>config option</secondary></indexterm>
options         NFS                     # Network Filesystem
<anchor id="CFBSD-config-NFS_ROOT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NFS_ROOT</primary><secondary>config option</secondary></indexterm>
options         NFS_ROOT                # NFS usable as root device, "NFS" req'ed
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MFS</primary><secondary>config option</secondary></indexterm>
options         MFS                     # Memory Filesystem
<anchor id="CFBSD-config-MFS_ROOT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MFS_ROOT</primary><secondary>config option</secondary></indexterm>
options         MFS_ROOT                # MFS usable as root device, "MFS" req'ed
<anchor id="CFBSD-config-MFS_ROOT_SIZE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MFS_ROOT_SIZE</primary><secondary>config option</secondary></indexterm>
options         MFS_ROOT_SIZE=10
<anchor id="CFBSD-config-EXPORTMFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>EXPORTMFS</primary><secondary>config option</secondary></indexterm>
options         EXPORTMFS
</programlisting>

<para></para>
<sect2>
<sect3>
<title>FFS</title>

<para><indexterm><primary>ffs</primary></indexterm>
<anchor id="CFBSD-config-FFS"/>
<indexterm><primary>Fast</primary><secondary>File System</secondary></indexterm>
<indexterm><primary>ufs</primary></indexterm>
<indexterm><primary>UNIX</primary><secondary>File System</secondary></indexterm>
<emphasis>FFS</emphasis> (<emphasis>Fast File System</emphasis>) is the original name of the <emphasis>UNIX File
System</emphasis> or <emphasis>ufs</emphasis>.  Use it (and <emphasis>FFS_ROOT</emphasis>) if you're running a
normal system with the root file system on local disk.
</para>
</sect3>
<sect3>
<title>NFS</title>

<para><indexterm><primary>NFS</primary></indexterm>
<anchor id="CFBSD-config-NFS"/>
Network File system.  You can comment this out if you don't plan to mount
partitions from a UNIX file server over Ethernet.
</para>
</sect3>
<sect3>
<title>MFS</title>

<para><indexterm><primary>MFS</primary></indexterm>
<anchor id="CFBSD-config-MFS"/>
<indexterm><primary>MFS</primary></indexterm>
<indexterm><primary>file</primary><secondary>system</secondary></indexterm>
<indexterm><primary>memory-mapped</primary><secondary>file system</secondary></indexterm>
<emphasis>MFS</emphasis> is the <emphasis>Memory-mapped file system</emphasis>, basically a RAM disk for fast
storage of temporary files.  It's useful if you have a lot of swap space that
you want to take advantage of, or if your system doesn't have any disks at all.
A perfect use of an MFS partition is on the <emphasis>/tmp</emphasis> directory, since many
programs store temporary data here.  To mount an MFS RAM disk on <emphasis>/tmp</emphasis>, add
the following line to <emphasis>/etc/fstab</emphasis> and then reboot or type <command>mount
/tmp</command>:
</para>
<programlisting>
/dev/wd1s2b   /tmp mfs rw 0 0
</programlisting>

<para>Replace the <emphasis>/dev/wd1s2b</emphasis> with the name of your swap partition, which will
be listed in your <emphasis>/etc/fstab</emphasis> as follows:
</para>
<programlisting>
/dev/wd1s2b none swap sw 0 0
</programlisting>

<para><emphasis>MFS_ROOT_SIZE</emphasis> specifies the size of an MFS root filesystem in kilobytes.
<emphasis>EXPORT_NFS</emphasis> Allows MFS filesystems to be exported via NFS.
</para>

<para><indexterm><primary>kld</primary></indexterm>
<indexterm><primary>/modules</primary></indexterm>
<indexterm><primary>PORTAL</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>UMAP</primary><secondary>file system</secondary></indexterm>
<indexterm><primary>UNION</primary><secondary>file system</secondary></indexterm>
You can include other commonly-used file systems in the kernel, but many are
also available as <emphasis>kld</emphasis>s.  If this is the case, you can comment out
support for them, and they will be dynamically loaded from the <emphasis>kld</emphasis>
directory <emphasis>/modules</emphasis> the first time you mount a partition of that type.
Here's a list of the currently defined file systems.  Many are experimental, so
we won't talk about them all.  In particular, <emphasis>NULL</emphasis>, <emphasis>PORTAL</emphasis>,
<emphasis>UMAP</emphasis> and <emphasis>UNION</emphasis> filesystems are known to be buggy, and will panic
your system if you attempt to do anything with them.  They are included in
<emphasis>LINT</emphasis> as an incentive for some enterprising soul to sit down and fix
them.
</para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CD9660</primary><secondary>config option</secondary></indexterm>
options         "CD9660"                # ISO 9660 Filesystem
<anchor id="CFBSD-config-CD9660_ROOT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CD9660_ROOT</primary><secondary>config option</secondary></indexterm>
options         "CD9660_ROOT"           # CD-ROM usable as root. "CD9660" req'ed
<anchor id="CFBSD-config-NQNFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NQNFS</primary><secondary>config option</secondary></indexterm>
options         NQNFS                   # Enable NQNFS lease checking
<anchor id="CFBSD-config-FDESC"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>FDESC</primary><secondary>config option</secondary></indexterm>
options         FDESC                   # File descriptor file system
<anchor id="CFBSD-config-KERNFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>KERNFS</primary><secondary>config option</secondary></indexterm>
options         KERNFS                  # Kernel file system
<anchor id="CFBSD-config-LFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>LFS</primary><secondary>config option</secondary></indexterm>
options         LFS                     # Log file system
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MFS</primary><secondary>config option</secondary></indexterm>
options         MFS                     # Memory File System
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MSDOSFS</primary><secondary>config option</secondary></indexterm>
options         MSDOSFS                 # MS DOS File System
<anchor id="CFBSD-config-NTFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NTFS</primary><secondary>config option</secondary></indexterm>
options		NTFS				    # NT File System
<anchor id="CFBSD-config-NULLFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NULLFS</primary><secondary>config option</secondary></indexterm>
options         NULLFS                  # NULL file system
<anchor id="CFBSD-config-PORTAL"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PORTAL</primary><secondary>config option</secondary></indexterm>
options         PORTAL                  # Portal file system
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PROCFS</primary><secondary>config option</secondary></indexterm>
options         PROCFS                  # Process file system
<anchor id="CFBSD-config-UMAPFS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>UMAPFS</primary><secondary>config option</secondary></indexterm>
options         UMAPFS                  # UID map file system
<anchor id="CFBSD-config-UNION"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>UNION</primary><secondary>config option</secondary></indexterm>
options         UNION                   # Union file system
<anchor id="CFBSD-config-CODA"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>CODA</primary><secondary>config option</secondary></indexterm>
options         CODA                    # CODA file system
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>SUIDDIR</primary><secondary>config option</secondary></indexterm>
options         SUIDDIR
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>QUOTA</primary><secondary>config option</secondary></indexterm>
options         QUOTA
</programlisting>

<para></para>
</sect3>
<sect3>
<title>MSDOSFS</title>

<para><indexterm><primary>MSDOSFS</primary></indexterm>
<anchor id="CFBSD-config-MSDOSFS"/>
<indexterm><primary>command</primary><secondary>mtools</secondary></indexterm>
<indexterm><primary>mtools</primary><secondary>command</secondary></indexterm>
MS-DOS File system.  You only need this if you plan to mount a MS-DOS formatted
hard drive partition at boot time&mdash;otherwise you can safely comment this out.
It will be automatically loaded the first time you mount a MS-DOS partition, as
described above.  Also, the <emphasis>mtools</emphasis> package (in the ports collection)
allows you to access MS-DOS floppies without having to mount and unmount them,
and does not require MSDOSFS.
</para>
</sect3>
<sect3>
<title>CD9660</title>

<para><indexterm><primary>CD9660</primary></indexterm>
<anchor id="CFBSD-config-CD9660"/>
ISO 9660 file system for CD-ROMs.  Comment it out if you do not have a CD-ROM
drive or only mount data CD's occasionally (since it will be dynamically loaded
the first time you mount a data CD).  Audio CD's do not need this file system.
</para>
</sect3>
<sect3>
<title>PROCFS</title>

<para><indexterm><primary>PROCFS</primary></indexterm>
<anchor id="CFBSD-config-PROCFS"/>
<indexterm><primary>/proc</primary></indexterm>
<indexterm><primary>ps</primary></indexterm>
Process file system.  This is a pseudo file system mounted on <emphasis>/proc</emphasis>, which
gives access to various information relating to currently active processes.  It
allows programs like <emphasis>ps</emphasis> to give you more information on what processes are
running.  Consider it mandatory: <emphasis>ps</emphasis> and some other programs won't work
without it.
</para>
</sect3>
<sect3>
<title>NSWAPDEV</title>

<para><indexterm><primary>NSWAPDEV</primary></indexterm>
<anchor id="CFBSD-config-NSWAPDEV"/>
<indexterm><primary>NSWAPDEV</primary></indexterm>
<emphasis>NSWAPDEV</emphasis> defines the number of swap devices that the kernel will support.
Typical systems only have one swap device, and the default of 20 is so far
beyond anything you're likely to need that there's no need to change it.
</para>
</sect3>
<sect3>
<title>SUIDDIR</title>

<para><anchor id="CFBSD-config-SUIDDIR"/>
<indexterm><primary>chmod(1)</primary></indexterm>
If you are running a machine as a fileserver for PC and MAC users using SAMBA or
Netatalk, consider setting this option and keeping user directories on a file
system that is mounted with the <emphasis>suiddir</emphasis> option.  This gives new files
the same ownership as the directory (similiar to group).  It's a security hole
if you let these users run programs, so confine it to file servers, but it'll
save you lots of headaches in those cases.  Directories owned by <emphasis>root</emphasis>
are excepted, and the execution permission bits are cleared.  The suid bit must
be set on the directory as well; see <emphasis>chmod(1)</emphasis>.  PC owners can't see or set
ownerships so they keep getting their toes trodden on.  This saves you all the
support calls as the filesystem it's used on will act as they expect: ``It's my
directory, so it must be my file''.
</para>
</sect3>
<sect3>
<title>QUOTA</title>

<para><indexterm><primary>QUOTA</primary></indexterm>
<anchor id="CFBSD-config-QUOTA"/>
<indexterm><primary>/home</primary></indexterm>
<indexterm><primary>quota</primary></indexterm>
Enable disk quotas.  If you have a public access system, and do not want users
to be able to overflow the <emphasis>/home</emphasis> partition, you can establish disk quotas
for each user.  This code is a little buggy, so do not enable it unless you have
to.  View the manual page for <emphasis>quota</emphasis> to learn more about disk quotas.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Networking</title>

<para><indexterm><primary>networking</primary></indexterm>
<indexterm><primary>kernel</primary><secondary>LINT</secondary></indexterm>
The Internet grew up with BSD, so it's not surprising that FreeBSD places a
<emphasis>big</emphasis> emphasis on networking.  Even if you do not have a network board, you
still need minimal network support: many programs require at least loopback
networking (making network connections within your PC).  Here's the complete
network configuration section&mdash;we'll look at the more important entries below.
Some of the support is seriously buggy: to quote <emphasis>LINT</emphasis>: <emphasis>Source code for
the NS (Xerox Network Service) is provided for amusement value.</emphasis>
</para>
<programlisting>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>INET</primary><secondary>config option</secondary></indexterm>
options         INET					# InterNETworking

<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>TCP_COMPAT_42</primary><secondary>config option</secondary></indexterm>
options		"TCP_COMPAT_42"			# emulate 4.2BSD TCP bugs
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>MROUTING</primary><secondary>config option</secondary></indexterm>
options		MROUTING				# Multicast routing
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFIREWALL</primary><secondary>config option</secondary></indexterm>
options         IPFIREWALL				# firewall
<anchor id="CFBSD-config-IPFIREWALL_VERBOSE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFIREWALL_VERBOSE</primary><secondary>config option</secondary></indexterm>
options         IPFIREWALL_VERBOSE		# print information about
								# dropped packets
<anchor id="CFBSD-config-IPFIREWALL_FORWARD"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFIREWALL_FORWARD</primary><secondary>config option</secondary></indexterm>
options         IPFIREWALL_FORWARD		#enable transparent proxy support
<anchor id="CFBSD-config-IPFIREWALL_VERBOSE_LIMIT"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFIREWALL_VERBOSE_LIMIT</primary><secondary>config option</secondary></indexterm>
options		"IPFIREWALL_VERBOSE_LIMIT=100" #limit verbosity
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFIREWALL_DEFAULT_TO_ACCEPT</primary><secondary>config option</secondary></indexterm>
options		IPFIREWALL_DEFAULT_TO_ACCEPT #allow everything by default
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPDIVERT</primary><secondary>config option</secondary></indexterm>
options		IPDIVERT				#divert sockets
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFILTER</primary><secondary>config option</secondary></indexterm>
options		IPFILTER				#kernel ipfilter support
<anchor id="CFBSD-config-IPFILTER_LOG"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPFILTER_LOG</primary><secondary>config option</secondary></indexterm>
options		IPFILTER_LOG			#ipfilter logging
# options	IPFILTER_LKM				#kernel support for ip_fil.o LKM
<anchor id="CFBSD-config-ICMP_BANDLIM"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ICMP_BANDLIM</primary><secondary>config option</secondary></indexterm>
options         "ICMP_BANDLIM"
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>DUMMYNET</primary><secondary>config option</secondary></indexterm>
options	DUMMYNET
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>BRIDGE</primary><secondary>config option</secondary></indexterm>
options	BRIDGE
<anchor id="CFBSD-config-NETATALK"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>NETATALK</primary><secondary>config option</secondary></indexterm>
options		NETATALK				#Appletalk communications protocols
</programlisting>

<para></para>
<sect2>
<sect3>
<title>TCP_COMPAT_42</title>

<para><anchor id="CFBSD-config-TCP_COMPAT_42"/>
<emphasis>TCP_COMPAT_42</emphasis> causes the TCP code to emulate certain bugs present in
4.2BSD.  Don't use this unless you have a 4.2BSD machine and TCP connections
fail.
</para>
</sect3>
<sect3>
<title>MROUTING</title>

<para><anchor id="CFBSD-config-MROUTING"/>
<emphasis>MROUTING</emphasis> enables the kernel multicast packet forwarder, which works with
mrouted(8).
</para>
</sect3>
<sect3>
<title>IPFIREWALL</title>

<para><anchor id="CFBSD-config-IPFIREWALL"/>
<indexterm><primary>ipfw</primary></indexterm>
<emphasis>IPFIREWALL</emphasis> enables support for IP firewall construction, in conjunction
with the <emphasis>ipfw</emphasis> program.  <emphasis>IPFIREWALL_VERBOSE</emphasis> sends logged packets
to the system logger.  <emphasis>IPFIREWALL_VERBOSE_LIMIT</emphasis> limits the number of
times a matching entry can be logged.
</para>

<para><indexterm><primary>etc/rc.firewall</primary></indexterm>
<emphasis>Warning</emphasis>: <emphasis>IPFIREWALL</emphasis> defaults to a policy of <emphasis>deny ip from
any to any</emphasis>.  If you do not add other rules during startup to allow access,
<emphasis>You</emphasis> will lock yourself out.  It's a good idea to set
<emphasis>firewall=open</emphasis> in <emphasis>/etc/rc.conf</emphasis> when you first enable this feature
Then you can refine the firewall rules in /<emphasis>etc/rc.firewall</emphasis> after you've
verified that the new kernel feature works properly.
</para>
</sect3>
<sect3>
<title>IPFIREWALL_DEFAULT_TO_ACCEPT</title>

<para><anchor id="CFBSD-config-IPFIREWALL_DEFAULT_TO_ACCEPT"/>
<indexterm><primary>/sbin/ipfw</primary></indexterm>
<emphasis>IPFIREWALL_DEFAULT_TO_ACCEPT</emphasis> causes the default rule (at boot) to allow
everything.  Use with care, if a cracker can crash your firewall machine, they
can get to your protected machines.  However, if you are using it as an
as-needed filter for specific problems as they arise, then this may be for you.
Changing the default to <emphasis>allow</emphasis> means that you won't get stuck if the
kernel and <emphasis>/sbin/ipfw</emphasis> binary get out of sync.
</para>
</sect3>
<sect3>
<title>IPDIVERT</title>

<para><anchor id="CFBSD-config-IPDIVERT"/>
<emphasis>IPDIVERT</emphasis> enables the divert IP sockets, used by <emphasis>ipfw divert</emphasis>.
</para>
</sect3>
<sect3>
<title>IPFILTER</title>

<para><anchor id="CFBSD-config-IPFILTER"/>
<emphasis>IPFILTER</emphasis> enables Darren Reed's ipfilter package.
</para>
</sect3>
<sect3>
<title>IPFILTER_LOG</title>

<para><emphasis>IPFILTER_LOG</emphasis> enables ipfilter's logging.
</para>
</sect3>
<sect3>
<title>IPFILTER_LKM</title>

<para><emphasis>IPFILTER_LKM</emphasis> enables LKM support for an ipfilter module.
</para>
</sect3>
<sect3>
<title>ICMP_BANDLIM</title>

<para><emphasis>ICMP_BANDLIM</emphasis> enables icmp error response bandwidth limiting.  You
typically want this option as it will help protect the machine from
denial-of-service packet attacks.
</para>
</sect3>
<sect3>
<title>DUMMYNET</title>

<para><anchor id="CFBSD-config-DUMMYNET"/>
<indexterm><primary>dummynet(4)</primary></indexterm>
<emphasis>DUMMYNET</emphasis> enables the <emphasis>dummynet</emphasis> bandwidth limiter. You need
<emphasis>IPFIREWALL</emphasis> as well. See the <emphasis>dummynet(4)</emphasis> manpage for more
information.
</para>
</sect3>
<sect3>
<title>BRIDGE</title>

<para><anchor id="CFBSD-config-BRIDGE"/>
<emphasis>BRIDGE</emphasis> enables bridging between ethernet cards.  You can use
<emphasis>IPFIREWALL</emphasis> and <emphasis>DUMMYNET</emphasis> together with bridging.
</para>
</sect3>
<sect3>
<title>INET</title>

<para><indexterm><primary>INET</primary></indexterm>
<anchor id="CFBSD-config-INET"/>
Define networking support.  You don't really have any choice: FreeBSD is a
network operating system, and this entry must be present.
</para>
</sect3>
<sect3>
<title>IPFIREWALL</title>

<para><emphasis>IPFIREWALL</emphasis> and friends implement the IP firewall packet filter.  See
page <xref linkend="CFBSD-config-IPFIREWALL"/> for more information.
</para>
</sect3>
</sect2>
<sect2>
<title>Network interfaces</title>

<para><indexterm><primary>network</primary><secondary>interfaces</secondary></indexterm>
<anchor id="CFBSD-config-network-boards"/>
The next lines enable support for network boards.  If you do not have a network
board, you can comment out all of these lines.  Otherwise, you'll want to leave
in support for your particular board:
<table frame='all'><title>Supported network interfaces</title>
box,center,tab(#) ;
lfCWp9 | lw70 .
\s10Interface#Description
\s10name
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ar0"/>
<row><entry>
</entry></row>
<indexterm><primary>ar0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ar0</secondary></indexterm>
<row><entry> ar</entry><entry> Arnet SYNC/570i HDLC sync 2/4 port V.35/X.21 serial driver (requires sppp)
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ax0"/>
<row><entry>
</entry></row>
<indexterm><primary>ax0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ax0</secondary></indexterm>
<row><entry> ax</entry><entry> PCI fast Ethernet adapters based on the ASIX Electronics AX88140A chip, including the Alfa Inc. GFC2204.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-cs0"/>
<row><entry>
</entry></row>
<indexterm><primary>cs0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cs0</secondary></indexterm>
<row><entry> cs</entry><entry> IBM Etherjet and other Crystal Semi CS89x0-based adapters
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-cx0"/>
<row><entry>
</entry></row>
<indexterm><primary>cx0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cx0</secondary></indexterm>
<row><entry> cx</entry><entry> Cronyx/Sigma multiport sync/async (with Cisco or PPP framing).
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-de0"/>
<row><entry>
</entry></row>
<indexterm><primary>de0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>de0</secondary></indexterm>
<row><entry> de</entry><entry> Digital Equipment DC21040 self-contained Ethernet adapter.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ed0"/>
<row><entry>
</entry></row>
<indexterm><primary>ed0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ed0</secondary></indexterm>
<row><entry> ed</entry><entry> Western Digital and SMC 80xx; Novell NE1000 and NE2000; 3Com 3C503
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-el0"/>
<row><entry>
</entry></row>
<indexterm><primary>el0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>el0</secondary></indexterm>
<row><entry> el</entry><entry> 3Com 3C501
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-en0"/>
<row><entry>
</entry></row>
<indexterm><primary>en0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>en0</secondary></indexterm>
<row><entry> en</entry><entry> Efficient Networks (ENI) ENI-155 PCI midway ATM boards, and the Adaptec 155Mbps PCI ATM boards (ANA-59x0).
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ep0"/>
<row><entry>
</entry></row>
<indexterm><primary>ep0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ep0</secondary></indexterm>
<row><entry> ep</entry><entry> 3Com 3C509 (buggy)
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ex0"/>
<row><entry>
</entry></row>
<indexterm><primary>ex0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ex0</secondary></indexterm>
<row><entry> ex</entry><entry> Intel EtherExpress Pro/10 and other i82595-based adapters
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-fe0"/>
<row><entry>
</entry></row>
<indexterm><primary>fe0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fe0</secondary></indexterm>
<row><entry> fe</entry><entry> Fujitsu MB86960A/MB86965A Ethernet
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-fea0"/>
<row><entry>
</entry></row>
<indexterm><primary>fea0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fea0</secondary></indexterm>
<row><entry> fea</entry><entry> DEC DEFEA EISA FDDI adapter.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-fpa0"/>
<row><entry>
</entry></row>
<indexterm><primary>fpa0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fpa0</secondary></indexterm>
<row><entry> fpa</entry><entry> Digital DEFPA PCI FDDI adapter.  <emphasis>pseudo-device fddi</emphasis> is also needed.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-fxp0"/>
<row><entry>
</entry></row>
<indexterm><primary>fxp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>fxp0</secondary></indexterm>
<row><entry> fxp</entry><entry> Intel EtherExpress Pro/100B PCI Fast Ethernet adapters.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ie0"/>
<row><entry>
</entry></row>
<indexterm><primary>ie0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ie0</secondary></indexterm>
<row><entry> ie</entry><entry> AT&amp;T StarLAN 10 and EN100; 3Com 3C507; unknown NI5210; Intel EtherExpress
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-le0"/>
<row><entry>
</entry></row>
<indexterm><primary>le0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>le0</secondary></indexterm>
<row><entry> le</entry><entry> Digital Equipment EtherWorks 2 and EtherWorks 3 (DEPCA, DE100, DE101, DE200, DE201, DE202, DE203, DE204, DE205, DE422)
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-lnc0"/>
<row><entry>
</entry></row>
<indexterm><primary>lnc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>lnc0</secondary></indexterm>
<row><entry> lnc</entry><entry> Lance/PCnet boards (Isolan, Novell NE2100, NE32-VL, AMD Am7990 &amp; Am79C960)
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-mx0"/>
<row><entry>
</entry></row>
<indexterm><primary>mx0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mx0</secondary></indexterm>
<row><entry> mx</entry><entry> Fast Ethernet adapters based on the Macronix 98713, 987615 ans 98725 series chips.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-pn0"/>
<row><entry>
</entry></row>
<indexterm><primary>pn0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>pn0</secondary></indexterm>
<row><entry> pn</entry><entry> Fast Ethernet adapters based on the Lite-On 82c168 and 82c169 PNIC chips, including the LinkSys LNE100TX, the NetGear FA310TX rev. D1 and the Matrox FastNIC 10/100.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-rdp0"/>
<row><entry>
</entry></row>
<indexterm><primary>rdp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rdp0</secondary></indexterm>
<row><entry> rdp</entry><entry> RealTek RTL 8002-based pocket Ethernet adapters
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-rl0"/>
<row><entry>
</entry></row>
<indexterm><primary>rl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rl0</secondary></indexterm>
<row><entry> rl</entry><entry> PCI fast Ethernet adapters based on the RealTek 8129/8139 chipset. Note that the RealTek driver defaults to useing programmed I/O to do register accesses because memory mapped mode seems to cause severe lockups on SMP hardware. This driver also supports the Accton EN1207D `Cheetah' adapter, which uses a chip called the MPX 5030/5038, which is either a RealTek in disguise or a RealTek workalike.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-sr0"/>
<row><entry>
</entry></row>
<indexterm><primary>sr0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sr0</secondary></indexterm>
<row><entry> sr</entry><entry> RISCom/N2 hdlc sync 1/2 port V.35/X.21 serial driver (requires sppp)
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ti0"/>
<row><entry>
</entry></row>
<indexterm><primary>ti0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ti0</secondary></indexterm>
<row><entry> ti</entry><entry> PCI gigabit Ethernet NICs based on the Alteon Networks Tigon 1 and Tigon 2 chipsets. This includes the Alteon AceNIC, the 3Com 3c985, the Netgear GA620 and others.  Note that you will probably want to bump up NBMCLUSTERS a lot to use this driver.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-tl0"/>
<row><entry>
</entry></row>
<indexterm><primary>tl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>tl0</secondary></indexterm>
<row><entry> tl</entry><entry> the Texas Instruments TNETE100 series 'ThunderLAN' boards and integrated Ethernet controllers. This includes several Compaq Netelligent 10/100 boards and the built-in Ethernet controllers in several Compaq Prosignia, Proliant and Deskpro systems. It also supports several Olicom 10Mbps and 10/100 boards.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-tx0"/>
<row><entry>
</entry></row>
<indexterm><primary>tx0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>tx0</secondary></indexterm>
<row><entry> tx</entry><entry> SMC 9432TX boards.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-vr0"/>
<row><entry>
</entry></row>
<indexterm><primary>vr0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>vr0</secondary></indexterm>
<row><entry> vr</entry><entry> fast Ethernet adapters based on the VIA Technologies VT3043 `Rhine I' and VT86C100A `Rhine II' chips, including the D-Link DFE530TX.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-vx0"/>
<row><entry>
</entry></row>
<indexterm><primary>vx0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>vx0</secondary></indexterm>
<row><entry> vx</entry><entry> 3Com 3C590 and 3C595 early support
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-wb0"/>
<row><entry>
</entry></row>
<indexterm><primary>wb0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>wb0</secondary></indexterm>
<row><entry> wb</entry><entry> Fast Ethernet adapters based on the Winbond W89C840F chip.  This is not the same as the Winbond W89C940F, which is an NE2000 clone.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-wl0"/>
<row><entry>
</entry></row>
<indexterm><primary>wl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>wl0</secondary></indexterm>
<row><entry> wl</entry><entry> Lucent Wavelan (ISA board only).
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-xl0"/>
<row><entry>
</entry></row>
<indexterm><primary>xl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>xl0</secondary></indexterm>
<row><entry> xl</entry><entry> 3Com 3c900, 3c905 and 3c905B (Fast) Etherlink XL boards and integrated controllers. This includes the integrated 3c905B-TX chips in certain Dell Optiplex and Dell Precision desktop machines and the integrated 3c905-TX chips in Dell Latitude laptop docking stations.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-ze0"/>
<row><entry>
</entry></row>
<indexterm><primary>ze0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ze0</secondary></indexterm>
<row><entry> ze</entry><entry> IBM/National Semiconductor PCMCIA Ethernet controller.
</entry></row>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-zp0"/>
<row><entry>
</entry></row>
<indexterm><primary>zp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>zp0</secondary></indexterm>
<row><entry> zp</entry><entry> 3Com PCMCIA Etherlink III.  It does not require shared memory for send/receive operation, but it needs 'iomem' to read/write the attribute memory)
</entry></row>
</tbody></tgroup></table>
The entries include a number of other undocumented drivers.  The complete list
is:
</para>
<programlisting>
device ar0 at isa? port 0x300 net irq 10 iomem 0xd0000
device cs0 at isa? port 0x300 net irq ?
device cx0 at isa? port 0x240 net irq 15 drq 7
device ed0 at isa? port 0x280 net irq 5 iomem 0xd8000
device el0 at isa? port 0x300 net irq 9
device ep0 at isa? port 0x300 net irq 10
device ex0 at isa? port? net irq?
device fe0 at isa? port 0x300 net irq ?
device ie0 at isa? port 0x300 net irq 5 iomem 0xd0000
device ie1 at isa? port 0x360 net irq 7 iomem 0xd0000
device le0 at isa? port 0x300 net irq 5 iomem 0xd0000
device lnc0 at isa? port 0x280 net irq 10 drq 0
device rdp0 at isa? port 0x378 net irq 7 flags 2
device sr0 at isa? port 0x300 net irq 5 iomem 0xd0000
<anchor id="CFBSD-config-WLCACHE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>WLCACHE</primary><secondary>config option</secondary></indexterm>
options		WLCACHE		# enables the signal-strength cache
<anchor id="CFBSD-config-WLDEBUG"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>WLDEBUG</primary><secondary>config option</secondary></indexterm>
options		WLDEBUG		# enables verbose debugging output
device wl0 at isa? port 0x300 net irq ?
We can (bogusly) include both the dedicated PCCARD drivers and the generic
support when COMPILING_LINT.
device ze0 at isa? port 0x300 net irq 5 iomem 0xd8000
device zp0 at isa? port 0x300 net irq 10 iomem 0xd8000

</programlisting>

<para>For example, to configure a 3Com 3C509 interface, you might enter the following
line in the configuration file:
</para>
<programlisting>
device ep0 at isa? port 0x300 net irq 10
</programlisting>

<para>If you have more than one network board, don't change the sequence of the
entries in the configuration file: the kernel probes for the boards in this
sequence, and the probe routines can interfere with each other.
</para>
</sect2>
<sect2>
<title>Network pseudo-devices</title>

<para><anchor id="CFBSD-network-pseudos"/>
<indexterm><primary>pseudo-device</primary></indexterm>
In addition to real devices, FreeBSD defines a number of <emphasis>pseudo-devices</emphasis>
which behave to the user as if they were real devices, but which have no
hardware behind them.  The following pseudo-devices are related to networking;
we'll look at the rest on page <xref linkend="CFBSD-notwork-pseudos"/>.
</para>
<programlisting>
pseudo-device   pty     16		# Pseudo-ttys
pseudo-device	ether			# Generic Ethernet
<anchor id="CFBSD-config-fddi"/>
pseudo-device	fddi			# Generic FDDI
<anchor id="CFBSD-config-sppp"/>
pseudo-device	sppp			# Generic Synchronous PPP
pseudo-device	loop			# Network loopback device
pseudo-device	bpfilter 4		# Berkeley packet filter
<anchor id="CFBSD-config-disc"/>
pseudo-device	disc			# Discard device
pseudo-device	tun	1		# Tunnel driver (user process ppp(8))
pseudo-device	sl	2		# Serial Line IP
pseudo-device	ppp	2		# Point-to-point protocol
<anchor id="CFBSD-config-PPP_BSDCOMP"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PPP_BSDCOMP</primary><secondary>config option</secondary></indexterm>
options PPP_BSDCOMP			# PPP BSD-compress support
<anchor id="CFBSD-config-PPP_DEFLATE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PPP_DEFLATE</primary><secondary>config option</secondary></indexterm>
options PPP_DEFLATE			# PPP zlib/deflate/gzip support
<anchor id="CFBSD-config-PPP_FILTER"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>PPP_FILTER</primary><secondary>config option</secondary></indexterm>
options PPP_FILTER			# enable bpf filtering (needs bpfilter)
</programlisting>

<para></para>
<sect3>
<title>pseudo-device pty</title>

<para><indexterm><primary>pseudo-device</primary><secondary>pty</secondary></indexterm>
<anchor id="CFBSD-config-pty"/>
<indexterm><primary>pseudo-tty</primary></indexterm>
<indexterm><primary>command</primary><secondary>telnet</secondary></indexterm>
<indexterm><primary>telnet</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rlogin</secondary></indexterm>
<indexterm><primary>rlogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xterm</secondary></indexterm>
<indexterm><primary>xterm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>emacs</secondary></indexterm>
<indexterm><primary>emacs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<emphasis>pty</emphasis> is a <emphasis>pseudo-tty</emphasis> or simulated login port.  It's used by
incoming <emphasis>telnet</emphasis> and <emphasis>rlogin</emphasis> sessions, <emphasis>xterm</emphasis>, and some other
applications.  The <emphasis>number</emphasis> indicates the number of <emphasis>pty</emphasis>s to create.
If you need a total of more than the <emphasis>GENERIC</emphasis> default of 16 simultaneous
xterm windows and remote logins, you can increase this number accordingly, up to
a maximum of 64.
</para>
</sect3>
<sect3>
<title>pseudo-device ether</title>

<para><indexterm><primary>pseudo-device</primary><secondary>ether</secondary></indexterm>
<anchor id="CFBSD-config-ether"/>
<emphasis>ether</emphasis> provides generic Ethernet protocol code for Ethernet boards.
</para>
</sect3>
<sect3>
<title>pseudo-device loop</title>

<para><indexterm><primary>pseudo-device</primary><secondary>loop</secondary></indexterm>
<anchor id="CFBSD-config-loop"/>
<indexterm><primary>localhost</primary></indexterm>
<emphasis>loop</emphasis> is the generic loopback device for TCP/IP.  If you telnet or FTP to
<emphasis>localhost</emphasis> (<emphasis>127.0.0.1</emphasis>) it will come back at you through this
pseudo-device.  You must specify this option.
</para>
</sect3>
<sect3>
<title>pseudo-device bpfilter</title>

<para><indexterm><primary>pseudo-device</primary><secondary>bpfilter</secondary></indexterm>
<indexterm><primary>bpf</primary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>Packet Filter</secondary></indexterm>
<anchor id="CFBSD-config-bpfilter"/>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
<indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
The <emphasis>Berkeley Packet Filter</emphasis> (<emphasis>bpf</emphasis>) allows you to capture packets
crossing a network interface to disk or to examine them with the <emphasis>tcpdump</emphasis>
program.  Note that this capability represents a significant compromise of
network security.  The <emphasis>number</emphasis> after bpfilter is the number of concurrent
processes that can use the facility.  Not all network interfaces support bpf.
</para>

<para><indexterm><primary>/dev/bpf0</primary></indexterm>
<indexterm><primary>MAKEDEV</primary></indexterm>
In order to use the Berkeley Packet Filter, you must also create the device
nodes <emphasis>/dev/bpf0</emphasis> to <emphasis>/dev/bpf3</emphasis> (if you're using the default number
4).  Currently, <emphasis>MAKEDEV</emphasis> doesn't help much&mdash;you need to create each
device separately:
</para>
<programlisting>
# <command>cd /dev</command>
# <command>./MAKEDEV bpf0</command>
# <command>./MAKEDEV bpf1</command>
# <command>./MAKEDEV bpf2</command>
# <command>./MAKEDEV bpf3</command>
</programlisting>

<para></para>
</sect3>
<sect3>
<title>pseudo-device sl</title>

<para><indexterm><primary>pseudo-device</primary><secondary>sl</secondary></indexterm>
<anchor id="CFBSD-config-sl"/>
<emphasis>sl</emphasis> is for SLIP (Serial Line Internet Protocol) support.  This has been
almost entirely supplanted by PPP, which is easier to set up, better suited for
modem-to-modem connections, as well as more powerful.  The <emphasis>number</emphasis> after
<emphasis>sl</emphasis> specifies how many simultaneous SLIP sessions to support.  See page
<xref linkend="CFBSD-SLIP"/> for more information on setting up SLIP.
</para>
</sect3>
<sect3>
<title>pseudo-device tun</title>

<para><indexterm><primary>pseudo-device</primary><secondary>tun</secondary></indexterm>
<anchor id="CFBSD-config-tun"/>
<indexterm><primary>tunnel</primary><secondary>driver</secondary></indexterm>
<emphasis>tun</emphasis> is the <emphasis>tunnel driver</emphasis> used by the user-mode PPP software.  See
page <xref linkend="CFBSD-user-ppp"/> for more details.  The number after <emphasis>tun</emphasis> specifies the
number of simultaneous PPP sessions to support.
</para>
</sect3>
<sect3>
<title>pseudo-device ppp</title>

<para><indexterm><primary>pseudo-device</primary><secondary>ppp</secondary></indexterm>
<anchor id="CFBSD-config-ppp"/>
<emphasis>ppp</emphasis> is for kernel-mode PPP (Point-to-Point Protocol) support for dial-up
Internet connections.  See page <xref linkend="CFBSD-kernel-ppp"/> for a detailed description.
<emphasis>number</emphasis> specifies how many simultaneous PPP connections to support.
</para>
</sect3>
</sect2>
<sect2>
<title>ISDN support</title>

<para>Pn config-i4b
<indexterm><primary>Euro-ISDN</primary></indexterm>
<indexterm><primary>i4b</primary></indexterm>
<indexterm><primary>ISDN4BSD</primary></indexterm>
FreeBSD <xref linkend="CFBSD-Fver"/> includes the <emphasis>i4b</emphasis> package, which is short for
<emphasis>ISDN4BSD</emphasis>.  Currently it supports only the ETSI Basic Rate Interface
protocol specified in ITUT recommendations I.430, Q.921 and Q.931.  In Europe
this is sometimes known as as DSS1, and in Germany as ``Euro-ISDN''.
</para>

<para><emphasis>i4b</emphasis> allows you to make IP network connections by using either IP packets
sent in raw HDLC frames on the B channel or by using synchronous PPP.  For
telephony, <emphasis>i4b</emphasis> can answer incoming phone calls like an answering
machine.
</para>

<para></para>
<programlisting>
<indexterm><primary>Q.921</primary></indexterm>
<indexterm><primary>Q.931</primary></indexterm>
pseudo-device	"i4bq921"			<emphasis>Q.921 (layer 2): i4b passive board D channel handling</emphasis>
pseudo-device	"i4bq931"			<emphasis>Q.931 (layer 3): i4b passive board D channel handling</emphasis>
pseudo-device	"i4b"				<emphasis>layer 4: common passive and active board handling</emphasis>
pseudo-device   "i4btrc"		4	<emphasis>userland driver to do ISDN tracing (for passive boards only)</emphasis>
pseudo-device   "i4bctl"			<emphasis>userland driver to control the whole thing</emphasis>
pseudo-device   "i4brbch"	4		<emphasis>userland driver for access to raw B channel</emphasis>
pseudo-device   "i4btel"		2	<emphasis>userland driver for telephony</emphasis>
pseudo-device   "i4bipr"		4	<emphasis>network driver for IP over raw HDLC ISDN</emphasis>
<anchor id="CFBSD-config-IPR_VJ"/>
<indexterm><primary>enable</primary><secondary>VJ header compression detection for ipr i/f</secondary></indexterm>
<indexterm><primary>network</primary><secondary>driver for sync PPP over ISDN</secondary></indexterm>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>IPR_VJ</primary><secondary>config option</secondary></indexterm>
options		IPR_VJ			<emphasis>enable VJ header compression detection for ipr i/f</emphasis>
pseudo-device	"i4bisppp"	4		<emphasis>network driver for sync PPP over ISDN</emphasis>

<anchor id="CFBSD-config-TEL_S0_16_3"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>TEL_S0_16_3</primary><secondary>config option</secondary></indexterm>
options		"TEL_S0_16_3"		<emphasis>sample option (see table below)</emphasis>
device		isic0 at isa? port ? iomem 0xd0000 net irq 5 flags 1		<emphasis>ISDN board</emphasis>

device tina0 at isa? port 0x260 net irq 10 <emphasis>Stollmann Tina-dd control device</emphasis>
</programlisting>

<para><indexterm><primary>isic0</primary></indexterm>
The ISDN board configuration is unusual in the fact that, with the exception of
the Stollmann Tina-dd, the device name is always <emphasis>isic0</emphasis>.  You select the
device not by device name, but by an option which specifies the name, such as
the <emphasis>TEL_S0_16_3</emphasis> in the example above.  Depending on the board, you must
also set some of the values for <emphasis>port</emphasis>, <emphasis>iomem</emphasis>, <emphasis>irq</emphasis> and
<emphasis>flags</emphasis>.  Table <xref linkend="CFBSD-isdn-config"/> shows which values you need:
<table frame='all'><title>Supported ISDN boards</title>
<indexterm><primary>ISDN</primary><secondary>boards</secondary></indexterm>
box,center,tab(#) ;
lw28 | lfCWp9 |  lfCWp9 |  lfCWp9 |  lfCWp9 |  lfCWp9 .
Board#option#Port#iomem#irq#flags
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>  AVM A1, AVM Fritz!Card
</entry></row>
<anchor id="CFBSD-config-AVM_A10"/>
<row><entry> </entry><entry>AVM_A1</entry><entry>0x340</entry><entry></entry><entry>5</entry><entry>4
</entry></row>
<row><entry>  AVM PCMCIA Fritz!Card
</entry></row>
<anchor id="CFBSD-config-AVM_A1_PCMCIA0"/>
<row><entry> </entry><entry>AVM_A1_PCMCIA</entry><entry>0x340</entry><entry></entry><entry>5</entry><entry>10
</entry></row>
<row><entry>  Creatix ISDN-S0 P&amp;P
</entry></row>
<anchor id="CFBSD-config-CRTX_S0_P0"/>
<row><entry> </entry><entry>CRTX_S0_P</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  Dr. Neuhaus Niccy Go@
</entry></row>
<anchor id="CFBSD-config-DRN_NGO0"/>
<row><entry> </entry><entry>DRN_NGO</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  Dynalink IS64PH
</entry></row>
<anchor id="CFBSD-config-DYNALINK0"/>
<row><entry> </entry><entry>DYNALINK</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  ELSA QuickStep 1000pro ISA
</entry></row>
<anchor id="CFBSD-config-ELSA_QS1ISA0"/>
<row><entry> </entry><entry>ELSA_QS1ISA</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  ELSA QuickStep 1000pro PCI
</entry></row>
<anchor id="CFBSD-config-ELSA_QS1PCI"/>
<row><entry> </entry><entry>ELSA_QS1PCI
</entry></row>
<row><entry>  ITK ix1 Micro </entry><entry>ITKIX1</entry><entry>0x398</entry><entry></entry><entry>10</entry><entry>18
</entry></row>
<row><entry>  Sedlbauer Win Speed
</entry></row>
<anchor id="CFBSD-config-SEDLBAUER0"/>
<row><entry> </entry><entry>SEDLBAUER</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  Teles S0/16, Creatix ISDN-S0, Niccy 1016
</entry></row>
<anchor id="CFBSD-config-TEL_S0_160"/>
<row><entry> </entry><entry>TEL_S0_16</entry><entry>0xd80</entry><entry>0xd0000</entry><entry>5</entry><entry>2
</entry></row>
<row><entry>  Teles S0/16.3 PnP
</entry></row>
<anchor id="CFBSD-config-TEL_S0_16_3_P0"/>
<row><entry> </entry><entry>TEL_S0_16_3_P</entry><entry>?</entry><entry></entry><entry>?
</entry></row>
<row><entry>  Teles S0/16.3
</entry></row>
<anchor id="CFBSD-config-TEL_S0_16_30"/>
<row><entry> </entry><entry>TEL_S0_16_3</entry><entry>0xd80</entry><entry></entry><entry>5</entry><entry>3
</entry></row>
<row><entry>  Teles S0/8, Niccy 1008
</entry></row>
<anchor id="CFBSD-config-TEL_S0_80"/>
<row><entry> </entry><entry>TEL_S0_8</entry><entry></entry><entry>0xd0000</entry><entry>5</entry><entry>1
</entry></row>
<row><entry>  US Robotics Sportster ISDN TA internal
</entry></row>
<anchor id="CFBSD-config-USR_STI0"/>
<row><entry> </entry><entry>USR_STI</entry><entry>0x268</entry><entry></entry><entry>5</entry><entry>7
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>
</sect2>
<sect2>
<title>ATM support</title>

<para><indexterm><primary>HARP</primary></indexterm>
<indexterm><primary>Asynchronous</primary><secondary>Transfer Mode</secondary></indexterm>
FreeBSD includes the <emphasis>HARP</emphasis> implementation of ATM (<emphasis>Asynchronous
Transfer Mode</emphasis>).  Here are the configuration entries:
</para>
<programlisting>
<anchor id="CFBSD-config-ATM_CORE"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATM_CORE</primary><secondary>config option</secondary></indexterm>
options		ATM_CORE		<emphasis>core ATM protocol family</emphasis>
<anchor id="CFBSD-config-ATM_IP"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATM_IP</primary><secondary>config option</secondary></indexterm>
options		ATM_IP		<emphasis>IP over ATM support</emphasis>
<anchor id="CFBSD-config-ATM_SIGPVC"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATM_SIGPVC</primary><secondary>config option</secondary></indexterm>
options		ATM_SIGPVC		<emphasis>SIGPVC signalling manager</emphasis>
<anchor id="CFBSD-config-ATM_SPANS"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATM_SPANS</primary><secondary>config option</secondary></indexterm>
options		ATM_SPANS		<emphasis>SPANS signalling manager</emphasis>
<anchor id="CFBSD-config-ATM_UNI"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>ATM_UNI</primary><secondary>config option</secondary></indexterm>
options		ATM_UNI		<emphasis>UNI signalling manager</emphasis>
<anchor id="CFBSD-config-hea0"/>
device		hea0			<emphasis>Efficient ENI-155p ATM PCI</emphasis>
<anchor id="CFBSD-config-hfa0"/>
device		hfa0			<emphasis>FORE PCA-200E ATM PCI</emphasis>
</programlisting>

<para><emphasis>ATM_CORE</emphasis> includes the base ATM functionality code.  This must be included
for ATM support.
</para>

<para><emphasis>ATM_IP</emphasis> includes support for running IP over ATM.
</para>

<para>At least one (and usually only one) of the following signalling managers must be
included:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>sigpvc</primary></indexterm>
<emphasis>ATM_SIGPVC</emphasis> includes support for the PVC-only signalling manager
<emphasis>sigpvc</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>ATM_SPANS</emphasis> includes support for the `spans' signalling manager, which
runs the FORE Systems's proprietary SPANS signalling protocol.
</para>
</listitem>
<listitem>

<para><indexterm><primary>uni30</primary></indexterm>
<indexterm><primary>uni31</primary></indexterm>
<emphasis>ATM_UNI</emphasis> includes support for the <emphasis>uni30</emphasis> and <emphasis>uni31</emphasis>
signalling managers, which run the ATM Forum UNI 3.x signalling protocols.
</para>
</listitem>
</itemizedlist>

<para>All signalling managers include PVC support.
</para>

<para><indexterm><primary>hea</primary></indexterm>
The <emphasis>hea</emphasis> driver provides support for the Efficient Networks, Inc.
ENI-155p ATM PCI Adapter.
</para>

<para><indexterm><primary>hfa</primary></indexterm>
The <emphasis>hfa</emphasis> driver provides support for the FORE Systems, Inc.  PCA-200E ATM
PCI Adapter.
</para>
</sect2>
</sect1>
<sect1>
<title>Sound boards</title>

<para><indexterm><primary>sound</primary><secondary>boards</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>LINT</secondary></indexterm>
Table <xref linkend="CFBSD-sound-boards"/> shows the sound boards that FreeBSD supports.
box,center,tab(#) ;
lfCWp9 | lw67 .
\s10Device#Description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-css0"/>
<row><entry>
</entry></row>
<indexterm><primary>css0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>css0</secondary></indexterm>
<row><entry> css</entry><entry> Crystal Sound System (CSS 423x PnP)
</entry></row>
<anchor id="CFBSD-config-gus0"/>
<row><entry>
</entry></row>
<indexterm><primary>gus0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>gus0</secondary></indexterm>
<row><entry> gus</entry><entry> Gravis Ultrasound - Ultrasound, Ultrasound 16, Ultrasound MAX
</entry></row>
<anchor id="CFBSD-config-gusxvi0"/>
<row><entry>
</entry></row>
<indexterm><primary>gusxvi0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>gusxvi0</secondary></indexterm>
<row><entry> gusxvi</entry><entry> Gravis Ultrasound 16-bit PCM	(do not use)
</entry></row>
<anchor id="CFBSD-config-mpu0"/>
<row><entry>
</entry></row>
<indexterm><primary>mpu0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mpu0</secondary></indexterm>
<row><entry> mpu</entry><entry> Roland MPU-401 stand-alone card
</entry></row>
<anchor id="CFBSD-config-mss0"/>
<row><entry>
</entry></row>
<indexterm><primary>mss0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mss0</secondary></indexterm>
<row><entry> mss</entry><entry> Microsoft Sound System
</entry></row>
<anchor id="CFBSD-config-opl0"/>
<row><entry>
</entry></row>
<indexterm><primary>opl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>opl0</secondary></indexterm>
<row><entry> opl</entry><entry> Yamaha OPL-2 and OPL-3 FM - SB, SB Pro, SB 16, ProAudioSpectrum
</entry></row>
<anchor id="CFBSD-config-pas0"/>
<row><entry>
</entry></row>
<indexterm><primary>pas0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>pas0</secondary></indexterm>
<row><entry> pas</entry><entry> ProAudioSpectrum PCM and MIDI
</entry></row>
<anchor id="CFBSD-config-pca0"/>
<row><entry>
</entry></row>
<indexterm><primary>pca0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>pca0</secondary></indexterm>
<row><entry> pca</entry><entry> PCM audio through your PC speaker.
</entry></row>
<anchor id="CFBSD-config-pcm0"/>
<row><entry>
</entry></row>
<indexterm><primary>pcm(4)</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>/sys/i386/isa/snd/CARDS</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>pcm0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>pcm0</secondary></indexterm>
<row><entry> pcm</entry><entry> PCM audio through various sound cards.  This has support for a large number of new audio cards, based on CS423x, OPTi931, Yamaha OPL-SAx, and also for SB16, GusPnP.  For more information about this driver and supported cards, see the man page <emphasis>pcm(4)</emphasis> and <emphasis>/sys/i386/isa/snd/CARDS</emphasis>.
</entry></row>
</para>

<para><row><entry> The device flags tell the device a bit more info about the device than the PnP interface supplies: flag bits 2:0 define the secondary DMA channel number, bit 4 is set if the board uses two dma channels, and bits 15:8 define the board type and override autodetection.  Leave it this field zero at the moment.
</entry></row>
<anchor id="CFBSD-config-sb0"/>
<row><entry>
</entry></row>
<indexterm><primary>sb0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sb0</secondary></indexterm>
<row><entry> sb</entry><entry> SoundBlaster PCM - SoundBlaster, SB Pro, SB16, ProAudioSpectrum
</entry></row>
<anchor id="CFBSD-config-sbmidi0"/>
<row><entry>
</entry></row>
<indexterm><primary>sbmidi0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sbmidi0</secondary></indexterm>
<row><entry> sbmidi</entry><entry> SoundBlaster 16 MIDI interface
</entry></row>
<anchor id="CFBSD-config-sbxvi0"/>
<row><entry>
</entry></row>
<indexterm><primary>sbxvi0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sbxvi0</secondary></indexterm>
<row><entry> sbxvi</entry><entry> SoundBlaster 16
</entry></row>
<anchor id="CFBSD-config-snd0"/>
<row><entry>
</entry></row>
<indexterm><primary>snd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>snd0</secondary></indexterm>
<row><entry> snd</entry><entry> Voxware sound support code
</entry></row>
<anchor id="CFBSD-config-sscape0"/>
<row><entry>
</entry></row>
<indexterm><primary>sscape0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sscape0</secondary></indexterm>
<row><entry> sscape</entry><entry> Ensoniq Soundscape MIDI interface
</entry></row>
<anchor id="CFBSD-config-sscape_mss0"/>
<row><entry>
</entry></row>
<indexterm><primary>sscape_mss0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>sscape_mss0</secondary></indexterm>
<row><entry> sscape_mss</entry><entry> Ensoniq Soundscape PCM (requires sscape)
</entry></row>
<anchor id="CFBSD-config-uart0"/>
<row><entry>
</entry></row>
<indexterm><primary>uart0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>uart0</secondary></indexterm>
<row><entry> uart</entry><entry> stand-alone 6850 UART for MIDI
</entry></row>
</tbody></tgroup></table>
</para>
<programlisting>
controller	snd0
device pas0     at isa? port 0x388 irq 10 drq 6
device sb0      at isa? port 0x220 irq 5 drq 1
device sbxvi0   at isa? drq 5
device sbmidi0  at isa? port 0x330
device awe0     at isa? port 0x620
device gus0 at isa? port 0x220 irq 12 drq 1
device mss0 at isa? port 0x530 irq 10 drq 1
device css0	at isa? port 0x534 irq 5 drq 1 flags 0x08
device sscape0  at isa? port 0x330 irq 9 drq 0
device trix0    at isa? port 0x330 irq 6 drq 0
device sscape_mss0  at isa? port 0x534 irq 5 drq 1
device opl0     at isa? port 0x388
device mpu0     at isa? port 0x330 irq 6 drq 0
device uart0 at isa? port 0x330 irq 5

device pcm0 at isa? port ? tty irq 10 drq 1 flags 0x0
</programlisting>

<para>There are three basic way to configure a sound device:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>pca</primary></indexterm>
If you are outputting to the PC speaker with the <emphasis>pca</emphasis> driver, that's all
you need.
</para>
</listitem>
<listitem>

<para><indexterm><primary>snd0</primary></indexterm>
Alternatively, use the <emphasis>snd0</emphasis> controller and one of the devices listed
below it.
</para>
</listitem>
<listitem>

<para><indexterm><primary>pcm0</primary></indexterm>
<indexterm><primary>snd0</primary></indexterm>
The third choice is the <emphasis>pcm0</emphasis> driver.  If you use this driver, don't
define <emphasis>snd0</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>Other points to be noted about sounds boards are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>i386/isa/sound/sound_config.h</primary></indexterm>
The addresses specified in the device entries are also hard-coded in
<emphasis>i386/isa/sound/sound_config.h</emphasis>.  If you change the values in the
configuration, you must also change the values in the include file.
</para>
</listitem>
<listitem>

<para>If you have a GUS-MAX card and want to use the CS4231 codec on the card the drqs
for the gus max must be 8 bit (1, 2, or 3).
</para>
</listitem>
<listitem>

<para>If you would like to use the full duplex option on the gus, then define flags to
be the ``read dma channel''.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Pseudo-devices</title>

<para><anchor id="CFBSD-notwork-pseudos"/>
<indexterm><primary>pseudo-device</primary></indexterm>
Pseudo-device drivers are parts of the kernel that act like device drivers but
do not correspond to any actual hardware in the machine.  See page
for a discussion of network-related pseudo-devices.
</para>
<programlisting>
pseudo-device   speaker			# Play IBM BASIC-style noises out your speaker
pseudo-device   log				# Kernel syslog interface (/dev/klog)
pseudo-device   gzip				# Exec gzipped binaries
pseudo-device   vn				# Vnode driver (turns a file into a device)
pseudo-device   snp     3			# Snoop device - to look at pty/vty/etc..
</programlisting>

<para><anchor id="CFBSD-config-speaker"/>
</para>
<sect3>
<title>pseudo-device speaker</title>

<para></para>
<programlisting>
pseudo-device speaker
</programlisting>

<para><indexterm><primary>/usr/sbin/spkrtest</primary></indexterm>
<indexterm><primary>/usr/games/piano</primary></indexterm>
<indexterm><primary>/usr/sbin/spkrtest</primary></indexterm>
<indexterm><primary>/usr/games/piano</primary></indexterm>
Supports IBM BASIC-style noises through the PC speaker.  Some fun programs which
use this are <emphasis>/usr/sbin/spkrtest</emphasis>, which is a shell script that plays some
simple songs, and <emphasis>/usr/games/piano</emphasis> which lets you play songs using the
keyboard as a simple piano (this file only exists if you've installed the
<emphasis>games</emphasis> package).  Also, the excellent text role-playing game NetHack (in
the ports collection) can be configured to use this device to play songs when
you play musical instruments in the game.
</para>

<para>See also the device <emphasis>pca0</emphasis> on page <xref linkend="CFBSD-config-pca0"/>.
</para>
</sect3>
<sect3>
<title>pseudo-device log</title>

<para><indexterm><primary>pseudo-device</primary><secondary>log</secondary></indexterm>
<indexterm><primary>log</primary><secondary>pseudo-device</secondary></indexterm>
<anchor id="CFBSD-config-log"/>
<emphasis>log</emphasis> is used for logging of kernel error messages.  Mandatory.
</para>
</sect3>
<sect3>
<title>pseudo-device gzip</title>

<para><indexterm><primary>pseudo-device</primary><secondary>gzip</secondary></indexterm>
<indexterm><primary>gzip</primary><secondary>pseudo-device</secondary></indexterm>
<anchor id="CFBSD-config-gzip"/>
<emphasis>gzip</emphasis> allows you to run FreeBSD programs that have been compressed with
<emphasis>gzip</emphasis>.  This is useful when you need to compress FreeBSD programs to fit on
a boot floppy.
</para>
</sect3>
<sect3>
<title>pseudo-device vn</title>

<para><indexterm><primary>pseudo-device</primary><secondary>vn</secondary></indexterm>
<indexterm><primary>vn</primary><secondary>pseudo-device</secondary></indexterm>
<anchor id="CFBSD-config-vn"/>
<indexterm><primary>command</primary><secondary>vnconfig</secondary></indexterm>
<indexterm><primary>vnconfig</primary><secondary>command</secondary></indexterm>
Vnode driver.  Allows a file to be treated as a device after being set up with
the <emphasis>vnconfig</emphasis> command.  This driver can be useful for manipulating floppy
disk images and using a file as a swap device (e.g. an MS Windows swap file).
You also need this driver if you want to build a FreeBSD release, which you
might want to do to get a boot floppy.  This book doesn't discuss the release
process in any more detail.  For the final word on this subject, look at
<emphasis>/usr/src/release/Makefile</emphasis>.  Building a FreeBSD release is still an `expert
level' job.
</para>
</sect3>
<sect3>
<title>pseudo-device snp</title>

<para><indexterm><primary>pseudo-device</primary><secondary>snp</secondary></indexterm>
<indexterm><primary>snp</primary><secondary>pseudo-device</secondary></indexterm>
<indexterm><primary>snoop</primary><secondary>device</secondary></indexterm>
<indexterm><primary>device</primary><secondary>snoop</secondary></indexterm>
<anchor id="CFBSD-config-snp"/>
<indexterm><primary>command</primary><secondary>watch</secondary></indexterm>
<indexterm><primary>watch</primary><secondary>command</secondary></indexterm>
Snoop device.  This pseudo-device allows one terminal session to watch another
using the <emphasis>watch</emphasis> command.  Note that implementation of this capability has
important security and privacy implications. The <emphasis>number</emphasis> after <emphasis>snp</emphasis>
is the total number of simultaneous snoop sessions.
</para>
</sect3>
</sect2>
<sect2>
<title>Miscellaneous devices</title>

<para><indexterm><primary>device</primary><secondary>joystick</secondary></indexterm>
<indexterm><primary>joystick</primary><secondary>device</secondary></indexterm>
<indexterm><primary>PC</primary><secondary>Speaker</secondary></indexterm>
<indexterm><primary>devices</primary><secondary>miscellaneous</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>LINT</secondary></indexterm>
This section describes some miscellaneous hardware devices supported by FreeBSD.
None of these definitions are included in the <emphasis>GENERIC</emphasis> kernel: you'll have
to enter them manually or copy them from the <emphasis>LINT</emphasis> kernel.
<table frame='all'><title>Miscellaneous drivers</title>
box,center,tab(#) ;
lfCWp9 | lw70 .
\s10Device#Description
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<anchor id="CFBSD-config-apm0"/>
<row><entry> apm</entry><entry> Laptop Advanced Power Management/
</entry></row>
<anchor id="CFBSD-config-asc0"/>
<row><entry>
</entry></row>
<indexterm><primary>asc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>asc0</secondary></indexterm>
<row><entry> asc</entry><entry> GI1904-based hand scanners, e.g. the Trust Amiscan Grey
</entry></row>
<anchor id="CFBSD-config-bktr0"/>
<row><entry>
</entry></row>
<indexterm><primary>http://www.freebsd.org/~fsmp/HomeAuto/Bt848.html</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>bktr0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>bktr0</secondary></indexterm>
<row><entry> bktr</entry><entry> Brooktree bt848/848a/849/878/879 family video capture and TV Tuner board.  See <emphasis>http://www.freebsd.org/~fsmp/HomeAuto/Bt848.html</emphasis> for further details.
</entry></row>
<anchor id="CFBSD-config-ctx0"/>
<row><entry>
</entry></row>
<indexterm><primary>ctx0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>ctx0</secondary></indexterm>
<row><entry> ctx</entry><entry> Cortex-I frame grabber.
</entry></row>
<anchor id="CFBSD-config-cy0"/>
<row><entry>
</entry></row>
<indexterm><primary>cy0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>cy0</secondary></indexterm>
<row><entry> cy</entry><entry> Cyclades serial driver.
</entry></row>
<anchor id="CFBSD-config-dgb0"/>
<row><entry>
</entry></row>
<indexterm><primary>dgb0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>dgb0</secondary></indexterm>
<row><entry> dgb</entry><entry> Digiboard PC/Xi and PC/Xe series driver.
</entry></row>
<anchor id="CFBSD-config-dgm0"/>
<row><entry>
</entry></row>
<indexterm><primary>dgm0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>dgm0</secondary></indexterm>
<row><entry> dgm</entry><entry> Digiboard PC/Xem driver.
</entry></row>
<anchor id="CFBSD-config-gp0"/>
<row><entry>
</entry></row>
<indexterm><primary>gp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>gp0</secondary></indexterm>
<row><entry> gp</entry><entry> National Instruments AT-GPIB and AT-GPIB/TNT board
</entry></row>
<anchor id="CFBSD-config-gsc0"/>
<row><entry>
</entry></row>
<indexterm><primary>gsc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>gsc0</secondary></indexterm>
<row><entry> gsc</entry><entry> Genius GS-4500 hand scanner.
</entry></row>
<anchor id="CFBSD-config-joy0"/>
<row><entry>
</entry></row>
<indexterm><primary>joy0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>joy0</secondary></indexterm>
<row><entry> joy</entry><entry> Joystick.
</entry></row>
<anchor id="CFBSD-config-labpc0"/>
<row><entry>
</entry></row>
<indexterm><primary>labpc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>labpc0</secondary></indexterm>
<row><entry> labpc</entry><entry> National Instrument's Lab-PC and Lab-PC+
</entry></row>
<anchor id="CFBSD-config-matcd0"/>
<row><entry>
</entry></row>
<indexterm><primary>matcd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>matcd0</secondary></indexterm>
<row><entry> matcd</entry><entry> Matsushita/Panasonic CD-ROM.
</entry></row>
<anchor id="CFBSD-config-mcd0"/>
<row><entry>
</entry></row>
<indexterm><primary>mcd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>mcd0</secondary></indexterm>
<row><entry> mcd</entry><entry> Mitsumi CD-ROM.
</entry></row>
<anchor id="CFBSD-config-meteor0"/>
<row><entry>
</entry></row>
<indexterm><primary>meteor0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>meteor0</secondary></indexterm>
<row><entry> meteor</entry><entry> Matrox Meteor video capture board.
</entry></row>
<anchor id="CFBSD-config-rc0"/>
<row><entry>
</entry></row>
<indexterm><primary>rc0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rc0</secondary></indexterm>
<row><entry> rc</entry><entry> RISCom/8 multiport card
</entry></row>
<anchor id="CFBSD-config-rp0"/>
<row><entry>
</entry></row>
<indexterm><primary>rp0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>rp0</secondary></indexterm>
<row><entry> rp</entry><entry> Comtrol Rocketport(ISA) - single card.
</entry></row>
<anchor id="CFBSD-config-scd0"/>
<row><entry>
</entry></row>
<indexterm><primary>scd0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>scd0</secondary></indexterm>
<row><entry> scd</entry><entry> Sony CD-ROM.
</entry></row>
<anchor id="CFBSD-config-si0"/>
<row><entry>
</entry></row>
<indexterm><primary>si0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>si0</secondary></indexterm>
<row><entry> si</entry><entry> Specialix SI/XIO 4-32 port terminal multiplexor.
</entry></row>
<anchor id="CFBSD-config-spigot0"/>
<row><entry>
</entry></row>
<indexterm><primary>spigot0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>spigot0</secondary></indexterm>
<row><entry> spigot</entry><entry> Creative Labs Video Spigot video-acquisition board.
</entry></row>
<anchor id="CFBSD-config-stl0"/>
<row><entry>
</entry></row>
<indexterm><primary>stl0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>stl0</secondary></indexterm>
<row><entry> stl</entry><entry> Stallion EasyIO and EasyConnection 8/32 (cd1400 based)
</entry></row>
<anchor id="CFBSD-config-stli0"/>
<row><entry>
</entry></row>
<indexterm><primary>stli0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>stli0</secondary></indexterm>
<row><entry> stli</entry><entry> Stallion EasyConnection 8/64, ONboard, Brumby (intelligent)
</entry></row>
<anchor id="CFBSD-config-tw0"/>
<row><entry>
</entry></row>
<indexterm><primary>tw0</primary><secondary>device</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>device</primary><secondary>tw0</secondary></indexterm>
<row><entry> tw</entry><entry> TW-523 power line interface for use with X-10 home control products
</entry></row>
</tbody></tgroup></table>
The CD-ROM drives mentioned here are the old drives with the proprietary
interfaces.  Modern CD-ROM drives are either SCSI or IDE.
</para>

<para>The corresponding entries are:
</para>
<programlisting>
device          mcd0    at isa? port 0x300 bio irq 10
# for the Sony CDU31/33A CDROM
device          scd0    at isa? port 0x230 bio
# for the SoundBlaster 16 multicd - up to 4 devices
controller      matcd0  at isa? port 0x230 bio
device          ctx0    at isa? port 0x230 iomem 0xd0000
device          spigot0 at isa? port 0xad6 irq 15 iomem 0xee000
device          qcam0   at isa? port "IO_LPT3" tty
device          apm0    at isa?
<anchor id="CFBSD-config-APM_BROKEN_STATCLOCK"/>
<indexterm><primary>config</primary><secondary>option</secondary></indexterm>
<indexterm><primary>APM_BROKEN_STATCLOCK</primary><secondary>config option</secondary></indexterm>
options         APM_BROKEN_STATCLOCK
device          gp0     at isa? port 0x2c0 tty
device          gsc0    at isa? port "IO_GSC1" tty drq 3
device          joy0    at isa? port "IO_GAME"
device          cy0     at isa? tty irq 10 iomem 0xd4000 iosiz 0x2000
device          dgb0    at isa? port 0x220 iomem 0xfc0000 iosiz ? tty
device          labpc0  at isa? port 0x260 tty irq 5
device          rc0     at isa? port 0x220 tty irq 12
# the port and irq for tw0 are fictitious
device          tw0     at isa? port 0x380 tty irq 11
device          si0     at isa? iomem 0xd0000 tty irq 12
device          asc0    at isa? port IO_ASC1 tty drq 3 irq 10
device          bqu0    at isa? port 0x150
device          stl0    at isa? port 0x2a0 tty irq 10
device          stli0   at isa? port 0x2a0 tty iomem 0xcc000 flags 23 iosiz 0x1000
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Building and installing the new kernel</title>

<para><indexterm><primary>kernel</primary><secondary>building</secondary></indexterm>
<anchor id="CFBSD-run-config"/>
<indexterm><primary>command</primary><secondary>config</secondary></indexterm>
<indexterm><primary>config</primary><secondary>command</secondary></indexterm>
<indexterm><primary>/usr/src/sys/i386/conf</primary></indexterm>
After editing the configuration file, you create the build environment with
<emphasis>config</emphasis>.  In the directory <emphasis>/usr/src/sys/i386/conf</emphasis>, you enter:
</para>
<programlisting>
# <command>/usr/sbin/config -g FREEBIE</command>
Kernel build directory is ../../compile/FREEBIE
</programlisting>

<para>The <emphasis>-g</emphasis> flag tells <emphasis>config</emphasis> to generate symbolic information for
the kernel.  If you run into trouble with the kernel, this information will help
you analyse the cause; see page <xref linkend="CFBSD-panic"/> for further details.
</para>

<para>It's possible to get error messages when running <emphasis>config</emphasis> if you have made a
mistake in the config file.  If the <emphasis>config</emphasis> command fails when you give it
your kernel description, you've probably made a simple error somewhere.
Fortunately, <emphasis>config</emphasis> will print the line number that it had trouble with,
so you can quickly find it with an editor.  For example:
</para>
<programlisting>
config: line 17: syntax error
</programlisting>

<para><indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
One possibility is that you have mistyped a keyword.  Compare it to the entry in
the <emphasis>GENERIC</emphasis> or <emphasis>LINT</emphasis> kernel definitions.
</para>

<para>You'll need about 30 MB of free space on <emphasis>/usr/src</emphasis> in order to build a
kernel.  If you're really tight on space, you can reduce this value
significantly by omitting the <emphasis>-g</emphasis> option, but if you have problems with
the system at some later stage, it will be much more difficult to find what is
causing them.
</para>
<sect2>
<sect3>
<title>Building the kernel</title>

<para><indexterm><primary>building</primary><secondary>the kernel</secondary></indexterm>
<indexterm><primary>kernel</primary><secondary>building</secondary></indexterm>
Next, change to the build directory and build the kernel:
<anchor id="CFBSD-make-kernel"/>
</para>
<programlisting>
# <command>cd ../../compile/FREEBIE</command>
# <command>make depend</command>
# <command>make</command>
</programlisting>

<para></para>
<note>

<para>The <emphasis>make depend</emphasis> is needed even if the directory has just been created:
apart from creating dependency information, it also creates some files needed
for the build.
</para>
</note>

<para>This procedure can take some time, up to an hour on a slow machine.  It's also
possible to have errors here, and unfortunately they are usually <emphasis>not</emphasis>
self-explanatory.  If the <emphasis>make</emphasis> command fails, it usually signals an error
in your kernel description which is not obvious enough for <emphasis>config</emphasis> to catch
it.  Again, look over your configuration, and if you still cannot resolve the
problem, send mail to <emphasis>questions@FreeBSD.ORG</emphasis> with your kernel
configuration, and it should be diagnosed very quickly.  A description of how to
interpret these errors is in the works, but at the moment this is still deep
magic.
</para>

<para><indexterm><primary>kernel</primary><secondary>installing</secondary></indexterm>
<anchor id="CFBSD-install-kernel"/>
Finally, install the new kernel:
</para>
<programlisting>
# <command>make install</command>
</programlisting>

<para><indexterm><primary>/kernel.old</primary></indexterm>
This renames the current kernel to <emphasis>/kernel.old</emphasis> and copies the new kernel
to the root directory as <emphasis>/kernel</emphasis>.
<!-- XXX make reinstall -->
Next, shutdown the system and reboot load the new kernel:
</para>
<programlisting>
# <command>shutdown -r now</command>
</programlisting>

<para>If the new kernel does not boot, or fails to recognize your devices, don't
panic.  Reset the machine, and when the boot prompt appears, boot the old
kernel:
</para>
<programlisting>
Boot: <command>boot kernel.old</command>
</programlisting>

<para>When reconfiguring a kernel, it is always a good idea to keep on hand a kernel
that is known to work.  Since <emphasis>kernel.old</emphasis> gets overwritten every time you
install a new kernel, I also keep a kernel called <emphasis>kernel.save</emphasis>.
</para>

<para><indexterm><primary>/var/log/messages</primary></indexterm>
<indexterm><primary>command</primary><secondary>dmesg</secondary></indexterm>
<indexterm><primary>dmesg</primary><secondary>command</secondary></indexterm>
After booting with a good kernel you can check over your configuration file and
try to build it again.  One helpful resource is the <emphasis>/var/log/messages</emphasis> file
which records, among other things, all of the kernel messages from every
successful boot.  Also, the <emphasis>dmesg</emphasis> command will print the kernel messages
from the current boot.
</para>

<para><indexterm><primary>kernel</primary><secondary>GENERIC</secondary></indexterm>
<indexterm><primary>kernel.old</primary></indexterm>
If you are having trouble building a kernel, make sure to keep a
<emphasis>GENERIC</emphasis>, or some other kernel that is known to work on hand as a
different name that will not get erased on the next build.  Don't rely on
<emphasis>kernel.old</emphasis> because the kernel installation process overwrites
<emphasis>kernel.old</emphasis> every time.  Also, as soon as possible, move the working kernel
to the proper location.  The proper command to ``unlock'' the kernel file that
<emphasis>make</emphasis> installs (in order to move another kernel back permanently) is:
</para>
<programlisting>
# <command>chflags noschg /kernel</command>
</programlisting>

<para>And, if you want to ``lock'' your new kernel (or any file for that matter) into
place so that it cannot be moved or tampered with:
</para>
<programlisting>
# <command>chflags schg /kernel</command>
</programlisting>

<para></para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Making device nodes</title>

<para><indexterm><primary>device</primary><secondary>nodes</secondary></indexterm>
<indexterm><primary>making</primary><secondary>device nodes</secondary></indexterm>
<indexterm><primary>/dev/MAKEDEV</primary></indexterm>
If you've added any new devices to your kernel,  you may have to add
device nodes to your <emphasis>/dev</emphasis> directory before you can use them.  See page
<xref linkend="CFBSD-MAKEDEV"/> for further details.
</para>
</sect1>
<sect1>
<title>Kernel loadable modules</title>

<para><anchor id="CFBSD-kld"/>
<indexterm><primary>Kernel</primary><secondary>Loadable Module</secondary></indexterm>
<indexterm><primary>kld</primary></indexterm>
<indexterm><primary>/modules</primary></indexterm>
<indexterm><primary>kldload</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kldload</secondary></indexterm>
As we saw at the beginning of the chapter, you may not have to build a new
kernel to implement the functionality you want.  Instead, just load it into the
running kernel with a <emphasis>Kernel Loadable Module</emphasis> (<emphasis>kld</emphasis>).  The
directory <emphasis>/modules</emphasis> contains a number of klds.  To load them, use
<emphasis>kldload</emphasis>.  For example, if you wanted to load SCO UNIX compatibility, you
would enter:
</para>
<programlisting>
# <command>kldload ibcs2</command>
</programlisting>

<para>This loads the module <emphasis>/modules/ibcs2.ko</emphasis>.  Note that you don't need to
specify the directory name, nor the <emphasis>.ko</emphasis> extension.
</para>

<para><indexterm><primary>kldstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kldstat</secondary></indexterm>
To find what modules are loaded, use <emphasis>kldstat</emphasis>:
</para>
<programlisting>
# <command>kldstat</command>
Id Refs Address    Size     Name
 1    5 0xc0100000 1d08b0   kernel
 2    2 0xc120d000 a000     ibcs2.ko
 3    1 0xc121b000 3000     ibcs2_coff.ko
 5    1 0xc1771000 e000     linux.ko
 6    1 0xc177f000 bf000    vinum.ko
</programlisting>

<para><indexterm><primary>kldunload</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kldunload</secondary></indexterm>
You can also unload some klds, but not all of them.  Use <emphasis>kldunload</emphasis> for
this purpose:
</para>
<programlisting>
# <command>kldunload -n vinum</command>
</programlisting>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchcurrent"><title>Keeping up to date with FreeBSD</title>

<para>It's convenient to get FreeBSD on CD-ROM, but that isn't the only way it is
distributed.  The CD-ROMs are probably the cheapest way to get a base
distribution.  Unfortunately, they're not the most up-to-date.  In this chapter
we'll look at alternative sources of FreeBSD sources.
</para>

<para><anchor id="CFBSD-repository"/>
<indexterm><primary>repository</primary><secondary>cvs</secondary></indexterm>
<indexterm><primary>cvs</primary><secondary>repository</secondary></indexterm>
<indexterm><primary>Concurrent</primary><secondary>Versions System</secondary></indexterm>
<indexterm><primary>cvs</primary></indexterm>
<indexterm><primary>branch</primary><secondary>CVS</secondary></indexterm>
<indexterm><primary>CVS</primary><secondary>branch</secondary></indexterm>
<indexterm><primary>CVS-Repository</primary></indexterm>
The FreeBSD project keeps a single master source tree, called a
<emphasis>repository</emphasis>, which is maintained by the <emphasis>Concurrent Versions System</emphasis>,
or <emphasis>cvs</emphasis>.  You'll find it on the second CD-ROM of the set in the directory
<emphasis>CVSROOT</emphasis>.  The repository contains all versions of FreeBSD back to the
last release from the Computer Sciences Research Group of the University of
California at Berkeley, 4.4BSD-Lite.  Each of these versions is called a
<emphasis>branch</emphasis>.  There are three main branches of interest, which we'll look at in
the following sections.
</para>
<sect1>
<title>FreeBSD releases</title>

<para><indexterm><primary>FreeBSD</primary><secondary>releases</secondary></indexterm>
<anchor id="CFBSD-release-tags"/>
One of the problems understanding releases is that they're a moving target.  At
any one time, three basic ``latest'' versions of FreeBSD are available:
</para>
<sect2>
<title>FreeBSD-RELEASE</title>

<para><indexterm><primary>FreeBSD-RELEASE</primary></indexterm>
<emphasis>FreeBSD-RELEASE</emphasis> is the latest version of FreeBSD which has been released
for general use.  It contains as many new features as are consistent with
stability.  It has been through extensive testing.  You can get it on CD-ROM.
FreeBSD-RELEASEs are given a release number which uniquely identifies them, such
as 2.2.5.  There are two or three releases a year.
</para>
</sect2>
<sect2>
<title>FreeBSD-STABLE</title>

<para><indexterm><primary>FreeBSD-STABLE</primary></indexterm>
<emphasis>FreeBSD-STABLE</emphasis> is a version of FreeBSD-RELEASE to which all possible bug
fixes have been applied, in order to make it as stable as possible.  Fixes are
made several times a week.  The development cycle is independent of
FreeBSD-RELEASE, so at some times it may be based on an older release of FreeBSD
than the current FreeBSD-RELEASE, and it may be missing some features of the
current FreeBSD-RELEASE.  For example, the current FreeBSD-RELEASE might be
2.2.5, but FreeBSD-STABLE will be based on FreeBSD-RELEASE 2.2.2.  At other
times it may be based on the same release as FreeBSD-RELEASE, in which case it
will have all the features and fewer bugs.
</para>

<para>Due to the frequent updates, FreeBSD-STABLE is not currently available on
CD-ROM, and there are no plans to do so.
</para>
</sect2>
<sect2>
<title>FreeBSD-CURRENT</title>

<para><indexterm><primary>FreeBSD-CURRENT</primary></indexterm>
<indexterm><primary>/usr/src/Makefile</primary></indexterm>
<emphasis>FreeBSD-CURRENT</emphasis> is the very latest version of FreeBSD, still under
development.  All new development work is done on this branch of the tree.
FreeBSD-CURRENT is an ever-changing snapshot of the working sources for FreeBSD,
including work in progress, experimental changes and transitional mechanisms
that may or may not be present in the next official release of the software.
Many users compile almost daily from FreeBSD-CURRENT sources, but there times
when the sources are uncompilable.  The problems are always resolved, but others
can take their place.  On occasion, keeping up with FreeBSD-CURRENT can be a
full-time business.  If you use -CURRENT, you should be prepared to spend a lot
of time keeping the system running.  The following extract from the RCS log file
for <emphasis>/usr/src/Makefile</emphasis> should give you a feel for the situation:
revision 1.152
Hooboy!

Did I ever spam this file good with that last commit.  Despite 3 reviewers, we
still managed to revoke the eBones fixes, TCL 8.0 support, libvgl and a host of
other new things from this file in the process of parallelizing the Makefile.
DOH!  I think we need more pointy hats - this particular incident is worthy of a
small children's birthday party's worth of pointy hats. ;-)

I certainly intend to take more care with the processing of aged diffs in the
future, even if it does mean reading through 20K's worth of them.  I might also
be a bit more careful about asking for more up-to-date changes before looking at
them. ;)
</para>

<para>So why use -CURRENT?  The main reasons are:
</para>
<itemizedlist>
<listitem>

<para>You yourself might be working on some part of the source tree.  Keeping
``current'' is an absolute requirement.
</para>
</listitem>
<listitem>

<para>You may be an active tester, which imples that you're willing to spend time
working through problems in order to ensure that FreeBSD-CURRENT remains as sane
as possible.  You may also wish to make topical suggestions on changes and the
general direction of FreeBSD.
</para>
</listitem>
<listitem>

<para>You may just want to keep an eye on things and use the current sources for
reference purposes.
</para>
</listitem>
</itemizedlist>

<para>People occasionally have other reasons for wanting to use FreeBSD-CURRENT.  The
following are <emphasis>not</emphasis> good reasons:
</para>
<itemizedlist>
<listitem>

<para>They see it as a way to be the first on the block with great new FreeBSD
features.  This is not a good reason, because there's no reason to believe that
the features will stay, and there is good reason to believe that they will be
unstable.
</para>
</listitem>
<listitem>

<para>They see it as a quick way of getting bug fixes.  In fact, it's a way of
<emphasis>testing</emphasis> bug fixes.  Bug fixes will be retrofitted into the -STABLE
branch as soon as they have been properly tested.
</para>
</listitem>
<listitem>

<para>They see it as the newest officially supported release of FreeBSD.  This is
incorrect: FreeBSD-CURRENT is <emphasis>not</emphasis> officially supported.  The support is
provided by the users.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect3>
<title>Snapshots</title>

<para><indexterm><primary>snapshot</primary></indexterm>
FreeBSD-CURRENT <emphasis>is</emphasis> available on CD-ROM from Walnut Creek.  Several times
a year, at irregular intervals when the tree is relatively stable, the core team
makes a <emphasis>snapshot</emphasis> of the repository and the -CURRENT source tree.  This
is a possible alternative to on-line updates if you don't want the absolute
latest version of the system.
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>The repository</title>

<para><indexterm><primary>repository</primary><secondary>cvs</secondary></indexterm>
<indexterm><primary>cvs</primary><secondary>repository</secondary></indexterm>
<indexterm><primary>CVS</primary></indexterm>
<indexterm><primary>Revision</primary><secondary>Control System</secondary></indexterm>
<indexterm><primary>RCS</primary></indexterm>
The <emphasis>repository</emphasis> is the home of all FreeBSD releases.  As we have seen, it
is maintained by <emphasis>CVS</emphasis>, which is a system built on top of the <emphasis>Revision
Control System</emphasis>, or <emphasis>RCS</emphasis>.
</para>

<para><indexterm><primary>trunk</primary><secondary>cvs</secondary></indexterm>
<indexterm><primary>cvs</primary><secondary>trunk</secondary></indexterm>
<indexterm><primary>branch</primary><secondary>cvs</secondary></indexterm>
<indexterm><primary>cvs</primary><secondary>branch</secondary></indexterm>
The repository is a duplicate of the source tree with copies of each file in the
source tree.  It modifies the names by appending the suffix <emphasis>,v</emphasis>: for
example, <emphasis>main.c</emphasis> in the source tree becomes <emphasis>main.c,v</emphasis> in the
repository.  These files contain a copy of the most recent version of the file,
along with a lot of information about how to create older versions of the source
from the current version.  Each version has an identification which is either in
two parts (for example, version 1.3), or in four parts (for example, version
1.2.1.4).  The two-part versions are said to be on the <emphasis>trunk</emphasis> of the
tree, whereas the four-part versions are on <emphasis>branches</emphasis>.  In FreeBSD, the
trunk is the -CURRENT version.
</para>

<para><indexterm><primary>symbolic</primary><secondary>names</secondary></indexterm>
In addition to the numeric identifiers, each of which relates only to a single
file, RCS allows you to attach <emphasis>symbolic names</emphasis> to specific revisions.
FreeBSD uses these to indicate the revisions corresponding to a particular
release.  For example, in the directory <emphasis>/usr/src/sys/kern</emphasis>, version 1.13 of
<emphasis>kern_clock.c</emphasis>, version 1.12 of <emphasis>kern_fork.c</emphasis> and version 1.21.4.1 of
<emphasis>kern_exec.c</emphasis> participate in <emphasis>RELENG_2_1_0_RELEASE</emphasis>.  For more
details of <emphasis>RCS</emphasis>, see the man page.
</para>

<para>If you're a serious developer, there are a number of advantages to keeping a
copy of the repository.  If you're a casual user, it's probably overkill.
</para>
</sect1>
<sect1>
<title>Getting updates from the net</title>

<para><indexterm><primary>getting</primary><secondary>updates from the net</secondary></indexterm>
<indexterm><primary>updates</primary><secondary>getting from the net</secondary></indexterm>
There are a number of possibilities to keep up with the daily modifications to
the source tree.  The first question is: how much space do you want to invest in
keeping the sources?  Table <xref linkend="CFBSD-source-tree-space"/>
<!--  XXX.pageref \*[source-tree-space-page] "on page \*[source-tree-space-page]" -->
shows the space required by different parts of the sources.
<table frame='all'><title>Approximate source tree sizes</title>
box,center,tab(#) ;
| l | r | .
Component#Size (MB)
=
Repository <emphasis>src/sys</emphasis>#53
Repository <emphasis>src</emphasis>#330
Repository <emphasis>ports</emphasis>#36
Source tree <emphasis>/usr/src/sys</emphasis>#65
Source tree <emphasis>/usr/src</emphasis>#225
Source tree <emphasis>/usr/ports</emphasis>#200
Object tree <emphasis>src</emphasis>#160

</tbody></tgroup></table>
The size of <emphasis>/usr/src/sys</emphasis> includes the files involved in a single kernel
build.  This changes the size of <emphasis>/usr/src</emphasis> as well, of course.
Similiarly, the size of <emphasis>/usr/ports</emphasis> includes a few ports.  It will, of
course, grow extremely large (several gigabytes) if you start porting all
available packages.
</para>

<para>If you're maintaining multiple source trees (say, for different versions), you
still only need one copy of the repository.
</para>

<para></para>
<sect2>
<title>How to get the updates</title>

<para><indexterm><primary>CVSup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>CVSup</secondary></indexterm>
<indexterm><primary>CTM</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>CTM</secondary></indexterm>
You also have the choice of how to get the updates.  If you have a reasonably
good connection to the Internet, use <emphasis>CVSup</emphasis> to update your repository.
Otherwise, you may find <emphasis>CTM</emphasis> more useful.  We'll look at both in the
following sections.
</para>
</sect2>
<sect2>
<title>CVSup</title>

<para><anchor id="CFBSD-CVSup"/>
<indexterm><primary>CVSup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>CVSup</secondary></indexterm>
<indexterm><primary>cron</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>cron</secondary></indexterm>
<emphasis>CVSup</emphasis> is a software package which distributes updates to the repository.
You can run the client at regular intervals&mdash;for example, with <emphasis>cron</emphasis>
(see page <xref linkend="CFBSD-cron"/>) to update your repository.
</para>

<para>To get started with <emphasis>CVSup</emphasis>, you need the following:
</para>
<itemizedlist>
<listitem>

<para>A source tree or repository.  This is not absolutely necessary, but the initial
setup will be much faster if you do it this way.
</para>
</listitem>
<listitem>

<para><indexterm><primary>pkg_add</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pkg_add</secondary></indexterm>
A copy of the <emphasis>cvsup</emphasis> program.  Install this with <emphasis>pkg_add</emphasis> from the
CD-ROM (currently <emphasis>/cdrom/packages/All/cvsup-15.2.tgz</emphasis>; the suffix may
change in future releases).
</para>
</listitem>
<listitem>

<para><indexterm><primary>cvsupfile</primary></indexterm>
A <emphasis>cvsupfile</emphasis>, a command file for <emphasis>cvsup</emphasis>.  We'll look at this below.
</para>
</listitem>
<listitem>

<para><indexterm><primary>mirror</primary><secondary>site</secondary></indexterm>
A <emphasis>mirror site</emphasis> from which you can load the software.  We'll discuss this
below as well.
</para>
</listitem>
</itemizedlist>

<para>The <emphasis>cvsupfile</emphasis> contains a description of the packages you want to
download.  You can find all the details in the online handbook, but the
following example shows a reasonably normal file:
</para>
<programlisting>
*default release=cvs
*default host=cvsup2.freebsd.org
*default base=/src/cvsup
*default prefix=/src/ncvs
*default delete
*default use-rel-suffix
*default compress
src-all
ports-all
doc-all
</programlisting>

<para>The lines starting with <emphasis>*default</emphasis> specify default values; the lines which
do not are collections which you want to track.  This file answers these
implicit questions:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>collections</primary><secondary>CVSup</secondary></indexterm>
<indexterm><primary>CVSup</primary><secondary>collections</secondary></indexterm>
Which files do you want to receive?  These are the names of the
<emphasis>collections</emphasis> in the last five lines: all of the sources, all of the
ports, and all of the documentation.
</para>
</listitem>
<listitem>

<para>Which versions of them do you want?  By default, you get updates to the
repository.  If you want a specific version, you can write:
</para>
<programlisting>
*default tag=<emphasis>version</emphasis>
</programlisting>

<para><emphasis>version</emphasis> is one of the tags we saw on page <xref linkend="CFBSD-release-tags"/>, or <emphasis>.</emphasis>
(a period) to represent the -CURRENT version.
</para>

<para>Alternatively, you might ask for a version as of a specific date.  For example:
</para>
<programlisting>
*default date=97.09.13.12.20
</programlisting>

<para>This would specify that you want <emphasis>the version</emphasis> as it was on 13 September
1997 at 12:20.  In this case, <emphasis>version</emphasis> defaults to <emphasis>.</emphasis>.
</para>
</listitem>
<listitem>

<para>Where do you want to get them from?  Two parameters answer this question:
<emphasis>host=cvsup2.freebsd.org</emphasis> specifies the name of the host from which to
load the files, and <emphasis>release=cvs</emphasis> specifies to use the <emphasis>cvs</emphasis>
release.  The <emphasis>release</emphasis> option is obsolescent, but it's a good idea to
leave it in there until it is officially removed.
</para>
</listitem>
<listitem>

<para>Where do you want to put them on your own machine?  This question is answered by
the line <emphasis>*default prefix=/src/ncvs</emphasis>.  Since we're tracking the repository
in this example, this is the name of the repository.  If we were tracking a
particular release, we would use <emphasis>*default prefix=/usr</emphasis>.  Since the
collections are called <emphasis>doc</emphasis>, <emphasis>ports</emphasis> and <emphasis>src</emphasis>, we refer to the
parent directory in each case.
</para>
</listitem>
<listitem>

<para>Where do you want to put your status files?  This question is answered by the
line <emphasis>*default base=/src/cvsup</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>In addition, the file contains three other lines.  <emphasis>*default delete</emphasis> means
that <emphasis>cvsup</emphasis> may delete files where necessary.  Otherwise you run the risk
of accumulating obsolete files.  <emphasis>*default compress</emphasis> enables compression
of the data transmitted, and <emphasis>*default use-rel-suffix</emphasis> specifies how
<emphasis>cvsup</emphasis> should handle list files.  It's not well-documented, but it's
necessary.  Don't worry about it.
</para>
</sect2>
<sect2>
<title>Which CVSup server?</title>

<para><indexterm><primary>which</primary><secondary>CVSup server?</secondary></indexterm>
<indexterm><primary>CVSup</primary><secondary>which server?</secondary></indexterm>
In this example, we've chosen one of the backup US servers,
<emphasis>cvsup2.FreeBSD.org</emphasis>.  In practice, this may not be the best choice.  A
large number of servers are spread around the world, and you should choose the
one topographically closest to you.  This isn't the same thing as being
geographically closest&mdash;I live in Adelaide, South Australia, and some ISPs in
the same city are further away on the net than many systems in California.  Look
in the appendix <emphasis>Obtaining FreeBSD</emphasis> in the online handbook for an
up-to-date list.
</para>
</sect2>
<sect2>
<title>Running <emphasis>cvsup</emphasis> </title>

<para><indexterm><primary>running</primary><secondary>cvsup</secondary></indexterm>
<indexterm><primary>cvsup</primary><secondary>running</secondary></indexterm>
<indexterm><primary>/root/crontab</primary></indexterm>
The handbook recommends running <emphasis>cvsup</emphasis> via a GUI interface.  I don't.
<emphasis>cvsup</emphasis> is a typical candidate for a <emphasis>cron</emphasis> job.  I rebuild the
-CURRENT tree every Thursday morning at 2:40 am.  To do so, I have the following
entry in <emphasis>/root/crontab</emphasis>:
</para>
<programlisting>
# Get the latest and greatest FreeBSD stuff, only on Thursdays
40 2 * * 4 ./extract-updates
</programlisting>

<para>The file <emphasis>/root/extract-updates</emphasis> contains, amongst other things,
</para>
<programlisting>
cvsup -g -L2 /src/cvsup/cvs-cvsupfile
</programlisting>

<para><emphasis>/src/cvsup/cvs-cvsupfile</emphasis> is the name of the <emphasis>cvsupfile</emphasis> we looked
at above.  The other parameters to <emphasis>cvsup</emphasis> specify <emphasis>not</emphasis> to use the
GUI (<emphasis>-g</emphasis>), and <emphasis>-L2</emphasis> specifies to produce moderate detail about the
actions being performed.
</para>
</sect2>
<sect2>
<title>Other possible cvsupfiles</title>

<para>The example <emphasis>cvsupfile</emphasis> above is useful if you're maintaining a copy of
the repository.  If you just want to maintain a copy of the sources of one
version, say 2.2.5, use the following file instead:
</para>
<programlisting>
*default tag=RELENG_2_2_5_RELEASE
*default release=cvs
*default host=cvsup2.freebsd.org
*default base=/usr				<emphasis>for /usr/doc, /usr/ports, /usr/src</emphasis>
*default prefix=/src/ncvs
*default delete
*default use-rel-suffix
*default compress
src-all
ports-all
doc-all
</programlisting>

<para><indexterm><primary>cvs-crypto</primary><secondary>collection</secondary></indexterm>
<indexterm><primary>collection</primary><secondary>cvs-crypto</secondary></indexterm>
<indexterm><primary>cvsup.internat.freebsd.org</primary></indexterm>
One collection causes special problems: <emphasis>cvs-crypto</emphasis> contains
cryptographic software.  Until recently, exporting this software from the USA
was subject to strict export restrictions, and it's not clear that these
restrictions might not be reimposed.  To be on the safe side, don't load them
from a US site if you are located outside the USA.  It <emphasis>is</emphasis> legal to
import them into the USA, but once you have done so, you may not be allowed to
re-export them.  If you are in the USA, or if you are loading from
<emphasis>cvsup.internat.freebsd.org</emphasis>, you can also add the following line to the end
of either <emphasis>cvsupfile</emphasis>:
</para>
<programlisting>
cvs-crypto
</programlisting>

<para>Otherwise create a second <emphasis>cvsupfile</emphasis> to load from
<emphasis>cvsup.internat.freebsd.org</emphasis>: each <emphasis>cvsupfile</emphasis> file may refer to
only one host.  Write:
</para>
<programlisting>
*default tag=RELENG_2_2_5_RELEASE
*default release=cvs
*default host=cvsup.internat.freebsd.org	<emphasis>the international security mirror</emphasis>
*default base=/usr				<emphasis>for /usr/doc, /usr/ports, /usr/src</emphasis>
*default prefix=/src/ncvs
*default delete
*default use-rel-suffix
*default compress
cvs-crypto
</programlisting>

<para></para>
</sect2>
<sect2>
<title>CTM</title>

<para><indexterm><primary>ctm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm</secondary></indexterm>
If your Internet connection isn't good enough for <emphasis>CVSup</emphasis>, <emphasis>CTM</emphasis>
might be for you.  <emphasis>CTM</emphasis> distributes updates by mail.  To get started, do
the following:
</para>
<itemizedlist>
<listitem>

<para>Send mail to <emphasis>majordomo@FreeBSD.org</emphasis> with an empty subject and a body
containing the lines
</para>
<programlisting>
subscribe ctm-announce@FreeBSD.org
subscribe ctm-src-cur@FreeBSD.org
</programlisting>

<para><emphasis>ctm-src-cur</emphasis> is the list on which <emphasis>CTM</emphasis> distributes the deltas for
-CURRENT.  There are a number of other mailing lists, but their purpose is not
well documented.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ctm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm</secondary></indexterm>
<indexterm><primary>ctm_rmail</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm_rmail</secondary></indexterm>
Make sure you have the programs <emphasis>ctm</emphasis> and <emphasis>ctm_rmail</emphasis>.  They're part
of the FreeBSD distribution, and should be in <emphasis>/usr/sbin</emphasis>.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-cvs-ftp"/>
<indexterm><primary>base</primary><secondary>delta</secondary></indexterm>
<indexterm><primary>ctm</primary><secondary>base delta</secondary></indexterm>
Get a source tree.  Unlike <emphasis>CVSup</emphasis>, this is <emphasis>not</emphasis> optional.  You can
get one in the form of a <emphasis>base delta</emphasis> from
<emphasis>ftp://ftp.FreeBSD.org/pub/FreeBSD/CTM</emphasis>.  In this directory you will find a
number of choices: <emphasis>cvs-cur</emphasis>, <emphasis>ports-cur</emphasis> and <emphasis>src-cur</emphasis> are the
-CURRENT directories, and <emphasis>src-2.1</emphasis>, <emphasis>src-2.2</emphasis> etc. are the release
directories.  In any of these you will find file names like:
</para>
<programlisting>
-r--r--r--  1 root  wheel     37754436 Aug  9 11:22 src-cur.0400xEmpty.gz
-r--r--r--  1 root  wheel         8740 Aug 10 02:45 src-cur.0401.gz
-r--r--r--  1 root  wheel        12552 Aug 11 02:46 src-cur.0402.gz
-r--r--r--  1 root  wheel        13353 Aug 11 18:45 src-cur.0403.gz
-r--r--r--  1 root  wheel         3538 Aug 12 10:39 src-cur.0404.gz
-r--r--r--  1 root  wheel        10973 Aug 13 02:46 src-cur.0405.gz
-r--r--r--  1 root  wheel         8556 Aug 13 18:40 src-cur.0406.gz
</programlisting>

<para>As you can see from its size, the first of these files,
<emphasis>src-cur.0400xEmpty.gz</emphasis>, is a <emphasis>base delta</emphasis>.  The remaining files
represent updates, called <emphasis>deltas</emphasis> in <emphasis>CTM</emphasis> terminology.  Get the
newest of the base deltas, since you need to apply all subsequent deltas to it.
</para>
</listitem>
<listitem>

<para>Decide on two directories:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>A directory in which to store the deltas.  Make sure you have plenty of space
here.  For the sake of example, call it <emphasis>/src/ctm/0400</emphasis>.  It's a good idea,
but not essential, to keep multiple directories, each with 100 deltas.  Every
time the number increments by 100, create a new directory.  For example, the
next directory could be <emphasis>/src/ctm/0500</emphasis>.  This speeds up the operation of
<emphasis>ctm</emphasis>.
</para>
</listitem>
<listitem>

<para>A directory where you're going to maintain the tree.  This is the same
consideration as for <emphasis>CVSup</emphasis>: if you're maintaining a repository, it
should have a name like <emphasis>/src/ncvs</emphasis>.  Otherwise it will be <emphasis>/usr/doc</emphasis>,
<emphasis>/usr/ports</emphasis> or <emphasis>/usr/src</emphasis>.
</para>
</listitem>
</orderedlist>
Now you're ready to go.  To extract your deltas, do:
<programlisting>
# <command>cd /usr/src</command>
# <command>ctm -v -v /src/ctm/0400/*</command>
Warning: .ctm_status not found.
Working on &lt;/src/ctm/0400/src-2.2.0400xEmpty.gz&gt;
Expecting Global MD5 &lt;557c6f7601490a32d89114361beebdca&gt;
Reference Global MD5 &lt;557c6f7601490a32d89114361beebdca&gt;
&gt; FM .ctm_status
&gt; FM COPYRIGHT
&gt; FM Makefile
&gt; FM README
&gt; DM bin
&gt; FM bin/Makefile
&gt; FM bin/Makefile.inc
&gt; DM bin/cat
&gt; FM bin/cat/Makefile
<emphasis>\&amp;... etc</emphasis>
&gt; FM usr.sbin/zic/zic.c
All done ok
Working on &lt;/src/ctm/0400/src-2.2.0401.gz&gt;
Expecting Global MD5 &lt;690bc0bbe90d846566f2af1dcd7cc25c&gt;
Reference Global MD5 &lt;690bc0bbe90d846566f2af1dcd7cc25c&gt;
&gt; FS .ctm_status
&gt; FN usr.bin/tip/tip/cmds.c
<emphasis>\&amp;... etc</emphasis>
&gt; FN usr.sbin/sendmail/cf/cf/hub.mc
All done ok
Working on &lt;/src/ctm/0400/src-2.2.0402.gz&gt;
Expecting Global MD5 &lt;0941d8a04d828eef3ba3bbc0bd400d89&gt;
Reference Global MD5 &lt;0941d8a04d828eef3ba3bbc0bd400d89&gt;
&gt; FS .ctm_status
&gt; FN sbin/shutdown/shutdown.c
<emphasis>\&amp;... etc</emphasis>
&gt; FN usr.sbin/lpr/lpd/lpd.c
All done ok
Exit(0)
</programlisting>

<para>The first time round, this will extract your base delta and then all other
deltas you might have collected.  <emphasis>ctm</emphasis> notes the last delta it extracts,
so next time it will start with the next higher number.  This is the reason why
it's a good idea to keep separate directories for each 100 deltas, so that
<emphasis>ctm</emphasis> doesn't have to examine all the deltas to find out which need to be
applied.
</para>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Getting deltas by mail</title>

<para><indexterm><primary>getting</primary><secondary>deltas by mail</secondary></indexterm>
<indexterm><primary>deltas</primary><secondary>getting by mail</secondary></indexterm>
<indexterm><primary>ctm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm</secondary></indexterm>
<indexterm><primary>ctm_rmail</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ctm_rmail</secondary></indexterm>
When you receive deltas by mail, you will first need to convert them into the
format used by <emphasis>ctm</emphasis>.  <emphasis>ctm_rmail</emphasis> performs this job.  First, save the
messages into a folder, say <emphasis>ctm</emphasis>, then enter:
</para>
<programlisting>
# <command>cd /src/ctm/0400</command>
# <command>ctm_rmail -p ~/Mail/ctm -d .</command>
</programlisting>

<para>This assumes you are using a standard mailer which keeps its folders in the
subdirectory <emphasis>Mail</emphasis> of your home directory (<emphasis>~/Mail</emphasis>).
</para>

<para><emphasis>ctm_rmail</emphasis> will extract the files no matter what sequence they are
in&mdash;they will seldom be in the correct sequence.  Often you will find that a
large delta is split into multiple parts, and that only some of them have arrive
at any particular occasion.  This does not confuse <emphasis>ctm_rmail</emphasis> either:
when they have all arrived, it will create a correct delta.
</para>
</sect2>
<sect2>
<title>Getting deltas with <emphasis>ftp</emphasis> </title>

<para><indexterm><primary>getting</primary><secondary>deltas with <emphasis>ftp</emphasis></secondary></indexterm>
<indexterm><primary>deltas</primary><secondary>getting with <emphasis>ftp</emphasis></secondary></indexterm>
As we saw
</para>

<para>you can also get deltas with <emphasis>ftp</emphasis>.  You may need to do this, for example,
if a mail message gets lost.  Proceed as described above.
</para>
</sect2>
</sect1>
<sect1>
<title>Creating the source tree</title>

<para><indexterm><primary>creating</primary><secondary>the source tree</secondary></indexterm>
<indexterm><primary>source</primary><secondary>tree</secondary></indexterm>
If you're tracking the repository, you're not finished yet.  Once you have an
up-to-date repository, the next step is to create a source tree.  By default,
the source tree is called <emphasis>/usr/src</emphasis>, though it's very common for
<emphasis>/usr/src</emphasis> to be a symbolic link to a source tree on a different file
system.  You create the tree with <emphasis>cvs</emphasis>.
</para>

<para>Before you check anything out with <emphasis>cvs</emphasis>, you need to know:
</para>
<itemizedlist>
<itemizedlist>
<listitem>

<para>What do you want to check out?  You specify this by the name of a directory (for
example, <emphasis>src/sys</emphasis>), or with the keyword <emphasis>world</emphasis>.  Note that there
are three top-level directories: <emphasis>doc</emphasis>, <emphasis>ports</emphasis> and <emphasis>src</emphasis>.
</para>
</listitem>
<listitem>

<para>Which version do you want to check out?  By default, you get the latest version,
which is FreeBSD-CURRENT.  If you want a different version, you need to specify
its <emphasis>tag</emphasis>.
</para>
</listitem>
<listitem>

<para>Possibly, the date of the last update that you want to be included in the
checkout.  If you specify this date, <emphasis>cvs</emphasis> ignores any more recent
updates.  This option is often useful when somebody discovers a recently
introduced bug in -CURRENT: you check out the modules as they were before the
bug was introduced.  You specify the date with the <emphasis>-D</emphasis> option, for
example <emphasis>-D "10 December 1997"</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>The tags</title>

<para><indexterm><primary>cvs</primary><secondary>tag</secondary></indexterm>
<indexterm><primary>tag</primary><secondary>cvs</secondary></indexterm>
FreeBSD releases contain two, three or four numbers separated by periods.  Each
number represents a progressively smaller increment in the functionality of the
release.  The first number is the base release of FreeBSD.  The number is
incremented only when significant functionality is added to the system.  For
example, release 1 of FreeBSD was based on the Net/2 tapes from Berkeley, which
were a heavily modified 4.3BSD.  Release 2 bases on 4.4BSD.  Release 3 includes
significant new development, particularly in the areas of file system and memory
management.
</para>

<para>The second number represents a less significant, but still important difference
in the functionality, and the third number represents a minor release.  The
fourth number is only used when a significant bug requires re-release of an
otherwise unchanged release.
</para>

<para>Tags for released versions of FreeBSD follow the release numbers.  For release
<emphasis>x</emphasis>.<emphasis>y</emphasis>.<emphasis>z</emphasis> you would look for the tag
<emphasis>RELENG_<emphasis>x_<emphasis>y</emphasis>_<emphasis>z</emphasis>\_RELEASE</emphasis></emphasis>.  For example, to get the
current state of the FreeBSD 2.2.5 source tree, you would look for the tag
<emphasis>RELENG_2_2_5_RELEASE</emphasis>.
</para>

<para>Some tags diverge from this scheme.  In particular, <emphasis>CSRG</emphasis> and
<emphasis>bsd_44_lite</emphasis> both refer to the original 4.4BSD sources from Berkeley.  If
you feel like it, you can extract this source tree as well.
</para>

<para>To find out what tags are available, do:
</para>
<programlisting>
# <command>cd $CVSROOT/src</command>
# <command>cvs log Makefile | less</command>

RCS file: /src/cvs/src/Makefile,v
Working file: Makefile
head: 1.155
branch:
locks: strict
access list:
symbolic names:
        RELENG_2_2_5_RELEASE: 1.109.2.19
        RELENG_2_2_2_RELEASE: 1.109.2.4
        RELENG_2_2_1_RELEASE: 1.109.2.2
        RELENG_2_2_0_RELEASE: 1.109.2.2
        RELENG_2_1_7_RELEASE: 1.57.4.19
        RELENG_2_1_6_1_RELEASE: 1.57.4.19
        RELENG_2_1_6_RELEASE: 1.57.4.19
        RELENG_2_2: 1.109.0.2
        RELENG_2_2_BP: 1.109
        RELENG_2_1_5_RELEASE: 1.57.4.17
        RELENG_2_1_0_RELEASE: 1.57.4.8
        RELENG_2_1_0: 1.57.0.4
        RELENG_2_1_0_BP: 1.57
        RELENG_2_0_5_RELEASE: 1.57
        RELENG_2_0_5: 1.57.0.2
        RELENG_2_0_5_BP: 1.57
        RELENG_2_0_5_ALPHA: 1.56
        RELEASE_2_0: 1.30
        BETA_2_0: 1.30
        ALPHA_2_0: 1.29.0.2
        bsd_44_lite: 1.1.1.1
        CSRG: 1.1.1
keyword substitution: kv
total revisions: 179;   selected revisions: 179
description:
</programlisting>

<para><emphasis>cvs</emphasis> expects to find the name of its repository in the environment
variable <emphasis>CVSROOT</emphasis>, and it won't work if you don't put it there.  The
repository contains three directories:
</para>
<itemizedlist>
<listitem>

<para><emphasis>CVSROOT</emphasis> contains files used by CVS.  It is not part of the source tree.
</para>
</listitem>
<listitem>

<para><emphasis>ports</emphasis> contains the Ports Collection
</para>
</listitem>
<listitem>

<para><emphasis>src</emphasis> contains the system sources.
</para>
</listitem>
</itemizedlist>

<para>The directories <emphasis>ports</emphasis> and <emphasis>src</emphasis> correspond to the directories
<emphasis>/usr/ports</emphasis> and <emphasis>/usr/src</emphasis> for a particular release.  To extract
the <emphasis>src</emphasis> tree of the most up-to-date version of FreeBSD-CURRENT, do the
following:
</para>
<programlisting>
# <command>cd /usr</command>
# <command>cvs co src 2&gt;&amp;1 | tee /var/tmp/co.log</command>
</programlisting>

<para>To check out any other version, say, everything for release 2.2.2, you would
enter
</para>
<programlisting>
# <command>cd /usr</command>
# <command>cvs co -r RELENG_2_2_2_RELEASE world 2&gt;&amp;1 | tee /var/tmp/co.log</command>
</programlisting>

<para>If you need to check out an older version, for example if there are problems
with the most recent version of -CURRENT, you could enter:
</para>
<programlisting>
# <command>cvs co  -D "10 December 1997" src/sys</command>
</programlisting>

<para>This command checks out the kernel sources as of 10 December 1997.
<indexterm><primary>cvs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>cvs</secondary></indexterm>
During checkout, <emphasis>cvs</emphasis> creates a subdirectory <emphasis>CVS</emphasis> in each
directory.  <emphasis>CVS</emphasis> contains four files.  We'll look at typical values when
checking out the version of the directory <emphasis>/usr/src/usr.bin/du</emphasis> for release
2.2.2, from the repository at <emphasis>/src/ncvs</emphasis>:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>CVS/Entries</primary></indexterm>
<emphasis>Entries</emphasis> contains a list of the files being maintained in the parent
directory, along with their current versions.  In our example, it would contain:
</para>
<programlisting>
/Makefile/1.1.1.1/Fri May 27 12:31:05 1994/TRELENG_2_2_2_RELEASE
/du.1/1.6/Wed Oct 23 06:53:55 1996/TRELENG_2_2_2_RELEASE
/du.c/1.6/Wed Oct 23 06:53:57 1996/TRELENG_2_2_2_RELEASE
</programlisting>

<para>Note that <emphasis>cvs</emphasis> prepends a <emphasis>T</emphasis> to the version name.
</para>
</listitem>
<listitem>

<para><indexterm><primary>CVS/Repository</primary></indexterm>
<emphasis>Repository</emphasis> contains the name of the directory in the repository which
contains the repository for this directory.  This corresponds to
<emphasis>$CVSROOT/directory</emphasis>.  In our example, it would contain
<emphasis>/src/ncvs/src/usr.bin/du</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>CVS/Root</primary></indexterm>
<emphasis>Root</emphasis> contains the name of the root of the repository.  In our example,
it would contain <emphasis>/src/ncvs/src/usr.bin/du</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>CVS/Tag</primary></indexterm>
<emphasis>Tag</emphasis> contains the <emphasis>version tag</emphasis> of the source tree.  This is the
RCS tag prefixed by a <emphasis>T</emphasis>.  In this case, it is
<emphasis>TRELENG_2_2_2_RELEASE</emphasis>.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>cvs</primary><secondary>co</secondary></indexterm>
<indexterm><primary>command</primary><secondary>cvs co</secondary></indexterm>
<emphasis>cvs co</emphasis> produces a lot of output&mdash;at least one line for each directory,
and one line for each file it checks out.  Here's part of a typical output:
</para>
<programlisting>
U src/usr.sbin/mrouted/rsrr_var.h
U src/usr.sbin/mrouted/vif.c
U src/usr.sbin/mrouted/vif.h
cvs checkout: Updating src/usr.sbin/mrouted/common
U src/usr.sbin/mrouted/common/Makefile
cvs checkout: Updating src/usr.sbin/mrouted/map-mbone
U src/usr.sbin/mrouted/map-mbone/Makefile
cvs checkout: Updating src/usr.sbin/mrouted/mrinfo
U src/usr.sbin/mrouted/mrinfo/Makefile
cvs checkout: Updating src/usr.sbin/mrouted/mrouted
U src/usr.sbin/mrouted/mrouted/Makefile
cvs checkout: Updating src/usr.sbin/mrouted/mtrace
U src/usr.sbin/mrouted/mtrace/Makefile
cvs checkout: Updating src/usr.sbin/mrouted/testrsrr
U src/usr.sbin/mrouted/testrsrr/Makefile
U src/usr.sbin/mrouted/testrsrr/testrsrr.c
</programlisting>

<para><indexterm><primary>cvs</primary><secondary>conflicts</secondary></indexterm>
<indexterm><primary>conflicts</primary><secondary>cvs</secondary></indexterm>
The flag <emphasis>U</emphasis> at the beginning of the line stands <emphasis>update</emphasis>, but it can
also mean that the file was checked out of the repository, as in this case.
Other important flags are <emphasis>?</emphasis>, which means that <emphasis>cvs</emphasis> found the file
in the directory, but it doesn't know it, <emphasis>M</emphasis>, which means that the file
in your working directory has been modified since checkout, so <emphasis>cvs</emphasis>
doesn't change it, and <emphasis>C</emphasis>, which implies a <emphasis>conflict</emphasis>: <emphasis>cvs</emphasis>
found that the file was modified and was unable to merge the changes.
</para>
<note>

<para>After checkout, check the log file for conflicts.  For each conflict, you must
check the files manually and possibly recover the contents.
</para>
</note>

<para>See the man page <emphasis>cvs(1)</emphasis> for more details.
</para>
</sect2>
<sect2>
<title>Updating an existing tree</title>

<para><indexterm><primary>updating</primary><secondary>an existing source tree</secondary></indexterm>
<indexterm><primary>source</primary><secondary>tree</secondary></indexterm>
Once you have checked out a tree, the ground rules change a little.  Next time
you do a checkout, files may also need to be deleted.  Apart from that, there
isn't much difference between checkout and updating.  To update the
<emphasis>/usr/src</emphasis> directory after updating the repository, do:
</para>
<programlisting>
# <command>cd /usr/src</command>
# <command>cvs update -P -d</command>
</programlisting>

<para>Note that this time we can start in <emphasis>/usr/src</emphasis>: since we now have the
<emphasis>CVS/</emphasis> subdirectories in place, <emphasis>cvs</emphasis> knows what to do without being
given any more information.
</para>
</sect2>
</sect1>
<sect1>
<title>Making a new world</title>

<para><indexterm><primary>make</primary><secondary>world</secondary></indexterm>
The next step after making the source tree is to build all the software.  This
is relatively simple for you, but depending on the speed of the machine, it may
keep the computer busy for up to a day:
</para>
<programlisting>
# <command>cd /usr/src</command>
# <command>make world</command>
</programlisting>

<para>This operation performs a number functions, which can be influenced by variables
you pass to <emphasis>make</emphasis>.  Without any variables, <emphasis>make world</emphasis> performs the
following steps:
</para>
<itemizedlist>
<listitem>

<para>It removes the old build directories and creates new ones.  You can skip this
step by setting the <emphasis>NOCLEAN</emphasis> variable.
</para>
</listitem>
<listitem>

<para>It rebuilds and installs <emphasis>make</emphasis>, the C compiler and the libraries.
</para>
</listitem>
<listitem>

<para>It builds the rest of the system, with the exception of the kernel.
</para>
</listitem>
<listitem>

<para>It installs everything.  You can omit this stage by building the
<emphasis>buildworld</emphasis> target instead of <emphasis>world</emphasis>.
</para>
</listitem>
</itemizedlist>

<para><table frame='all'><title>Targets for top-level <emphasis>Makefile</emphasis></title>
box,center,tab(#) ;
| lfCWp9 | lw65 | .
Target#Purpose
=
buildworld#rebuild everything, including glue to help do upgrades.
installworld#install everything built by <emphasis>buildworld</emphasis>
world#<emphasis>perform buildworld</emphasis> and <emphasis>installworld</emphasis>
update#update your source tree
most#build user commands, no libraries or include files
installmost#install user commands, but not libraries or include files
reinstall#T{
If you have a build server, you can NFS mount the source and object directories
and do a <emphasis>make reinstall</emphasis> on the <emphasis>client</emphasis> to install new binaries
from the most recent build on the server.
T}

</tbody></tgroup></table>
<table frame='all'><title>Variables for <emphasis>make world</emphasis></title>
box,center,tab(#) ;
| lfCWp9 | lw64 | .
Variable#Function
=
ALLLANG#T{
build documentation for all languages, where available.  See
<emphasis>share/doc/Makefile</emphasis> for more details.
T}
CLOBBER#remove <emphasis>/usr/include</emphasis>.
MAKE_EBONES#build eBones (KerberosIV)
NOCLEAN#T{
Do not clean out the old build tree.  This can save on build time, but may
introduce subtle problems.  You'll probably want to use this if your <emphasis>make
world</emphasis> dies in mid-build.
T}
NOCLEANDIR#run <emphasis>make clean</emphasis> instead of <emphasis>make cleandir</emphasis>
NOCRYPT#don't build  crypt versions
NOGAMES#T{
Don't rebuild the games.
T}
NOINFO#don't make or install info files
NOLIBC_R#don't build <emphasis>libc_r</emphasis>.
NOLKM#don't build loadable kernel modules
NOOBJDIR#don't run <emphasis>make obj</emphasis>
NOPROFILE#T{
Don't build the profiling libraries.  If you're not doing any development
involving profiling, this can save a considerable amount of time and space.  If
you don't know what profiling libraries are, you don't want them.
T}
NOSECURE#T{
Don't build the export-restricted modules.  If you haven't downloaded the
source for these, then you won't want to try to build them.  This is a good
option to use if you are not in the USA.
T}
NOSHARE#T{
Don't rebuild <emphasis>/usr/share</emphasis>.  This can save some time, and if
<emphasis>/usr/share</emphasis> (which contains manpages, data files and examples) hasn't
changed much, it won't cause you any trouble.
T}

</tbody></tgroup></table>
It does this by building a number of subtargets.  Occasionally, you might find
it useful to build them individually.  Table <xref linkend="CFBSD-build-targets"/>
<!--  .pageref \*[build-targets-page] "on page \*[build-targets-page]" "\&amp;" "on page \*[build-targets-page]" -->
gives an overview of the more useful targets to the top-level <emphasis>Makefile</emphasis>,
and table <xref linkend="CFBSD-build-variables"/>
<!--  .pageref \*[build-variables-page] "on page \*[build-variables-page]" "\&amp;" "on page \*[build-variables-page]" -->
gives an overview of the more common variables for <emphasis>make world</emphasis> and
<emphasis>make buildworld</emphasis>.  Note that <emphasis>make world</emphasis> doesn't rebuild the
kernel.  This doesn't mean that it's optional: you need to keep some programs,
for example <emphasis>ps</emphasis>, in step with the kernel.  <emphasis>make world</emphasis> builds
<emphasis>ps</emphasis>, but it doesn't build the kernel.
</para>

<para>The good news is: building the kernel for -CURRENT is just the same as it always
is.  See <xref linkend="CFBSD-chbuild"/>, for more details.  There is one possible problem that is
specific to -CURRENT: if you try to build a kernel without first performing a
<emphasis>make world</emphasis>, you might find that the kernel fails to link with lots of
undefined references.  One possible reason for this would be that the
<emphasis>config</emphasis> program is out of synchronization with the kernel modules.
Before you try anything else, rebuild <emphasis>config</emphasis>:
</para>
<programlisting>
# <command>cd /usr/src/usr.sbin/config</command>
# <command>make depend all install clean</command>
</programlisting>

<para><indexterm><primary>make</primary><secondary>clean</secondary></indexterm>
You need to <emphasis>make clean</emphasis> at the end since this method will store the
object files in non-standard locations.
</para>
</sect1>
<sect1>
<title>Putting it all together</title>

<para>There are a number of steps in updating a repository and building a new version
of the operating system.  Make just a small mistake, and things won't work.  On
the other hand, none of the steps are complicated.  This is obviously a job for
a computer.
</para>

<para><indexterm><primary>CVSup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>CVSup</secondary></indexterm>
The following script is designed to be run by <emphasis>cron</emphasis>.  It first updates the
repository with <emphasis>CVSup</emphasis>, then it updates the source tree with <emphasis>cvs</emphasis>, and
finally it builds a new version of the system and the kernel.  If you schedule
this script to start late at night on a fast machine, it should all be done by
the following morning.
</para>
<programlisting>
echo ====== `date`: Getting CVSUP updates
cvsup -g -L2 /src/cvsup/cvs-cvsupfile		<emphasis>get the updates</emphasis>
cvsup -g -L2 /src/cvsup/secure-cvsupfile		<emphasis>security comes from a different site</emphasis>
echo ====== `date`: Updating /usr/src
echo cd /usr/src
cd /usr/src
cvs update -P -d						<emphasis>update the source tree</emphasis>
echo ====== `date`: Rebuilding TAGS
cd /usr/src/sys
rm -f TAGS								<emphasis>rebuild TAGS file for Emacs</emphasis>
find . -follow -name "*.[csh]" | xargs etags -a
echo ====== `date`: Rebuilding CURRENT
echo cd /usr/src
cd /usr/src
make world								<emphasis>rebuild everything</emphasis>
echo ====== `date`: Rebuilding FREEBIE kernel
cd /usr/src/sys/compile
mv FREEBIE/version .						<emphasis>save the version number</emphasis>
cd /usr/src/sys/i386/conf
config -g FREEBIE						<emphasis>reconfigure the kernel with debugging</emphasis>
echo cd /usr/src/sys/compile/FREEBIE
cd /usr/src/sys/compile/FREEBIE
cp ../version .							<emphasis>restore the version number</emphasis>
make -k								<emphasis>and make everything we can</emphasis>
if [ $? -ne 0 ]; then					<emphasis>failed, give up</emphasis>
  echo ====== `date`: '***' Build failed
  exit 1
fi
chflags noschg /kernel
mv /kernel /kernel.yesterday				<emphasis>save the old kernel</emphasis>
rm -f kernel.gdb
if [ -f /var/crash/kernel.gdb ]; then
  mv  /var/crash/kernel.gdb /var/crash/kernel.gdb.old  <emphasis>save any old /var/crash/kernel.gdb</emphasis>
fi
cp -p kernel kernel.gdb					<emphasis>rename kernel to debug version</emphasis>
ln -s kernel.gdb /var/crash/kernel.gdb		<emphasis>and link to the current version</emphasis>
strip -d kernel							<emphasis>strip the kernel we're going to run</emphasis>
cp kernel /kernel						<emphasis>and move it to the root directory</emphasis>
echo ====== `date`: Build completed
if [ $? -eq 0 ]; then
  echo ====== `date`: FREEBIE kernel build completed
else
  echo '******' `date`: FREEBIE kernel build failed
fi
</programlisting>

<para>You can, of course, use <emphasis>make install</emphasis> to install the kernel, but it will
install the full debug kernel in the root file system.  Apart from the fact that
it will fill up the file system&mdash;currently the debug kernel is about 10 MB in
size, it will also fill up memory.
</para>
</sect1>
<sect1>
<title>Living with FreeBSD-CURRENT</title>

<para><indexterm><primary>FreeBSD-CURRENT</primary><secondary>living with</secondary></indexterm>
<indexterm><primary>living</primary><secondary>with FreeBSD-CURRENT</secondary></indexterm>
Keeping up with FreeBSD-CURRENT requires work on your part.  You should be on
the <emphasis>FreeBSD-current</emphasis> mailing list.  To join, send mail to
<emphasis>majordomo@FreeBSD.org</emphasis> with the single line text (not subject):
</para>
<programlisting>
subscribe FreeBSD-current
</programlisting>

<para>If the mail ID that you want to add to the list is different from the ID you're
sending from, put the ID at the end of the line.  This will require manual
intervention to confirm that the user really wants to be on the list, so it can
take longer.  It's always better to send the mail from the ID at which you want
to receive the mail.
</para>
<sect2>
<title><emphasis>ps</emphasis> doesn't work any more!</title>

<para><indexterm><primary>ps</primary><secondary>doesn't work any more!</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vmstat</secondary></indexterm>
<indexterm><primary>vmstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>libkvm</primary><secondary>library</secondary></indexterm>
<indexterm><primary>library</primary><secondary>libkvm</secondary></indexterm>
One of the more common problems that people see after building a new -CURRENT
kernel looks like this:
</para>
<programlisting>
$ <command>ps</command>
ps: proc size mismatch (15800 total, 656 chunks)
</programlisting>

<para><indexterm><primary>kvm</primary><secondary>library</secondary></indexterm>
This is a sure indication that your <emphasis>ps</emphasis> program or the <emphasis>kvm</emphasis>
library no longer match your kernel.  To solve this problem, do the following:
</para>
<programlisting>
# <command>cd /usr/src/lib/libkvm</command>
# <command>make all install clean</command>
# <command>cd /usr/src/bin/ps</command>
# <command>make all install clean</command>
</programlisting>

<para>The reason for the target <emphasis>clean</emphasis> is that such a build will place the
objects in the source directory, and not in the object directory.  If you don't
make <emphasis>clean</emphasis> now, a subsequent build will not replace them.
</para>
</sect2>
<sect2>
<title>Build kernels with debug symbols</title>

<para><anchor id="CFBSD-Debug-Kernel"/>
<indexterm><primary>kernel</primary><secondary>debugging</secondary></indexterm>
FreeBSD-CURRENT is not as stable as the released versions.  To prepare yourself
for possible problems, you should build kernels which include debug symbols.
The resultant kernel is about 10 MB in size, but it will make debugging with
<emphasis>ddb</emphasis> (the kernel debugger) or <emphasis>gdb</emphasis> much easier.  Even if you don't
intend to do this yourself, the information will be of great use to anybody you
may call in to help.
</para>

<para>We looked at how to build a debug kernel on page <xref linkend="CFBSD-run-config"/>.  If you're
running -CURRENT, you might prefer to install the complete debug kernel.  Do
this with:
</para>
<programlisting>
# <command>make install.debug</command>
</programlisting>

<para>instead of the usual target <emphasis>install</emphasis>.
</para>
</sect2>
<sect2>
<title>Solving problems in FreeBSD-CURRENT</title>

<para><indexterm><primary>solving</primary><secondary>problems in FreeBSD-CURRENT</secondary></indexterm>
<indexterm><primary>FreeBSD-CURRENT</primary><secondary>solving problems in</secondary></indexterm>
You <emphasis>will</emphasis> run into problems with FreeBSD-CURRENT.  When it happens,
please first read the mailing list and possibly the mail archives (see
<emphasis>http://www.FreeBSD.ORG/search.html</emphasis> for a search engine) and see if the
problem has been reported.  If it hasn't, try to investigate the problem
yourself.  Then send mail to <emphasis>FreeBSD-current</emphasis> describing the problem and
what you have done to solve it.
</para>

<para>If you experience a panic, please don't just send a message to
<emphasis>FreeBSD-current</emphasis> saying ``My kernel panics when I type <emphasis>foo</emphasis>''.
Remember that you're asking somebody to use their spare time to look at the
problem.  Make it easy for them.  Go through this procedure:
</para>
<itemizedlist>
<listitem>

<para>Update to the absolutely latest sources, unless emails have been warning against
this.
</para>
</listitem>
<listitem>

<para>Remove all loadable kernel modules (the contents of the directory <emphasis>/lkm/*</emphasis>).
</para>
</listitem>
<listitem>

<para>If you have any local patches, back them out.
</para>
</listitem>
<listitem>

<para>Recompile, from scratch, your kernel with <emphasis>ddb</emphasis> and with complete symbols
(see above).  If possible, don't strip your kernel before booting.  An
unstripped kernel will take up about 8 MB more memory than a stripped one, so
this is not possible with very small memory systems.
</para>

<para>It's still important to build the debug kernel if you do have a small memory.
You'll have to strip the version you boot, but you can still use the debug
version with <emphasis>gdb</emphasis> to debug a panic dump.
</para>
</listitem>
<listitem>

<para>Report all details from the panic.  At an absolute minimum, give all information
from <emphasis>show reg</emphasis> and <emphasis>trace</emphasis>.
</para>
</listitem>
<listitem>

<para>Try to dump the system.
</para>
</listitem>
</itemizedlist>

<para>If you don't do at least this, there isn't much chance that a mail message to
<emphasis>FreeBSD-current</emphasis> will have much effect.
</para>
</sect2>
</sect1>
<sect1>
<title>Problems with CVS</title>

<para><indexterm><primary>problems</primary><secondary>with CVS</secondary></indexterm>
<indexterm><primary>CVS</primary><secondary>problems with</secondary></indexterm>
Occasionally, you'll run into problems updating your source tree.  Here are some
possibilities:
</para>
<sect2>
<title>Can't find directory</title>

<para>Occasionally <emphasis>cvs</emphasis> will crash during an update with a message like:
</para>
<programlisting>
cvs update: Updating games/sail
U games/sail/externs.h
cvs update: Updating games/snake
cvs update: Updating games/snake/snake
U games/snake/snake/snake.c
cvs update: Updating games/snake/snscore
cvs update: Updating games/tetris
cvs [update aborted]: cannot open directory /src/cvs/src/games/tetris: No such file or
 directory
</programlisting>

<para></para>
<note>

<para>This particular incident occurred after the owner of the name <emphasis>Tetris</emphasis>
required FreeBSD to remove the game then called <emphasis>tetris</emphasis> from the sources.
</para>
</note>

<para>The problem here is that the file <emphasis>/usr/src/games/CVS/Entries</emphasis> still
contained a reference to the directory, so <emphasis>cvs</emphasis> failed.  One way to fix
this problem is to manually edit the file <emphasis>CVS/Entries</emphasis>, but it's easier to
remove the <emphasis>CVS</emphasis> directory and start again:
</para>
<programlisting>
# <command>cd /usr/src/games</command>
# <command>rm -rf CVS</emphasis>							<emphasis>remove the CVS information</command>
# <command>cd ..</emphasis>								<emphasis>go to the parent directory</command>
# <command>cvs co games 2&gt;&amp;1 | tee /var/tmp/co.log</command></emphasis>		<emphasis>and check the games directory out again
</programlisting>

<para></para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchemulate"><title>Emulating other operating systems</title>

<para><indexterm><primary>emulate</primary></indexterm>
<indexterm><primary>/usr/ports/emulators</primary></indexterm>
A large number of operating systems run on Intel hardware, and there is a lot of
software which is available for these other operating systems, but not for
FreeBSD.  As a result, FreeBSD can <emphasis>emulate</emphasis> many other systems to a point
where applications written for these systems will run under FreeBSD.  You'll
find all the emulators in the Ports Collection in the directory
<emphasis>/usr/ports/emulators</emphasis>.  This directory also contains a number of emulators
for less well known systems.
</para>

<para>In a number of cases, the emulation support is in an experimental stage.  Here's
an overview:
</para>
<itemizedlist>
<listitem>

<para>FreeBSD will run most BSD/OS programs with no problems.  The exceptions are
mainly ELF binaries, which were introduced with BSD/OS 3.0, and some old BSD/386
1.x binaries, which will also no longer run under BSD/OS 2.x or 3.x: they
contain calls to the function <emphasis>lockf(2)</emphasis>, which was changed for 4.4BSD.
Work is in progress on BSDI ELF support: check the errata if you need this
feature.
</para>
</listitem>
<listitem>

<para>FreeBSD will also run most NetBSD and OpenBSD executables, though not many
people do this: it's safer to recompile them under FreeBSD.  As a result, there
is a chance you'll run into a bug nobody knows about.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Linux</primary></indexterm>
<indexterm><primary>a.out</primary><secondary>object format</secondary></indexterm>
<indexterm><primary>object</primary><secondary>format</secondary></indexterm>
<indexterm><primary>ELF</primary><secondary>object format</secondary></indexterm>
<indexterm><primary>object</primary><secondary>format</secondary></indexterm>
<indexterm><primary>kld</primary></indexterm>
<indexterm><primary>loadable</primary><secondary>kernel module</secondary></indexterm>
FreeBSD can run <emphasis>Linux</emphasis> executables in both <emphasis>a.out</emphasis> and <emphasis>ELF</emphasis>
object formats with the aid of the <emphasis>linux</emphasis> <emphasis>kld</emphasis> (<emphasis>loadable kernel
module</emphasis>).  We'll look at how to use it in the next section.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ibcs2</primary></indexterm>
FreeBSD can run SCO COFF executables with the aid of the <emphasis>ibcs2</emphasis>
<emphasis>kld</emphasis>.  This support is a little patchy: although the executables will run,
you may run into problems caused by differences in the directory structure
between SCO and FreeBSD.  We'll look at it on page <xref linkend="CFBSD-SCO-emulation"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Microsoft</primary><secondary>Windows</secondary></indexterm>
A <emphasis>Microsoft Windows</emphasis> emulator is available.  We'll look at it on page
<xref linkend="CFBSD-wine"/>.
</para>
</listitem>
<listitem>

<para>Two MS-DOS emulators are available.  Consider them both experimental.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Emulating Linux</title>

<para><indexterm><primary>Torvalds</primary><secondary>Linus</secondary></indexterm>
Linux is a UNIX-like operating system which in many ways is very similar to
FreeBSD.  It is not based on UNIX, however: it was written from scratch by Linus
Torvalds, a Helsinki student.  As a result, some of the interfaces are different
from those of FreeBSD.  The Linux compatibility package handles these
differences, and most Linux software will run on FreeBSD.  Most of the
exceptions use specific drivers which don't run on FreeBSD, though there is a
considerable effort to minimize even this category.
</para>

<para>To install the Linux emulator, you must:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>linux</primary><secondary>kld</secondary></indexterm>
<indexterm><primary>kld</primary><secondary>linux</secondary></indexterm>
Run the Linux emulator kld, <emphasis>linux</emphasis>.
</para>
</listitem>
<listitem>

<para>Install the compatibility libraries.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Running the Linux emulator</title>

<para><anchor id="CFBSD-Linux-emulation"/>
Running the emulator is straightforward: just type in its name, which, not
surprisingly, is <emphasis>linux</emphasis>:
</para>
<programlisting>
# <command>linux</command>
#
</programlisting>

<para>You don't interact directly with the emulator module: it's just there to supply
kernel functionality, so you get a new prompt immediately when you start it.
</para>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
If you use Linux emulation, it's a good idea to enable the <emphasis>linux</emphasis> kld in
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
linux_enable="YES"	# Linux emulation loaded at startup (or NO).
</programlisting>

<para>This will cause it to be started every time you boot the system; it won't start
it immediately.
</para>

<para><indexterm><primary>kldstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kldstat</secondary></indexterm>
Since <emphasis>linux</emphasis> is an kld, it won't show up in a <emphasis>ps</emphasis> listing.  To
check whether it is loaded, use <emphasis>kldstat</emphasis>:
</para>
<programlisting>
$ <command>kldstat</command>
Id Refs Address    Size     Name
 1    5 0xc0100000 1d08b0   kernel
 2    2 0xc120d000 a000     ibcs2.ko
 3    1 0xc121b000 3000     ibcs2_coff.ko
 5    1 0xc1771000 e000     linux.ko
</programlisting>

<para>This listing shows that the SCO UNIX emulation (<emphasis>ibcs2</emphasis>) has also been
loaded.
</para>
</sect2>
<sect2>
<title>Installing the Linux libraries</title>

<para><indexterm><primary>Linux</primary><secondary>installing libraries</secondary></indexterm>
In addition to the kld, Linux emulation requires compatibility libraries.  You
can find them on the installation CD-ROM as
<emphasis>packages/emulators/linux_lib-2.4.tgz</emphasis>, or in the Ports Collection as
<emphasis>/usr/src/ports/emulators/linux_lib</emphasis>.  To install from the installation
CD-ROM, enter
</para>
<programlisting>
# <command>pkg_add /cdrom/packages/emulators/linux_lib-2.4.tgz</command>
</programlisting>

<para>To build the latest version of the library, do
</para>
<programlisting>
# <command>cd /usr/src/ports/emulators/linux_lib</command>
# <command>FORCE_PKG_REGISTER=yes make all install </command>
</programlisting>

<para>The <emphasis>FORCE_PKG_REGISTER=yes</emphasis> enables you to install the library even if an
older version is currently installed.
</para>

<para>The Linux emulator and programs are located in the directory hierarchy
<emphasis>/usr/compat/linux/</emphasis>.  You won't normally need to access them directly, but
if you get a Linux program which includes libraries destined for <emphasis>/lib</emphasis>, you
will need to manually place them in <emphasis>/usr/compat/linux/lib</emphasis>.  Be
<emphasis>very</emphasis> careful not to replace any files in the <emphasis>/usr/lib/</emphasis>
hierarchy with Linux libraries; this would make it impossible to run programs
which depend on them, and it's frequently very difficult to recover from such
problems.  Note that FreeBSD does not have a directory <emphasis>/lib</emphasis>, so the danger
is relatively minor.
</para>
</sect2>
<sect2>
<title>Problems executing Linux binaries</title>

<para><indexterm><primary>branding</primary><secondary>ELF binarues</secondary></indexterm>
<indexterm><primary>brandelf</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>brandelf</secondary></indexterm>
<indexterm><primary>StarOffice</primary><secondary>package</secondary></indexterm>
One of the problems with the ELF format used by more recent Linux binaries is
that they usually contain no information to identify them as Linux binaries.
They might equally well be BSD/OS or UnixWare binaries.  That's normally not a
problem, unless there are library conflicts: the system can't decide which
shared library to use.  If you have this kind of binary, you must <emphasis>brand</emphasis>
the executable using the program <emphasis>brandelf</emphasis>.  For example, to brand the
<emphasis>StarOffice</emphasis> program <emphasis>swriter3</emphasis>, you would enter:
</para>
<programlisting>
# <command>brandelf -t linux /usr/local/StarOffice-3.1/linux-x86/bin/swriter3</command>
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>SCO UNIX emulation</title>

<para><anchor id="CFBSD-SCO-emulation"/>
<indexterm><primary>SCO</primary><secondary>UNIX</secondary></indexterm>
<indexterm><primary>SCO</primary><secondary>OpenDesktop</secondary></indexterm>
<indexterm><primary>COFF</primary><secondary>object format</secondary></indexterm>
<indexterm><primary>object</primary><secondary>format</secondary></indexterm>
<indexterm><primary>Common</primary><secondary>Object File Format</secondary></indexterm>
<emphasis>SCO UNIX</emphasis>, also known as <emphasis>SCO OpenDesktop</emphasis> and <emphasis>SCO Open
Server</emphasis>, is based on UNIX version System V.3.2.  This particular version of
UNIX was current about 7 years ago, and uses a binary format called <emphasis>COFF</emphasis>
(<emphasis>Common Object File Format</emphasis>).  COFF is now considered obsolescent, and
SCO is moving to ELF.
</para>

<para><indexterm><primary>ibcs2</primary><secondary>kld</secondary></indexterm>
<indexterm><primary>kld</primary><secondary>ibcs2</secondary></indexterm>
Like Linux support, SCO support for FreeBSD is supplied as a loadable kernel
module.  It's not called <emphasis>sco</emphasis>, though, since a number of older System V.3.2
systems, including Interactive UNIX, also support the <emphasis>ibcs2</emphasis>
<footnote>

<para><indexterm><primary>Intel</primary><secondary>Binary Compatibility System 2</secondary></indexterm>
<emphasis>ibcs2</emphasis> stands for <emphasis>Intel Binary Compatibility System 2</emphasis>.
</para>
</footnote>
standard.
As a result, the kld is called <emphasis>ibcs2</emphasis>.
</para>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
Run ibcs2 support like Linux support: start it manually, or modify
<emphasis>/etc/rc.conf</emphasis> to start it automatically at bootup:
</para>
<programlisting>
ibcs2_enable="YES"	# Ibcs2 (SCO) emulation loaded at startup (or NO).
</programlisting>

<para>One problem with SCO emulation are the SCO shared libraries.  These are required
to execute many SCO executables, and they're not supplied with the emulator.
They <emphasis>are</emphasis> supplied with SCO's operating systems.  Check the SCO license
to determine whether you are allowed to use them on FreeBSD.  You may also be
eligible for a free SCO license&mdash;see
<emphasis>http://www.sco.com/offers/index.htm</emphasis> for further details.
<!-- XXX.H2 "UNIX System V.4 emulation" -->
<!-- XXX.Pn svr4-emulation -->
<!-- XXXThe UNIX System V.4 emulation package specifically emulates SCO UnixWare. XXX -->
</para>
</sect1>
<sect1>
<title>Emulating Microsoft Windows</title>

<para><anchor id="CFBSD-wine"/>
<indexterm><primary>wine</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>wine</secondary></indexterm>
The <emphasis>wine</emphasis> project has been working for some time to provide an emulation
of Microsofts <emphasis>Windows</emphasis> range of execution environments.  It's part of the
Ports Collection.
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchnetintro"><title>Networks and the Internet</title>

<para>In this part of the book we'll look at the fastest-growing part of the industry:
<emphasis>Networks</emphasis>, and in particular the latest network buzzword, the
<emphasis>Internet</emphasis>.
</para>

<para>The industry has seen many different kinds of network software:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>CCITT</primary></indexterm>
<indexterm><primary>X.25</primary></indexterm>
Years ago, the <emphasis>CCITT</emphasis> started a group of recommendations for individual
protocols.  The CCITT is now called the ITU-T, and its data communications
recommendations have not been wildly successful.  The best known is probably
recommendation <emphasis>X.25</emphasis>, which still has a large following in some parts of
the world.  An X.25 package was available for FreeBSD, but it died for lack of
love.  If you need it, you'll need to invest a lot of work to get it running.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Systems</primary><secondary>Network Architecture</secondary></indexterm>
<indexterm><primary>SNA</primary></indexterm>
IBM introduced their <emphasis>Systems Network Architecture</emphasis>, <emphasis>SNA</emphasis>, decades ago.
It's still going strong in IBM shops.  FreeBSD has minimal support for it in the
Token Ring package being developed in FreeBSD-CURRENT.
</para>
</listitem>
<listitem>

<para><indexterm><primary>UUCP</primary></indexterm>
<indexterm><primary>UNIX</primary><secondary>to UNIX Copy</secondary></indexterm>
<indexterm><primary>Basic</primary><secondary>Networking Utilities</secondary></indexterm>
<indexterm><primary>BNU</primary></indexterm>
Early UNIX machines had a primitive kind of networking called <emphasis>UUCP</emphasis>, for
<emphasis>UNIX to UNIX Copy</emphasis>.  It ran over dialup phone lines or dedicated serial
connections.  System V still calls this system <emphasis>Basic Networking Utilities</emphasis>,
or <emphasis>BNU</emphasis>.  Despite its primitiveness, and despite the Internet, there are
still some applications where UUCP makes sense.  We'll look at it in <xref linkend="CFBSD-chslip"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Internet</primary><secondary>Protocols</secondary></indexterm>
<indexterm><primary>Defense</primary><secondary>Advanced Research Projects Agency</secondary></indexterm>
<indexterm><primary>DARPA</primary></indexterm>
<indexterm><primary>ARPANET</primary></indexterm>
<indexterm><primary>Internet</primary></indexterm>
The <emphasis>Internet Protocols</emphasis> were developed by the US <emphasis>Defense Advanced
Research Projects Agency</emphasis> (<emphasis>DARPA</emphasis>) for its <emphasis>ARPANET</emphasis> network.
The software was originally developed in 1982 at the University of California at
Berkeley and integrated into their 4.2BSD operating system&mdash;the granddaddy of
FreeBSD.  After the introduction of IP, the ARPANET gradually changed its name
to <emphasis>Internet</emphasis>.
</para>

<para><indexterm><primary>IP</primary></indexterm>
<indexterm><primary>TCP/IP</primary></indexterm>
<indexterm><primary>Transmission</primary><secondary>Control Protocol/Internet Protocol</secondary></indexterm>
The Internet Protocol is usually abbreviated to <emphasis>IP</emphasis>.  People often refer to
it as <emphasis>TCP/IP</emphasis>, which stands for <emphasis>Transmission Control Protocol/Internet
Protocol</emphasis>.  In fact, TCP is just one of many other protocols which run on top
of IP.  In this book, I will refer to the IP protocol, but of course FreeBSD
includes TCP and all the other standard protocols.  The IP implementation
supplied with FreeBSD is the most mature technology you can find anywhere, at
any price.
</para>
</listitem>
</itemizedlist>

<para>In this part of the book, we'll look only at the Internet Protocols.  Thanks to
its background, FreeBSD is a particularly powerful contender in this area, and
we'll go into a lot of detail about how to set up and operate networks and
network services.  In the chapters following, we'll look at:
</para>
<itemizedlist>
<listitem>

<para>How to set up the system as a network client, which we'll look at in the next
section.
</para>
</listitem>
<listitem>

<para>How to set up local network connections in <xref linkend="CFBSD-chnetsetup"/>.
</para>
</listitem>
<listitem>

<para>How to select an Internet Service Provider in <xref linkend="CFBSD-chisp"/>.
</para>
</listitem>
<listitem>

<para>How to use the hardware in <xref linkend="CFBSD-chmodems"/>.
</para>
</listitem>
<listitem>

<para>How to use PPP in <xref linkend="CFBSD-chppp"/>.
</para>
</listitem>
<listitem>

<para>How to use SLIP and UUCP in <xref linkend="CFBSD-chslip"/>.
</para>
</listitem>
<listitem>

<para>How to set up domain name services in <xref linkend="CFBSD-chdns"/>.
</para>
</listitem>
<listitem>

<para>How to protect yourself from crackers in <xref linkend="CFBSD-chfirewall"/>.
</para>
</listitem>
<listitem>

<para>How to solve network problems in <xref linkend="CFBSD-chnetdebug"/>.
</para>
</listitem>
<listitem>

<para>How to set up NFS in <xref linkend="CFBSD-chnfs"/>.
</para>
</listitem>
<listitem>

<para>How to use the basic Internet services in <xref linkend="CFBSD-chbasics"/>.
</para>
</listitem>
<listitem>

<para>How to set up electronic mail in <xref linkend="CFBSD-chemail"/>.
</para>
</listitem>
<listitem>

<para>How to use the Web, including setting up Web servers, in <xref linkend="CFBSD-chwww"/>.
</para>
</listitem>
<listitem>

<para>How to send
faxes in <xref linkend="CFBSD-chfax"/>.
</para>
</listitem>
<listitem>

<para>How to Interface with Microsoft based networking products in <xref linkend="CFBSD-chmicronet"/>.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>In the rest of this chapter, we'll look at the theoretical background of the
Internet Protocols and Ethernet.
</para>

<para>You can set up networking without understanding any of it, as long as you and
your hardware don't make any mistakes.  This is the approach most commercial
systems take.  It's rather like crossing a lake on a set of stepping stones,
blindfolded.  In this book, I take a different approach: in the following
discussion, you'll be inside with the action, not on the outside looking in
through a window.  It might seem unusual at first, but once you get used to it,
you'll find it much less frustrating.
</para>
<sect1>
<title>Network layering</title>

<para><indexterm><primary>World-Wide</primary><secondary>Web</secondary></indexterm>
<indexterm><primary>WWW</primary></indexterm>
<indexterm><primary>Internet</primary></indexterm>
<indexterm><primary>Link</primary><secondary>layer</secondary></indexterm>
One of the problems with networks is that they can be looked at from a number of
different levels.  End-users of PCs access the <emphasis>World-Wide Web</emphasis>
(<emphasis>WWW</emphasis>), and often enough they call it the <emphasis>Internet</emphasis>, which is just
plain wrong.  At the other end of the scale is the <emphasis>Link Layer</emphasis>, the
viewpoint you'll take when you first create a connection to another machine.
</para>

<para><indexterm><primary>OSI</primary><secondary>reference model</secondary></indexterm>
<indexterm><primary>OSI</primary></indexterm>
<indexterm><primary>ISO</primary></indexterm>
<indexterm><primary>Open</primary><secondary>Systems Interconnect</secondary></indexterm>
Years ago, the International Standards Organization came up with the idea of a
seven-layered model of networks, often called the <emphasis>OSI reference model</emphasis>.
Why <emphasis>OSI</emphasis> and not <emphasis>ISO</emphasis>?  <emphasis>OSI</emphasis> stands for <emphasis>Open Systems
Interconnect</emphasis>.  Since its introduction, it has become clear that it doesn't
map very well to modern networks.  W. Richard Stevens presents a better layering
in <emphasis>TCP/IP Illustrated</emphasis>, Volume 1, page 6, shown here in Figure <xref linkend="CFBSD-4layer"/>.
</para>

<para>h = .2i
dh = .02i
dw = 2i
move right 3i
down
[
        [
	        boxht = h; boxwid = dw
          A:    box ht .35i
          B:    box ht .35i
          C:    box ht .35i
          D:    box ht .35i
		"Application layer" at A
		"Transport layer" at B
		"Network layer" at C
		"Link layer" at D
                ]
]
</para>

<para><figure><title>Four-layer network model</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>We'll look at these layers from the bottom up:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>link</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>Ethernet</primary></indexterm>
The <emphasis>Link layer</emphasis> is responsible for the lowest level of communication,
between machines which are physically connected.  The most common kinds of
connection are <emphasis>Ethernet</emphasis> and telephone lines.  This is the only layer
associated with hardware.
</para>
</listitem>
<listitem>

<para><indexterm><primary>network</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>routing</primary></indexterm>
The <emphasis>Network layer</emphasis> is responsible for communication between machines
which are not physically connected.  In order for this to function, the data
must pass through other machines which are not directly interested in the data.
This function is called <emphasis>routing</emphasis>.  We'll look at how it works in
<xref linkend="CFBSD-chnetsetup"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>transport</primary><secondary>layer</secondary></indexterm>
The <emphasis>Transport Layer</emphasis> is responsible for communication between any two
processes, regardless of the machines on which they run.
</para>
</listitem>
<listitem>

<para><indexterm><primary>application</primary><secondary>layer</secondary></indexterm>
The <emphasis>Application Layer</emphasis> defines the format used by specific applications,
such as email or the Web.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>The link layer</title>

<para><anchor id="CFBSD-packet-header"/>
<indexterm><primary>link</primary><secondary>layer</secondary></indexterm>
The <emphasis>link layer</emphasis> is responsible for getting packets between two systems
which are connected to each other.  The most trivial case is a point-to-point
network, a physical connection where any data sent down the line will arrive at
the other end.  More generally, though, multiple systems are connected to the
network, as in an Ethernet.  This causes a problem: how does each system know
what is intended for it?
</para>

<para><indexterm><primary>packet</primary><secondary>header</secondary></indexterm>
IP solves this problem by including a <emphasis>packet header</emphasis> in each IP packet.
Consider the header something like the information you write on the outside of a
letter envelope: address to send to, return address, delivery instructions.  In
the case of IP, the addresses are 32-bit digits which are conventionally
represented in <emphasis>dotted decimal</emphasis> notation: the value of each byte is
converted into decimal.  The four values are written separated by dots.  Thus
the hexadecimal address <emphasis>0xdf932501</emphasis> would normally be represented as
<emphasis>223.147.37.1</emphasis>.
</para>
<note>

<para>UNIX uses the notation <emphasis>0x</emphasis> in a number to represent a hexadecimal number.
The usage comes from the C programming language.
</para>
</note>

<para></para>

<para>As we will see in <xref linkend="CFBSD-chnetdebug"/>, it makes debugging much easier if we
understand the structure of the datagrams, so I'll show some of the more common
ones in this chapter.  Figure <xref linkend="CFBSD-IP-header"/> shows the structure of an IP header.
</para>

<para></para>

<para>h = .3i
dh = .02i
dw = 2i
move right .3i
bit = .16i
nibble = bit * 4
byte = nibble * 2
halfword = byte * 2
word = halfword * 2
boxht = h; boxwid = byte
A:	box wid nibble "Version";
A1:	box wid nibble;
	box "Type of service"
	box wid halfword "Total length in bytes"
B:	box wid halfword at A.sw+(byte,-boxht/2) "identification"
	box wid nibble * 3 / 4 "flags"
	box wid nibble * 13 / 4 "fragment offset"
C:	box at B.sw+(boxwid/2,-boxht/2) "Time to live"
	box "Protocol"
	box wid halfword "Header Checksum"
boxwid = word
D:	box at C.sw+(boxwid/2,-boxht/2) "Source IP address"
E:	box at D.sw+(boxwid/2,-boxht/2) "Destination IP address"

	"IP Header" at A1 above; "length" at A1 below
<!-- 	Bit numbers -->
	box invis wid bit "0" at A.nw+(bit/2,boxht/2)
	box invis wid bit "31" at A.nw+(bit * 63/2,boxht/2)
<!--  Byte offsets -->
	"<emphasis>0</emphasis>" rjust at A.w+(-.1,0)
	"<emphasis>4</emphasis>" rjust at B.w+(-.1,0)
	"<emphasis>8</emphasis>" rjust at C.w+(-.1,0)
	"<emphasis>12</emphasis>" rjust at D.w+(-.1,0)
	"<emphasis>16</emphasis>" rjust at E.w+(-.1,0)
</para>

<para><figure><title>IP Header</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
We'll only look at some of these fields; for the rest, see <emphasis>TCP/IP
Illustrated</emphasis>, Volume 1.
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>IPv6</primary></indexterm>
The <emphasis>Version</emphasis> field specifies the current version of IP.  This is
currently 4.  A newer standard is <emphasis>IPv6</emphasis>, version number 6, which is
currently in an early implementation stage.  IPv6 headers are very different
from those shown here.
<!-- .LI -->
<!-- XXXThe <emphasis>type of service</emphasis> indicates the use for the packet -->
</para>
</listitem>
<listitem>

<para><indexterm><primary>time</primary><secondary>to live</secondary></indexterm>
<anchor id="CFBSD-time-to-live"/>
The <emphasis>time to live</emphasis> field specifies how many hops the packet may survive.
Each time it is passed to another system, this value is decremented.  If it
reaches 0, the packet is discarded.  This prevents packets from circulating in
the net for ever as the result of a routing loop.
</para>
</listitem>
<listitem>

<para><indexterm><primary>protocol</primary></indexterm>
The <emphasis>protocol</emphasis> specifies the kind of the packet.  The most common
protocols are TCP and UDP, which we'll look at in the section on the network
layer.
</para>
</listitem>
<listitem>

<para>Finally come the <emphasis>source address</emphasis>, the address of the sender, and the
<emphasis>destination address</emphasis>, the address of the recipient.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>The network layer</title>

<para><indexterm><primary>routing</primary></indexterm>
The main purpose of the network layer is to ensure that packets get delivered to
the correct recipient when it is not directly connected to the sender.  This
function is usually called <emphasis>routing</emphasis>.
</para>

<para>Imagine routing to be similar to a postal system: if you want to send a letter
to somebody you don't see often, you put the letter in a letter box.  The people
or machines who handle the letter look at the address and either deliver it
personally or forward it to somebody else who is closer to the recipient, until
finally somebody delivers it.
</para>

<para>Have you ever received a letter which has been posted months ago?  Did you
wonder where they hid it all that time?  Chances are it's been sent round in
circles a couple of times.  That's what can happen in the Internet if the
routing information is incorrect, and that's why all packets have a <emphasis>time to
live</emphasis> field.  If it can't deliver a packet, the Internet Protocol simply
drops (forgets about) it.  You may find parallels to physical mail here, too.
</para>

<para>It's not usually acceptable to lose data.  We'll see how we avoid doing so in
the next section.
</para>
</sect2>
<sect2>
<title>The transport layer</title>

<para><indexterm><primary>transport</primary><secondary>layer</secondary></indexterm>
The <emphasis>transport layer</emphasis> is responsible for end-to-end communication.  The IP
address just identifies the interface to which the data is sent.  What happens
when it gets there?  There could be a large number of processes using the link.
The IP header doesn't contain sufficient information to deliver messages to
specific users within a system, so two additional protocols have been
implemented to handle the details of communications between ``end users''.
<footnote>

<para>In practice, these end users are processes.
</para>
</footnote>
These end users connect to the network via <emphasis>ports</emphasis>, or communication end
points, within individual machines.
</para>
<sect3>
<title>TCP</title>

<para><indexterm><primary>Transmission</primary><secondary>Control Protocol</secondary></indexterm>
<indexterm><primary>TCP</primary></indexterm>
<indexterm><primary>reliable</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>connection</primary><secondary>oriented protocol</secondary></indexterm>
The <emphasis>Transmission Control Protocol</emphasis>, or <emphasis>TCP</emphasis>, is a so-called
<emphasis>reliable protocol</emphasis>: it ensures that data gets to its destination, and if
it doesn't, it sends another copy.  If it can't get through after a large number
of tries (14 tries and nearly 10 minutes), it gives up, but it doesn't pretend
the data got through.  In order to perform this service, TCP is also
<emphasis>connection oriented</emphasis>: before you can send data with TCP, you must
establish a connection, which is conceptually similar to opening a file.
</para>

<para></para>

<para></para>

<para>h = .3i
dh = .02i
dw = 2i
move right .3i
bit = .16i
nibble = bit * 4
byte = nibble * 2
halfword = byte * 2
word = halfword * 2
boxht = h;
boxwid = byte

A:	box wid nibble "Version";
A1:	box wid nibble;
	box "Type of service"
	box wid halfword "Total length in bytes"
B:	box wid halfword at A.sw+(byte,-boxht/2) "identification"
	box wid nibble * 3 / 4 "flags"
	box wid nibble * 13 / 4 "fragment offset"
C:	box at B.sw+(boxwid/2,-boxht/2) "Time to live"
	box "Protocol"
	box wid halfword "Header Checksum"
boxwid = word
D:	box at C.sw+(boxwid/2,-boxht/2) "Source IP address"
E:	box at D.sw+(boxwid/2,-boxht/2) "Destination IP address"

<!--  TCP header -->
boxwid = halfword;
linethick=1.5
T1:	box at E.sw+(byte, -boxht/2) "source port"; box "destination port"
T2:	box wid word at T1.sw+(halfword,-boxht/2) "sequence number"
T3:	box wid word at T2.sw+(halfword,-boxht/2) "acknowledgement number"
T4:	box wid nibble at T3.sw+(bit*2,-boxht/2)
	box wid bit*6 "reserved"; box wid bit*6 "flags"; box "window size"
T5:	box at T4.sw+(byte,-boxht/2) "TCP checksum"; box "urgent pointer"

	"IP Header" at A1 above; "length" at A1 below
	"TCP Header" at T4 above; "length" at T4 below
<!-- 	Bit numbers -->
	box invis wid bit "0" at A.nw+(bit/2,boxht/2)
	box invis wid bit "31" at A.nw+(bit * 63/2,boxht/2)
<!--  Byte offsets -->
	"<emphasis>0</emphasis>" rjust at A.w+(-.1,0)
	"<emphasis>4</emphasis>" rjust at B.w+(-.1,0)
	"<emphasis>8</emphasis>" rjust at C.w+(-.1,0)
	"<emphasis>12</emphasis>" rjust at D.w+(-.1,0)
	"<emphasis>16</emphasis>" rjust at E.w+(-.1,0)
	"<emphasis>20</emphasis>" rjust at T1.w+(-.1,0)
	"<emphasis>24</emphasis>" rjust at T2.w+(-.1,0)
	"<emphasis>28</emphasis>" rjust at T3.w+(-.1,0)
	"<emphasis>32</emphasis>" rjust at T4.w+(-.1,0)
	"<emphasis>36</emphasis>" rjust at T5.w+(-.1,0)
</para>

<para><figure><title>TCP Header with IP header</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
<indexterm><primary>TCP</primary><secondary>header</secondary></indexterm>
In order to implement this protocol, TCP packets include a <emphasis>TCP header</emphasis>
after the IP header, as shown in figure <xref linkend="CFBSD-TCP-header"/>.  This figure ignores the
possible options which follow the IP header.  The offset of the TCP header,
shown here as 20, is really specified by the value of the IP Header length field
in the first byte of the packet.  Since this is only a 4 bit field, it is
counted in words of 32 bits: for a 20 byte header, it will have the value 5.  A
number of fields are of interest when debugging network connections:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>TCP</primary><secondary>sequence number</secondary></indexterm>
<indexterm><primary>sequence</primary><secondary>number</secondary></indexterm>
The <emphasis>sequence number</emphasis> is the byte offset of the last byte that has been
sent to the other side.
</para>
</listitem>
<listitem>

<para><indexterm><primary>TCP</primary><secondary>acknowledgement number</secondary></indexterm>
<indexterm><primary>acknowledgement</primary><secondary>number</secondary></indexterm>
The <emphasis>acknowledgement number</emphasis> is the byte offset of the last byte that has
received from the other side.
</para>
</listitem>
<listitem>

<para><indexterm><primary>TCP</primary><secondary>window size</secondary></indexterm>
<indexterm><primary>window</primary><secondary>size</secondary></indexterm>
The <emphasis>window size</emphasis> is the number of bytes that can be sent before an
acknowledgement is required.
</para>
</listitem>
</itemizedlist>

<para>These three values are used to ensure efficient and reliable transmission of
data.  For each connection, TCP maintains a copy of the highest acknowledgement
number received from the other side and a copy of all data which the other side
has not acknowledged receiving.  It will not send more than <emphasis>window size</emphasis>
bytes of data beyond this value.  If it does not receive an acknowledgement of
transmitted data within a predetermined time, usually one second, it will send
all the unacknowledged data again and again at increasingly large intervals.  If
it can't transmit the data after about ten minutes, it will give up and close
the connection.
</para>
</sect3>
<sect3>
<title>UDP</title>

<para><indexterm><primary>User</primary><secondary>Datagram Protocol</secondary></indexterm>
<indexterm><primary>UDP</primary></indexterm>
<indexterm><primary>unreliable</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>rwhod</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rwhod</secondary></indexterm>
The <emphasis>User Datagram Protocol</emphasis>, or <emphasis>UDP</emphasis>, is different: it's an
<emphasis>unreliable protocol</emphasis>.  It sends data out and never cares whether it gets to
its destination or not.  So why do we use it if it's unreliable?  It's faster,
and thus cheaper.  Consider it a junk mail delivery agent: who cares if you get
this week's AOL junk CD-ROM or not?  There will be another one in next week's
mail.  Since it doesn't need to reply, UDP is connectionless: you can just send
a message off with UDP without worrying about establishing a connection first.
For example, the <emphasis>rwhod</emphasis> dæmon broadcasts summary information about a
system on the LAN every few minutes.  In the unlikely event that a message gets
lost, it's not serious: another one will come soon.
</para>

<para></para>

<para>h = .3i
dh = .02i
dw = 2i
move right .3i
bit = .16i
nibble = bit * 4
byte = nibble * 2
halfword = byte * 2
word = halfword * 2
boxht = h; boxwid = byte
linethick=-1
A:	box wid nibble "Version";
A1:	box wid nibble;
	box "Type of service"
	box wid halfword "Total length in bytes"
B:	box wid halfword at A.sw+(byte,-boxht/2) "identification"
	box wid nibble * 3 / 4 "flags"
	box wid nibble * 13 / 4 "fragment offset"
C:	box at B.sw+(boxwid/2,-boxht/2) "Time to live"
	box "Protocol"
	box wid halfword "Header Checksum"
boxwid = word
D:	box at C.sw+(boxwid/2,-boxht/2) "Source IP address"
E:	box at D.sw+(boxwid/2,-boxht/2) "Destination IP address"

	"IP Header" at A1 above; "length" at A1 below
<!-- 	Bit numbers -->
	box invis wid bit "0" at A.nw+(bit/2,boxht/2)
	box invis wid bit "31" at A.nw+(bit * 63/2,boxht/2)
<!--  UDP header -->
boxwid = halfword;
linethick=1.5
U1:	box at E.sw+(byte, -boxht/2) "source port"; box "destination port"
U2:	box at U1.sw+(byte,-boxht/2) "sequence number"; box "checksum"

<!--  Byte offsets -->
	"<emphasis>0</emphasis>" rjust at A.w+(-.1,0)
	"<emphasis>4</emphasis>" rjust at B.w+(-.1,0)
	"<emphasis>8</emphasis>" rjust at C.w+(-.1,0)
	"<emphasis>12</emphasis>" rjust at D.w+(-.1,0)
	"<emphasis>16</emphasis>" rjust at E.w+(-.1,0)
	"<emphasis>20</emphasis>" rjust at U1.w+(-.1,0)
	"<emphasis>24</emphasis>" rjust at U2.w+(-.1,0)
</para>

<para><figure><title>UDP Header with IP header</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect3>
</sect2>
<sect2>
<title>Port assignment and Internet services</title>

<para><indexterm><primary>port</primary></indexterm>
A <emphasis>port</emphasis> is simply a 16 bit number which is assigned to specific processes
and which represents the source and destination end points of a specific
connection.  A process can either request to be connected to a specific port, or
the system will assign him one which is not in use.
</para>

<para><indexterm><primary>port</primary><secondary>well-known</secondary></indexterm>
<indexterm><primary>/etc/services</primary></indexterm>
RFC 1700 defines a number of <emphasis>well-known ports</emphasis> which are used to request
specific services from a machine.  On a UNIX machine, these are provided by
d&aelig;gmons which <emphasis>listen</emphasis> on this port number&mdash;in other words, when a
message comes in on this port number, the IP software will pass it to them, and
they process it.  These ports are defined in the file <emphasis>/etc/services</emphasis>.
Here's an excerpt:
</para>
<programlisting>
# Network services, Internet style
#
# WELL KNOWN PORT NUMBERS
#
ftp		 21/tcp	   #File Transfer [Control]
telnet		 23/tcp
smtp		 25/tcp	   mail		#Simple Mail Transfer
smtp		 25/udp	   mail		#Simple Mail Transfer
domain		 53/tcp	   #Domain Name Server
domain		 53/udp	   #Domain Name Server
</programlisting>

<para>This file has a relatively simple format: the first column is a service name,
and the second column contains the port number and the name of the service
(either <emphasis>tcp</emphasis> or <emphasis>udp</emphasis>).  Optionally, alternative names for the
service may follow.  In this example, <emphasis>smtp</emphasis> may also be called
<emphasis>mail</emphasis>.
</para>

<para>When the system starts up, specific d&aelig;gmons may be started.  For example, if
you're running mail, you may start up <emphasis>sendmail</emphasis> as a d&aelig;gmon.  Any mail
requests coming in on port 25 (<emphasis>smtp</emphasis>) will then be routed to
<emphasis>sendmail</emphasis> for processing.
</para>
</sect2>
<sect2>
<title>The Internet d&aelig;gmon</title>

<para><anchor id="CFBSD-inetd"/>
<anchor id="CFBSD-services"/>
<indexterm><primary>/etc/services</primary></indexterm>
<indexterm><primary>inetd</primary></indexterm>
<indexterm><primary>superserver</primary></indexterm>
<indexterm><primary>internet</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>ftpd</primary></indexterm>
If you look at <emphasis>/etc/services</emphasis>, you'll find that there are over 800 services
available, most of which are only supported on a small number of machines.
Nevertheless, it's not always the best idea to start up a d&aelig;gmon for every
possible service you may want to offer.  IP supplies an alternative:
<emphasis>inetd</emphasis>, the <emphasis>Internet dæmon</emphasis>, sometimes called a <emphasis>superserver</emphasis>,
will listen on multiple ports.  When a request arrives on a specific port,
<emphasis>inetd</emphasis> will start a d&aelig;gmon specific to the port.  For example, FreeBSD
supports anonymous ftp, but most people don't receive enough requests to warrant
having the FTP d&aelig;gmon, <emphasis>ftpd</emphasis>, running all the time.  Instead,
<emphasis>inetd</emphasis> will start an <emphasis>ftpd</emphasis> when a request comes in on port 21.
</para>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
At startup, <emphasis>inetd</emphasis> reads a configuration file <emphasis>/etc/inetd.conf</emphasis> to
determine which ports to monitor and what to do when a message comes in.  Here's
an excerpt:
</para>
<programlisting>
#
# Internet server configuration database
#
#	@(#)inetd.conf	5.4 (Berkeley) 6/30/90
#
ftp	stream	tcp	nowait	root	/usr/libexec/ftpd	ftpd -l
telnet	stream	tcp	nowait	root	/usr/libexec/telnetd	telnetd
shell	stream	tcp	nowait	root	/usr/libexec/rshd	rshd
login	stream	tcp	nowait	root	/usr/libexec/rlogind	rlogind
#exec	stream	tcp	nowait	root	/usr/libexec/rexecd	rexecd
#uucpd	stream	tcp	nowait	root	/usr/libexec/uucpd	uucpd
nntp	stream	tcp	nowait	usenet	/usr/local/bin/nntpd	nntpd
</programlisting>

<para>This file has the following format:
</para>
<itemizedlist>
<listitem>

<para>The first column is the service on which <emphasis>inetd</emphasis> should listen.  If it
starts with a <emphasis>#</emphasis> sign, <emphasis>inetd</emphasis> ignores it.  You'll note in this
example that the services <emphasis>exec</emphasis> and <emphasis>uucpd</emphasis> have been commented
out.  Unless you run the dæmon independently of <emphasis>inetd</emphasis>, a request for one
of these services will be rejected with the message
</para>
<programlisting>
Unable to connect to remote host: Connection refused
</programlisting>

<para></para>
</listitem>
<listitem>

<para>The next three columns determine the nature of the connection, the protocol to
use, and whether <emphasis>inetd</emphasis> should wait for the process to complete before
listening for new connections.
</para>
</listitem>
<listitem>

<para><indexterm><primary>NNTP</primary></indexterm>
<indexterm><primary>Network</primary><secondary>News Transfer Protocol</secondary></indexterm>
The next column specifies the user as which the function should be performed.
Be careful here: for example, the service <emphasis>nntp</emphasis> is intended to be run as
user <emphasis>usenet</emphasis>, but there is no user <emphasis>usenet</emphasis> on this system.  The
<emphasis>nntp</emphasis> service supports <emphasis>NNTP</emphasis>, the <emphasis>Network News Transfer
Protocol</emphasis>.
</para>
</listitem>
<listitem>

<para>The next column is the full pathname of the program (almost always a d&aelig;gmon)
to start when a message comes in.  Alternatively, it might be the keyword
<emphasis>internal</emphasis>, which specifies that <emphasis>inetd</emphasis> should perform the function
itself.
</para>
</listitem>
<listitem>

<para>All remaining columns are the parameters to be passed to the d&aelig;gmon.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Kinds of network connection</title>

<para>The most obvious thing about your network connection is what it looks like.
It will usually involve some kind of cable going out of your computer,
<footnote>

<para>Maybe it won't.  For example, you might use wireless Ethernet, which broadcasts
in the microwave radio spectrum.
</para>
</footnote>
but there the similarity ends.  FreeBSD supports most modern network interfaces:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>local</primary><secondary>area network</secondary></indexterm>
<indexterm><primary>Ethernet</primary></indexterm>
The most popular choice for <emphasis>Local Area Networks</emphasis> is <emphasis>Ethernet</emphasis>,
which transfers data between a number of computers at speeds of 10 Mb/s, 100
Mb/s or 1000 Mb/s (1 Gb/s).  We'll look at it in the following section.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-FDDI"/>
<indexterm><primary>FDDI</primary></indexterm>
<indexterm><primary>fiber</primary><secondary>distributed data interface</secondary></indexterm>
<emphasis>FDDI</emphasis> stands for <emphasis>Fiber Distributed Data Interface</emphasis>, and was
originally run over glass fibres. In contrast to Ethernet, it ran at 100 Mb/s
instead of 10 Mb/s.  Nowadays Ethernet runs at 100 Mb/s as well, and FDDI runs
over copper wire, so the biggest difference is the protocol.  FreeBSD does
support FDDI, but we won't look at it here.
</para>
</listitem>
<listitem>

<para><indexterm><primary>token</primary><secondary>ring</secondary></indexterm>
<emphasis>Token Ring</emphasis> is yet another variety of LAN, introduced by IBM.  It has
never been very popular in the UNIX world, and FreeBSD <xref linkend="CFBSD-Fver"/> doesn't support
it.  There is some support in FreeBSD-CURRENT, but it's still under development.
</para>
</listitem>
<listitem>

<para><indexterm><primary>network</primary><secondary>wide-area</secondary></indexterm>
Probably the most common connection to a <emphasis>Wide-Area Network</emphasis> is via a
telephone with a modem.  Modems have the advantage that you can also use them
for non-IP connections such as UUCP (see <xref linkend="CFBSD-chslip"/>) and direct dialin (see page
<indexterm><primary>serial</primary><secondary>line internet</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>serial line internet</secondary></indexterm>
<indexterm><primary>SLIP</primary></indexterm>
If you use them to connect to the Internet, you'll probably use either the
<emphasis>Serial Line Internet Protocol</emphasis>, <emphasis>SLIP</emphasis>, which we discuss on page
<indexterm><primary>point</primary><secondary>to point</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>point to point</secondary></indexterm>
<indexterm><primary>PPP</primary></indexterm>
or the <emphasis>Point to Point Protocol</emphasis>, <emphasis>PPP</emphasis>, which we look at on page
If you have the choice, you should use PPP, which is a more modern and flexible
protocol.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Integrated</primary><secondary>Services Digital Networks</secondary></indexterm>
<indexterm><primary>ISDN</primary></indexterm>
In some areas, <emphasis>Integrated Services Digital Networks</emphasis> (<emphasis>ISDN</emphasis>) are
an attractive alternative to modems.  They are much faster than modems, both in
call setup time and in data transmission capability, and they are also much more
reliable.
<indexterm><primary>i4b</primary></indexterm>
<indexterm><primary>ISDN4BSD</primary></indexterm>
FreeBSD includes the <emphasis>ISDN4BSD</emphasis> package, which was developed in Germany
and allows the direct connection of low-cost German ISDN boards to FreeBSD.
</para>
</listitem>
<listitem>

<para><indexterm><primary>leased</primary><secondary>line</secondary></indexterm>
If you have a large Internet requirement, you may find it suitable to connect to
the Internet via a <emphasis>Leased Line</emphasis>, a telephone line which is permanently
connected.  This is a relatively expensive option, of course, and we won't
discuss it here, particularly as the options vary greatly from country to
country and from region to region.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>Internet</primary><secondary>Service Provider</secondary></indexterm>
<indexterm><primary>ISP</primary></indexterm>
The decision on which WAN connection you use depends primarily on the system you
are connecting to, in many cases an <emphasis>Internet Service Provider</emphasis> or
<emphasis>ISP</emphasis>.  We'll look at ISPs in <xref linkend="CFBSD-chisp"/>.  Most ISPs support IP connections
via PPP or SLIP, and an increasing number are supporting ISDN.  Other things
being equal, you should prefer ISDN to PPP and PPP to SLIP.
</para>
<note>

<para>Many ISPs which supply ISDN require you to use PPP over the ISDN line.  There is
nothing in the standard which requires you to do so, however, and it degrades
performance somewhat.  Still, PPP over ISDN is preferable to PPP over an
analogue telephone line.
</para>
</note>

<para></para>
<sect2>
<title>Ethernet</title>

<para><anchor id="CFBSD-Ethernet"/>
</para>

<para><indexterm><primary>Office</primary><secondary>of the Future</secondary></indexterm>
<indexterm><primary>Smalltalk</primary></indexterm>
<indexterm><primary>Metcalfe</primary><secondary>Bob</secondary></indexterm>
<indexterm><primary>Ethernet</primary></indexterm>
<indexterm><primary>PARC</primary></indexterm>
In the early 1970s, the Xerox Company chartered a group of researchers at its
Palo Alto Research Center (<emphasis>PARC</emphasis>) to brainstorm the <emphasis>Office of the
Future</emphasis>.  This innovative group created the mouse, the window interface
metaphor and an integrated, object oriented programming environment called
<emphasis>Smalltalk</emphasis>.  In addition, a young MIT engineer in the group named Bob
Metcalfe came up with the concept which is the basis of modern local area
networking, the <emphasis>Ethernet</emphasis>.  The Ethernet protocol is a low-level broadcast
packet-delivery system which employed the revolutionary idea that it was easier
to re-send packets which didn't arrive than it was to make sure all packets
arrived.  There are other network hardware systems out there, IBM's Token Ring
architecture and Fiber Channel, for example, but by far the most popular is the
Ethernet system in its various hardware incarnations.  Ethernet is by far the
most common local area network medium.  There are three types:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>thick</primary><secondary>Ethernet</secondary></indexterm>
<indexterm><primary>Ethernet</primary><secondary>thick</secondary></indexterm>
<indexterm><primary>10B5</primary></indexterm>
<indexterm><primary>AUI</primary></indexterm>
<indexterm><primary>yellow</primary><secondary>string</secondary></indexterm>
<indexterm><primary>string</primary><secondary>yellow</secondary></indexterm>
Originally, Ethernet ran at 10 Mb/s over thick coaxial cable, usually bright
yellow in colour.  This kind of Ethernet is often referred to as <emphasis>thick
Ethernet</emphasis>, also called <emphasis>10B5</emphasis>, and the line interface is called <emphasis>AUI</emphasis>.
You may also hear the term <emphasis>yellow string</emphasis> (for tying computers together),
though this term is not limited to thick Ethernet.  Thick Ethernet is now
practically obsolete: it is expensive, difficult to lay, and relatively
unreliable.
</para>
</listitem>
<listitem>

<para><indexterm><primary>thin</primary><secondary>Ethernet</secondary></indexterm>
<indexterm><primary>Ethernet</primary><secondary>thin</secondary></indexterm>
<indexterm><primary>Cheapernet</primary></indexterm>
<indexterm><primary>RG58</primary></indexterm>
<indexterm><primary>BNC</primary></indexterm>
<indexterm><primary>10</primary><secondary>Base 2</secondary></indexterm>
As the name suggests, <emphasis>thin Ethernet</emphasis> is thin coaxial cable, and otherwise
quite like thick Ethernet.  It is significantly cheaper (thus the term
<emphasis>Cheapernet</emphasis>), and the only disadvantage over thick Ethernet is that the
cables can't be quite as long.  The cable is called <emphasis>RG58</emphasis>, and the
cable connectors are called <emphasis>BNC</emphasis>.  Both terms are frequently used to refer
to this kind of connection, as is <emphasis>10 Base 2</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>10BaseT</primary></indexterm>
<indexterm><primary>UTP</primary></indexterm>
<indexterm><primary>Unshielded</primary><secondary>Twisted Pair</secondary></indexterm>
<indexterm><primary>Twisted</primary><secondary>Pair</secondary></indexterm>
<indexterm><primary>Twisted</primary><secondary>Pair</secondary></indexterm>
<indexterm><primary>hub</primary></indexterm>
Modern Ethernets tend to run over telephone cable, though it is usually called
<emphasis>10BaseT</emphasis> or <emphasis>UTP</emphasis>, for <emphasis>Unshielded Twisted Pair</emphasis>.  <emphasis>Twisted
pair</emphasis> means that each pair of wires are twisted to minimize external
electrical influence&mdash;after all, the frequencies on a 100 Mb/s Ethernet are
way up in the UHF range.  In fact, telephone cable is not twisted, and 10 Mb/s
Ethernets run just fine on it.  100Mb/s Ethernet requires the twisted cable due
to the higher rate.  Unlike coaxial connections, where all machines are
connected to a single cable, UTP connects individual machines to a <emphasis>hub</emphasis>, a
box which distributes the signals.
</para>

<para>Compared to coaxial Ethernet, UTP cables are much cheaper, and they are more
reliable.  If you damage or disconnect a coaxial cable, the whole network goes
down.  If you damage a UTP cable, you only lose the one machine connected to it.
On the down side, UTP requires hubs, which cost money, though the price is
rapidly decreasing.  UTP systems employ a star architecture rather than the
string of coaxial stations with terminators.  You can connect many hubs together
simply by reversing the connections at one end of a hub-to-hub link.  In
addition, UTP is the only cost-effective medium currently available that will
support the new 100Base-T protocol.  Upgrading to 100 Megabit Ethernet is as
simple as replacing the hubs and the Ethernet boards.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect3>
<title>How Ethernet works</title>

<para><indexterm><primary>Ethernet</primary><secondary>address</secondary></indexterm>
<indexterm><primary>MAC</primary><secondary>address</secondary></indexterm>
<indexterm><primary>Address</primary><secondary>Ethernet</secondary></indexterm>
<indexterm><primary>Address</primary><secondary>MAC</secondary></indexterm>
A large number of systems can be connected to a single Ethernet.  Each system
has a 48 bit address, the so-called <emphasis>Ethernet Address</emphasis>.  Ethernet addresses
are usually written in bytes separated by colons (<emphasis>:</emphasis>), for example
<emphasis>0:a0:24:37:0d:2b</emphasis>.  All data sent over the Ethernet contains two
addresses: the Ethernet address of the sender and the Ethernet address of the
receiver.  Normally, each system responds only to messages sent to it or to a
special broadcast address.
</para>

<para>You'll also frequently hear the term <emphasis>MAC address</emphasis>.  <emphasis>MAC</emphasis> stands for
<emphasis>Media (sic) Access Control</emphasis> and thus means the address used to access the
network.  For Ethernets I prefer to use the more exact term <emphasis>Ethernet
address</emphasis>.
</para>

<para><indexterm><primary>carrier</primary><secondary>sense</secondary></indexterm>
<indexterm><primary>collision</primary></indexterm>
<indexterm><primary>CSMA/CD</primary></indexterm>
<indexterm><primary>Carrier</primary><secondary>Sense Multiple Access/Collision Detect</secondary></indexterm>
The fact that multiple machines are on the same network gives rise to a problem:
obviously only one system can transmit at any one time, or the data will be
garbled.  But how do you synchronize the systems?  The answer is simple, but
possibly surprising: trial and error.  Before any system transmits, it checks
that the net is idle&mdash;in the Ethernet specification, this is called <emphasis>Carrier
Sense</emphasis>.  Unfortunately, this isn't enough: two systems might start sending
at the same time.  To solve this problem, while it sends, each system checks
that it can still recognize what it is sending.  If it can't, it assumes that
another system has started sending at the same time&mdash;this is called a
<emphasis>collision</emphasis>.  When a collision occurs, both systems stop sending, wait a
random amount of time, and try again.  You'll see this method referred to as
<emphasis>CSMA/CD</emphasis> (<emphasis>Carrier Sense Multiple Access/Collision Detect</emphasis>).
</para>

<para><indexterm><primary>NetBIOS</primary></indexterm>
<indexterm><primary>IPX</primary></indexterm>
Transmitting Internet data across an Ethernet has another problem.  Ethernet
evolved independently of the Internet standards.  As a result, Ethernets can
carry different kinds of traffic.  In particular, Microsoft uses a protocol
called <emphasis>NetBIOS</emphasis>, and Novell uses a protocol called <emphasis>IPX</emphasis>.  In addition,
Internet addresses are only 32 bits, and it would be impossible to map them to
Ethernet addresses even if they were the same length.  The result?  You guessed
it, another header.  Figure <xref linkend="CFBSD-Ethernet-frame"/> shows an Ethernet packet carrying
an IP datagram.
</para>

<para></para>

<para>h = .3i
dh = .02i
dw = 2i
move right .3i
bit = .16i
nibble = bit * 4
byte = nibble * 2
halfword = byte * 2
word = halfword * 2
boxht = h;
boxwid = halfword
linethick=1.5
E1:	box invis; box "Upper destination address"
E2:	box wid word at E1.sw+(halfword,-boxht/2) "Rest of destination address"
E3:	box wid word at E2.sw+(halfword,-boxht/2) "Upper source address"
E4:	box at E3.sw+(byte,-boxht/2) "Rest of source address"; box "Frame type"
boxwid = byte
linethick=-1
A:	box at E4.sw+(bit*2,-boxht/2) wid nibble "Version";
A1:	box wid nibble;
	box "Type of service"
	box wid halfword "Total length in bytes"
B:	box wid halfword at A.sw+(byte,-boxht/2) "identification"
	box wid nibble * 3 / 4 "flags"
	box wid nibble * 13 / 4 "fragment offset"
C:	box at B.sw+(boxwid/2,-boxht/2) "Time to live"
	box "Protocol"
	box wid halfword "Header Checksum"
boxwid = word
D:	box at C.sw+(boxwid/2,-boxht/2) "Source IP address"
E:	box at D.sw+(boxwid/2,-boxht/2) "Destination IP address"

<!--  TCP header -->
boxwid = halfword;
T1:	box at E.sw+(byte, -boxht/2) "source port"; box "destination port"
T2:	box wid word at T1.sw+(halfword,-boxht/2) "sequence number"
T3:	box wid word at T2.sw+(halfword,-boxht/2) "acknowledgement number"
T4:	box wid nibble at T3.sw+(bit*2,-boxht/2)
	box wid bit*6 "reserved"; box wid bit*6 "flags"; box "window size"
T5:	box at T4.sw+(byte,-boxht/2) "TCP checksum";
T6:	box "urgent pointer"

	line dotted down boxht from T5.sw
	line dotted down boxht from T6.se
	"Data" at T5.se+(0,-boxht/2)

	"IP Header" at A1 above; "length" at A1 below
	"TCP Header" at T4 above; "length" at T4 below
<!-- 	Bit numbers -->
<!-- 	box invis wid bit "0" at A.nw+(bit/2,boxht/2) -->
<!-- 	box invis wid bit "31" at A.nw+(bit * 63/2,boxht/2) -->
</para>

<para><figure><title>Ethernet frame with TCP datagram</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</sect3>
<sect3>
<title>Finding Ethernet addresses</title>

<para><anchor id="CFBSD-ARP"/>
So we send messages to Ethernet interfaces by setting the correct Ethernet
address in the header.  But how do we find the Ethernet address?  All our IP
packets use IP addresses.  And it's not a good solution to just statically
assign Ethernet addresses to IP addresses: first, there would be problems if an
interface board or an IP address was changed, and secondly multiple boards can
have the same IP address.
</para>

<para><indexterm><primary>Address</primary><secondary>Resolution Protocol</secondary></indexterm>
<indexterm><primary>ARP</primary></indexterm>
The chosen solution is the <emphasis>Address Resolution Protocol</emphasis>, usually called
<emphasis>ARP</emphasis>.  ARP sends out a message on the Ethernet broadcast address saying
effectively ``who has IP address <emphasis>223.147.37.1</emphasis>?  Tell me your Ethernet
address''.  Since the message is sent on the broadcast address, each system on
the net will receive it.  In each machine, the ARP protocol will check the
specified IP address with the IP address of the interface which received the
packet.  If they match, the machine replies with the message ``I am IP
<emphasis>223.147.37.1</emphasis>, my Ethernet address is <emphasis>00:a0:24:37:0d:2b</emphasis>''
</para>
</sect3>
<sect3>
<title>Ethernet terminators</title>

<para><anchor id="CFBSD-enet-terminator"/>
Coaxial Ethernet requires 50 \(*W resistors at each end of the cable in order to
transmit signals correctly.  If you leave these out, you won't get degraded
performance: the network Will Not Work at all.
</para>
</sect3>
<sect3>
<title>What systems are on that Ethernet?</title>

<para><anchor id="CFBSD-netmask"/>
<indexterm><primary>net</primary><secondary>mask</secondary></indexterm>
<indexterm><primary>interface</primary><secondary>address</secondary></indexterm>
Since multiple systems can be accessed via an Ethernet, there must be some means
for a system to determine which other systems are present on the network.  There
might be a lot of them, several hundred for example.  You could keep a list, but
the system has to determine the interface for every single packet, and a list
that long would slow things down.  The preferred method is to specify a
<emphasis>range</emphasis> of IP addresses which can be reached via a specific interface.
Since the computer works in binary, one of the easiest functions to perform is a
<emphasis>logical and</emphasis>.  As a result, you specify the range by a <emphasis>netmask</emphasis>: the
system considers all addresses in which a specific set of bits have a particular
value to be reachable via the interface.  The specific set of bits is called the
<emphasis>interface address</emphasis>.
</para>

<para>For example, let's look forward to the reference network on page <xref linkend="CFBSD-ref-net"/> and
consider the local network, which has the network address <emphasis>223.147.37.0</emphasis>
and the netmask <emphasis>255.255.255.0</emphasis>.  The value <emphasis>255</emphasis> means that every
bit in the byte is set.  The logical <emphasis>and</emphasis> function says ``if a specific
bit is set in both operands, then set the result bit to 1; otherwise set it to
0''.  Figure <xref linkend="CFBSD-netmask-figure"/> shows how the system creates a network address
from the IP address <emphasis>223.147.37.5</emphasis> and the net mask <emphasis>255.255.255.0</emphasis>.
</para>

<para>	boxht = .2i
	boxwid = .14i
	right
IP:

	box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "0"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "<keycap>1</keycap>";
	move .1i
	box "0"; box "0"; box "0"; box "0"; box "0"; box "1"; box "0"; box "1";

	"   IP address" ljust

	move to IP-(boxwid/2,.3)

MASK:	box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "1"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "<keycap>1</keycap>"; box "1"; box "1"; box "<keycap>1</keycap>"; box "1"; box "1"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "1"; box "1"; box "<keycap>1</keycap>"; box "1"; box "1"; box "<keycap>1</keycap>"; box "1"; box "<keycap>1</keycap>";
	move .1i
	box "0"; box "0"; box "0"; box "0"; box "0"; box "0"; box "0"; box "0";
	"   Net mask" ljust

	move to MASK-(boxwid/2,.3)

N:	box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "0"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "<keycap>1</keycap>";
	move .1i
	box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "0"; box "<keycap>1</keycap>"; box "0"; box "<keycap>1</keycap>";
	move .1i
	box "0"; box "0"; box "0"; box "0"; box "0"; box "0"; box "0"; box "0"
	"   Net address" ljust
</para>

<para>The result is the same as the IP address for the first three bytes, but the last
byte is 0: <emphasis>223.147.37.0</emphasis>.
</para>

<para>This may seem unnecessarily complicated.  An easier way to look at it is to say
that the <emphasis>1</emphasis> bits of the net mask describe which part of the address is
the network part, and the <emphasis>0</emphasis> bits describe which part represents hosts on
the network.
</para>
</sect3>
<sect3>
<title>Address classes</title>

<para><anchor id="CFBSD-inet-address-class"/>
<indexterm><primary>address</primary><secondary>class</secondary></indexterm>
When the Internet Protocols were first introduced, they included the concept of
a default netmask.  These categories of address were called <emphasis>address
classes</emphasis>.  They've been updated recently&mdash;see RFC 1375 for details.
Here's an overview:
<table frame='all'><title>Address classes</title>
box,center,tab(#) ;
| r | lfCWp9 | lfCWp9 | r | r | r | .
#Address##Network#Host#Number of
Class#range#Net mask#address bits#address bits#systems
=
A#0-127#255.0.0.0#8#24#16777216
B#128-191#255.255.0.0#16#16#65536
C#192-207#255.255.255.0#24#8#256
F#208-215#255.255.255.240#28#4#16
G#216-219#<emphasis>(reserved)</emphasis>
H#220-221#255.255.255.248#29#3#8
K#222-223#255.255.255.254#31#1#2
D#224-239#<emphasis>(multicast)</emphasis>
E#240-255#<emphasis>(reserved)</emphasis>
Ports Collection.

</tbody></tgroup></table>
<indexterm><primary>Class</primary><secondary>C network</secondary></indexterm>
<indexterm><primary>network</primary><secondary>Class C</secondary></indexterm>
This method is no longer used for specifying net masks, though the software will
still default to these values, but it is used for allocating networks.  In
addition you will frequently hear the term <emphasis>Class C network</emphasis> to refer to a
network with 256 addresses in the range 192-223.  This usage goes back to before
RFC 1375.
<!--  XXX BMC &gt; | Hmm.  Is it worth mentioning the "magic" meaning of the `all 1s' and -->
<!--  XXX &gt; | `all 0s' host addresses?  -bmc -->
</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>The reference network</title>

<para><anchor id="CFBSD-ref-net"/>
<!--  XXX Don Wilde &lt;don@PartsNow.com&gt;: -->
<!--  XXX &gt; 4) When you describe Ethernet / Cheapernet, spend a little more time -->
<!--  XXX &gt; detailing the hardware of 10Base-T, which is becoming far more common -->
<!--  XXX &gt; than Cheapernet. Maybe add a segment on your reference network which is -->
<!--  XXX &gt; 10Base-T, with a couple of hubs included so you can show the -->
<!--  XXX &gt; reversed-connection cable which links hubs together. Also, a discussion -->
<!--  XXX &gt; of making a gateway for 100Base-T segment routing would also be -->
<!--  XXX &gt; appropriate. -->
One of the problems in talking about networks is that there are so many
different kinds of network connection.  To simplify things, this book bases on
one of the most frequent environments: a number of computers connected together
by an Ethernet LAN with a single gateway to the Internet.  Figure
<xref linkend="CFBSD-reference-net"/> shows the layout of the network to which we will refer in the
rest of this book.
</para>

<para><indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
<indexterm><primary>bumble</primary></indexterm>
<indexterm><primary>wait</primary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
	boxht = .4i
	boxwid = .6i
FREEBIE:	box
	"<emphasis>freebie</emphasis>" at FREEBIE
PRESTO:	box at FREEBIE+(1.3,0)
	"<emphasis>presto</emphasis>" at PRESTO
BUMBLE:	box at PRESTO+(1.3i,0)
	"<emphasis>bumble</emphasis>" at BUMBLE
WAIT:	box at BUMBLE+(1.3i,0)
	"<emphasis>wait</emphasis>" at WAIT

E:	line thickness 1.5 from FREEBIE.sw-(.5i,.3i) to WAIT.se+(.5i,-.3i)
	"Local Ethernet" ljust at E.w+(0,-.2)
	"Address \s8<emphasis>223.147.37.0</emphasis>\s0" ljust at E.w+(0,-.37)
	"Domain <emphasis>example.org</emphasis>" ljust at E.w+(0,-.53)
<!--  Terminators -->
<indexterm><primary>gw</primary></indexterm>
<indexterm><primary>free-gw</primary></indexterm>
	box wid .15i ht .08i fill 1 at E.w
	box wid .15i ht .08i fill 1 at E.e

	"\s14\(bu\s0" at FREEBIE.s+(.01,-.03)
	"\s14\(bu\s0" at PRESTO.s+(.01,-.03)
	"\s14\(bu\s0" at BUMBLE.s+(.01,-.03)
	"\s14\(bu\s0" at WAIT.s+(.01,-.03)

	line from FREEBIE.s to FREEBIE.s-(0,.3i)
	line from PRESTO.s to PRESTO.s-(0,.3i)
	line from BUMBLE.s to BUMBLE.s-(0,.3i)
	line from WAIT.s to WAIT.s-(0,.3i)

GW:	box at E.c+(.2,-.5)
	line from GW.n to GW.n+(0,.3)
	"\s14\(bu\s0" at GW.n+(0,-.03)
	"\s14\(bu\s0" at GW.s+(0,-.03)
	"<emphasis>gw</emphasis>" at GW above
	"Router" at GW below

M1:	box ht .2i at GW.s+(0,-.3)
	"\s14\(bu\s0" at M1.n+(0,-.03)
	"\s14\(bu\s0" at M1.s+(0,-.03)
	"modem" at M1

M2:	box ht .2i at GW.s+(0,-.8)
	"\s14\(bu\s0" at M2.n+(0,-.03)
	"\s14\(bu\s0" at M2.s+(0,-.03)
	"modem" at M2

ISP:	box wid 2i at GW.s+(-.7i,-1.3)
	"\s14\(bu\s0" at ISP.n+(-.7,-.03)
	"\s14\(bu\s0" at ISP.n+(.7,-.03)
	"\s14\(bu\s0" at ISP.s+(0,-.03)
	"router" at ISP above
	"<emphasis>free-gw</emphasis>" at ISP below

M3:	box ht .2i at ISP.n+(-.7,.3)
	"\s14\(bu\s0" at M3.n+(0,-.03)
	"\s14\(bu\s0" at M3.s+(0,-.03)
	"modem" at M3
	line from M3.s+(0,-.03) to ISP.n+(-.7,-.03)
	line up .15i from M3.n+(0,-.03)
	"Connection to network" at M3.n+(0,.30)
	"<emphasis>\s8223.147.38.0\s0</emphasis>" at M3.n+(0,.17)

L1:	line from GW.s to M1.n
<!-- 	"Local modem connection" ljust at L1.c+(.4,0) -->

PPP:	line from M1.s to M2.n
	"PPP link, net \s8<emphasis>139.130.136.0</emphasis>\s0" ljust at PPP.c+(.4,0)

L2:	line from M2.s to ISP.n+(.7,0)
<!-- 	"ISP modem connection" ljust at L2.c+(.4,0) -->
<indexterm><primary>example.net</primary></indexterm>

RE:	line thickness 1.5 from FREEBIE.sw+(-.5i,-2.75i) to WAIT.se+(.5i,-2.75i)
	"ISP's Ethernet" ljust at RE.w+(0,-.2)
	"Address \s8<emphasis>139.130.237.0</emphasis>\s0" ljust at RE.w+(0,-.37)
	"Domain <emphasis>example.net</emphasis>" ljust at RE.w+(0,-.54)
	line from ISP.s to RE.c+(-.5,0)
<!--  Terminators -->
<indexterm><primary>igw</primary></indexterm>
<indexterm><primary>ns</primary></indexterm>
	box wid .15i ht .08i fill 1 at RE.w
	box wid .15i ht .08i fill 1 at RE.e

IGW:	box at RE.w+(2,-.5)
	"\s14\(bu\s0" at IGW.n+(0,-.03)
	"\s14\(bu\s0" at IGW.s+(0,-.03)
	"gateway" at IGW above
	"<emphasis>igw</emphasis>" at IGW below
	line from IGW.n to RE.w+(2,0)
	line wid .5i down from IGW.s

NS:	box at RE.w+(4,-.5)
	"\s14\(bu\s0" at NS.n+(0,-.03)
	"<emphasis>ns</emphasis>" at NS
	line from NS.n to RE.w+(4,0)

<!--  Interface names -->
	"\s8<emphasis>ed0</emphasis>\s0" rjust at FREEBIE.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at PRESTO.s+(-.05,-.1)
	"\s8<emphasis>ze0</emphasis>\s0" rjust at BUMBLE.s+(-.05,-.1)
	"\s8<emphasis>ne0</emphasis>\s0" rjust at WAIT.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at GW.n+(-.05,.1)
	"\s8<emphasis>tun0</emphasis>\s0" rjust at GW.s+(-.05,-.1)
	"\s8<emphasis>ppp3</emphasis>\s0" rjust at ISP.n+(.65,.1)
	"\s8<emphasis>ppp0</emphasis>\s0" rjust at ISP.n+(-.75,.1)
	"\s8<emphasis>ed0</emphasis>\s0" rjust at ISP.s+(-.05,-.1)
	"\s8<emphasis>fddi0</emphasis>\s0" rjust at IGW.s+(-.05,-.1)
	"\s8<emphasis>le0</emphasis>\s0" rjust at IGW.n+(-.05,.1)
	"to" rjust at IGW.s+(-.05i,-.27i)
	"Internet" ljust at IGW.s+(.05i,-.27i)
	"\s8<emphasis>le0</emphasis>\s0" rjust at NS.n+(-.05,.1)

<!--  IP addresses -->
	"\s8<emphasis>223.147.37.1</emphasis>\s0" ljust at FREEBIE.s+(.05,-.1)
	"\s8<emphasis>223.147.37.2</emphasis>\s0" ljust at PRESTO.s+(.05,-.1)
	"\s8<emphasis>223.147.37.3</emphasis>\s0" ljust at BUMBLE.s+(.05,-.1)
	"\s8<emphasis>223.147.37.4</emphasis>\s0" ljust at WAIT.s+(.05,-.1)
	"\s8<emphasis>223.147.37.5</emphasis>\s0" ljust at GW.n+(.05,.1)
	"\s8<emphasis>139.130.136.133</emphasis>\s0" ljust at GW.s+(.05,-.1)
	"\s8<emphasis>139.130.136.129</emphasis>\s0" ljust at ISP.n+(.75,.1)
	"\s8<emphasis>139.130.136.9</emphasis>\s0" ljust at ISP.n+(-.65,.1)
	"\s8<emphasis>139.130.237.117</emphasis>\s0" ljust at ISP.s+(.05,-.1)
	"\s8<emphasis>139.130.237.65</emphasis>\s0" ljust at IGW.n+(.05,.1)
	"\s8<emphasis>139.130.249.201</emphasis>\s0" ljust at IGW.s+(.05,-.1)
	"\s8<emphasis>139.130.237.3</emphasis>\s0" ljust at NS.n+(.05,.1)
</para>

<para><figure><title>Reference network</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>This diagram is very difficult to represent in ASCII.  The texts are too large
to fit in the available space, so they have run into each other and been
truncated.  If you can't understand it, don't worry about it.  The version in
the printed book is much better.
</para>

<para>This figure contains a lot of information, which we will examine in detail in
the course of the text:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
<indexterm><primary>bumble</primary></indexterm>
<indexterm><primary>wait</primary></indexterm>
The boxes in the top row represent the systems in the local network
<emphasis>example.org</emphasis>: <emphasis>freebie</emphasis>, <emphasis>presto</emphasis>, <emphasis>bumble</emphasis>, and
<emphasis>wait</emphasis>.
</para>
</listitem>
<listitem>

<para>The line underneath is the local Ethernet.  The address is <emphasis>223.147.37.0</emphasis>.
It has a full 256 addresses (``Class C''), so the network mask is
<emphasis>255.255.255.0</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>bumble</primary></indexterm>
<indexterm><primary>bumble.example.org.</primary></indexterm>
The machines on this Ethernet belong to the domain <emphasis>example.org</emphasis>.  Thus, the
full name of <emphasis>bumble</emphasis> is <emphasis>bumble.example.org.</emphasis>&mdash;we'll look at these
names in <xref linkend="CFBSD-chdns"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>interface</primary><secondary>name</secondary></indexterm>
The connections from the systems to the Ethernet are identified by two values:
on the left is the <emphasis>interface name</emphasis>, and on the right the address associated
with the interface name.
</para>
</listitem>
<listitem>

<para>Further down the diagram is the router, <emphasis>gw</emphasis>.  It has two interfaces:
<emphasis>ep0</emphasis> interfaces to the Ethernet, and <emphasis>tun0</emphasis> interfaces to the PPP
line to the ISP.  Each interface has a different addresses.
</para>
</listitem>
<listitem>

<para><indexterm><primary>igw</primary></indexterm>
<indexterm><primary>FDDI</primary></indexterm>
The lower half of the diagram shows part of the ISP's network.  He, too, has an
Ethernet, and his router looks very much like our own.  On the other hand, he
interfaces to a third network via the machine <emphasis>igw</emphasis>.  To judge by the name
of the interface, it is a <emphasis>FDDI</emphasis> connection&mdash;see page <xref linkend="CFBSD-FDDI"/> for more
details.
</para>
</listitem>
<listitem>

<para>The ISP runs a name server on the machine <emphasis>ns</emphasis>, address
<emphasis>139.130.237.3</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>terminator</primary><secondary>Ethernet
 </secondary></indexterm>
The ends of the Ethernets are thickened.  This represents the
<emphasis>terminators</emphasis> required at the end of a coaxial Ethernet.  We talked about
them on page <xref linkend="CFBSD-enet-terminator"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchnetsetup"><title>Configuring the local network</title>

<para><indexterm><primary>PPP</primary></indexterm>
<indexterm><primary>SLIP</primary></indexterm>
In Chapter <xref linkend="CFBSD-nchnetintro"/>, we looked at the basic concepts surrounding BSD
networking.  In this chapter and the following two, we'll look at what we need
to do to configure a network, first manually, then automatically.  Configuring
serial line communications such as <emphasis>PPP</emphasis> and <emphasis>SLIP</emphasis> is still a whole
lot more difficult than configuring an Ethernet, and they require more
prerequisites, so we'll dedicate <xref linkend="CFBSD-chppp"/>, and <xref linkend="CFBSD-chslip"/>, to them.
</para>

<para><indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>example.net</primary></indexterm>
In this chapter, we'll first look at <emphasis>example.org</emphasis> in the reference
network on page <xref linkend="CFBSD-ref-net"/>, since it's the easiest to set up.  After that,
we'll look at what additional information is needed to configure machines on
<emphasis>example.net</emphasis>.
</para>
<sect1>
<title>Network configuration with <emphasis>sysinstall</emphasis> </title>

<para><indexterm><primary>sysinstall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysinstall</secondary></indexterm>
To configure a network, you must describe its configuration to the system.
Normally <emphasis>sysinstall</emphasis> will do this for you.
</para>

<para>The system initialization routines that we discussed on page <xref linkend="CFBSD-bootup"/> include
a significant portion which sets up the network environment.  In addition, the
system contains a number of standard IP configuration files which define your
system's view of the network.  On page <xref linkend="CFBSD-network-services-menu-page"/> we saw how
to set up the network with <emphasis>sysinstall</emphasis>.  If you didn't configure the
network when you installed your system, you can still do it now.  Perform the
following steps:
</para>
<itemizedlist>
<listitem>

<para>Log in as <emphasis>root</emphasis> and start <emphasis>/stand/sysinstall</emphasis>.
</para>
</listitem>
<listitem>

<para>Select the <emphasis>Index</emphasis>, then <emphasis>Networking Services</emphasis>, then
<emphasis>Interfaces</emphasis> (press <keycap>Space</keycap> to select <emphasis>Interfaces</emphasis>).  You will
see the same menu as in figure <xref linkend="CFBSD-network-services-menu"/> on page
<xref linkend="CFBSD-network-services-menu-page"/>.
</para>
</listitem>
<listitem>

<para>Continue as described on page <xref linkend="CFBSD-network-services-menu-page"/>.
<emphasis>sysinstall</emphasis> will present you with the question
</para>
<programlisting>
Running multi-user, assume that the network is already configured?
</programlisting>

<para>Select <emphasis>No</emphasis>, and you will be given the menu shown on page
<xref linkend="CFBSD-network-config-menu-page"/>.  Proceed as described there.
</para>
</listitem>
</itemizedlist>

<para></para>

<para><emphasis>sysinstall</emphasis> configures the system by making entries in a number of files
in the directory <emphasis>/etc</emphasis>.  When the system starts, the startup scripts use
this information to configure the network.  You can also issue these commands
during normal system operation in order to modify the configuration.  We'll look
at them next.
</para>
</sect1>
<sect1>
<title>Manual network configuration</title>

<para><indexterm><primary>network</primary><secondary>configuration</secondary></indexterm>
Usually FreeBSD will configure your network automatically when it boots.  To do
so, it uses the configuration files in <emphasis>/etc</emphasis>.  So why do it manually?
There are several reasons:
</para>
<itemizedlist>
<listitem>

<para>It makes it easier to create and maintain the configuration files if you know
what's going on behind the scenes.
</para>
</listitem>
<listitem>

<para>It makes it easier to modify something ``on the fly''.
</para>
</listitem>
<listitem>

<para>With this information, you can edit the configuration files directly rather than
use the menu interface, which saves a lot of time.
</para>
</listitem>
</itemizedlist>

<para></para>
<note>

<para>We spend a lot of time discussing this point on the <emphasis>FreeBSD-chat</emphasis> mailing
list.  One thing's for sure: neither method of configuration is perfect.  Both
menu-based and text-file-based configuration schemes offer you ample opportunity
to shoot yourself in the foot.  But at the moment, the configuration file system
is easier to check <emphasis>if</emphasis> you understand what's going on.  That's the reason
for the rest of this chapter.
</para>
</note>

<para></para>

<para>In this section, we'll look at the manual way to do things first, and then we'll
see how to put it in the configuration files so that it gets done automatically
next time.  You can find a summary of the configuration files and their contents
on page <xref linkend="CFBSD-configfiles"/>.
</para>
<sect2>
<title>Setting the host name</title>

<para><anchor id="CFBSD-set-hostname"/>
Many functions require the system to have a name.  You should have set it when
you installed the system (see page <xref linkend="CFBSD-install-set-hostname"/>), but if not, or if
you entered an incorrect name, you can set it like this:
</para>
<programlisting>
# <command>hostname -s gw.example.org</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Describing your network</title>

<para><anchor id="CFBSD-describing-network"/>
<indexterm><primary>network</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>network</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>broadcast</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>network</primary><secondary>mask</secondary></indexterm>
In Table <xref linkend="CFBSD-reference-net"/>, on page <xref linkend="CFBSD-reference-net-page"/>, we saw that systems
connect to networks via <emphasis>network interfaces</emphasis>.  The kernel detects the
interfaces automatically when it starts, but you still need to tell it what
interfaces are connected to which networks, and even more importantly, which
address your system has on each network.  In addition, if the network is a
<emphasis>broadcast</emphasis> network, such as an Ethernet, you need to specify a range of
addresses which can be reached directly on that network.  As we saw on page
<xref linkend="CFBSD-netmask"/>, we perform this selection with the <emphasis>network mask</emphasis>.
</para>
<sect3>
<title>Ethernet interfaces</title>

<para><indexterm><primary>Ethernet</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>interface</primary><secondary>Ethernet</secondary></indexterm>
<anchor id="CFBSD-ifconfig-example"/>
<indexterm><primary>ifconfig</primary></indexterm>
<indexterm><primary>gw</primary></indexterm>
Once we have understood these concepts, it's relatively simple to use the
<emphasis>ifconfig</emphasis> program to set them.  For example, for the Ethernet interface
on system <emphasis>gw</emphasis>, with IP address <emphasis>223.147.37.5</emphasis>, we need to configure
interface <emphasis>ep0</emphasis>.  The network mask is the standard value for a class C
network, <emphasis>255.255.255.0</emphasis>.  That's all we need to know:
</para>
<programlisting>
# <command>ifconfig  ep0  inet  223.147.37.5  netmask  255.255.255.0 up</command>
</programlisting>

<para>In fact, this is more than you usually need.  The <emphasis>inet</emphasis> tells the
interface to use Internet protocols (the default), and <emphasis>up</emphasis> tells it to
bring it up (which it does anyway).  In addition, this is a class C network
address, so the net mask defaults to <emphasis>255.255.255.0</emphasis>.  As a result, you
can abbreviate this to:
</para>
<programlisting>
# <command>ifconfig  ep0  223.147.37.5</command>
</programlisting>

<para></para>
</sect3>
<sect3>
<title>Point-to-point interfaces</title>

<para><indexterm><primary>point-to-point</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>interface</primary><secondary>point-to-point</secondary></indexterm>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
With a point-to-point interface, the software currently requires you to specify
the IP address of the other end of the link as well.  As we shall see in
<xref linkend="CFBSD-chppp"/>, there is no good reason to do this, but if you omit it,
<emphasis>ifconfig</emphasis> won't work.  In addition, we need the network mask for a
non-broadcast medium.  The value is obvious:
<footnote>

<para>Well, you'd think it was obvious.  We'll see on page <xref linkend="CFBSD-pppnetmask"/> that some
people think it should be something else.
</para>
</footnote>
you can reach exactly one address at the other end, so it must be
<emphasis>255.255.255.255</emphasis>.  With this information, we could configure the PPP
interface on <emphasis>gw</emphasis>:
</para>
<programlisting>
# <command>ifconfig  tun0  139.130.136.133  139.130.136.129  netmask  255.255.255.255</command>
</programlisting>

<para>In fact, even this is frequently not necessary; in <xref linkend="CFBSD-chppp"/> we'll see that the
PPP software will usually set the configuration automatically.
</para>
</sect3>
<sect3>
<title>The loopback interface</title>

<para><indexterm><primary>interface</primary><secondary>loopback</secondary></indexterm>
<indexterm><primary>loopback</primary><secondary>interface</secondary></indexterm>
<indexterm><primary>lo0</primary></indexterm>
The IP protocols require you to use an address to communicate with every
system&mdash;even your own system.  There's a standard address for your own system,
<emphasis>127.0.0.1</emphasis>.  Theoretically, you could associate this address with, say,
an Ethernet interface, but this is relatively slow: the data would have to go
out on the network and come back in again.  Instead, there is a special
interface for communicating with other processes in the same system, the
<emphasis>loopback interface</emphasis>.  By convention, its name is <emphasis>lo0</emphasis>.  It's
straightforward enough to configure:
</para>
<programlisting>
# <command>ifconfig lo0 127.0.0.1</command>
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Checking the interface configuration</title>

<para><indexterm><primary>interface</primary><secondary>checking configuration</secondary></indexterm>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
<emphasis>ifconfig</emphasis> doesn't just set the configuration: you can also use it to
check the configuration by passing it the <emphasis>-a</emphasis> flag.
</para>
<note>

<para>The <emphasis>-a</emphasis> flag lists the configuration of all interfaces.  Some other UNIX
systems, particularly System V, don't understand this flag.
</para>
</note>

<para>It's a good idea to do this after you change the configuration:
</para>
<programlisting>
$ <command>ifconfig -a</command>
lp0: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST&gt; mtu 1500
ep0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        inet 223.147.37.5 netmask 0xffffff00 broadcast 223.147.37.255
        ether 00:a0:24:37:0d:2b
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 552
tun0: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500
        inet 139.130.136.133 --&gt; 139.130.136.129 netmask 0xffffffff
ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
ppp1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384
        inet 127.0.0.1 netmask 0xff000000
</programlisting>

<para><indexterm><primary>lp0</primary></indexterm>
<indexterm><primary>PLIP</primary></indexterm>
<indexterm><primary>sl0</primary></indexterm>
<indexterm><primary>SLIP</primary></indexterm>
You'll notice a whole lot more interfaces here: <emphasis>lp0</emphasis>, the <emphasis>PLIP</emphasis>
interface, <emphasis>sl0</emphasis>, the <emphasis>SLIP</emphasis> interface, and two <emphasis>ppp</emphasis> interfaces
for kernel PPP.  They're not running, but they're present.
</para>
</sect2>
<sect2>
<title>The configuration files</title>

<para><indexterm><primary>network</primary><secondary>configuration files</secondary></indexterm>
<indexterm><primary>configuration</primary><secondary>files</secondary></indexterm>
<indexterm><primary>network</primary><secondary>configuration variables</secondary></indexterm>
<indexterm><primary>configuration</primary><secondary>variables</secondary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
The system startup scripts summarize this configuration information in a number
of <emphasis>configuration variables</emphasis>:
</para>
<itemizedlist>
<listitem>

<para><emphasis>hostname</emphasis> is the name of the host, which we set above using the
<emphasis>hostname</emphasis> command.
</para>
</listitem>
<listitem>

<para><emphasis>network_interfaces</emphasis> is a list of the names of the interfaces which are to
be configured.
</para>
</listitem>
<listitem>

<para>For each interface, a variable of the form <emphasis>ifconfig_<emphasis>interface</emphasis></emphasis>
contains the parameters to be passed to <emphasis>ifconfig</emphasis>.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>gw</primary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
For <emphasis>gw</emphasis>, we put the following information in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
hostname="gw.example.org"
network_interfaces="ep0 tun0 lo0"	# List of network interfaces (lo0 is loopback).
ifconfig_ep0="inet 223.147.37.5  netmask 255.255.255.0"
ifconfig_tun0="inet 139.130.136.133  139.130.136.129  netmask  255.255.255.255"
ifconfig_lo0="inet 127.0.0.1"		# default loopback device configuration.
</programlisting>

<para></para>
</sect2>
<sect2>
<title>What we can do now</title>

<para><indexterm><primary>routing</primary></indexterm>
At this point, we have configured the link layer.  We can communicate with all
directly connected machines.  In order to communicate with machines that are not
directly connected, we need to set up <emphasis>routing</emphasis>.  We'll look at that next.
</para>
</sect2>
</sect1>
<sect1>
<title>Routing</title>

<para><indexterm><primary>routing</primary></indexterm>
Looking back at our example network on page <xref linkend="CFBSD-reference-net-page"/>, we'll
reconsider a problem we met there: when a system receives a normal data
packet,
<footnote>

<para><indexterm><primary>broadcast</primary><secondary>packet</secondary></indexterm>
<indexterm><primary>multicast</primary></indexterm>
This discussion doesn't apply to <emphasis>broadcast packets</emphasis>, which are not routed.
Instead, they are sent out on every broadcast interface.  It also doesn't apply
to <emphasis>multicast</emphasis> packets, which we don't consider in this book.
</para>
</footnote>
what does it do with it?  There are four possibilities:
</para>
<itemizedlist>
<listitem>

<para>If it's addressed to itself, it delivers it locally.
</para>
</listitem>
<listitem>

<para>If it's addressed to a system to which it has a direct connection, it sends it
to that system.
</para>
</listitem>
<listitem>

<para>If it's not addressed to a system to which it is directly connected, but it
knows a system which knows what to do with the packet, it sends the packet to
that system.
</para>
</listitem>
<listitem>

<para>If none of the above apply, it discards the packet.
</para>
</listitem>
</itemizedlist>

<para><table frame='all'><title>The routing table</title>
box,center, tab(#) ;
| lfCWp9 | lfCWp9 | lfCWp9 | l | lfCWp9 | .
Destination#Gateway#Net mask#Type#Interface
=
127.0.0.1#127.0.0.1#255.0.0.0#Host#lo0
223.147.37.0##255.255.255.0#Direct#ep0
139.130.136.129#139.130.136.133#255.255.255.255#Host#tun0
default#139.130.136.129#0.0.0.0#Gateway#tun0
</para>
</orderedlist>

</tbody></tgroup></table>
<indexterm><primary>routing</primary></indexterm>
<indexterm><primary>routing</primary><secondary>table</secondary></indexterm>
<indexterm><primary>net</primary><secondary>mask</secondary></indexterm>
<indexterm><primary>gw.example.org</primary></indexterm>
These decisions are the basis of <emphasis>routing</emphasis>.  The implementation performs
them with the aid of a <emphasis>routing table</emphasis>, which tells the system which
addresses are available where.  We've already seen the <emphasis>net mask</emphasis> in
<xref linkend="CFBSD-chnetintro"/>, on page <xref linkend="CFBSD-netmask"/>.  We'll see that it also plays a significant
rôle in the routing decision.  Table <xref linkend="CFBSD-routing-table"/> shows a symbolic view of
the routing table for <emphasis>gw.example.org</emphasis>.  It looks very similar to the
<emphasis>ifconfig -a</emphasis> output in the previous section:
</itemizedlist>
<orderedlist>
<itemizedlist>
<itemizedlist>
<listitem>

<para><indexterm><primary>loopback</primary></indexterm>
The first entry is the <emphasis>loopback</emphasis> entry: it shows that the local host can
be reached by the interface <emphasis>lo0</emphasis>, which is the name for the loopback
interface on all UNIX systems.  You'll notice that, although this entry
specifies a single host, the net mask allows for 16,276,778 hosts.  The other
addresses aren't used.
</para>
</listitem>
<listitem>

<para>The second entry is for the local Ethernet.  In this case, we have a direct
connection, so we don't need to specify a gateway address.  Due to the net mask
<emphasis>255.255.255.0</emphasis>, this entry accounts for all addresses from
<emphasis>223.147.37.0</emphasis> to <emphasis>223.147.37.255</emphasis>.
</para>

<para>This entry also emphasizes the difference between the output of <emphasis>ifconfig</emphasis>
and the routing table.  <emphasis>ifconfig</emphasis> shows the address of the interface, the
address needed to reach our system.  For the Ethernet interface, it's
<emphasis>223.147.37.5</emphasis>.  The routing table shows the addresses that can be reached
<emphasis>from</emphasis> this system, so it shows the base address of the Ethernet,
<emphasis>223.147.37.0</emphasis>.
</para>
</listitem>
<listitem>

<para>The third entry represents the PPP interface.  It is a host entry, like the
loopback entry.  This entry allows access to the other end of the PPP link only,
so the net mask is set to <emphasis>255.255.255.255</emphasis> (only one system).
</para>
</listitem>
<listitem>

<para>Finally, the fourth entry is the big difference.  It doesn't have a counterpart
in the <emphasis>ifconfig -a</emphasis> listing.  It specifies how to reach any address not
already accounted for&mdash;just about the whole Internet.  In this case, it refers
to the other end address of the PPP link.
</para>
</listitem>
</itemizedlist>

<para>And that's all there is to it!  Well, sort of.  First, we need to see how this
works in practice.  The Internet is a large network.  In our example
configuration, we're hidden in one corner, and there's only one way to the
network.  Things look different when you are connected to more than one
network.
</para>

<para><indexterm><primary>example.net</primary></indexterm>
we'll look at the differences we need for the ISP <emphasis>example.net</emphasis>.  In the
middle of the Internet, things are even more extreme.  There may be ten
different interfaces, and the choice of a route for a particular address may be
much more complicated.  In such an environment, two problems occur:
</para>
<itemizedlist>
<listitem>

<para>The concept of a default route no longer has much significance.  If each
interface carries roughly equal traffic, you really need to specify the
interface for each network or group of networks.  As a result, the routing
tables can become enormous.
</para>
</listitem>
<listitem>

<para><indexterm><primary>routing</primary><secondary>software</secondary></indexterm>
There are probably multiple ways to route packets destined for a specific
system.  Obviously, you should choose the best route.  But what happens if it
fails or becomes congested?  Then it's not the best route any more.  This kind
of change happens frequently enough that humans can't keep up with it&mdash;you
need to run <emphasis>routing software</emphasis> to manage the routing table.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Adding routes automatically</title>

<para><indexterm><primary>adding</primary><secondary>routes</secondary></indexterm>
<indexterm><primary>routed</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>routed</secondary></indexterm>
<indexterm><primary>gated</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>gated</secondary></indexterm>
FreeBSD comes with all the currently available routing software, primarily the
d&aelig;gmons <emphasis>routed</emphasis> and <emphasis>gated</emphasis>.  <emphasis>routed</emphasis> is in the base system,
and the newer <emphasis>gated</emphasis> is in the Ports Collection.
</para>

<para>Both dæmons have one thing in common: you don't need them.  At any rate, you
don't need them until you have at least two different connections to the
Internet, and even then it's not sure.  As a result, we won't discuss them here.
If you do need to run routing d&aelig;gmons, read all about them in <emphasis>TCP/IP
Network Administration</emphasis>, by Craig Hunt.
</para>

<para>From our point of view, however, the routing protocols have one particular
significance: the system expects the routing table to be updated automatically.
As a result, it is designed to use the information supplied by the routing
protocols to perform the update.  This information consists of two parts:
</para>
<itemizedlist>
<listitem>

<para>The address and netmask of the network (in other words, the address range).
</para>
</listitem>
<listitem>

<para><indexterm><primary>gateway</primary></indexterm>
The address of the <emphasis>gateway</emphasis> which forwards data for this address range.
The gateway is a directly connected system, so it will also figure in the
routing table.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Adding routes manually</title>

<para><indexterm><primary>adding</primary><secondary>routes</secondary></indexterm>
<anchor id="CFBSD-route"/>
As we saw in the previous section, the routing software uses only addresses, and
not the interface name.
<!--  XXX FIXME -->
In order to add routes manually, we have to give the same information.
</para>

<para><indexterm><primary>route</primary></indexterm>
The program which adds routes manually is called <emphasis>route</emphasis>.  We need it to add
routes to systems other than those to which we are directly connected.
</para>

<para><indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
<indexterm><primary>bumble</primary></indexterm>
<indexterm><primary>wait</primary></indexterm>
To set up the routing tables for the systems connected only to our reference
network (<emphasis>freebie</emphasis>, <emphasis>presto</emphasis>, <emphasis>bumble</emphasis> and <emphasis>wait</emphasis>), we could
write:
</para>
<programlisting>
# <command>route add default gw</command>
<!--  Done automatically? # <command>route add freebie localhost</command>  -->
<!--  # <command>route add -net 223.147.37 freebie</command>  -->
</programlisting>

<para><indexterm><primary>/etc/rc.network</primary></indexterm>
<indexterm><primary>/etc/rc.conf</primary></indexterm>
During system startup, the script <emphasis>/etc/rc.network</emphasis> performs this
operation automatically if you set the following variables in
<emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
defaultrouter="223.147.37.5"		# Set to default gateway (or NO).
static_routes=""			# Set to static route list (or leave empty).
</programlisting>

<para>Note that we enter the address of the default router as an IP address, not a
name.  This command is executed before the name server is running.  We can't
change the sequence in which we start the processes: depending on where our name
server is, we may need to have the route in place in order to access the name
server.
</para>

<para>On system <emphasis>gw</emphasis>, the default route goes via the <emphasis>tun0</emphasis> interface:
</para>
<programlisting>
defaultrouter="139.130.136.133"	# Set to default gateway (or NO).
static_routes=""			# Set to static route list (or leave empty).
gateway_enable="YES"			# Set to YES if this host will be a gateway.
</programlisting>

<para><indexterm><primary>ppp</primary></indexterm>
This is the case for a connection with a static IP address on the PPP interface.
If you're forced to use dynamic IP addresses, you don't know the address at this
point.  We'll see how to address this problem in <xref linkend="CFBSD-chppp"/>, page
<xref linkend="CFBSD-ppp-default-route"/>.
</para>

<para>We need to enable gateway functionality on this system, since it receives data
packets on behalf of other systems.  We'll look at this issue in more depth on
page <xref linkend="CFBSD-set-gateway"/>.
</para>
</sect2>
</sect1>
<sect1>
<title>ISP's route setup</title>

<para><anchor id="CFBSD-ISP-routing"/>
<indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>free-gw.example.net</primary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>biguser.com</primary></indexterm>
<indexterm><primary>ppp0</primary></indexterm>
At the ISP site, things are slightly more complicated than at <emphasis>example.org</emphasis>.
The gateway machine <emphasis>free-gw.example.net</emphasis> knows the interface to
<emphasis>example.org</emphasis> and another network, <emphasis>biguser.com</emphasis> (the network serviced
by interface <emphasis>ppp0</emphasis>), but it doesn't know what networks are behind them
yet.  At some point, you need to issue the commands:
</para>
<programlisting>
# <command>route add -net 223.147.37.0 139.130.136.129</command>
# <command>route add -net 223.147.38.0 139.130.136.9</command>
</programlisting>

<para><indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>biguser.com</primary></indexterm>
The first line tells the system that the network with the base IP address
<emphasis>223.147.37.0</emphasis> (<emphasis>example.org</emphasis>) can be reached via the interface
<emphasis>ppp3</emphasis>, and the second line tells it that the network with the base IP
address <emphasis>223.147.38.0</emphasis> (<emphasis>biguser.com</emphasis>) can be reached via the
interface <emphasis>ppp0</emphasis>.
</para>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
The procedure to add this information to <emphasis>/etc/rc.conf</emphasis> is similar to what
we did for the interface addresses:
</para>
<itemizedlist>
<listitem>

<para>The variable <emphasis>static_routes</emphasis> contains a list of the static routes which
are to be configured.
</para>
</listitem>
<listitem>

<para><indexterm><primary>freebie.org</primary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>biguser.com</primary></indexterm>
For each route, a variable corresponding to the route name specified in
<emphasis>static_routes</emphasis>.  Unlike the interfaces, you can assign any name you want
to them, as long as it starts with <emphasis>route_</emphasis>.  It makes sense for them to
be related to the domain name, but they don't have to.  For example, we would
have liked to have called our network <emphasis>freebie.org</emphasis>, but there's a good
chance that this name has been taken, so we called it <emphasis>example.org</emphasis>
instead.  The old name lives on in the name of the route, <emphasis>route_freebie</emphasis>.
In the case of <emphasis>biguser.com</emphasis>, we have called the route variable
<emphasis>route_biguser</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
We put the following entries into <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
defaultrouter="139.130.237.117"		# Set to default gateway (or NO).
static_routes="route_freebie route_biguser"	# list of static routes
route_freebie="-net 223.147.37.0 139.130.237.129"
route_biguser="-net 223.147.38.0 139.130.237.9"
</programlisting>

<para></para>
</sect1>
<sect1>
<title>Looking at the routing tables</title>

<para><indexterm><primary>routing</primary><secondary>tables</secondary></indexterm>
<indexterm><primary>examining</primary><secondary>routing tables</secondary></indexterm>
<anchor id="CFBSD-netstat"/>
<indexterm><primary>netstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netstat</secondary></indexterm>
You can show the routing tables with the <emphasis>netstat</emphasis> tool.  Option
<emphasis>-r</emphasis> shows the routing tables.  For example, on <emphasis>freebie</emphasis> you might
see:
</para>
<programlisting>
# <command>netstat -r </command>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use     Netif Expire
default            gw                 UGSc        9     8732       ed0
localhost          localhost          UH          0     1255       lo0
223.147.37         link#2             UC          0        0
presto             0:0:c0:44:a5:68    UHLW       13   139702       ed0   1151
freebie            0:a0:24:37:d:2b    UHLW        3    38698       lo0
wait               0:60:97:40:fb:e1   UHLW        6     1062       ed0    645
bumble             8:0:20:e:2c:98     UHLW        2       47       ed0   1195
gw                 0:60:97:40:fb:e1   UHLW        6     1062       ed0    645
broadcast          ff:ff:ff:ff:ff:ff  UHLWb       2     5788       ed0
</programlisting>

<para>There's a lot to notice about this information
</para>
<itemizedlist>
<listitem>

<para>The first column is the name of a host or a network to which packets can be
sent, or the keyword <emphasis>default</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>gateway</primary></indexterm>
The second column, the <emphasis>gateway</emphasis>, indicates the path to the destination.
This field differs significantly even from older versions of UNIX.  It can be
the name of a host (for example, <emphasis>gw</emphasis>), a pointer to an interface
(<emphasis>link#2</emphasis>, which means the second Internet interface; the output from
<emphasis>ifconfig -a</emphasis> is in the same sequence), or an Ethernet address
(<emphasis>8:0:20:e:2c:98</emphasis>).  Older versions of UNIX do not use the last two forms.
</para>
</listitem>
<listitem>

<para>We'll look at the flags below.  The most important ones to note are <emphasis>G</emphasis>
(gateway) and <emphasis>H</emphasis> (host).
</para>
</listitem>
<listitem>

<para>The fields <emphasis>Refs</emphasis>, <emphasis>Use</emphasis> and <emphasis>Expire</emphasis> are only of interest
when you're running a routing protocol.  See the man page <emphasis>netstat(1)</emphasis> for
more details.
</para>
</listitem>
<listitem>

<para><emphasis>Netif</emphasis> is the name of the interface by which the gateway can be reached.
In the case of a link, this is the interface, so the <emphasis>Netif</emphasis> field is
empty.
</para>
</listitem>
<listitem>

<para>The order of the entries is not important.  The system searches the table for a
best fit, not a first fit.
</para>
</listitem>
<listitem>

<para>The <emphasis>default</emphasis> entry points to <emphasis>gw</emphasis>, as we would expect.  The
interface, <emphasis>ed0</emphasis>, is the interface by which <emphasis>gw</emphasis> can be reached.
</para>
</listitem>
</itemizedlist>

<para><table frame='all'><title>netstat -r flags values</title>
box,center,tab(#) ;
| lfCWp9| lfCWp9 | lw65 | .
Flag#Name#Meaning
=
1#RTF_PROTO1#Protocol specific routing flag 1
2#RTF_PROTO2#Protocol specific routing flag 2
3#RTF_PROTO3#Protocol specific routing flag 3
B#RTF_BLACKHOLE#Just discard pkts (during updates)
b#RTF_BROADCAST#The route represents a broadcast address
C#RTF_CLONING#Generate new routes on use
c#RTF_PRCLONING#Protocol-specified generate new routes on use
D#RTF_DYNAMIC#Created dynamically (by redirect)
G#RTF_GATEWAY#Destination requires forwarding by intermediary
H#RTF_HOST#Host entry (net otherwise)
L#RTF_LLINFO#Valid protocol to link address translation
M#RTF_MODIFIED#Modified dynamically (by redirect)
R#RTF_REJECT#Host or net unreachable
S#RTF_STATIC#Manually added
U#RTF_UP#Route usable
W#RTF_WASCLONED#Route was generated as a result of cloning
X#RTF_XRESOLVE#External d&aelig;gmon translates proto to link address
</para>
</orderedlist>

</tbody></tgroup></table>
<sect2>
<title>Flags</title>

<para><indexterm><primary>netstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netstat</secondary></indexterm>
Compared to earlier versions of <emphasis>netstat</emphasis>, the current version displays many
more flags.  Table <xref linkend="CFBSD-netstat-r-flags"/>
<!--  .pageref  \*[netstat-r-flags-page] "on page  \*[netstat-r-flags-page]" "\&amp;"  "on page  \*[netstat-r-flags-page]" -->
gives you an overview.
</para>
</sect2>
</sect1>
<sect1>
<title>Packet forwarding</title>

<para><indexterm><primary>packet</primary><secondary>forwarding</secondary></indexterm>
<anchor id="CFBSD-set-gateway"/>
We saw above that when a system receives a packet which is not intended for
itself, it will look for a route to the destination.  In fact, this is not
always the case: by default, FreeBSD just silently drops the packet.  This is
desirable for security reasons, and indeed it's required by RFC 1122, but if you
want to access the Internet via another machine on your local net, it's less
than convenient.
</para>

<para>The rationale for this is that most systems are only connected to one network,
and it doesn't make sense to have packet forwarding enabled.  Earlier systems
made this a kernel option, so that disabling packet forwarding also made the
kernel fractionally smaller.  In current versions of FreeBSD, the code is always
there, even if it is disabled.
</para>

<para><indexterm><primary>gateway</primary></indexterm>
<indexterm><primary>sysctl</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sysctl</secondary></indexterm>
It's straightforward enough to set up your machine as a router (or
<emphasis>gateway</emphasis>): you can set it with the <emphasis>sysctl</emphasis> command:
</para>
<programlisting>
# <command>sysctl -w net.inet.ip.forwarding=1</command>
net.inet.ip.forwarding: 0 -&gt; 1
</programlisting>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
In <emphasis>/etc/rc.conf</emphasis>, you can set this with the variable
<emphasis>gateway_enable</emphasis>:
</para>
<programlisting>
gateway_enable="YES"		# Set to YES if this host will be a gateway.
</programlisting>

<para></para>
</sect1>
<sect1>
<title>Configuration summary</title>

<para><indexterm><primary>network</primary><secondary>configuration summary</secondary></indexterm>
<indexterm><primary>configuration</primary><secondary>summary</secondary></indexterm>
<indexterm><primary>free-gw.example.net</primary></indexterm>
In summary, we need to perform the following steps to configure the networks.
We'll use the configuration for <emphasis>free-gw.example.net</emphasis> as an example, since
it's the most complicated.
</para>
</itemizedlist>
<orderedlist>
<itemizedlist>
<itemizedlist>
<listitem>

<para>Set your host name:
hostname="free-gw.example.net"
</para>
</listitem>
<listitem>

<para>Decide which interfaces to configure.  These are the interfaces <emphasis>ed0</emphasis>,
<emphasis>ppp0</emphasis>, <emphasis>ppp3</emphasis> and <emphasis>lo0</emphasis>.  Enter a line in <emphasis>/etc/rc.conf</emphasis>
listing them:
</para>
<programlisting>
network_interfaces="lo0 ed0 ppp0 ppp3"	# List of network interfaces
</programlisting>

<para></para>
</listitem>
<listitem>

<para>For each interface, specify IP addresses and possibly net masks for each
interface on the machine:
</para>
<programlisting>
ifconfig_ed0="inet 139.130.237.117  netmask 255.255.255.0"
ifconfig_ppp0="inet 139.130.136.9  139.130.136.134  netmask  255.255.255.255"
ifconfig_ppp3="inet 139.130.136.129  139.130.136.133  netmask  255.255.255.255"
ifconfig_lo0="inet 127.0.0.1"			# default loopback device config
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Decide on a default route.  In this case, it will be via the Ethernet interface
<emphasis>ed0</emphasis>, with the address <emphasis>139.130.237.117</emphasis>:
</para>
<programlisting>
defaultrouter="139.130.237.117"		# Set to default gateway (or NO).
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Decide on other routes.  In this case, we have two, to <emphasis>example.org</emphasis> and
<emphasis>biguser.com</emphasis>.  List them in the variable <emphasis>static_routes</emphasis>:
</para>
<programlisting>
static_routes="route_freebie route_biguser"	# Set to static route list
</programlisting>

<para></para>
</listitem>
<listitem>

<para>For each static route, create a variable describing the route:
</para>
<programlisting>
route_freebie="-net 223.147.37.0 139.130.136.129"
route_biguser="-net 223.147.38.0 139.130.136.9"
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Enable IP forwarding:
</para>
<programlisting>
gateway_enable="YES"			    # Set to YES if this host will be a gateway.
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para>Even more briefly, the data are:
</para>
<programlisting>
hostname="gw.example.org"
ifconfig_ed0="inet 139.130.237.117  netmask 255.255.255.0"
ifconfig_ppp0="inet 139.130.136.9  139.130.136.134  netmask  255.255.255.255"
ifconfig_ppp3="inet 139.130.136.129  139.130.136.133  netmask  255.255.255.255"
ifconfig_lo0="inet 127.0.0.1"			# default loopback device configuration.

defaultrouter="139.130.237.117"		# Set to default gateway (or NO).
static_routes="route_freebie route_biguser"	# Set to static route list
route_freebie="-net 223.147.37.0 139.130.136.129"
route_biguser="-net 223.147.38.0 139.130.136.9"
gateway_enable="YES"				# Set to YES if this host will be a gateway.
</programlisting>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchisp"><title>Connecting to the Internet</title>

<para>In order to implement the reference network shown in the previous chapter, we
need to do a lot of things which interface with the outside world.  They can
take some time, so we should look at them first:
</para>
<itemizedlist>
<listitem>

<para>What kind of physical connection should we use?  We'll consider that in the next
section.
</para>
</listitem>
<listitem>

<para>We may want to <emphasis>register a domain</emphasis>.  Many people don't, but I strongly
recommend it.  Find out about that on page <xref linkend="CFBSD-getting-on-internet"/>.
</para>
</listitem>
<listitem>

<para>We may also want to <emphasis>register a network</emphasis>.  In our example, we have used the
network <emphasis>223.147.37.0</emphasis>.  In real life, we can't choose our own network: we
take what is given to us.  We'll look at this on page <xref linkend="CFBSD-netreg"/>.
</para>
</listitem>
<listitem>

<para>We need to find an <emphasis>Internet Service Provider</emphasis>.  We'll look at what that
entails on page <xref linkend="CFBSD-select-isp"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>The physical connection</title>

<para><anchor id="CFBSD-connect-types"/>
Just two or three years ago, the way to connect to the outside world was simple:
a phone line.  Since then, things have changed quite a bit, and you may have
quite a choice:
</para>
<itemizedlist>
<listitem>

<para>Analogue telephone line connections are still the most cost-effective for small
networks in most countries, but their bandwidth is limited to about 7 kB/s at
best.  You can run SLIP or PPP over this kind of line, though nowadays most ISPs
support only PPP.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ISDN</primary></indexterm>
<indexterm><primary>Integrated</primary><secondary>Systems Digital Network</secondary></indexterm>
<indexterm><primary>Plain</primary><secondary>Old Telephone Service</secondary></indexterm>
<indexterm><primary>POTS</primary></indexterm>
<emphasis>ISDN</emphasis> stands for <emphasis>Integrated Systems Digital Network</emphasis>.  It's the new,
better, washes whiter telephone system which is replacing POTS (<emphasis>Plain Old
Telephone Service</emphasis>) in some countries, notably in Europe.  We'll look at
ISDN in more detail in the next section.
</para>
</listitem>
<listitem>

<para><indexterm><primary>leased</primary><secondary>line</secondary></indexterm>
<indexterm><primary>T1</primary><secondary>line</secondary></indexterm>
<indexterm><primary>E1</primary><secondary>line</secondary></indexterm>
<indexterm><primary>line</primary><secondary>leased</secondary></indexterm>
<indexterm><primary>line</primary><secondary>T1</secondary></indexterm>
<indexterm><primary>line</primary><secondary>E1</secondary></indexterm>
<emphasis>Leased lines</emphasis> form the backbone of the Internet.  They're invariably more
expensive than dialup lines, but they can provide quite high speeds&mdash;in the
USA, a <emphasis>T1</emphasis> line will give you 1,536 kbps, and in the rest of the world an
<emphasis>E1</emphasis> will give you 2,048 kbps.  We won't look at this kind of line in more
detail in this book.
</para>
</listitem>
<listitem>

<para><indexterm><primary>cable</primary><secondary>modem</secondary></indexterm>
<indexterm><primary>modem</primary><secondary>cable</secondary></indexterm>
<emphasis>Cable modems</emphasis> use existing cable TV networks to deliver a high speed
connection, up to several megabits per second.  They use the cable as a
broadcast medium, rather like an Ethernet, and suffer from the same load
problems: you share the speed with the other users of the cable. There are also
some security issues to consider, but if you have a cable service in your area,
you'll probably find it superior to telephones.  The cable modem is effectively
a bridge between the cable and an Ethernet.  From the FreeBSD point of view, the
cable modem looks like just another Ethernet device.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ADSL</primary></indexterm>
<indexterm><primary>Asynchronous</primary><secondary>Digital Subscriber Loop</secondary></indexterm>
<indexterm><primary>HDSL</primary></indexterm>
<indexterm><primary>High-speed</primary><secondary>Digital Subscriber Loop</secondary></indexterm>
<emphasis>ADSL</emphasis> (<emphasis>Asynchronous Digital Subscriber Loop</emphasis>) and <emphasis>HDSL</emphasis>
(<emphasis>High-speed Digital Subscriber Loop</emphasis>) are the telephone companies'
reaction to cable modems.  By modifying the way they transmit data over normal
phone wires, including the use of special modems, ADSL can get speeds of up to 6
Mb/s downstream (towards the end user), and about 640 kbps upstream.  HDSL has
similar speeds, but the speed is the same in each direction.  In contrast to
cable modems, you don't have to share this bandwidth with anybody.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Internet</primary><secondary>satellite connection to</secondary></indexterm>
<indexterm><primary>satellite</primary><secondary>connection to Internet</secondary></indexterm>
In some parts of the world, <emphasis>satellite connections</emphasis> are a viable
alternative.  These usually use a telephone line for outgoing data and a
satellite receiver for incoming data.  The information I have seen so far
suggests that they are not very flexible, and others have complained that they
are overly expensive.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>ISDN</title>

<para><anchor id="CFBSD-ISDN-overview"/>
<anchor id="CFBSD-BRI"/>
<indexterm><primary>Integrated</primary><secondary>Services Digital Network</secondary></indexterm>
<indexterm><primary>Basic</primary><secondary>Rate Interface</secondary></indexterm>
<indexterm><primary>BRI</primary></indexterm>
ISDN stands for <emphasis>Integrated Services Digital Network</emphasis>, which is a fancy
way of saying ``digital telephone'': it's a new kind of telephone connection
based on digital principles.  It uses the same old two-wire line you need for a
normal analogue phone, but instead it carries digital data.  The normal
interconnection is called the <emphasis>Basic Rate Interface</emphasis> or <emphasis>BRI</emphasis>.
Deutsche Telekom, the German telephone company, and one of the world leaders in
ISDN deployment, calls it S\d\s80\s0\u instead.
</para>

<para>A Basic Rate ISDN Interface carries three data channels multiplexed on a single
pair of wires:
</para>
<itemizedlist>
<anchor id="CFBSD-D-channel"/>
<listitem>

<para><indexterm><primary>D</primary><secondary>channel</secondary></indexterm>
<indexterm><primary>signalling</primary></indexterm>
The <emphasis>D channel</emphasis> runs at 16 kbps and is responsible for <emphasis>signalling</emphasis>,
which is what telephone people call operations like dialling (``call setup'')
and transmitting charge information.  They also carry other information like the
phone number of the calling party and the time of day.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-B-channel"/>
<indexterm><primary>B</primary><secondary>channel</secondary></indexterm>
The other two channels are <emphasis>B channels</emphasis>, which run at 64 kbps (that's
64,000 bits/second, not 65,536).  They are used for telephone conversations or
data transmission.
</para>
</listitem>
</itemizedlist>

<para>In other words, a Basic Rate Interface is effectively two phone lines, and this
is the way most people see it.
</para>

<para>Primary Rate Interfaces carry a whole lot more channels on one line.  The number
is different in the USA and elsewhere.  They always carry one D channel, this
time at 64 kbps, and in the USA, they carry 23 B channels, which corresponds to
the US standard T1 rate of 1536 kbps.  In the rest of the world, they have 30 B
channels.  In each case, the B channels still run at 64 kbps.  Deutsche Telekom
has found a new name for this interface, too: S\d\s82\s0\uM or
<emphasis>Primärmultiplexanschluß</emphasis> (try saying that fast several times in a row).
</para>

<para>A Basic Rate Interface is enough for most people.  If you need Primary Rate,
you'll also have to find equipment which runs on it.   The problem here is that
most PC hardware is designed to run under Microsoft products, which are not
particularly suited to high-speed communications.
</para>

<para>ISDN connections have a number of advantages over conventional phone lines:
</para>
<itemizedlist>
<listitem>

<para>They're more reliable.  There's no such thing as a noisy line.
</para>
</listitem>
<listitem>

<para>They're faster.  Modern analogue modems peak at 56 kbps (the higher speeds base
on compression, which doesn't directly relate to the phone line), whereas ISDN
runs at 64,000 bps per B channel.  These figures are misleading: ISDN always
runs at 64 kbps, whereas the analogue modems run a maximum of 56 kbps
downstream, and only 33.6 kbps upstream.
</para>
</listitem>
<listitem>

<para>If that's not fast enough, you can often <emphasis>bundle</emphasis> ISDN B channels: you
transmit the data over multiple B channels at once.  This requires that you have
a datacomm protocol which can accept datagrams from multiple sources, such as
IP.
</para>
</listitem>
<listitem>

<para>Call setup time is very fast, typically in the order of two seconds.  This makes
it practical to disconnect the ISDN line if the line is idle for a period of
time in order to save on costs while you're connected to a remote site: the
system can reconnect so fast that you hardly notice the difference.
</para>
</listitem>
<listitem>

<para>It's marginally more secure.  Part of the information supplied during call setup
is the calling line number, so you can arrange to only accept phone calls from
people you know.  It's possible to fake the telephone number information, but as
this requires configuration access to a PABX or similar telco equipment, it
doesn't happen often.
</para>
</listitem>
<listitem>

<para>You don't need a dedicated phone line for the ISDN connection: part of the
information supplied with an incoming call request specifies what kind of call
it is (data, voice or fax).  If it's a data call, your phone won't ring.  If
it's a voice call, your ISDN datacomm software will ignore it, or, if you wish,
log it.  This is quite a neat feature: the system log can carry a complete
history of who called you and when.
</para>
</listitem>
<listitem>

<para>With a Basic Rate Interface, you can have two calls on the same number, since
each gets its own B channel.  With appropriate hardware, you can also have
multiple numbers attached to a single phone.
</para>
</listitem>
</itemizedlist>

<para>These advantages seem to make ISDN an ideal way to connect to the Internet.  You
can effectively be connected all the time, but you just need to establish a
connection when you need to transmit data.  This requires your ISP to be
prepared to call you when there is data to be transmitted, of course.
</para>

<para><indexterm><primary>terminal</primary><secondary>adapter</secondary></indexterm>
<indexterm><primary>ISDN</primary><secondary>terminal adapter</secondary></indexterm>
To get best results from ISDN, you should use specific software, which can give
you speeds of up to 64 kbps (8 kB/s) per line.  You can also use <emphasis>Terminal
Adapters</emphasis>, which perform the same function as modems, and run PPP across them.
</para>

<para>The decision for or against ISDN is primarily one of pricing.  In Europe, it can
cost the same amount as an analogue line; in other countries, it can cost a
multiple of the price.
</para>
</sect2>
</sect1>
<sect1>
<title>Establishing yourself on the Internet</title>

<para><anchor id="CFBSD-getting-on-internet"/>
The first thing you need to decide is the extent of your presence on the net.
There are various possibilities:
</para>
<itemizedlist>
<listitem>

<para>You could get a dial-in service where you use your computer just to connect to
the ISP, and perform network functions such as reading mail and news on his
machine.  Since it's a lot faster to perform these functions on your own
machine, and you have all the software you need to do so, this isn't very
desirable.
</para>
</listitem>
<listitem>

<para>You could perform all the functions on your machine, but using names and
addresses assigned to you by the ISP.
</para>
</listitem>
<listitem>

<para>You could perform all the functions on your machine, using addresses assigned to
you by the ISP, but you would use your own domain name.
</para>
</listitem>
<listitem>

<para>You get your own address space and use your own domain name.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>Dunham</primary><secondary>Jerry</secondary></indexterm>
Does it matter?  That's for you to decide.  It's certainly a very good idea to
have your own domain name.  As time goes on, your Email address will become more
and more important.  If you get a mail address like <emphasis>4711@flybynight.net</emphasis>,
and Flybynight goes broke, or you decide to change to a different ISP, your mail
address is gone, and you have to explain that to everybody who might want to
contact you.  If, on the other hand, your name is Jerry Dunham, and you register
a domain <emphasis>dunham.org</emphasis>, you can assign yourself any mail address in that
domain that you want to.
</para>

<para>But how do you go about it?  One way would be to go to your ISP and pay him good
money to do it for you.  You don't need to do that: it's easy enough to do
yourself on the World-Wide Web.  You must be connected to the Internet to
perform these steps.  This implies that you should first connect using your
ISP's domain name, then establish your domain name, and change to that domain.
</para>
<sect2>
<title>Which domain name?</title>

<para><indexterm><primary>domain</primary><secondary>name</secondary></indexterm>
We'll continue to assume that your name is Jerry Dunham.  If you live in, say,
Austin, Texas, you have a number of domain names you can choose from:
<emphasis>dunham.org</emphasis>, for a non-commercial domain, <emphasis>dunham.com</emphasis> for a
commercial domain (this name is, in fact, taken), <emphasis>dunham.net</emphasis> for an ISP
(but <emphasis>not</emphasis> for his customers!), or even <emphasis>dunham.tx.us</emphasis> if you want
to use the geographical domain.
</para>

<para>If you live in, say, Capetown, people will probably suggest that you get the
domain <emphasis>dunham.za</emphasis>, the geographical domain for South Africa.  The problem
with that is that you are limiting yourself to that country.  If you move to,
say, Holland, you would have to change to <emphasis>dunham.nl</emphasis>&mdash;a situation which
is only fractionally better than being bound to an ISP.  The same considerations
apply to <emphasis>dunham.tx.us</emphasis>, of course.
</para>

<para>Your choice of domain name also affects the way you apply.  In the following
sections, I assume you take my advice and apply for an organizational rather
than a geographical domain.
</para>
</sect2>
<sect2>
<title>Preparing for registration</title>

<para><indexterm><primary>NIC</primary><secondary>handle</secondary></indexterm>
Once upon a time, registration was handled by InterNIC, a professional body.  In
recent times, it has been delegated to commercial companies, and the quality of
service has suffered correspondingly: they don't even appear to know the
technical terms.  For example, you may find them referring to a domain name as
``Web Address''.  Things are still changing at the time of writing, and
additional companies are being allowed to register domain names, so maybe
they'll learn to express themselves correctly.
</para>

<para><indexterm><primary>NIC</primary><secondary>handle</secondary></indexterm>
The registration forms ask for information about three kinds of people
associated with the records you ask for: the Administrative Contact, Technical
Contact, and Billing Contact.  These can all be the same person.  You can enter
the information every time you make a request, but it makes things easier if you
have a <emphasis>NIC handle</emphasis>, a code by which you can be identified.  To apply for a
NIC handle, fill in the forms at
<emphasis>http://www.networksolutions.com/cgi-bin/itts/handle/</emphasis>.  This address
doesn't appear to be accessible via the home page, and it conveniently calls
itself a ``Contact Form'', hiding the reference to the word ``handle'' in the
fine print.  The fields should be self-explanatory, with the exception of the
<emphasis>Country</emphasis> field, where you should enter the two-letter abbreviation for
your country.  For example, for the USA, the code is <emphasis>us</emphasis>.  For Australia,
it's <emphasis>au</emphasis>.
<emphasis>http://www.ics.uci.edu/pub/websoft/wwwstat/country-codes.txt</emphasis> gives a list
of country codes.
</para>
</sect2>
<sect2>
<title>Registering a domain name</title>

<para><anchor id="CFBSD-domainreg"/>
<!-- XXX .PIC -L "images/domainreg.ps" -->
The only prerequisites for registering a domain name are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>microsoft.edu</primary></indexterm>
The name must be available, though there are some legal implications which
suggest that, though you might be able to register a domain such as
<emphasis>microsoft.edu</emphasis>, it might not be good for you if you do.  In fact,
<emphasis>microsoft.edu</emphasis> is a domain name belonging to the BISPL business school in
Hyderabad, India, presumably beyond US jurisdiction.
</para>
</listitem>
<listitem>

<para>You must be able to specify two name servers for it&mdash;see <xref linkend="CFBSD-chdns"/> for further
details about name servers.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>First, check that the name is available:
</para>
<programlisting>
$ <command>whois dunham.org</command>
No match for "DUNHAM.ORG".

The InterNIC Registration Services Host contains ONLY Internet Information
(Networks, ASN's, Domains, and POC's).
Please use the whois server at nic.ddn.mil for MILNET Information.
$
</programlisting>

<para>Next, start a web browser and look up the URL
<emphasis>http://www.networksolutions.com/purchase/</emphasis>.  There's no guarantee that this
URL may not change, but you should always be able to get it via
<emphasis>http://www.networksolutions.com/</emphasis>.  You must first select a domain name,
which for some inexplicable reason Network Solutions call a Web Address.  Don't
be put off by their apparent ignorance, nor the <emphasis>www.</emphasis> to the left of the
window: this really is a domain registration, not a Web Address (whatever that
may be), and the <emphasis>www</emphasis> appears to be intended to make it clear to you what
you're looking at.  If the domain is available, you will get another form
congratulating you on being so clever.  You don't need to enter anything here.
Just stop laughing and press the <emphasis>Continue</emphasis> button.  The next form gives
you the choice of reserving or registering the name.  When you select
<emphasis>Register</emphasis> you are finally presented with a form in which you should enter
useful data (and they finally admit it's for Domain Name Registration, not ``get
a Web Address'').  The first thing it asks you for is your name and Email
address.  You must enter these correctly, since you will receive mail from
InterNIC at this address.  Press <emphasis>Proceed</emphasis>, and you will receive another,
much longer form.  Most of the fields should be obvious, but some may not be.
If you have any trouble filling it out, there's a Help button at the top of the
form.
</para>

<para>When you have filled out the form, you will receive a mail message from
<emphasis>hostmaster@internic.net</emphasis> with a copy of the form.  You should check it
for correctness and then reply; after this, it will take a day or two for the
domain name to be activated.
</para>
</sect2>
<sect2>
<title>Getting IP addresses</title>

<para><indexterm><primary>IP</primary><secondary>addresses</secondary></indexterm>
<anchor id="CFBSD-netreg"/>
Once upon a time it was possible to get IP addresses from InterNIC, but this
practice is now restricted to large blocks of at least 16 class C networks, and
is intended for ISPs.  Instead, get the addresses from your ISP.  Routing
considerations make it impractical to move IP addresses from one place to
another, so if you move a long distance you should expect to change your IP
addresses.
</para>
</sect2>
</sect1>
<sect1>
<title>Choosing an Internet Service Provider</title>

<para><anchor id="CFBSD-select-isp"/>
<indexterm><primary>Internet</primary><secondary>Service Provider</secondary></indexterm>
<indexterm><primary>ISP</primary></indexterm>
In most cases, you will get your connection to the Internet from an <emphasis>Internet
Service Provider</emphasis>, or <emphasis>ISP</emphasis>.  As the name suggests, an ISP will supply the
means for you to connect your system or your local network to the Internet.
They will probably also supply other services: ISPs can't live on Internet
connections alone.
</para>

<para>In this chapter we'll look at the things you need to know about ISPs, and how to
get the best deal.  We'll concentrate on the most common setup, PPP over a
dialup line with a V.34bis modem (56 kbps), which will give you a peak data
transfer rate of about 7 kB/s.
</para>
</sect1>
<sect1>
<title>Who's that ISP?</title>

<para>As the Internet, and in particular the number of dial-in connections, explodes,
a large number of people have had the idea to become involved.  Many ISPs are
small companies run by very technical people who have seen a market opportunity
and have grabbed it.  Other ISPs are small companies run by not-so technical
people who have jumped on the bandwagon.  Still other ISPs are run by large
companies, in particular the cable TV companies and the telephone companies.
Which is for you?  How can you tell to which category an ISP belongs?  Do you
care?
</para>

<para>You <emphasis>should</emphasis> care, of course.  Let's consider what you want from an ISP,
and what he wants from his business.  You want a low-cost, high-reliability,
high speed connection to the Internet.  You may also want technical advice and
value-added services such as DNS (see <xref linkend="CFBSD-chdns"/>) and web pages.
</para>

<para>The main priority of a small ISP (or any other ISP, for that matter) is to get a
good night's sleep.  Next, he wants to ensure the minimum number of nuisance
customers.  After that, he wants to ensure that he doesn't go out of business.
Only <emphasis>then</emphasis> is he interested in the same things that you are.
</para>
<sect2>
<title>Questions to ask an ISP</title>

<para><indexterm><primary>ISP</primary><secondary>questions to ask</secondary></indexterm>
So how do you choose an ISP?  Don't forget the value of word-of-mouth&mdash;it's
the most common way to find an ISP.  If you know somebody very technical,
preferably a FreeBSD user, who is already connected, ask him&mdash;he'll certainly
be able to tell you about his ISP.  Otherwise, a lot depends on your level of
technical understanding.  It's easy to know more about the technical aspects of
the Internet than your ISP, but it doesn't often help getting good service.
Here are a few questions you should ask any prospective ISP:
</para>
<itemizedlist>
<listitem>

<para>What kind of connections do you provide?
</para>
<note>

<para>See the discussion on page <xref linkend="CFBSD-connect-types"/>.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>How do you charge?  By volume, by connect time, or flat rate?
</para>
<note>

<para>Once most ISPs charged by connect time: you pay whether you transfer data or
not.  This makes it unattractive to an ISP to provide good service, since that
means you can finish your session more quickly.  Nowadays, flat rates are
becoming more popular: you pay the same no matter how much you use the service.
The disadvantage of the flat rate is that there is no incentive to disconnect,
so you might find it difficult to establish connections.
</para>

<para>When comparing connect time and volume rates, expect an average data transfer
rate of about 600 bytes per second for most connections via a 56 kbps modem.
You'll get up to 7 kB per second with traffic-intensive operations like file
downloading, but normally, you'll be doing other things as well, and your data
rate over the session is more likely to be 600 bytes per second if you're
reasonably active, and significantly less if not.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Do you have a cheaper charge for data from your own network?
</para>
<note>

<para>Many ISPs maintain ftp archives and network news.  If they charge by volume,
some will give you free access to their own net.  Don't overestimate the value
of this free data.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>What speed are your modems?
</para>
<note>

<para>They should be the fastest, of course, which are currently 56 kbps.  Even if you
currently have a slower modem, you may want to upgrade.  If the ISP currently
doesn't have the fastest possible, ask him about his upgrade schedule.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>What uplink connections do you have?
</para>
<note>

<para>The purpose of this question is twofold: first, see if he understands the
question.  An uplink connection is the connection that the ISP has to the rest
of the Internet.  If it's inadequate, your connection to the Internet will also
be inadequate.  To judge whether the link is fast enough, you also need to know
how many people are connected at any one time.  See the question about dial-in
modems below.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>How many hops are there to the backbone?
</para>
<note>

<para>Some ISPs are a long way from the Internet backbone.  This can be a
disadvantage, but it doesn't have to be.  If you're connected to an ISP with T3
all the way to the backbone, you're better off than somebody connected directly
to the backbone by an ISDN Basic Rate connection.  All other things being equal,
though, the smaller the number of hops, the better.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>How many dial-in modems do you have?
</para>
<note>

<para>This question has two points to make as well.  On the one hand, the total
bandwidth of these modems should not exceed the uplink bandwidth by too
much&mdash;let's say it shouldn't be more than double the uplink bandwidth.  On the
other hand, you want to be able to get a free line when you dial in.  Nothing is
more frustrating than having to try dozens of times before you can get a
connection.  This phenomenon also causes people not to disconnect when they're
finished, especially if there is no hourly rate.  This makes the problem even
worse.  Of course, the problem depends on the number of subscribers, so ask the
next question too.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>How many subscribers do you have?  What is the average time they connect per
week?
</para>
<note>

<para>Apart from the obvious information, check whether they keep this kind of
statistics.  They're important for growth.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>What's your up-time record?  Do you keep availability statistics?  What are
they?
</para>
<note>

<para>ISPs are always nervous to publish their statistics.  They're never as good as
<emphasis>I</emphasis> would like.  But if they publish them, you can assume that that fact
alone makes them better than their competitors.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>What kind of hardware and software are you running?
</para>
<note>

<para>This question will sort out the good techie ISPs from the wannabees.  The real
answers aren't quite as important as the way they explain it.  Nevertheless,
consider that, since you're running FreeBSD, you'll be better off with an ISP
who also runs FreeBSD or BSD/OS.
<footnote>

<para>BSD/OS is a commercial operating system closely related to FreeBSD.  If you have
a few thousand dollars to spare, you may even find it better than FreeBSD.
Check out <emphasis>http://www.bsdi.com/</emphasis> for further details.
</para>
</footnote>
Only small ISPs can afford to use UNIX machines (including FreeBSD) as routers;
the larger ones will use dedicated routers.
</para>

<para>Next, in my personal opinion, come other UNIX systems (in decreasing order of
preference, Solaris 2.X, Linux and IRIX), and finally, a long way behind,
Windows NT.  If you're looking for technical support as well, you'll be a lot
better off with an ISP who uses FreeBSD or BSD/OS.  You'll also be something
special to them: most ISPs hate trying to solve problems for typical Windows
users.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>How many name servers do you run?
</para>
<note>

<para>The answer should be at least 2.  You'll probably be accessing them for your
non-local name server information, since that will be faster than sending
requests throughout the Internet.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Can you supply primary or secondary DNS for me?  How much does it cost?
</para>
<note>

<para>I strongly recommend using your own domain name for mail.  That way, if your ISP
folds, or you have some other reason for wanting to change, you don't need to
change your mail ID.  In order to do this, you need to have the information
available from a name server 24 hours per day.  DNS can generate a lot of
traffic, and unless you're connected to the network 100% of the time, mail to
you can get lost if a system can't find your DNS information.  Even if you are
connected 100% of the time, it's a good idea to have a backup DNS on the other
side of the link.  Remember, though, that it doesn't have to be your ISP.  Many
ISPs supply free secondaries to anybody who asks for them, and you might have
friends who will also do it for you.
</para>

<para>The ISP will also offer to perform the domain registration formalities for
you&mdash;for a fee.  You can just as easily do this yourself: see page
\&amp;<xref linkend="CFBSD-domainreg"/> for more details.  Check the fee, though: in some countries, the
ISP may get a discount for the domain registration fees.  If it's big enough,
registering via the ISP may possibly be cheaper than doing it yourself.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Can you route a class C network for me?  What does it cost?
</para>
<note>

<para>If you're connecting a local area network to the Internet, routing information
must be propagated to the net.  ISPs frequently consider this usage to be
``commercial'', and may jack up the prices considerably as a result.
</para>

<para>Alternatives to a full class C network are a group of static addresses (say, 8
or 16) out of the ISP's own assigned network addresses.  There's no particular
problem with taking this route.  If you change ISPs, you'll have to change
addresses, but as long as you have your own domain name, that shouldn't be a
problem.
</para>

<para><indexterm><primary>IP</primary><secondary>aliasing</secondary></indexterm>
<indexterm><primary>aliasing</primary><secondary>IP</secondary></indexterm>
Another possibility might be to use <emphasis>IP aliasing</emphasis>.  See page <xref linkend="CFBSD-ip-aliasing"/>
for more details.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Can you supply me with a static address?  How much does it cost?
</para>
<note>

<para>It's highly desirable to have static addresses.  See page
<xref linkend="CFBSD-static-ip-addresses"/> for more details.
</para>
</note>

<para></para>
</listitem>
<listitem>

<para>Will you call me if an incoming packet comes for my system?  How much does this
cost?
</para>
<note>

<para>This question only makes sense if you have static addresses.  Other people
(including yourself when you're travelling) can access your system if your ISP
is prepared to contact you.  In many areas, unfortunately, it's nearly
impossible to find an ISP who is prepared to call you.
</para>

<para>If the ISP <emphasis>is</emphasis> prepared to call you, check what the costs will be.
Obviously you'll be liable for any call costs, but some ISPs also add a service
charge.
</para>
</note>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Making the connection</title>

<para><anchor id="CFBSD-ISP-checklist"/>
After calling a few ISPs, you should be able to make a decision based on their
replies to these questions.  The next step is to gather the information needed
to connect.  Use table <xref linkend="CFBSD-info-from-ISP"/> to collect the information you need.
See <xref linkend="CFBSD-chppp"/> for information about authentication, user name and password.
<table frame='all'><title>Information for ISP setup</title>
box,center, tab(#) ;
| lw30 | lw45 | .
Information#Fill in specific value                                    \&amp;
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<row><entry> IP address of your end of the link
</entry></row>
<row><entry> _
</entry></row>
<row><entry> IP address of the other end of the link
</entry></row>
<row><entry> _
</entry></row>
<row><entry>  Kind of authentication (CHAP, PAP, login)
</entry></row>
<row><entry> _
</entry></row>
<row><entry>  User or system name
</entry></row>
<row><entry> _
</entry></row>
<row><entry>  Password or key
</entry></row>
<row><entry> _
</entry></row>
<row><entry> Primary Name Server IP name
</entry></row>
<row><entry> _
</entry></row>
<row><entry> Primary Name Server IP address
</entry></row>
<row><entry> _
</entry></row>
<row><entry> Secondary Name Server IP name
</entry></row>
<row><entry> _
</entry></row>
<row><entry> Secondary Name Server IP address
</entry></row>
<row><entry> _
</entry></row>
<row><entry> Pop (Mail) Server Name
</entry></row>
<row><entry> _
</entry></row>
<row><entry> News Server Name
</entry></row>
<row><entry>
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchmodems"><title>Serial communications and modems</title>

<para>UNIX has always had a high level of support for serial lines, but their purpose
has changed dramatically.  In the early 70's, the standard ``terminal'' was a
Teletype KSR35, a 10-character-per-second serial printer with keyboard.  Early
UNIX serial line support was geared towards supporting these devices, either
directly connected, or via a modem.
</para>

<para><indexterm><primary>glass</primary><secondary>tty</secondary></indexterm>
<indexterm><primary>tty</primary><secondary>glass</secondary></indexterm>
Even in the early 80s, when 4.2BSD introduced network support, things didn't
change much, since the network support used different hardware.  By this time,
the Teletypes had been replaced with <emphasis>glass tty</emphasis>s, in other words serial
terminals with a monitor instead of a printer.  The speeds had gone up from the
110 bps of the Teletype to 9600 bps, but the underlying principles hadn't
changed.
</para>

<para>It wasn't until the last 10 years that the glass ttys were replaced by display
boards directly connected to the system bus, or by other machines connected by
Ethernet.  The rôle of the serial port has changed completely: nowadays, they're
used mainly for mice and dialup Internet connections.
</para>

<para>This change in use has invalidated a few basic concepts.  Only a few years ago,
the standard ``high-speed'' modem was a V.22bis 2400 bps modem, even then too
slow for an Internet connection.  The standard data communication line was 56
kb/s, and it was invariably a leased line.  As a result, the Internet grew up
assuming that connections were leased lines, and therefore permanently
connected.  Even today, the Internet protocols do not deal well with dialup
access.
</para>

<para><indexterm><primary>UUCP</primary></indexterm>
On the other hand, <emphasis>UUCP</emphasis> did use dialup access.  As a result, provisions
for dialup access in UNIX tend to be derived from <emphasis>UUCP</emphasis>.  This doesn't make
for smooth integration.
</para>

<para>In this chapter, we'll look at the way FreeBSD handles serial communications, at
how modems work, and how the two fit together.
</para>
<sect1>
<title>Terminology</title>

<para><indexterm><primary>modem</primary><secondary>terminology</secondary></indexterm>
<indexterm><primary>terminology</primary><secondary>modem</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>Terminal Equipment</secondary></indexterm>
<indexterm><primary>DTE</primary></indexterm>
<indexterm><primary>Data</primary><secondary>Communication Equipment</secondary></indexterm>
<indexterm><primary>DCE</primary></indexterm>
<indexterm><primary>dataset</primary></indexterm>
Any serial connection has two ends, which may be computers, terminals, printers
or modems.  In modem terminology, the computers are <emphasis>Data Terminal
Equipment</emphasis> or <emphasis>DTE</emphasis> (this terminology arose at a time when the device
connected to a modem was usually a terminal), and modems are <emphasis>Data
Communication Equipment</emphasis> or <emphasis>DCE</emphasis>.  You'll also sometimes hear the name
<emphasis>dataset</emphasis> for a modem.
</para>
</sect1>
<sect1>
<title>Asynchronous and synchronous communication</title>

<para><anchor id="CFBSD-async"/>
<indexterm><primary>synchronous</primary><secondary>communication</secondary></indexterm>
<indexterm><primary>communication</primary><secondary>synchronous</secondary></indexterm>
<indexterm><primary>asynchronous</primary><secondary>communication</secondary></indexterm>
<indexterm><primary>communication</primary><secondary>asynchronous</secondary></indexterm>
There are two different ways to transmit serial data, called <emphasis>synchronous</emphasis>
and <emphasis>asynchronous</emphasis> communication.  They grew up in different worlds:
</para>
<sect2>
<title>Asynchronous communication</title>

<para><indexterm><primary>titty</primary></indexterm>
<indexterm><primary>teletypewriter</primary></indexterm>
<indexterm><primary>teletype</primary></indexterm>
<indexterm><primary>tty</primary></indexterm>
Asynchronous communication predates computers.  It was originally developed to
run <emphasis>teletypewriters</emphasis>, electrical typewriters which were run off a serial
data stream, the best-known of which were made by the Teletype corporation.
These machines were frequently used to provide a remote transcript of what
somebody was typing miles away, so they would typically print one character at a
time, stop, and wait for the next.  In the early days of UNIX, the standard
terminal was a Teletype model KSR35, commonly just called <emphasis>teletype</emphasis> or
<emphasis>tty</emphasis> (pronounced ``titty'').
</para>

<para>Here's a picture of a typical byte encoding:
</para>

<para>h=.36i
v=.8i
off=.2i
line dotted right 2*h; line down v
<!--  Start bit -->
<!--  All bits start and finish at bottom baseline -->
ST: line right h; line dotted up v; line invis down v
<!--  Parity -->
P:  line right h; line dotted up v; line invis down v
D7: line right h; line invis up v; line dotted down v
D6: line right h
D5: line invis right h; line up v from D5.w; line right h; line down v
D4: line right h
D3: line invis right h; line up v from D3.w; line right h; line down v
D2: line right h; line invis up v; line dotted down v
D1: line right h; line up v; line invis down v
D0: line invis right h; line dotted up v from D0.w; line right h; line invis down v
S1: line invis right h; line dotted up v from S1.w; line right h; line invis down v
S2: line invis right h; line dotted up v from S2.w; line right h; line dotted down v
    line invis up v; line dotted right 2*h

"Start" at ST.c+(0,-off)
"Parity" at P.c+(0,-off)
"<emphasis>1</emphasis>" at P.c+(0,v/2)
"D7" at D7.c+(0,-off)
"<emphasis>1</emphasis>" at D7.c+(0,v/2)
"D6" at D6.c+(0,-off)
"<emphasis>1</emphasis>" at D6.c+(0,v/2)
"D5" at D5.c+(0,-off)
"<emphasis>0</emphasis>" at D5.c+(0,v/2)
"D4" at D4.c+(0,-off)
"<emphasis>1</emphasis>" at D4.c+(0,v/2)
"D3" at D3.c+(0,-off)
"<emphasis>0</emphasis>" at D3.c+(0,v/2)
"D2" at D2.c+(0,-off)
"<emphasis>1</emphasis>" at D2.c+(0,v/2)
"D1" at D1.c+(0,-off)
"<emphasis>1</emphasis>" at D1.c+(0,v/2)
"D0" at D0.c+(0,-off)
"<emphasis>0</emphasis>" at D0.c+(0,v/2)
"Stop" at S1.c+(0,-off)
"Stop" at S2.c+(0,-off)
"Bit 1" at S1.c+(0,-off-.17i)
"Bit 2" at S2.c+(0,-off-.17i)
</para>

<para><figure><title>Asynchronous byte encoding</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
This figure shows an encoding for the letter <emphasis>j</emphasis>, in binary
<emphasis>01101011</emphasis>.  We'll see a number of things about it:
</para>
<itemizedlist>
<listitem>

<para>Before the character starts, the line is idle, which shows as a <emphasis>high</emphasis>
level: this indicates to the teletype that the line is still connected.
</para>
</listitem>
<listitem>

<para><indexterm><primary>start</primary><secondary>bit</secondary></indexterm>
First comes a <emphasis>start bit</emphasis>.  In the olden days, this bit started the motor of
the teletype mechanism.  Now it signals that data is coming.
</para>
</listitem>
<listitem>

<para><indexterm><primary>parity</primary><secondary>bit</secondary></indexterm>
<indexterm><primary>even</primary><secondary>parity</secondary></indexterm>
<indexterm><primary>parity</primary><secondary>even</secondary></indexterm>
Next comes a <emphasis>parity bit</emphasis>.  In order to detect any transmission errors, this
character is encoded with <emphasis>even parity</emphasis>.  The parity bit is set to <emphasis>1</emphasis>
if the character contains an odd number of bits, and to <emphasis>0</emphasis> otherwise,
which ensures that the character, including the parity bit, always has an even
number of bits.
</para>
</listitem>
<listitem>

<para>Next come the bits of the character, last bit first.  We represent <emphasis>1</emphasis>
with a low level and <emphasis>0</emphasis> with a high level.
</para>
</listitem>
<listitem>

<para><indexterm><primary>stop</primary><secondary>bit</secondary></indexterm>
Finally come one or two <emphasis>stop bits</emphasis>.  The stop bits were originally intended
to give the teletype time to stop the motor, but they are now largely
superfluous.  You needed two stop bits for a teletype, but nowadays you should
always use one.
</para>
</listitem>
<listitem>

<para><indexterm><primary>stty</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>stty</secondary></indexterm>
This example also shows something else of importance: there are a number of ways
to encode the character.  How many bits?  How many stop bits?  Odd parity?  Even
parity?  No parity?  Mark parity (always a <emphasis>1</emphasis> bit)?  Space parity (always
a <emphasis>0</emphasis> bit)?  How much time from one bit to the next (what bit rate)?
They're all set with the <emphasis>stty</emphasis> program (see man page <emphasis>stty(1)</emphasis>),
but if you set them wrongly, you'll run into trouble.
</para>
</listitem>
<listitem>

<para><indexterm><primary>start-stop</primary><secondary>communication</secondary></indexterm>
<indexterm><primary>communication</primary><secondary>start-stop</secondary></indexterm>
The encoding isn't very efficient.  For every character you send, you also send
a start bit and a stop bit.  Most communications no longer use the parity bit,
but this still means that you have a 25% overhead on communication: for every 8
bits, you send 10, and you could send up to 12, as in this example.  We'll see
that synchronous communication doesn't have this problem.  Users of synchronous
communication protocols often refer to asynchronous communication as
<emphasis>start-stop</emphasis> communication.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Synchronous communication</title>

<para><indexterm><primary>synchronous</primary><secondary>communication</secondary></indexterm>
<indexterm><primary>communication</primary><secondary>synchronous</secondary></indexterm>
<indexterm><primary>SYN</primary><secondary>character</secondary></indexterm>
<indexterm><primary>character</primary><secondary>SYN</secondary></indexterm>
By contrast with asynchronous communication, synchronous communication comes
from the mainframe world, and it assumes that data does not come one byte at a
time.  Instead, it transmits data in <emphasis>blocks</emphasis>.  Each block is preceded by
one or two <emphasis>SYN</emphasis> characters which tell the receiver that data is coming,
and which enable it to determine the correct orientation of the bits in the
data.
</para>

<para>All modern modems use synchronous communication on the phone line, since it is
more efficient, and it's the basis of protocols such as SNA and X.25, but you
will almost never see any other use of it in UNIX systems.
</para>
</sect2>
</sect1>
<sect1>
<title>Serial ports</title>

<para><indexterm><primary>serial</primary><secondary>port</secondary></indexterm>
<indexterm><primary>port</primary><secondary>serial</secondary></indexterm>
<anchor id="CFBSD-serial-hardware"/>
Nowadays, all PCs come equipped with two serial ports, which are called
<emphasis>COM1:</emphasis> and <emphasis>COM2:</emphasis> in the DOS world.  UNIX names are different, and
FreeBSD calls these same devices <emphasis>sio0</emphasis> and <emphasis>sio1</emphasis>.  It's possible
to connect up to four direct serial ports on a standard PC, but due to the
design of the board, each one requires a separate IRQ line.  If you put two
serial ports on the same interrupt line, neither of them will work.
</para>

<para>The <emphasis>GENERIC</emphasis> kernel contains the following entries:
</para>
<programlisting>
device		sio0	at isa? port "IO_COM1" tty irq 4 vector siointr
device		sio1	at isa? port "IO_COM2" tty irq 3 vector siointr
device		sio2	at isa? disable port "IO_COM3" tty irq 5 vector siointr
device		sio3	at isa? disable port "IO_COM4" tty irq 9 vector siointr
</programlisting>

<para>The first two devices, <emphasis>sio0</emphasis> and <emphasis>sio1</emphasis>, are assumed to be at their
default IRQs, 4 and 3.  By default, however, PC manufacturers put <emphasis>COM3:</emphasis>
and <emphasis>COM4:</emphasis> also at IRQs 4 and 3.  How can this work?  It can't, if you
also have <emphasis>COM1:</emphasis> and <emphasis>COM2:</emphasis> enabled at those IRQs.  However, DOS
tends to do only one thing at a time, so you can use different ports at
different times on the same IRQ, as long as the interrupts aren't enabled on
more than one of the ports at a time.  This restriction is unacceptable for
UNIX, so we have to put them somewhere else.  The only unused interrupts
available to 8-bit boards are 2 and 5.  As we've seen in <xref linkend="CFBSD-chconcepts"/>, page
<xref linkend="CFBSD-IRQ"/>, you must specify IRQ 2 as IRQ 9.
</para>

<para>There's a very good chance that one of these interrupts will already be
occupied.  What can you do?  If one of the boards has a 16-bit or better
interface, you can check if one of the interrupts 10 to 15 is available.  All
EISA and PCI boards fit into this category, and so do ISA boards with two
connectors to the motherboard.  Unfortunately, a lot of ISA serial cards only
have an 8-bit interface.  The only alternative is an intelligent serial board
which only occupies a single interrupt.  In this case, you will probably have to
build a custom kernel.  See the man page <emphasis>sio(4)</emphasis>.
</para>
<sect2>
<title>Connecting to the port</title>

<para><indexterm><primary>Receive</primary><secondary>Data line</secondary></indexterm>
<indexterm><primary>line</primary><secondary>Receive Data</secondary></indexterm>
<indexterm><primary>RxD</primary></indexterm>
<indexterm><primary>Transmit</primary><secondary>Data line</secondary></indexterm>
<indexterm><primary>line</primary><secondary>Transmit Data</secondary></indexterm>
<indexterm><primary>TxD</primary></indexterm>
<indexterm><primary>Signal</primary><secondary>Ground line</secondary></indexterm>
<indexterm><primary>line</primary><secondary>Signal Ground</secondary></indexterm>
<indexterm><primary>SG</primary></indexterm>
Theoretically, a serial line can consist of only three wires: a <emphasis>Receive
Data</emphasis> line, often abbreviated to <emphasis>RxD</emphasis>, a <emphasis>Transmit Data</emphasis> line
(<emphasis>TxD</emphasis>), and a <emphasis>Signal Ground</emphasis> line (<emphasis>SG</emphasis>).  In fact, it is
possible to get a link to work like this, but there are a number of problems:
</para>
<itemizedlist>
<listitem>

<para>How do we know when the other end is able to accept data?  It may be busy
processing data it has already received.
</para>
</listitem>
<listitem>

<para>How do we know when it's even switched on?
</para>
</listitem>
<listitem>

<para>In the case of a modem, how do we know when it is connected to the modem at the
other end?
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>RS-232</primary></indexterm>
<indexterm><primary>EIA-232</primary></indexterm>
<indexterm><primary>CCITT</primary><secondary>V.24</secondary></indexterm>
We solve these questions, and more, by the use of additional lines.  The most
common standard is <emphasis>RS-232</emphasis>, also known as <emphasis>EIA-232</emphasis>, a standard for DCE
to DTE connection.  In Europe, it is sometimes confused with the <emphasis>CCITT
V.24</emphasis> standard, though V.24 does not in fact correspond exactly to RS-232.
Most external modems display some of these signals on LED, but modem
manufacturers love to create alternative abbreviations for signal names.  Here
are the signals that RS-232 defines, with some of the more common abbreviations
that you may see on external modems.
<!-- .DF -->
<table frame='all'><title>RS-232 signals and modem LEDs</title>
box,tab(#) ;
lfCWp9 | lf(R)  | lf(CW)w3 | lf(R)w57  .
\s10RS-232##modem
\s10name#pin#LED#purpose
=

<tgroup cols='4' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> PG</entry><entry>1</entry><entry></entry><entry> Protective ground.  Used for electrical grounding only.
</entry></row>
<indexterm><primary>TxD</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> TxD</entry><entry>2</entry><entry> TD D1 </entry><entry> Transmitted data: data coming from the DTE to the modem.
</entry></row>
<indexterm><primary>RxD</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> RxD</entry><entry>3</entry><entry> RD D2 </entry><entry> Received data: data coming from the modem to the DTE.
</entry></row>
<indexterm><primary>RTS</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>request</primary><secondary>to send</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> RTS</entry><entry>4</entry><entry></entry><entry> Request to send.  Indicates that the device has data to output.
</entry></row>
<indexterm><primary>CTS</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>clear</primary><secondary>to send</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> CTS</entry><entry>5</entry><entry></entry><entry> Clear to send.  Indicates that the device can receive input.
</entry></row>
<anchor id="CFBSD-DSR"/>
<row><entry>
</entry></row>
<indexterm><primary>DSR</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>data</primary><secondary>set ready</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> DSR</entry><entry>6</entry><entry> MR PW ON </entry><entry> Data set ready.  Indicates that the modem is powered on and has passed self-test.  On some modems, <emphasis>PW</emphasis> indicates that power is on, and <emphasis>MR</emphasis> indicates that it is operative.
</entry></row>
<indexterm><primary>SG</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> SG</entry><entry>7</entry><entry></entry><entry> Signal ground.  Return for the other signals.
</entry></row>
<indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>data</primary><secondary>carrier detect</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> DCD</entry><entry>8</entry><entry> CD M5 </entry><entry> Carrier detect.  Indicates that the modem has connection with another modem.
</entry></row>
<indexterm><primary>data</primary><secondary>terminal ready</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>DTR</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<anchor id="CFBSD-DTR"/>
<row><entry>
</entry></row>
<row><entry> DTR</entry><entry>20</entry><entry> DTR S1 </entry><entry> Data terminal ready.  Indicates that the terminal or computer is ready to talk to the modem.
</entry></row>
<indexterm><primary>RI</primary><secondary>RS-232 signal</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<row><entry>
</entry></row>
<row><entry> RI</entry><entry>22</entry><entry>AA</entry><entry> Ring indicator.  Raised by a modem to indicate that an incoming call is ringing.  The <emphasis>AA</emphasis> indicator on a modem will usually flash when the incoming call is ringing.
</entry></row>
<row><entry> </entry><entry></entry><entry>AA</entry><entry> ``Auto Answer''.  Indicates that the modem will answer an incoming call.
</entry></row>
<row><entry> </entry><entry></entry><entry>HS</entry><entry> ``High Speed''.  Indicates that the modem is running at a higher speed than its minimum.  Individual modems interpret this differently, but you can assume that something is wrong if your modem has this indicator and it's off during transmission.
</entry></row>
<row><entry> </entry><entry></entry><entry>MNP</entry><entry> Indicates that error correction is active.
</entry></row>
<row><entry> </entry><entry></entry><entry>OH</entry><entry> ``Off hook''.  Indicates that the modem has some connection with the phone line.
</entry></row>
<row><entry> </entry><entry></entry><entry>PW</entry><entry> Indicates that modem power is on.  May or may not imply <emphasis>DSR</emphasis>.
</entry></row>
</tbody></tgroup></table>
<!-- .DE -->
<indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
The line <emphasis>DCD</emphasis> tells the DTE that the modem has established a connection.
We'll look at how to use this information on page <xref linkend="CFBSD-got-DCD"/>.
</para>

<para><indexterm><primary>clocks</primary><secondary>RS-232</secondary></indexterm>
In addition to these signals, synchronous modems supply <emphasis>clocks</emphasis> on pins
17 and 19.  For more details about RS-232, see <emphasis>RS-232 Made easy</emphasis> by Martin
Seyer.
<indexterm><primary>Seyer</primary><secondary>Marty</secondary></indexterm>
</para>
</sect2>
<sect2>
<title>When can I send data?</title>

<para><anchor id="CFBSD-handshaking"/>
<indexterm><primary>hardware</primary><secondary>handshaking</secondary></indexterm>
<indexterm><primary>handshaking</primary><secondary>hardware</secondary></indexterm>
<indexterm><primary>software</primary><secondary>handshaking</secondary></indexterm>
<indexterm><primary>handshaking</primary><secondary>software</secondary></indexterm>
<indexterm><primary>flow</primary><secondary>control</secondary></indexterm>
There are two ways to determine if the other end is prepared to accept data:
<emphasis>hardware handshaking</emphasis> and <emphasis>software handshaking</emphasis>.  Both are also
referred to as <emphasis>flow control</emphasis>.  In each case, the handshaking is
symmetrical.  We'll look at it from the point of view of the DTE, since this is
the more common viewpoint.
</para>

<para><indexterm><primary>CTS</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>Clear</primary><secondary>to Send</secondary></indexterm>
<indexterm><primary>Request</primary><secondary>to send</secondary></indexterm>
<indexterm><primary>half-duplex</primary><secondary>transmission</secondary></indexterm>
<indexterm><primary>transmission</primary><secondary>half-duplex</secondary></indexterm>
<indexterm><primary>RTS</primary><secondary>RS-232 signal</secondary></indexterm>
In hardware handshaking, the DCE raises <emphasis>CTS</emphasis> (<emphasis>Clear to Send</emphasis>) when
it's ready to accept input.  The DTE only transmits data when CTS is asserted
from the other end.  You'll often see that the DTE asserts RTS (<emphasis>Request
to send</emphasis>) when it wants to send data.  This is a throwback to the days of
<emphasis>half-duplex</emphasis> modems, which could only transmit in one direction at a
time: <emphasis>RTS</emphasis> was needed to switch the modem into send mode.
</para>

<para><indexterm><primary>software</primary><secondary>handshaking</secondary></indexterm>
<indexterm><primary>handshaking</primary><secondary>software</secondary></indexterm>
<indexterm><primary>X-on/X-off</primary></indexterm>
<indexterm><primary>X-off</primary></indexterm>
<indexterm><primary>X-on</primary></indexterm>
<emphasis>Software handshaking</emphasis> is also called <emphasis>X-on/X-off</emphasis>.  The DCE sends a
character (<emphasis>X-off</emphasis>, which corresponds to <keycap>CTRL-S</keycap>) when the buffer is
full, and another (<emphasis>X-on</emphasis>, corresponding to <keycap>CTRL-Q</keycap>) when there is
space in the buffer again.  You can also use this method on a terminal to
temporarily stop the display of a lot of data, and then restart it.  It's no
longer a good choice for modems.
</para>

<para>In order for hardware handshake to work, your modem must be configured
correctly, and you must have the correct cables.  If it isn't, the symptoms will
be very slow response when transferring large quantities of data: at a higher
level, TCP can recover from these overruns, but it takes at least a second to do
so every time.  We'll see how to check that your modem has the correct kind of
flow control on page <xref linkend="CFBSD-modem-config"/>.
</para>
</sect2>
</sect1>
<sect1>
<title>Modems</title>

<para><indexterm><primary>modem</primary></indexterm>
A <emphasis>modem</emphasis> is a device which transfers digital data into a form suitable
for transmission over a transmission line, which is usually a telephone line.
Telephone lines are limited to a frequency of about 3.6 kHz, and this limited
the speed of older modems to about 1200 bits per second.  Modern modems use many
sophisticated techniques to increase the speed way beyond this.  The current
leading edge modems can transmit at up to 56 kilobits per second.
</para>

<para>Let's consider the modem connection in the reference network on page
<xref linkend="CFBSD-reference-net-page"/>, which is repeated below.  As we can see, there are three
connections:
</para>

<para>	boxht = .4i
	boxwid = .6i

	move right 1.5i
GW:	box
	line from GW.n to GW.n+(0,.3)
	"\s14\(bu\s0" at GW.n+(0,-.03)
	"\s14\(bu\s0" at GW.s+(0,-.03)
	"\s8<emphasis>gw</emphasis>\s0" at GW above
	"Router" at GW below

M1:	box ht .2i at GW.s+(0,-.3)
	"\s14\(bu\s0" at M1.n+(0,-.03)
	"\s14\(bu\s0" at M1.s+(0,-.03)
	"modem" at M1

M2:	box ht .2i at GW.s+(0,-.8)
	"\s14\(bu\s0" at M2.n+(0,-.03)
	"\s14\(bu\s0" at M2.s+(0,-.03)
	"modem" at M2

ISP:	box at GW.s+(0,-1.3)
	"\s14\(bu\s0" at ISP.n+(0,-.03)
	"\s14\(bu\s0" at ISP.s+(0,-.03)
	"ISP" at ISP above
	"router" at ISP below

L1:	line from GW.s to M1.n
	"Local modem connection, 57,600 bps" ljust at L1.c+(.4,0)

PPP:	line from M1.s to M2.n
	"PPP link, 56,000 bps, 2400 baud" ljust at PPP.c+(.4,0)

L2:	line from M2.s to ISP.n
	"ISP modem connection, 115,200 bps" ljust at L2.c+(.4,0)

	line from ISP.s to ISP.s+(0,-.3)

	"DTE" rjust at GW.w+(-.5,0)
	"DCE" rjust at M1.w+(-.5,0)
	"DCE" rjust at M2.w+(-.5,0)
	"DTE" rjust at ISP.w+(-.5,0)
</para>

<para><figure><title>Network modem connection</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<itemizedlist>
<listitem>

<para>The connection from the router <emphasis>gw</emphasis> to the local modem, connected at
57,600 bits per second.
</para>
</listitem>
<listitem>

<para>The connection between the modems, at 56,000 bits per second.
</para>
</listitem>
<listitem>

<para>The connection from the ISP's modem to his router, at 115,200 bits per second.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>baud</primary><secondary>definition</secondary></indexterm>
<indexterm><primary>definition</primary><secondary>baud</secondary></indexterm>
You'll also note another value specified here: the connection between the modems
is 2,400 baud.  Isn't a <emphasis>baud</emphasis> the same thing as a bit per second?  No,
not always.  The term <emphasis>baud</emphasis> is a representation of the frequency of data
on a serial line.  On the connections between the systems and the modem, which
handle raw digital data, it corresponds to the bit rate.  On the modem line, it
doesn't.  Here, it indicates that 2,400 units of data are sent per second.
</para>

<para><indexterm><primary>bit</primary><secondary>rate</secondary></indexterm>
<indexterm><primary>definition</primary><secondary>bit rate</secondary></indexterm>
Unfortunately, many people use the term <emphasis>baud</emphasis> where <emphasis>bit rate</emphasis>
should be used.  This didn't make any difference in the old days with simple
modems where the bit rate and baud rate were the same, but nowadays it's
confusing.
</para>
<sect2>
<title>Modem speeds</title>

<para><indexterm><primary>modem</primary><secondary>speeds</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>modem</secondary></indexterm>
<indexterm><primary>modem</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>data</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>modem</primary><secondary>data compression</secondary></indexterm>
Two factors determine the data transmission speed of a modem: the
<emphasis>protocol</emphasis> and the use of <emphasis>data compression</emphasis>.  Table
<xref linkend="CFBSD-modemprotocols"/> gives an overview of modem protocols and their speeds.
<table frame='all'><title>Modem protocols</title>
box,center,tab(#) ;
| l | r | .
Protocol#Speed (bps)
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> Bell 203</entry><entry>300
</entry></row>
<row><entry> V.21</entry><entry>300
</entry></row>
<row><entry> Bell 212</entry><entry>1200
</entry></row>
<row><entry> V.22</entry><entry>1200
</entry></row>
<row><entry> V.22bis</entry><entry>2400
</entry></row>
<row><entry> V.32</entry><entry>9600
</entry></row>
<row><entry> V.32bis</entry><entry>14400
</entry></row>
<row><entry> V.34</entry><entry>28800
</entry></row>
<row><entry> V.34bis</entry><entry>33600
</entry></row>
<row><entry> V.90</entry><entry>56000
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
Currently, the most popular modem protocol is V.90.  V.90 pushes modem
technology to the limit, and it only works when the other end of the link is a
digital (ISDN) connection.  You can't get a 56 kb/s connection with any kind of
analogue modem at the other end.  As a result, in many areas they can't be used.
In addition, the actual speed of the connection depends greatly on the telephone
line quality, so the difference between a V.90 and a V.34bis modem may not be as
much as it appears.
</para>
</sect2>
<sect2>
<title>Data compression</title>

<para><indexterm><primary>data</primary><secondary>compression</secondary></indexterm>
<anchor id="CFBSD-modem-data-compression"/>
<indexterm><primary>V.42bis</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>V.42bis</secondary></indexterm>
<indexterm><primary>MNP-5</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>MNP-5</secondary></indexterm>
<indexterm><primary>V.42</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>V.42</secondary></indexterm>
<indexterm><primary>MNP2-4</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>MNP2-4</secondary></indexterm>
In addition, you usually have a choice of data compression: <emphasis>V.42bis</emphasis> or
<emphasis>MNP-5</emphasis>.  The choice depends on what the modem at the other end of the line
does.  You can set most modems negotiate either protocol.  These protocols
include related error correction standards, called <emphasis>V.42</emphasis> or
<emphasis>MNP2-4</emphasis> respectively.  If you believe the sales claims, these compression
protocols will give you up to 100% increase in data throughput.  Consider this
the upper limit; a lot of data is binary, and when ftp'ing a typical gzipped tar
archive, you will probably get almost no speed improvement.
</para>

<para><indexterm><primary>modem</primary><secondary>latency</secondary></indexterm>
<indexterm><primary>latency</primary><secondary>modem</secondary></indexterm>
Data compression has one negative side: it increases the data rate, but it also
increases <emphasis>latency</emphasis>, the time it takes for data to get from the local DTE to
the remote DTE.  The data doesn't take as long on the line, but it spends more
time in the modems being compressed and uncompressed.  If you're running a
protocol like PPP which supplies optional compression in the software, you may
find it advantageous to turn off compression.  We'll look at that again in
<xref linkend="CFBSD-chppp"/>.
</para>
</sect2>
<sect2>
<title>The link speed</title>

<para>The standard PC serial hardware can run at speeds which are a fraction of
115,200 bps (in other words, 115200 divided by a small integer).  This gives the
following combinations:
<table frame='all'><title>Serial line speeds</title>
box,center,tab(#) ;
| r | r | .
Divisor#Speed (bps)
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> 1</entry><entry>115200
</entry></row>
<row><entry> 2</entry><entry>57600
</entry></row>
<row><entry> 3</entry><entry>38400
</entry></row>
<row><entry> 4</entry><entry>28800
</entry></row>
<row><entry> 5</entry><entry>23040
</entry></row>
<row><entry> 6</entry><entry>19200
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
You'll notice that it can't run at 33600 or 56000 bps.  Also, looking at the
example above, you'll note that all three links run at different speeds.  How
can that work?  Only a few years ago, it wouldn't, but modern modems can
<emphasis>buffer</emphasis> data.  For example, the ISP can send data to the modem far faster
than the modem can send it to the other modem.  It stores the data in internal
memory until it can be transmitted.  This can also happen at the other end.  If
you misconfigure your line so that the local link runs at 9600 bps, things will
still work, but of course the total speed is the speed of the slowest link, in
this case 9600 bps.
</para>

<para>This flexibility brings a problem with it: the modem can't know in advance how
fast the connection to the computer is.  It needs a way to find out.  The modem
solves the question of local line speed by a trick: all commands start with
<emphasis>AT</emphasis> or <emphasis>at</emphasis> (you're not allowed to mix letters, like <emphasis>aT</emphasis> or
<emphasis>At</emphasis>).  It can recognize these characters even if they arrive at the wrong
speed, and thus it can establish the speed of the connection.
</para>
</sect2>
<sect2>
<title>Dialling out</title>

<para><indexterm><primary>Auto-Call</primary><secondary>Unit</secondary></indexterm>
<indexterm><primary>ACU</primary></indexterm>
Nowadays, all modems are capable of dialling.  That wasn't always the case, and
in some old documentation you may find references to an <emphasis>Auto-Call Unit</emphasis>
or <emphasis>ACU</emphasis>, which is simply the dialler part of a modem connected via a
separate port.  Typically, one ACU could serve multiple modems.
</para>

<para><indexterm><primary>Hayes</primary><secondary>command set</secondary></indexterm>
<indexterm><primary>AT</primary><secondary>command set</secondary></indexterm>
<indexterm><primary>V.25</primary><secondary>protocol</secondary></indexterm>
<indexterm><primary>protocol</primary><secondary>V.25</secondary></indexterm>
Nearly every modern modem uses a command set designed by Hayes Corporation,
which is thus called the <emphasis>Hayes Command Set</emphasis>.  We'll look at it in the
following section.  It is also sometimes called the <emphasis>AT command set</emphasis>, since
nearly all the commands start with the sequence <emphasis>AT</emphasis>.  The CCITT also
created an autodial recommendation, <emphasis>V.25</emphasis>, which was occasionally
implemented.  Avoid it if you can.
</para>
</sect2>
</sect1>
<sect1>
<title>Modem commands</title>

<para><indexterm><primary>modem</primary><secondary>commands</secondary></indexterm>
<indexterm><primary>commands</primary><secondary>modem</secondary></indexterm>
<anchor id="CFBSD-modem-config"/>
<indexterm><primary>S</primary><secondary>registers</secondary></indexterm>
Modern modems store their state in a number of registers, called <emphasis>S
registers</emphasis>.  The register use varies somewhat from manufacturer to
manufacturer, but most modems have a number in common.  They each store a
one-byte value, ranging between 0 and 255.  Here's a list of the more important
ones for a relatively recent Rockwell V.34 chip set.  The name of the chip set
is not the same as the name of the modem.  You'll note that one of the commands
enables you to find out the chip set version, as we'll see in the example which
follows.
<table frame='all'><title>Selected S registers</title>
box,center, tab(#) ;
| lfCWp9 | lw65 | .
Register number#Purpose
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<anchor id="CFBSD-auto-answer"/>
<row><entry> S0</entry><entry> Number of rings until auto-answer.  0 disables auto-answer.  Set to 0 for no automatic answer, or 1 for auto-answer.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>escape</primary><secondary>character</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>modem</primary><secondary>escape character</secondary></indexterm>
<row><entry> S2</entry><entry> The <emphasis>escape character</emphasis>, which lets you return from on-line mode to command mode.  Normally, this character is a <emphasis>+</emphasis>.  To return to command mode, wait a second after any previous input, enter <emphasis>+++</emphasis>, and wait a second, after which the modem should reply with <emphasis>OK</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>blind</primary><secondary>dialling</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>modem</primary><secondary>blind dialling</secondary></indexterm>
<row><entry> S6</entry><entry> The time, in seconds, to wait before <emphasis>blind dialling</emphasis>.  If you have set your modem to not wait for a dial tone (maybe because it doesn't understand the dial tone), it will wait this long and then try to dial anyway.
</entry></row>
<row><entry> S7</entry><entry> The number of seconds to wait after dialling before <emphasis>DCD</emphasis> must be asserted (before a connection is established).  If this is set too short, you will not be able to establish a connection.  If it's too long, you will waste time when there is no answer or the line is busy.
</entry></row>
<row><entry> S11</entry><entry> The duration of DTMF (dialling) tones.  If these are set incorrectly, the telephone exchange may not understand the number you dial.
</entry></row>
</tbody></tgroup></table>
The <emphasis>AT</emphasis> command set tells the modem to do something specific.  Here are
some of the more important ones:
<table frame='all'><title>Selected AT commands</title>
box,center, tab(#) ;
| lfCWp9 | lw67 | .
Command#Meaning
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> A/</entry><entry>Redial the last number
</entry></row>
<row><entry> ATA</entry><entry> Answer an incoming call manually.  This is an alternative to auto-answer by setting <emphasis>S0</emphasis>.
</entry></row>
<row><entry> ATD<emphasis>number</emphasis></entry><entry> Dial <emphasis>number</emphasis>.  This command has a large number of options, but if your modem is set up correctly, you probably won't need any of them.
</entry></row>
<row><entry> ATE<emphasis>number</emphasis></entry><entry> Enable command echo if <emphasis>number</emphasis> is 1, disable it if <emphasis>number</emphasis> is 0.  The setting of this command can be important for some chat scripts, which may not respond correctly otherwise.
</entry></row>
<row><entry> ATH0</entry><entry> Disconnect the line
</entry></row>
<row><entry> ATI<emphasis>number</emphasis></entry><entry> Display modem identification.  The values of <emphasis>number</emphasis> vary from one modem to the next.  See the examples below.
</entry></row>
<row><entry> ATL<emphasis>number</emphasis></entry><entry> Set the speaker volume.  <emphasis>number</emphasis> ranges from 0 to 3.  0 means ``speaker off'', 3 is the loudest.
</entry></row>
<row><entry> ATM<emphasis>number</emphasis></entry><entry> Determine when the speaker is on.  0 means ``always off'', 1 means ``speaker on until connect'', 2 means ``speaker always on'', and 3 means ``speaker off during dialling and receiving''.
</entry></row>
<row><entry> ATO0</entry><entry> Go back on-line from command mode.  You don't need this command when dialling: the modem automatically goes on-line when the connection is established.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>steam</primary><secondary>dialling</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>modem</primary><secondary>steam dialling</secondary></indexterm>
<row><entry> ATP</entry><entry> Select pulse dial.  If your exchange doesn't understand DTMF (tone) dialling, you should set this mode.  Never use it if your exchange understands DTMF, since pulse dialling (also known as <emphasis>steam dialling</emphasis>) is <emphasis>much</emphasis> slower.
</entry></row>
<row><entry> ATQ<emphasis>number</emphasis></entry><entry> If <emphasis>number</emphasis> is 0, suppress result codes (like <emphasis>OK</emphasis> after every command).  If <emphasis>number</emphasis> is 1, enable them.  This value can be of importance for chat scripts.
</entry></row>
<row><entry> ATS<emphasis>r</emphasis>=<emphasis>n</emphasis></entry><entry> Set the value of S register <emphasis>r</emphasis> to <emphasis>n</emphasis>.
</entry></row>
<row><entry> ATS<emphasis>number</emphasis>?</entry><entry> Display the contents of an <emphasis>S</emphasis> register.  See the example below.
</entry></row>
<row><entry> ATT</entry><entry> Set tone (DTMF) dialling.
</entry></row>
<row><entry> ATV<emphasis>number</emphasis></entry><entry> If <emphasis>number</emphasis> is 0, return result codes in numeric form.  If it's 1, return text.  Don't rely on either form to be consistent from one modem to the next.
</entry></row>
<row><entry> ATX<emphasis>number</emphasis></entry><entry> Determine the form of the result codes.  This depends a lot on the manufacturer, but it's important for chat scripts.  If you run into trouble, with chat scripts, check your modem documentation.
</entry></row>
<row><entry> ATZ</entry><entry> Reset modem configuration to default values.
</entry></row>
<row><entry> AT&amp;K<emphasis>number</emphasis></entry><entry> Select flow control method.  Normally, 3 enables RTS/CTS flow control, which is what you want.
</entry></row>
<row><entry> AT&amp;R<emphasis>number</emphasis></entry><entry> If <emphasis>number</emphasis> is 0, CTS is only asserted if the DTE asserts RTS, even if the modem is able to receive data.  If it's set to 1, it behaves normally.  Make sure this value is set to 1.
</entry></row>
<row><entry> AT&amp;T<emphasis>number</emphasis></entry><entry> Perform modem-specific test <emphasis>number</emphasis>.  This command is the origin of the statement: ``UNIX is a trademark of AT&amp;T in the USA and other countries.  AT&amp;T is a modem test command''.
</entry></row>
<row><entry> AT&amp;V</entry><entry> View the current configuration.  See the example below.
</entry></row>
<row><entry> AT&amp;W<emphasis>number</emphasis></entry><entry> Store the current configuration as <emphasis>profile</emphasis> <emphasis>number</emphasis>.  Most external modems can store two <emphasis>profiles</emphasis>, or configurations.  If <emphasis>number</emphasis> is not specified, write the profile specified in a previous <emphasis>AT&amp;Y</emphasis> command.  See the example below.    AT&amp;Y<emphasis>number</emphasis></entry><entry> Decide which profile (0 or 1) will be loaded when the modem is reset, and which will be written by the command <emphasis>AT&amp;W</emphasis>
</entry></row>
</tbody></tgroup></table>
</para>
<sect2>
<title>Dialling out manually</title>

<para><anchor id="CFBSD-got-DCD"/>
In this section, we'll look at what needs to be done to establish a dial-out
connection.  You don't normally do this yourself: some software will do it for
you automatically.  It's useful to know what goes on, though, since it can be of
immense help in solving connection problems.
</para>

<para>There are two distinct things that you want to do with the modem: first, you
send commands to the modem to set up the link.  Once the link is established,
you don't want to talk to the modem any more, you want to talk to the system at
the other end of the link.
</para>

<para>In the old days, the system used a separate ACU to establish the connection, and
the solution was simple: the system issued the dialling commands to the ACU and
opened the modem in such a manner that the open did not complete until a
connection had been established.  Nowadays, the modem handles both dialing and
the establishment of connection.  But to do so, the system has to open the modem
before communication has been established.
</para>

<para><indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<indexterm><primary>stty</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>stty</secondary></indexterm>
The terminal parameter <emphasis>clocal</emphasis> enables communication with a device which
does is not asserting <emphasis>DCD</emphasis> (such as a modem which hasn't established a
connection yet).  When it starts, the software sets <emphasis>clocal</emphasis>.  When it has
finished talking to the modem and wants to wait for the connection to be
established, it resets (turns off) <emphasis>clocal</emphasis> and waits for <emphasis>DCD</emphasis>.  You
can check this with the <emphasis>stty</emphasis> command:
</para>
<programlisting>
# <command>stty -f /dev/cuaa2 -a</command>
ppp disc; speed 57600 baud; 0 rows; 0 columns;
lflags: -icanon -isig -iexten -echo -echoe -echok -echoke -echonl
        -echoctl -echoprt -altwerase -noflsh -tostop -flusho -pendin
        -nokerninfo -extproc
iflags: -istrip -icrnl -inlcr -igncr -ixon -ixoff -ixany -imaxbel ignbrk
        -brkint -inpck ignpar -parmrk
oflags: -opost -onlcr -oxtabs
cflags: cread cs8 -parenb -parodd hupcl <command>-clocal</command> -cstopb crtscts -dsrflow
        -dtrflow -mdmbuf
cchars: discard = ^O; dsusp = ^Y; eof = ^D; eol = &lt;undef&gt;;
        eol2 = &lt;undef&gt;; erase = ^?; intr = ^C; kill = ^U; lnext = ^V;
        min = 1; quit = ^\e; reprint = ^R; start = ^Q; status = ^T;
        stop = ^S; susp = ^Z; time = 0; werase = ^W;
</programlisting>

<para>This example, taken when the modem is connected, shows <emphasis>clocal</emphasis> reset.  As
you can see, this is indicated by the text <emphasis>-clocal</emphasis>.
</para>

<para><indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
<indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
There's a problem here: what if this line is also enabled for dial-in?  As we
shall see on page <xref linkend="CFBSD-dialin"/>, there will be a <emphasis>getty</emphasis> process in the
process of opening the line.  It won't succeed until <emphasis>DCD</emphasis> is asserted, so
we can dial with no problem.  But when the connection is established, how do we
stop <emphasis>getty</emphasis> from being there first?
</para>

<para><indexterm><primary>sio0</primary></indexterm>
<indexterm><primary>/dev/cuaa0</primary></indexterm>
<indexterm><primary>/dev/ttyd0</primary></indexterm>
<indexterm><primary>sio1</primary></indexterm>
<indexterm><primary>/dev/cuaa1</primary></indexterm>
<indexterm><primary>/dev/ttyd1</primary></indexterm>
The FreeBSD solution is to create separate devices for each case.  For the
second serial port, <emphasis>sio1</emphasis>, the system creates a file <emphasis>/dev/cuaa1</emphasis> for
dialling out, and <emphasis>/dev/ttyd1</emphasis> for dialling in.  If <emphasis>cuaa1</emphasis> is open,
an open on <emphasis>ttyd1</emphasis> does not complete when connection is established.
</para>
</sect2>
<sect2>
<title>Dialing out--an example</title>

<para>For an example of what you might look at, let's consider a manual dialup to an
ISP:
</para>
<programlisting>
# <command>ppp ISP</command>
User Process PPP. Written by Toshiharu OHNO.
Using interface: tun0
Interactive mode
ppp ON freebie&gt; </emphasis><command>term</command>				<emphasis>go into direct connect mode
Enter to terminal mode.
Type `~?' for help.
</emphasis><command>at</command>							<emphasis>synchronize with the modem
OK
</emphasis><command>at&amp;v</command>							<emphasis>look at the modem profile
ACTIVE PROFILE:
B0 E1 L0 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K4 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0 &amp;Y0
S00:000 S01:000 S02:043 S03:013 S04:010 S05:008 S06:002 S07:060 S08:002 S09:006
S10:014 S11:090 S12:050 S18:000 S25:005 S26:001 S36:007 S37:000 S38:020 S44:020
S46:138 S48:007 S95:000

STORED PROFILE 0:
B0 E1 L0 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K4 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0
S00:000 S02:043 S06:002 S07:060 S08:002 S09:006 S10:014 S11:090 S12:050 S18:000
S36:007 S37:000 S40:104 S41:195 S46:138 S95:000

STORED PROFILE 1:
B0 E1 L1 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K3 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0
S00:000 S02:043 S06:002 S07:060 S08:002 S09:006 S10:014 S11:090 S12:050 S18:000
S36:007 S37:000 S40:104 S41:195 S46:138 S95:000

TELEPHONE NUMBERS:
0=T1234567890                          1=
2=                                     3=

OK
</programlisting>

<para>The term <emphasis>profile</emphasis> refers to a set of the complete configuration
information for the modem.  External modems can usually store two different
profiles.  The <emphasis>AT&amp;V</emphasis> command shows the current configuration (``active
profile'') and the two stored profiles.  The first line reflects the parameters
set with <emphasis>AT</emphasis> commands (for example, <emphasis>L0</emphasis> means that the command
<emphasis>ATL0</emphasis>, turn off the speaker, has been issued).  The next two or three
lines reflect the values of the S registers.  In addition, this modem can store
up to four telephone numbers, a feature which is seldom of great interest.
</para>

<para>If you look at this profile, you'll notice that the active profile includes the
parameter <emphasis>&amp;K4</emphasis>.  This means ``use XON/XOFF flow control''.  This is not
desirable: it's better to use RTS/CTS flow control.  To fix it,
</para>
<programlisting>
</emphasis><command>at&amp;k3</command>							<emphasis>set RTS/CTS flow control
OK
<emphasis>at&amp;w</emphasis></emphasis>							<emphasis>write the active profile
OK
<emphasis>at&amp;v</emphasis></emphasis>							<emphasis>and check
ACTIVE PROFILE:
B0 E1 L0 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K3 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0 &amp;Y0
S00:000 S01:000 S02:043 S03:013 S04:010 S05:008 S06:002 S07:060 S08:002 S09:006
S10:014 S11:090 S12:050 S18:000 S25:005 S26:001 S36:007 S37:000 S38:020 S44:020
S46:138 S48:007 S95:000

STORED PROFILE 0:
B0 E1 L0 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K3 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0
S00:000 S02:043 S06:002 S07:060 S08:002 S09:006 S10:014 S11:090 S12:050 S18:000
S36:007 S37:000 S40:104 S41:195 S46:138 S95:000

STORED PROFILE 1:
B0 E1 L1 M1 N1 Q0 T V1 W0 X4 Y0 &amp;C1 &amp;D2 &amp;G0 &amp;J0 &amp;K3 &amp;Q5 &amp;R1 &amp;S0 &amp;T5 &amp;X0
S00:000 S02:043 S06:002 S07:060 S08:002 S09:006 S10:014 S11:090 S12:050 S18:000
S36:007 S37:000 S40:104 S41:195 S46:138 S95:000

TELEPHONE NUMBERS:
0=T1234567890                          1=
2=                                     3=

OK
</programlisting>

<para>Since the active profile includes the parameter <command>&amp;Y0</command>, the <emphasis>AT&amp;W</emphasis>
command writes back to stored profile 0.
</para>

<para><indexterm><primary>call</primary><secondary>failure reason code</secondary></indexterm>
<indexterm><primary>modem</primary><secondary>call failure reason code</secondary></indexterm>
The <command>AT&amp;V</command> command doesn't show all the S registers.  Some of them relate
to the current state of the modem, and aren't part of the configuration.  For
example, my modem includes an S register <emphasis>S86</emphasis>, the <emphasis>Call Failure Reason
Code</emphasis>.  If a call fails, it could be interesting to look at it.  To do so,
</para>
<programlisting>
</emphasis><command>ats86?</command>						<emphasis>show contents of S86
012							<emphasis>Connection dropped by other end</emphasis>
</programlisting>

<para>With this background, we can now proceed to establish a connection:
</para>
<programlisting>
</emphasis><command>atd1234567</command>						<emphasis>just dial
CONNECT 57600
ppp ON freebie&gt;
PPP ON freebie&gt;
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Dialling in</title>

<para><anchor id="CFBSD-dialin"/>
<indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
<indexterm><primary>stty</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>stty</secondary></indexterm>
Traditionally, UNIX distinguishes between local serial terminals and terminals
connected by modem by whether they assert the <emphasis>DCD</emphasis> signal.  It starts a
<emphasis>getty</emphasis> (for <emphasis>Get TTY</emphasis>) process for each line.  <emphasis>getty</emphasis> opens
the line, but for modems the line state is set in such a way that the call to
<emphasis>open</emphasis> does not complete until the DCE asserts <emphasis>DCD</emphasis>.  This is done by
resetting the flag <emphasis>clocal</emphasis>.  If you look at the line state with the
<emphasis>stty</emphasis> program, it will show <emphasis>-clocal</emphasis> if the flag is reset.
</para>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
To set up a line for dialing in, add information about the line in the file
<emphasis>/etc/ttys</emphasis>.  The default file contains a number of lines like:
</para>
<programlisting>
ttyd0	"/usr/libexec/getty std.9600"	unknown	off secure
</programlisting>

<para>This information has the following meaning:
</para>
<itemizedlist>
<listitem>

<para>The first column is the name of the terminal special file, relative to
<emphasis>/dev</emphasis> (in other words, this entry represents the file
<emphasis>/dev/ttyd0</emphasis>).
</para>
</listitem>
<listitem>

<para>The next field consists of the text <emphasis>/usr/libexec/getty std.9600</emphasis>.  This
is the invocation for <emphasis>getty</emphasis>: the <emphasis>getty</emphasis> program is
<emphasis>/usr/libexec/getty</emphasis>, and it is invoked with the parameter <emphasis>std.9600</emphasis>.
This is a label in the file <emphasis>/etc/gettytab</emphasis>, and describes a standard 9600
bps connection.  If you really use it like this, you'll probably want to upgrade
to <emphasis>std.57600</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>unknown</emphasis> refers to the terminal type.  This is the value to which
<emphasis>getty</emphasis> sets the environment variable <emphasis>TERM</emphasis>.  If you know that only
people with VT100 terminals dial in, you might change this string to
<emphasis>vt100</emphasis>, but you should do this with care.  It can cause a real mess on
the screen, and even make it impossible for people to work with it.
</para>
</listitem>
<listitem>

<para>The remaining fields can occur in any order.  <emphasis>off</emphasis> means ``don't start
the <emphasis>getty</emphasis> after all''.  If you want to run a <emphasis>getty</emphasis> on this line,
change this string to <emphasis>on</emphasis>.
</para>

<para><emphasis>secure</emphasis> means that only people you trust can access this line, so you can
allow a <emphasis>root</emphasis> login on this line.  That's fine for a direct connect
terminal in the same room, for example.  It's not a good idea for a modem which
anybody can dial up.  If the line is not secure, just omit the string.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
<indexterm><primary>SIGHUP</primary><secondary>signal</secondary></indexterm>
<indexterm><primary>signal</primary><secondary>SIGHUP</secondary></indexterm>
<indexterm><primary>kill</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kill</secondary></indexterm>
It's not enough to edit <emphasis>/etc/ttys</emphasis>.  The <emphasis>getty</emphasis>s are actually
spawned by <emphasis>init</emphasis>, and you must tell <emphasis>init</emphasis> that you have changed the
file.  <emphasis>init</emphasis> is always process 1, and you tell it by sending it a
<emphasis>SIGHUP</emphasis> signal.  The unlikely name of the program which sends signals is
<emphasis>kill</emphasis>, so you write:
</para>
<programlisting>
# <command>kill -SIGHUP 1</command>
\h'-.7m'<emphasis>or</emphasis>
# <command>kill -1 1</command>
</programlisting>

<para>These two commands are equivalent: <emphasis>SIGHUP</emphasis> has the numeric value
<emphasis>1</emphasis>.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchppp"><title>Configuring PPP</title>

<para><anchor id="CFBSD-PPP"/>
<indexterm><primary>SLIP</primary></indexterm>
<indexterm><primary>Serial</primary><secondary>Line Internet Protocol</secondary></indexterm>
<indexterm><primary>PPP</primary></indexterm>
<indexterm><primary>Point</primary><secondary>to Point Protocol</secondary></indexterm>
Two protocols support connection to the Internet via modem: <emphasis>SLIP</emphasis>
(<emphasis>Serial Line Internet Protocol</emphasis>) and <emphasis>PPP</emphasis> (<emphasis>Point to Point
Protocol</emphasis>).  As the name suggests, SLIP supports only IP.  It is an older,
less rugged protocol.  Its only advantage is that it may be available where PPP
isn't.  If you have the choice, always take PPP.
</para>

<para>PPP differs from SLIP in being able to handle multiple protocols simultaneously.
Since Microsoft discovered the Internet, two things have happened: PPP has
become the protocol of choice with nearly every ISP, and Microsoft keeps
changing its implementation to make it more difficult for non-Microsoft machines
to connect to Microsoft equipment.
</para>

<para>In this chapter, we'll look at PPP.  We'll consider SLIP, if we have to, in the
following chapter.
</para>

<para>PPP performs a number of functions:
</para>
<itemizedlist>
<listitem>

<para>It performs the dialling and establishment of a phone connection if necessary.
Strictly speaking, this isn't part of the PPP specification, but it is supported
by most PPP implementations.
</para>
</listitem>
<listitem>

<para><indexterm><primary>authentication</primary><secondary>PPP</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>authentication</secondary></indexterm>
It performs <emphasis>authentication</emphasis> to ensure that you are allowed to use the
connection.
</para>
</listitem>
<listitem>

<para><indexterm><primary>negotiation</primary><secondary>PPP</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
It performs <emphasis>negotiation</emphasis> to decide what kind of protocol to use over the
link.  You might think, ``that's OK, I'm just using IP'', but in fact there are
a number of different ways to transmit IP datagrams over a PPP link.  In
addition, the other end may be able to handle non-Internet protocols such as
X.25, SNA and Novell's IPX.
</para>
</listitem>
<listitem>

<para><indexterm><primary>line</primary><secondary>quality monitoring</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>line quality monitoring</secondary></indexterm>
It can perform <emphasis>line quality monitoring</emphasis> to ensure that the modems are
able to understand each other.
</para>
</listitem>
</itemizedlist>

<para>FreeBSD supports two versions of PPP:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Kernel</primary><secondary>PPP</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>Kernel</secondary></indexterm>
Traditional BSD implementations of IP are located in the kernel, which makes for
more efficiency.  The corresponding implementation of PPP is referred to as
<emphasis>Kernel PPP</emphasis>.  We'll look at it on page
</para>
</listitem>
<listitem>

<para><indexterm><primary>User</primary><secondary>PPP</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>User</secondary></indexterm>
<indexterm><primary>iijppp</primary></indexterm>
<indexterm><primary>Internet</primary><secondary>Institute of Japan</secondary></indexterm>
<indexterm><primary>tunnel</primary><secondary>driver</secondary></indexterm>
<indexterm><primary>driver</primary><secondary>tunnel</secondary></indexterm>
Although Kernel PPP is more efficient, it's also frequently more difficult to
debug.  As a result, FreeBSD also supplies an implementation known as <emphasis>User
PPP</emphasis> or <emphasis>iijppp</emphasis>, after the <emphasis>Internet Institute of Japan</emphasis>, which
supplied it.  It uses the <emphasis>tunnel driver</emphasis> to pass IP packets up to a user
process.  It's easier to configure and debug, and though it's not as efficient,
the difference is not usually a problem.  We'll look at this implementation on
page <xref linkend="CFBSD-user-ppp"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Quick setup</title>

<para>If you understand how PPP works, and you just want to jump into the setup, look
at the configuration summaries on page <xref linkend="CFBSD-ppp-quick-setup"/> for User PPP, or page
<xref linkend="CFBSD-pppd-quick-setup"/> for Kernel PPP.  If you run into trouble, come back here
and check the details.
</para>
</sect1>
<sect1>
<title>How PPP works</title>

<para><anchor id="CFBSD-PPP-theory"/>
To set up a PPP connection, <emphasis>something</emphasis> needs to perform most of these
steps:
</para>
<itemizedlist>
<listitem>

<para>Set up a serial connection between the two systems.  This could be a direct wire
connection, but normally it's a modem or ISDN link.
</para>
</listitem>
<listitem>

<para><indexterm><primary>dialling</primary></indexterm>
<indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
<indexterm><primary>data</primary><secondary>carrier detect</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
For a modem link, establish connection, traditionally called <emphasis>dialling</emphasis>
the other end.  The modems then set up a link and assert <emphasis>DCD</emphasis> (<emphasis>Data
Carrier Detect</emphasis>) to tell the machines to which they are connected that the
modem connection has been established.
</para>
</listitem>
<listitem>

<para><indexterm><primary>shell</primary><secondary>account</secondary></indexterm>
<indexterm><primary>account</primary><secondary>shell</secondary></indexterm>
<indexterm><primary>PAP</primary></indexterm>
<indexterm><primary>CHAP</primary></indexterm>
<emphasis>Log in</emphasis>.  Traditionally, all UNIX system perform login authentication.
Only then do they decide whether you want to run PPP, SLIP, or a simple terminal
protocol (the so-called <emphasis>shell account</emphasis>).  Nowadays, more and more systems
are using <emphasis>PAP</emphasis> or <emphasis>CHAP</emphasis> authentication.
</para>
</listitem>
<listitem>

<para>Start PPP.  PPP selects an unused network interface to use for this connection.
</para>
</listitem>
<listitem>

<para>The two PPP processes negotiate details like IP address, protocol, and
authentication protocols.
</para>
</listitem>
<listitem>

<para>Establish routes to the systems at the other end of the link.
</para>
</listitem>
</itemizedlist>

<para>On the following pages, we'll look at these points in detail.
</para>
<sect2>
<title>The interfaces</title>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
Most network interfaces are dedicated to networking.  For example, an Ethernet
adapter can't be used for anything else.  PPP and SLIP are different: you're
using a serial line which you could also use for a remote terminal, a UUCP
connection, or even a mouse.  There's another difference, too: you access serial
lines via their device names.  You access network interfaces via the
<emphasis>ifconfig</emphasis> program, since they don't usually have device names&mdash;in
technical jargon, they're in a separate <emphasis>name space</emphasis> from files.  How do
we solve this conflict?
</para>

<para><indexterm><primary>/dev/ppp0</primary></indexterm>
The solution is a little surprising: PPP and SLIP both use two different
devices.  You decide which serial line you want to use, and the software chooses
a network interface for you.  For example, your serial line might be called
<emphasis>/dev/cuaa0</emphasis>, <emphasis>/dev/cuaa1</emphasis> or <emphasis>/dev/cuaa2</emphasis>, while your interface
will be called <emphasis>tun0</emphasis> or <emphasis>tun1</emphasis> (for User PPP), <emphasis>ppp0</emphasis> or <emphasis>ppp1</emphasis>
(for Kernel PPP), or <emphasis>sl0</emphasis> for SLIP.  The total number of each kind of
network interface is a configurable kernel parameter.
<indexterm><primary>/dev/tun0</primary></indexterm>
</para>

<para>Since User PPP runs in user space, it <emphasis>does</emphasis> require a device name for the
network interface, for example <emphasis>/dev/tun0</emphasis>.  It uses this device to read and
write to the back end of the tunnel interface.
</para>
</sect2>
<sect2>
<title>Dialling</title>

<para>Most PPP connections run over a dial-up link.  The PPP standard doesn't define
dialling, however, since dialling is a modem function.
</para>

<para>User PPP includes built-in dialling support, while Kernel PPP supplies a method
for invoking an external dialler.  In practice, the only difference is the way
your configuration files look.  We'll look at these when we discuss the
individual implementations.
</para>

<para><indexterm><primary>negotiation</primary><secondary>PPP</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
After the modem connection has been set up, the next step depends to a great
extent on the system at the other end of the link.  You may first have to
perform login, or you may find yourself connected directly to a PPP process.
The dialling script (``chat script'') usually handles login, so when it
completes you should be connected to the PPP process.  The PPP processes then perform
<emphasis>negotiation</emphasis>.
</para>
</sect2>
<sect2>
<title>Negotiation</title>

<para>Once the modem connection is established and the PPP processes can talk to each
other, they negotiate what PPP features they will use.  The negotiation is
successful if the two sides can agree on a functional subset of the features
both would like to have.
</para>

<para>For each feature of the link, PPP negotiation can perform up to two actions.
User PPP uses the following terms to describe them, viewed from the local end of
a link:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>enable</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>enable</emphasis> a feature means: ``request this feature''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>disable</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>disable</emphasis> a feature means: ``do not request this feature''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>accept</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>accept</emphasis> a feature means: ``if the other side requests this feature,
accept it''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>deny</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>deny</emphasis> a feature means: ``if the other side requests this feature,
refuse it''.
</para>
</listitem>
</itemizedlist>

<para>Negotiation is successful if each end accepts all the features that the other
end has enabled.  In some cases, however, non-FreeBSD PPP systems have an
alternative (for example, if you accept PAP and deny CHAP, a router may first
request CHAP, and when you deny it, it may then request PAP).
</para>
</sect2>
<sect2>
<title>Who throws the first stone?</title>

<para><anchor id="CFBSD-first-stone"/>
The first step in negotiation is to decide which side starts.  One of them
starts the negotiation, and the other one responds.  If you configure your end
wrong, one of two things can happen:
</para>
<itemizedlist>
<listitem>

<para>You both wait for the other end to start.  Nothing happens.  After a while, one
of you times out and drops the connection.
</para>
</listitem>
<listitem>

<para>You both fire away and place your demands, and listen for the other one to
reply.  The software should recognize that the other end is talking, too, and
recover, but often enough both ends give up and drop the connection.
</para>
</listitem>
</itemizedlist>

<para>In general, systems with login authentication also initiate the negotiation.
ISPs with <emphasis>PAP</emphasis> or <emphasis>CHAP</emphasis> authentication tend to expect the end user
to start first, since that's the way Microsoft does it.  It's easier for
debugging to assume that the other end will start.  If it doesn't, and you have
an external modem, you'll notice that there is no traffic on the line, and that
the line has dropped.  Then you can switch to active mode negotiation.
</para>

<para>Typical features that require negotiation are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>CHAP</primary></indexterm>
<indexterm><primary>PAP</primary></indexterm>
<emphasis>What kind of authentication?</emphasis> Login authentication doesn't count here,
since it's not part of PPP.  You may choose to offer <emphasis>CHAP</emphasis> or <emphasis>PAP</emphasis>
negotiation.  You may also require the other end to authenticate itself.  You
can accept both <emphasis>CHAP</emphasis> and <emphasis>PAP</emphasis> authentication&mdash;that way, you can
accept whichever the other end asks for.  If the other end is an ISP, you will
probably not be able to authenticate him, but you should check with the ISP.
</para>
</listitem>
<listitem>

<para><indexterm><primary>LQR</primary></indexterm>
<indexterm><primary>Link</primary><secondary>Quality Request</secondary></indexterm>
<emphasis>LQR</emphasis>, <emphasis>Link Quality Requests</emphasis>.  This gives you an overview of your line
quality, <emphasis>if</emphasis> you don't set your modem to use error correction.  If you do
use error correction, you're unlikely to see much in the way of LQR problems,
since the error correction protocols hide them.  Occasionally LQR packets can
confuse a PPP implementation, so you shouldn't enable them if you don't intend
to use them.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Jacobson</primary><secondary>Van</secondary></indexterm>
<indexterm><primary>data</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>data</secondary></indexterm>
<indexterm><primary>header</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>header</secondary></indexterm>
<indexterm><primary>Predictor</primary><secondary>1</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>Predictor 1</secondary></indexterm>
<indexterm><primary>BSD</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>BSD</secondary></indexterm>
<indexterm><primary>deflate</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>deflate</secondary></indexterm>
<emphasis>Data and header compression</emphasis>.  You have a choice here: modern modems offer
various kinds of data compression, and so do the PPP implementations.  As we saw
on page <xref linkend="CFBSD-modem-data-compression"/>, modem compression increases the data
throughput, but also increases the latency.  If your ISP supports the same kind
of data compression as your PPP software, you might find that it improves
matters to disable modem data compression.  Both implementations support <emphasis>Van
Jacobson</emphasis> and <emphasis>Predictor 1</emphasis> compression, and Kernel PPP also supports
<emphasis>BSD compression</emphasis> and <emphasis>deflate compression</emphasis>.
</para>

<para>Which do you choose?  <emphasis>Van Jacobson</emphasis> compression works at the TCP level.
It compresses only the headers (see page <xref linkend="CFBSD-packet-header"/> for more details),
and the other compression schemes work at the frame level.  You can always
enable Van Jacobson compression.  As far as the others are concerned, use
whatever the other side offers.  In case of doubt, use Predictor 1 compression.
</para>

<para>Data and header compression are implemented as a special case of
<emphasis>protocol</emphasis>: IP with header compression is considered a different protocol
from IP without header compression.  Other protocols that the remote system
might offer include non-IP protocols such as X.25, SNA and IPX.
</para>
</listitem>
<listitem>

<para><emphasis>IP addresses</emphasis>.  Dynamic addressing is implemented by making the IP
addresses of each end negotiable.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Proxy</primary><secondary>ARP</secondary></indexterm>
<emphasis>Proxy ARP</emphasis>.  Some systems can't understand being at the other end of a PPP
link.  You can fool them by telling the router to respond to <emphasis>ARP</emphasis>
requests for machines at the other end of the link.  You don't need this
subterfuge in FreeBSD.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Authentication</title>

<para>Nearly every PPP link requires some kind of identification to confirm that you
are authorized to use the link.  On UNIX systems, the authentication
traditionally consisted of the UNIX <emphasis>login</emphasis> procedure, which also allows
you to dial-in either to a shell or to a PPP session, depending on what user ID
you use.  Login authentication is normally performed by the dial-up chat script.
</para>

<para><indexterm><primary>PAP</primary></indexterm>
<indexterm><primary>Password</primary><secondary>Authentication Protocol</secondary></indexterm>
<indexterm><primary>CHAP</primary></indexterm>
<indexterm><primary>Challenge</primary><secondary>Handshake Authentication Protocol</secondary></indexterm>
Microsoft has changed many things in this area.  Since their machines don't
normally support d&aelig;gmons or even multiple users, the UNIX login method is
difficult to implement.  Instead, you connect directly to a PPP server and
perform authentication directly with it.  There are two different authentication
methods currently available, <emphasis>PAP</emphasis> (<emphasis>Password Authentication
Protocol</emphasis>) and <emphasis>CHAP</emphasis> (<emphasis>Challenge Handshake Authentication
Protocol</emphasis>).  Both perform similar functions.  From the PPP point of view,
you just need to know which one you are using.  Your ISP should tell you this
information, but a surprising number don't seem to know.  In case of doubt,
accept either of them.
</para>

<para>Occasionally you have both login authentication and either <emphasis>CHAP</emphasis> or
<emphasis>PAP</emphasis> authentication.  The remote system may require you to start the
<emphasis>ppp</emphasis> program and perform a second authentication phase.  This is part of
the information that the system administrator at the other end should give you.
</para>

<para>If you're using <emphasis>PAP</emphasis> or <emphasis>CHAP</emphasis>, you need to specify a system name and
an authentication key.  These terms may sound complicated, but they're really
just a fancy name for a user name and a password.  We'll look at how to specify
these values when we look at the individual software.
</para>

<para>How do you decide whether you use <emphasis>PAP</emphasis> or <emphasis>CHAP</emphasis>?  Maybe you
don't&mdash;you can leave it to the other end.  Typically, though, you will accept
the one kind of authentication and deny the other.  Most ISPs do not expect you
to authenticate <emphasis>them</emphasis> (they're beyond reproach), so you should request
neither <emphasis>PAP</emphasis> nor <emphasis>CHAP</emphasis>.  For example, for <emphasis>CHAP</emphasis>
authentication (which seems to be becoming more prevalent), you would accept
<emphasis>CHAP</emphasis> and not offer anything.
</para>
</sect2>
<sect2>
<title>Which IP addresses on the link?</title>

<para>After passing authentication, you may need to negotiate the addresses on the
link.  At first sight, you'd think that the IP addresses on the link would be
very important.  In fact, you can often almost completely ignore them.  To
understand this, we need to consider what the purpose of the IP addresses is.
</para>

<para>An IP address is an address placed in the source or the destination field in an
IP packet in order to enable the software to route it to its destination.  As we
saw in <xref linkend="CFBSD-chnetsetup"/>, it is not necessarily the address of the interface to
which the packet is sent.  If your packet goes through 15 nodes on the way
through the Internet, quite a normal number, it will be sent to 14 nodes whose
address is not specified in the packet.
</para>

<para>The first node is the router at the other end of the PPP link.  This is a
point-to-point link, so it receives all packets that are sent down the line, so
you don't need to do anything special to ensure it gets them.  This is in marked
contrast to a router on a broadcast medium like an Ethernet: on an Ethernet you
must specify the IP address of the router in order for it to receive the
packets.
</para>
<note>

<para><indexterm><primary>ARP</primary></indexterm>
<indexterm><primary>Address</primary><secondary>Resolution Protocol</secondary></indexterm>
On an Ethernet, although the IP address in the packets doesn't mention the
router, the Ethernet packets do specify the Ethernet address of the router as
the destination address.  Your local system needs the IP address in order to
determine the Ethernet address with the aid of <emphasis>ARP</emphasis>, the <emphasis>Address
Resolution Protocol</emphasis>.
</para>
</note>

<para>In either case, except for testing, it's very unlikely that you will ever want
to address a packet directly to the router, and it's equally unlikely that the
router would know what to do with most kinds of packets if they are addressed to
itself.  So we don't really need to care about the address.
</para>

<para>What if we set up the wrong address for the other end of the link?  Look at the
router <emphasis>gw.example.com</emphasis> in the reference network on page
<xref linkend="CFBSD-reference-net-page"/>.  Its PPP link has the local address
<emphasis>139.130.136.133</emphasis>, and the other end has the address
<emphasis>139.130.136.129</emphasis>.  What happens if we get the address mixed up and
specify the other end as <emphasis>139.130.129.136</emphasis>?  Consider the commands we
might enter if we were configuring the interface manually (compare on page
<xref linkend="CFBSD-ifconfig-example"/>):
</para>
<programlisting>
# <command>ifconfig tun0  139.130.136.133  139.130.136.129  255.255.255.255
# </command><command>route add default 139.130.129.136</command>
</programlisting>

<para><figure><title>Configuring an interface and a route</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
You need to specify the netmask, because otherwise <emphasis>ifconfig</emphasis> chooses one
based on the network address.  In this case, since it's a class B address, it
would choose <emphasis>255.255.0.0</emphasis>.  This tells the system that the other end of
the link is <emphasis>139.130.129.136</emphasis>, which is incorrect.  It then tells the
system to route all packets which can't be routed elsewhere to this address (the
default route).  When such a packet arrives, the system checks the routing
table, and find that <emphasis>139.130.129.136</emphasis> can be reached by sending the
packet out from interface <emphasis>tun0</emphasis>.  It sends the packet down the line.
</para>

<para>At this point any memory of the address <emphasis>139.130.129.136</emphasis> (or, for that
matter, <emphasis>139.130.136.129</emphasis>) is gone.  The packet arrives at the other end,
and the router examines it.  It still contains only the original destination
address, and the router routes it accordingly.  In other words, the router never
finds out that the packet has been sent to the incorrect ``other end'' address,
and things work just fine.
</para>

<para>What happens in the other direction?  That depends on your configuration.  For
any packet to get to your system from the Internet, the routing throughout the
Internet must point to your system.  Now how many IP addresses do you have?  If
it's only a single IP address (the address of your end of the PPP link), it must
be correct.  Consider what would happen if you accidentally changed the octets
of your local IP address:
</para>
<programlisting>
# <command>ifconfig tun0  139.130.<emphasis>133.136</emphasis></command>  139.130.129.136
</programlisting>

<para>If <emphasis>gw</emphasis> sends out a packet with this source address, it does not prevent
it from getting to its destination, since the source address does not play any
part in the routing.  But when the destination system replies, it sends it to
the address specified in the source field, so it will not get back.
</para>

<para>So how can this still work?  Remember that routers don't change the addresses in
the packets they pass.  If system <emphasis>bumble</emphasis> sends out a packet, it has the
address <emphasis>223.147.37.3</emphasis>.  It passes through the incorrectly configured
system <emphasis>gw</emphasis> unchanged, so the reply packet gets back to its source with no
problems.
</para>

<para><indexterm><primary>dynamic</primary><secondary>addressing</secondary></indexterm>
<indexterm><primary>addressing</primary><secondary>dynamic</secondary></indexterm>
In practice, of course, it's not a good idea to use incorrect IP addresses.  If
you don't specify an address at either end of the link, PPP can negotiate one
for you.  What this does mean, though, is that you shouldn't worry too much
about what address you get.  There is one exception, however: the issue of
<emphasis>dynamic addressing</emphasis>.  We'll look at that below.
</para>
</sect2>
<sect2>
<title>The net mask for the link</title>

<para><indexterm><primary>routing</primary></indexterm>
<anchor id="CFBSD-pppnetmask"/>
As we saw on page <xref linkend="CFBSD-netmask"/>, with a broadcast medium you use a net mask to
specify which range of addresses can be addressed directly via the interface.
This is a different concept from <emphasis>routing</emphasis>, which specifies ranges of
addresses which can be addressed indirectly via the interface.  By definition, a
point-to-point link only has one address at the other end, so the net mask must
be <emphasis>255.255.255.255</emphasis>.  Unfortunately, Microsoft software sometimes uses a
point-to-point link as if it were an extension of a LAN, and it broadcasts
across the link.  This is not a good idea, but if you have to use this kind of
software, you may need to set a different net mask.  In practice, it doesn't
matter what net mask you set, as long as it doesn't cause data intended for
other interfaces to be sent down the PPP link.
</para>
</sect2>
<sect2>
<title>Static and dynamic addresses</title>

<para><anchor id="CFBSD-static-ip-addresses"/>
<indexterm><primary>IPv6</primary></indexterm>
Traditionally, each interface has had a specific address.  With the increase in
the size of the Internet, this has caused significant problems: the Internet is
running out of addresses.  A solution is on the horizon: version 6 of the
Internet Protocol (usually called <emphasis>IPv6</emphasis>) has increased the length of an
address from 32 bits to 128 bits, increasing the total number of addresses from
4,294,967,296 to 3.4\(mu10\u\s-338\d\s0&mdash;enough to assign multiple IP
addresses to every atom on Earth.
<footnote>

<para>There may still be a limitation when the Internet grows across the entire
universe.
</para>
</footnote>
<indexterm><primary>dynamic</primary><secondary>IP addresses</secondary></indexterm>
<indexterm><primary>IP</primary><secondary>addresses</secondary></indexterm>
In the meantime, ISPs have found a partial solution with <emphasis>dynamic IP
addresses</emphasis>.  With dynamic addresses, every time you dial in, you are assigned
a free IP address from the ISP's address space.  That way, an ISP only needs
as many IP addresses as he has modems.  He might have 128 modems and 5000
customers.  WIth static addresses, he would need 5000 addresses, but with
dynamic addresses he only needs 128.
</para>

<para>Dynamic addresses have two very serious disadvantages:
</para>
<itemizedlist>
<listitem>

<para>IP is a peer-to-peer protocol: there is no master and no slave.  Theoretically,
any system can initiate a connection to any other, as long as it knows its IP
address.  This means that your ISP could initiate the connection if somebody was
trying to access your system.  With dynamic addressing, it is absolutely
impossible for the ISP to set up a connection: there is no way for any outside
system to know your IP address.
</para>

<para>This may seem unimportant&mdash;maybe you consider the possibility of the ISP
calling you even dangerous&mdash;but consider the advantages.  If you're travelling
somewhere and need to check on something on your machine at home, you can just
<emphasis>telnet</emphasis> to it.  If you want to let somebody collect some files from your
system, there's no problem.  In practice, however, very few ISPs are prepared to
call you, though that doesn't make it a bad idea.
</para>
</listitem>
<listitem>

<para><indexterm><primary>idle</primary><secondary>timeout</secondary></indexterm>
<indexterm><primary>timeout</primary><secondary>idle</secondary></indexterm>
Both versions of PPP support an <emphasis>idle timeout</emphasis> feature: if you don't use
the link for a specified period of time, it may hang up.  Depending on where you
live, this may save on phone bills and ISP connect charges.  It only disconnects
the phone link, and not the TCP sessions.  In order to be able to continue the
session, however, you need to have the same IP address when the link comes up
again.  Otherwise, though the session isn't dead, you can't reconnect to it.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Setting a default route</title>

<para><anchor id="CFBSD-ppp-default-route"/>
<indexterm><primary>default</primary><secondary>route</secondary></indexterm>
<indexterm><primary>route</primary><secondary>default</secondary></indexterm>
Very frequently, the PPP link is your only connection to the Internet.  In this
case, you should set the <emphasis>default route</emphasis> to go via the link.  You can do
this explicitly with the <emphasis>route add</emphasis> command, but both versions of PPP can
do it for you.
</para>

<para><emphasis>When</emphasis> you do it depends on what kind of addressing you're using.  If
you're using static addressing, you can specify it as one of the configuration
parameters.
If you're using dynamic addressing, this isn't possible: you don't know the
address at that time.  Both versions have a solution for this, which we'll look
at when we get to them.
</para>
</sect2>
<sect2>
<title>Autodial</title>

<para>A PPP link typically costs money.  You may pay some or all of the following
charges:
</para>
<itemizedlist>
<listitem>

<para>Telephone call setup charges, a charge made once per call.  Unlike the other
charges, these make it advantageous to stay connected as long as possible.
</para>
</listitem>
<listitem>

<para>Telephone call duration charges.  In some countries, you pay per time unit (for
example, per minute), or you pay a fixed sum for a variable period of time.
</para>
</listitem>
<listitem>

<para>ISP connect charges, also per time unit.
</para>
</listitem>
<listitem>

<para>ISP data charges, per unit of data.
</para>
</listitem>
</itemizedlist>

<para>Typically, the main cost depends on the connection duration.  To limit this
cost, both PPP implementations supply methods to dial automatically and to
disconnect when the line is idle.
</para>
</sect2>
</sect1>
<sect1>
<title>The information you need to know</title>

<para>Whichever PPP implementation you decide upon, you need the following
information:
</para>
<itemizedlist>
<listitem>

<para>Who are you going to call?  Get the phone number complete with any necessary
area codes, in exactly the format the modem needs to dial.  If your modem is
connected to a PABX, be sure to include the access code for an external line.
</para>
</listitem>
<listitem>

<para>The user identification and password for connection to the ISP system.
</para>
</listitem>
<listitem>

<para>The kind of authentication used (login, <emphasis>CHAP</emphasis> or <emphasis>PAP</emphasis>).
</para>
</listitem>
<listitem>

<para>Whether you are using static or dynamic addressing.
</para>
</listitem>
<listitem>

<para><indexterm><primary>IP</primary><secondary>address</secondary></indexterm>
<indexterm><primary>address</primary><secondary>IP</secondary></indexterm>
If you're using static addressing, what <emphasis>IP addresses</emphasis> to use over the
link.
</para>
</listitem>
<listitem>

<para><indexterm><primary>net</primary><secondary>mask</secondary></indexterm>
The <emphasis>net mask</emphasis> for the link.  As we've seen it, you don't need it, but if
the provider supplies it, you might as well use it.
</para>
</listitem>
</itemizedlist>

<para>You should have collected all this information in the table on page
<xref linkend="CFBSD-ISP-checklist"/>.
</para>
</sect1>
<sect1>
<title>Setting up User PPP</title>

<para><anchor id="CFBSD-user-ppp"/>
<indexterm><primary>tunnel</primary><secondary>driver</secondary></indexterm>
<indexterm><primary>driver</primary><secondary>tunnel</secondary></indexterm>
User PPP uses the <emphasis>tunnel driver</emphasis>.  You can check this in the
configuration file for your system:
</para>
<programlisting>
pseudo-device     tun           1
</programlisting>

<para>The value (<emphasis>1</emphasis> in this example) is the number of tunnel devices to
provide.  Each concurrent PPP connection requires one tunnel driver.  The
standard <emphasis>GENERIC</emphasis> kernel includes this pseudo-device, so you only have to
check if you have already rebuilt a kernel.
See the book <xref linkend="CFBSD-IRF"/> for details of kernel configuration.
</para>

<para><indexterm><primary>/dev/tun0</primary></indexterm>
It's not enough to have a kernel which supports the tunnel driver: you also need
a device node <emphasis>/dev/tun0</emphasis>.  If not, you can create it by:
</para>
<programlisting>
# <command>cd /dev</command>
# <command>./MAKEDEV tun0</command>
</programlisting>

<para>Once you have performed these preliminary steps, you can proceed to set up PPP:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/ppp</primary></indexterm>
Set up the configuration files in the directory <emphasis>/etc/ppp</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
Set up the global internet information in <emphasis>/etc/rc.conf</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>The ppp configuration files</title>

<para>After installation, you will find the following files in <emphasis>/etc/ppp</emphasis>:
</para>
<programlisting>
# <command>ls -l /etc/ppp</command>
  total 21
  drwxr-xr-x   2 root     wheel         512 Aug 17 16:18 .
  drwxr-xr-x   8 root     wheel        1536 Aug 29 18:31 ..
  -rw-r--r--   1 root     wheel        1370 May 20 20:06 ppp.conf.filter.sample
  -rw-r--r--   1 root     wheel        1894 May 20 20:06 ppp.conf.iij.sample
  -rw-r--r--   1 root     wheel        5112 May 20 20:06 ppp.conf.sample
  -rw-r--r--   1 root     wheel        1130 May 20 20:06 ppp.conf.server.sample
  -rw-r--r--   1 root     wheel        1665 May 20 20:06 ppp.dialup.sample
  -rw-r--r--   1 root     wheel        1422 May 20 20:06 ppp.linkup.sample
  -rw-r--r--   1 root     wheel        1705 May 20 20:06 ppp.pap.dialup.sample
  -rw-r--r--   1 root     wheel         313 May 20 20:06 ppp.secret.sample
</programlisting>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
As the names suggest, they are only samples.  Most of them are samples for the
main configuration file <emphasis>ppp.conf</emphasis>.  They have the following purposes:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.conf.sample</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.conf.iij.sample</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.conf.server.sample</primary></indexterm>
<emphasis>ppp.conf</emphasis> is the main configuration file.  We'll look at it in the
following section.  The files <emphasis>ppp.conf.sample</emphasis>, <emphasis>ppp.conf.iij.sample</emphasis>
and <emphasis>ppp.conf.server.sample</emphasis> contain various possible configurations.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.conf.filter</primary></indexterm>
<emphasis>ppp.conf.filter</emphasis> is used for packet filtering.  We'll look at this feature
in <xref linkend="CFBSD-chfirewall"/>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.dialup</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.pap.dialup.sample</primary></indexterm>
<emphasis>ppp.dialup</emphasis> is called from <emphasis>getty</emphasis> to set up the PPP link for a
dial-in connection.  <emphasis>ppp.pap.dialup.sample</emphasis> is another version which uses
<emphasis>PAP</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.linkup</primary></indexterm>
<emphasis>ppp.linkup</emphasis> is invoked after the link has been established when dialling
out.  We won't discuss it further here.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.linkdown</primary></indexterm>
<emphasis>ppp.linkdown</emphasis> is invoked when the link is dropped after dialling out.
There is no sample file for this file, and it's not used very often.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ppp/ppp.secret</primary></indexterm>
<emphasis>ppp.secret</emphasis> is an alternative file which contains passwords and
authentication keys.  Putting them in a separate file makes it easier to keep
them secure.
</para>
</listitem>
<listitem>

<para>In addition, you may find configuration files for Kernel PPP&mdash;unfortunately,
both implementations share the same configuration directory.  This isn't as bad
as it could be: at least there is no clash in the names.  See the section on
Kernel PPP configuration on page <xref linkend="CFBSD-kernel-ppp"/> for more details.
</para>
</listitem>
</itemizedlist>

<para>We'll look at them in the following sections.
</para>
</sect2>
<sect2>
<title>/etc/ppp/ppp.conf</title>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
<emphasis>/etc/ppp/ppp.conf</emphasis> is the main configuration file.  It consists of a
number of entries headed by a label.  For example, the <emphasis>default</emphasis> entry
looks like:
</para>
<programlisting>
default:
 set device /dev/cuaa1			<emphasis>device to use</emphasis>
 set speed 115200			<emphasis>connect at 115,200 bps</emphasis>
 set dial "ABORT BUSY ABORT NO\e\esCARRIER TIMEOUT 5 \e"\e" AT \e
           OK-AT-OK ATE1Q0 OK \e\edATDT\e\eT TIMEOUT 40 CONNECT"
</programlisting>

<para>There are a number of things to observe here:
</para>
<itemizedlist>
<listitem>

<para>Note the format: labels begin at the beginning of the line, and other entries
must be indented by one character.
</para>
</listitem>
<listitem>

<para>The line <emphasis>default:</emphasis> identifies the default entry, which is always run when
PPP starts.  <emphasis>set device /dev/cuaa1</emphasis> tells PPP to use the second serial
port (<emphasis>/dev/cuaa1</emphasis>), and <emphasis>set speed</emphasis> specifies the bit rate at which
the connection should be established.
</para>
</listitem>
<listitem>

<para>The <emphasis>set speed</emphasis> line sets the speed of the link between the modem and the
computer.  Some systems have problems at 115,200 bps, but the next slower speed
is 57,600 bps, which is too slow to use the full bandwidth when compression is
enabled.
</para>
</listitem>
<listitem>

<para><indexterm><primary>chat</primary><secondary>script</secondary></indexterm>
<indexterm><primary>script</primary><secondary>chat</secondary></indexterm>
The final line describes a <emphasis>chat script</emphasis>, a series of responses and commands
to be exchanged with the modem.  We'll look at an example of a chat script on
page <xref linkend="CFBSD-chat-script"/>.
</para>
</listitem>
<listitem>

<para>The default entry alone does not supply enough information to create a link.  In
particular, it does not specify who to call.  In addition to the default entry,
you need an entry describing how to connect to a specific site.  The connection
for our example system <emphasis>gw</emphasis> (page <xref linkend="CFBSD-reference-net-page"/>) might look like:
</para>
</listitem>
</itemizedlist>

<para></para>
<programlisting>
ISP:
 set phone 1234567							<emphasis>phone number to call</emphasis>
 set login "TIMEOUT 5 login:-\e\er-login: ppp word: qqq"	<emphasis>how to log in</emphasis>
 set timeout 120							<emphasis>wait up to 120 seconds for connect</emphasis>
 set ifaddr 139.130.136.133  139.130.136.129
 add default HISADDR
</programlisting>

<para>The second line, <emphasis>set login</emphasis>, includes another chat script.  You'll need
to change this one.  Specifically, this example describes the following exchange
of text (text from the remote machine is in <emphasis>constant width</emphasis>, and text
sent by the local machine is in <command>constant bold</command>):
</para>
<programlisting>
login: <command>ppp</command>
Password: </emphasis><command>qqq</command>		<emphasis>(doesn't echo)
</programlisting>

<para>Sometimes the login script goes further, and requires you to start <emphasis>ppp</emphasis>
as well.  Here's an alternative that does that:
</para>
<programlisting>
 set login "TIMEOUT 5 login:-\e\er-login: foo word: bar BLAZENET&gt; p\e\er"
</programlisting>

<para>In this version, after logging in, your system waits for the prompt
<emphasis>BLAZENET&gt;</emphasis> and then sends the sequence <emphasis>p</emphasis> followed by a carriage
return to start the <emphasis>ppp</emphasis> program.
</para>

<para>The line <emphasis>set ifaddr</emphasis> specifies that the PPP interface on the local
machine should have the IP address <emphasis>139.130.136.133</emphasis> (the first address
specified), and the remote machine will answer to the address
<emphasis>139.130.136.129</emphasis> (the second address).  You'll notice that this
corresponds almost exactly to the first line of Figure <xref linkend="CFBSD-ifconfig-ex"/> on page
<xref linkend="CFBSD-ifconfig-ex-page"/>.  You use this kind of specification when you have static
addressing.  We'll look at dynamic addressing below.
</para>

<para>Finally, the last line tells <emphasis>ppp</emphasis> to set a default route on this
interface when the line comes up.  <emphasis>HISADDR</emphasis> is a keyword specifying the
other end of the link.
</para>
</sect2>
<sect2>
<title>Negotiation</title>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
As we saw on page <xref linkend="CFBSD-first-stone"/>, you need to decide who starts negotiation.
By default, User PPP starts negotiation.  If the other end needs to start
negotiation, add the following line to your <emphasis>/etc/ppp/ppp.conf</emphasis>:
</para>
<programlisting>
 set openmode passive
</programlisting>

<para>User PPP uses four keywords to specify how to negotiate:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>enable</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>enable</emphasis> a feature means: ``request this feature''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>disable</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>disable</emphasis> a feature means: ``do not request this feature''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>accept</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>accept</emphasis> a feature means: ``if the other side requests this feature,
accept it''.
</para>
</listitem>
<listitem>

<para><indexterm><primary>deny</primary><secondary>PPP negotiation</secondary></indexterm>
<indexterm><primary>PPP</primary><secondary>negotiation</secondary></indexterm>
To <emphasis>deny</emphasis> a feature means: ``if the other side requests this feature,
refuse it''.
</para>
</listitem>
</itemizedlist>

<para>We'll see examples of this in the following sections.
</para>
</sect2>
<sect2>
<title>Requesting LQR</title>

<para>By default, User PPP disables LQR, since it has been found to cause problems
under certain circumstances, but it accepts it.  If you want to enable it,
include the following line in your dial entry:
</para>
<programlisting>
 enable lqr
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Authentication</title>

<para><anchor id="CFBSD-BigBird"/>
<indexterm><primary>PAP</primary></indexterm>
<indexterm><primary>CHAP</primary></indexterm>
The configuration file syntax is the same for <emphasis>PAP</emphasis> and <emphasis>CHAP</emphasis>.
Normally, your ISP assigns you both system name and authorization key.  Assuming
your system name is <emphasis>BigBird</emphasis>, and your key is <emphasis>X4dWg9327</emphasis>, you would
include the following lines in your configuration entry:
</para>
<programlisting>
 set authname BigBird
 set authkey  X4dWg9327
</programlisting>

<para>User PPP accepts requests for PAP and CHAP authentication automatically, so this
is all you need to do unless you intend to authenticate the other end, which is
not normal with ISPs.
</para>
<sect3>
<title>/etc/ppp/ppp.secret</title>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.secret</primary></indexterm>
The PPP system name and authentication key for PAP or CHAP are important data.
Anybody who has this information can connect to your ISP and use the service at
your expense.  Of course, you should set the permissions of your
<emphasis>/etc/ppp/ppp.conf</emphasis> to <emphasis>-r--------</emphasis> and the owner to <emphasis>root</emphasis>,
but it's easy and costly to make a mistake when changing the configuration.
There is an alternative: store the keys in the file <emphasis>/etc/ppp/ppp.secret</emphasis>.
<!--  XXX must use this on dial-in -->
Here's a sample:
</para>
<programlisting>
# Sysname	Secret Key	Peer's IP address
oscar		OurSecretKey	192.244.184.34/24
BigBird		X4dWg9327	192.244.184.33/32
gw		localPasswdForControl
</programlisting>

<para>There are a few things to note here:
</para>
<itemizedlist>
<listitem>

<para>As usual, lines starting with <emphasis>#</emphasis> are comments.
</para>
</listitem>
<listitem>

<para>The other lines contain three values: the system name, the authentication key,
and possibly an IP address.
</para>
</listitem>
<listitem>

<para>The last line is a password for connecting to the <emphasis>ppp</emphasis> process locally:
you can connect to the process by starting:
</para>
<programlisting>
# <command>telnet localhost 3000</command>
</programlisting>

<para>The local password entry matches the host name.  See the man page <emphasis>ppp(8)</emphasis>
for further details.
</para>
</listitem>
</itemizedlist>

<para>We'll look at the IP address in the next section.
</para>
</sect3>
</sect2>
<sect2>
<title>Dynamic IP configuration</title>

<para><anchor id="CFBSD-dynamic-ppp"/>
If you have to accept dynamic IP addresses, User PPP can help.  In fact, it
provides fine control over which addresses you accept and which you do not.  To
allow negotiation of IP addresses, you specify how many bits of the IP addresses
at each end are of interest to you.  In the example above, we specified them
exactly (static addresses):
</para>
<programlisting>
 set ifaddr 139.130.136.133  139.130.136.129
</programlisting>

<para>If you have to accept dynamic addressing, you can normally maintain some control
over the addressing (in order to ensure that the addresses assigned don't
conflict with other network connections, for example).  The addresses which are
assigned to you when the link comes up are almost invariably part of a single
subnet.  You can specify that subnet and allow negotiation of the host part of
the address.  For example, you may say ``I don't care what address I get, as
long as the first three bytes are <emphasis>139.130.136</emphasis>, and the address at the
other end starts with <emphasis>139</emphasis>''.  You can do this by specifying the number
of bits that interest you after the address:
</para>
<programlisting>
 set ifaddr 139.130.136.133/24  139.130.136.129/8
</programlisting>

<para>This says that you would prefer the addresses you state, but that you require
the first 24 bits of the local interface address and the first eight bits of the
remote interface address to be as stated.
</para>

<para>If you really don't care which address you get, you can specify this fact by
specifying local IP address as 0:
</para>
<programlisting>
 set ifaddr 0 0
</programlisting>

<para>If you do this, you can't use the <emphasis>-auto</emphasis> modes, since you need to send a
packet to the interface in order to trigger dialling.  Use one of the previous
methods in this situation.
</para>
</sect2>
<sect2>
<title>Running User PPP</title>

<para>After setting up your PPP configuration, run it like this:
</para>
<programlisting>
$ <command>ppp</command>
User Process PPP. Written by Toshiharu OHNO.
Using interface: tun0
Interactive mode
Warning: No password entry for this host in ppp.secret
Warning: Manipulation is allowed by anyone
ppp ON freebie&gt; <command>dial ISP</emphasis>				<emphasis>this is the name of the entry in ppp.conf</command>
Dial attempt 1 of 1
Phone: 1234567						<emphasis>the phone number</emphasis>
dial OK!							<emphasis>modem connection established</emphasis>
login OK!							<emphasis>authentication complete</emphasis>
ppp ON freebie&gt; Packet mode.			<emphasis>PPP is running</emphasis>
ppp ON freebie&gt;
PPP ON freebie&gt;						<emphasis>and the network connection is complete</emphasis>
</programlisting>

<para>You'll notice that the prompt (<emphasis>ppp</emphasis>) changes to upper case (<emphasis>PPP</emphasis>)
when the connection is up and running.  At the same time, <emphasis>ppp</emphasis> writes
some messages to the system log:
</para>
<programlisting>
Sep  2 15:12:38 freebie ppp[23679]: Phase: Using interface: tun0
Sep  2 15:12:38 freebie ppp[23679]: Phase: PPP Started.
Sep  2 15:12:47 freebie ppp[23679]: Phase: Phone: 1234567
Sep  2 15:13:08 freebie ppp[23679]: Phase: *Connected!
Sep  2 15:13:11 freebie ppp[23679]: Phase: NewPhase: Authenticate
Sep  2 15:13:11 freebie ppp[23679]: Phase:  his = c223, mine = 0
Sep  2 15:13:11 freebie ppp[23679]: Phase:  Valsize = 16, Name = way3.Adelaide
Sep  2 15:13:11 freebie ppp[23679]: Phase: NewPhase: Network
Sep  2 15:13:11 freebie ppp[23679]: Phase: Unknown protocol 0x8207
Sep  2 15:13:11 freebie ppp[23679]: Link:  myaddr = 139.130.136.133  hisaddr = 139.1
30.136.129
Sep  2 15:13:11 freebie ppp[23679]: Link: OsLinkup: 139.130.136.129
Sep  2 15:14:11 freebie ppp[23679]: Phase: HDLC errors -&gt; FCS: 0 ADDR: 0 COMD: 0 PRO
TO: 1
</programlisting>

<para>You'll notice a couple of messages there which look like errors.  In fact,
they're not: <emphasis>Unknown protocol 0x8207</emphasis> means that the other end requested
a protocol which <emphasis>ppp</emphasis> doesn't know (and, in fact, is not in the RFCs.
This is a real example, and the protocol is in fact Novell's IPX).  The other
message is <emphasis>HDLC errors -&gt; FCS: 0 ADDR: 0 COMD: 0 PROTO: 1</emphasis>.  In fact,
this relates to the same ``problem''.
</para>
</sect2>
<sect2>
<title>How long do we stay connected?</title>

<para>Now our PPP connection is up and running.  How do we stop it again?  There are
two possibilities:
</para>
<itemizedlist>
<listitem>

<para>To stop the connection, but to leave the <emphasis>ppp</emphasis> process active, enter
<emphasis>close</emphasis>:
</para>
<programlisting>
PPP ON freebie&gt; <command>close</command>
ppp ON freebie&gt;
</programlisting>

<para></para>
</listitem>
<listitem>

<para>To stop the connection and the <emphasis>ppp</emphasis> process, enter <emphasis>q</emphasis> or
<emphasis>quit</emphasis>:
</para>
<programlisting>
PPP ON freebie&gt; <command>q</command>
#
</programlisting>

<para><indexterm><primary>idle</primary><secondary>timeout</secondary></indexterm>
<indexterm><primary>timeout</primary><secondary>idle</secondary></indexterm>
There are a couple of problems with this method: first, a connection to an ISP
usually costs money in proportion to the time you are connected, so you don't
want to stay connected longer than necessary.  On the other hand, you don't want
the connection to drop while you're using it.  User PPP approaches these
problems with a compromise: when the line has been idle for a certain time (in
other words, when no data has gone in either direction during this time), it
disconnects.  This time is called the <emphasis>idle timeout</emphasis>, and by default it is
set to 180 seconds.  You can set it explicitly:
</para>
<programlisting>
 set timeout 300
</programlisting>

<para>This sets the idle timeout to 300 seconds (5 minutes).
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Automating the process</title>

<para>Finally, setting up the connection this way takes a lot of time.  You can
automate it in a number of ways:
</para>
<itemizedlist>
<listitem>

<para>If you have a permanent connection, you can tell User PPP to stay up all the
time.  Use the <emphasis>-ddial</emphasis> modifier:
</para>
<programlisting>
$ <command>ppp -ddial ISP</command>
</programlisting>

<para>This version dials immediately and keeps the connection up regardless of whether
traffic is passing or not.
</para>
</listitem>
<listitem>

<para>If you want to be able to connect to the net automatically whenever you have
something to say, use the <emphasis>-auto</emphasis> modifer:
</para>
<programlisting>
$ <command>ppp -auto ISP</command>
</programlisting>

<para>In this case, User PPP does not dial immediately.  As soon as you attempt to
send data to the net, however, it dials automatically.  When the line has been
idle for the idle timeout period, it disconnects again and wait for more data
before dialling.  This only makes sense for static addresses or when you know
that no IP connections remain alive after the line disconnects.
</para>
</listitem>
<listitem>

<para>Finally, you can just write
</para>
<programlisting>
$ <command>ppp -background ISP</command>
</programlisting>

<para>The <emphasis>-background</emphasis> option tells User PPP to dial immediately and stay in
the background.  After the idle timeout period, the User PPP process disconnects
and exits.  If you want to connect again, you must restart the process.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Configuration summary</title>

<para><anchor id="CFBSD-ppp-quick-setup"/>
<indexterm><primary>CHAP</primary></indexterm>
<indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
To summarize the examples above: let's assume that the reference network on page
<xref linkend="CFBSD-reference-net-page"/> uses <emphasis>CHAP</emphasis> authentication, and we have to initiate.  The
<emphasis>/etc/ppp/ppp.conf</emphasis> for would look like:
</para>
<programlisting>
default:
 set device /dev/cuaa1			<emphasis>device to use</emphasis>
 set speed 115200				<emphasis>connect at 115,200 bps</emphasis>
 set dial "ABORT BUSY ABORT NO\e\esCARRIER TIMEOUT 5 \e"\e" AT \e
           OK-AT-OK ATE1Q0 OK \e\edATDT\e\eT TIMEOUT 40 CONNECT"
ISP:
 set phone 1234567				<emphasis>phone number to call</emphasis>
 set login "TIMEOUT 5 login:-\e\er-login: ppp word: qqq"  <emphasis>how to log in</emphasis>
 set timeout 120				<emphasis>disconnect after 120 seconds idle time</emphasis>
 set ifaddr 139.130.136.133  139.130.136.129
 add default HISADDR
 accept chap
 deny pap
 disable chap
 disable pap
 set authname BigBird
 set authkey  X4dWg9327
</programlisting>

<para><indexterm><primary>/etc/ppp/ppp.conf</primary></indexterm>
If you have to use dynamic addressing, the only thing that changes is the
<emphasis>set ifaddr</emphasis> line, so your <emphasis>/etc/ppp/ppp.conf</emphasis> looks like:
</para>
<programlisting>
default:
 set device /dev/cuaa1			<emphasis>device to use</emphasis>
 set speed 115200				<emphasis>connect at 115,200 bps</emphasis>
 set dial "ABORT BUSY ABORT NO\e\esCARRIER TIMEOUT 5 \e"\e" AT \e
           OK-AT-OK ATE1Q0 OK \e\edATDT\e\eT TIMEOUT 40 CONNECT"
ISP:
 set phone 1234567				<emphasis>phone number to call</emphasis>
 set login "TIMEOUT 5 login:-\e\er-login: ppp word: qqq"  <emphasis>how to log in</emphasis>
 set timeout 120				<emphasis>disconnect after 120 seconds idle time</emphasis>
 set ifaddr 0 0
 add default HISADDR				<emphasis>negotiate the addresses</emphasis>
 accept chap
 deny pap
 disable chap
 disable pap
 set authname BigBird
 set authkey  X4dWg9327
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Setting up Kernel PPP</title>

<para><anchor id="CFBSD-kernel-ppp"/>
It makes more sense to run PPP in the kernel than in user space, since it's more
efficient and theoretically less prone to error.  Until recently the
implementation had many fewer features than User PPP, so it is not used as much.
</para>

<para><indexterm><primary>~/.ppprc</primary></indexterm>
The configuration files for Kernel PPP are in the same directory as the
User PPP configuration files.  You can also set up your own <emphasis>~/.ppprc</emphasis>
file, though I don't recommend this: PPP is a system function and should not be
manipulated at the user level.
</para>

<para><!--  Following text thanks to Daniel J. O'Connor &lt;darius@senet.com.au&gt; -->
<indexterm><primary>pppd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>pppd</secondary></indexterm>
Kernel PPP uses a d&aelig;gmon called <emphasis>pppd</emphasis> to monitor the line when it is
active.  Kernel PPP interface names start with <emphasis>ppp</emphasis> followed by a number.
You need one for each concurrent link.  You can check for them with <emphasis>ifconfig
-a</emphasis>:
</para>
<programlisting>
# <command>ifconfig -a</emphasis>					<emphasis>show the configuration of all interfaces</command>
ze0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        inet 223.147.37.1 netmask 0xffffff00 broadcast 223.147.37.255
        ether 00:00:c0:44:a5:68
lp0: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST&gt; mtu 1500
tun0: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500
        inet 111.111.111.111 --&gt; 112.222.222.222 netmask 0xff000000
	inet 139.130.136.133 --&gt; 139.130.136.129 netmask 0xffffffff
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 552
<command>ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
ppp1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500</command>
lo0: flags=8008&lt;LOOPBACK,MULTICAST&gt; mtu 16384
        inet 127.0.0.1 netmask 0xff000000
</programlisting>

<para>This system has two <emphasis>ppp</emphasis> interfaces, called <emphasis>ppp0</emphasis> and <emphasis>ppp1</emphasis>,
so it is capable of maintaining two PPP connections at the same time.
</para>

<para>To modify the number of interfaces, change the value in the kernel configuration
file and then rebuild the kernel.  For example, for four PPP interfaces you need
to have the following line in the kernel configuration file:
</para>
<programlisting>
pseudo-device   ppp     <command>4</command>
options PPP_BSDCOMP			#PPP BSD-compress support
options PPP_DEFLATE			#PPP zlib/deflate/gzip support
</programlisting>

<para>In FreeBSD version 3.0 and later, specify the options <emphasis>PPP_BSDCOMP</emphasis> and
<emphasis>PPP_DEFLATE</emphasis> to enable two kinds of compression.  You'll also need to
specify the corresponding option in Kernel PPP's configuration file.  These
options are not available in FreeBSD version 2.
</para>

<para><indexterm><primary>/etc/ppp/options</primary></indexterm>
When Kernel PPP starts, it reads its configuration from the file
<emphasis>/etc/ppp/options</emphasis>.  Here is a typical example:
</para>
<programlisting>
# Options file for PPPD
defaultroute					<emphasis>set the default route here when the line comes up</emphasis>
crtscts						<emphasis>use hardware flow control</emphasis>
modem							<emphasis>use modem control lines</emphasis>
deflate 12,12					<emphasis>use deflate compression</emphasis>
user FREEBIE					<emphasis>our name (index in password file)</emphasis>
lock							<emphasis>create a UUCP lock file</emphasis>
</programlisting>

<para>This is quite a short file, but it's full of interesting stuff:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>defaultroute</emphasis> line tells the Kernel PPP to place a default route to
the destination IP after it establishes a connection.
</para>
</listitem>
<listitem>

<para>The <emphasis>crtscts</emphasis> line tells it to use hardware flow control (necessary to
prevent loss of characters).  You could also specify <emphasis>xonxoff</emphasis>, which uses
software flow control, but hardware flow control is preferable.
</para>
</listitem>
<listitem>

<para><indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
The <emphasis>modem</emphasis> line says to monitor the modem <emphasis>DCD</emphasis> (Carrier detect)
line.  If the connection is lost without proper negotiation, the only way that
Kernel PPP can know about it is because of the drop in <emphasis>DCD</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>deflate</primary><secondary>compression</secondary></indexterm>
<indexterm><primary>compression</primary><secondary>deflate</secondary></indexterm>
The line <emphasis>deflate</emphasis> tells Kernel PPP to request <emphasis>deflate</emphasis>
compression, which can increase the effective bandwidth.  This only works if
your kernel has been built with the <emphasis>PPP_DEFLATE</emphasis> option&mdash;see above.
</para>
</listitem>
<listitem>

<para>The <emphasis>user</emphasis> line tells Kernel PPP the user ID to use.  If you don't specify
this, it takes the system's name.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-UUCP-lock-file"/>
<emphasis>lock</emphasis> tells Kernel PPP to create a UUCP-style lock on the serial line.
This prevents other programs, such as <emphasis>getty</emphasis>, from trying to open the line
while it is running PPP.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Dialling</title>

<para><indexterm><primary>chat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chat</secondary></indexterm>
<indexterm><primary>kermit</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>kermit</secondary></indexterm>
Kernel PPP does not perform dialling, so you need to start a program which does
the dialling.  In the following example, we use <emphasis>chat</emphasis>, a program derived
from UUCP which is intended exactly for this purpose.  Some people use
<emphasis>kermit</emphasis>, which is in fact a complete communications program for a PC
protocol, to perform this function, but this requires manual intervention.
<emphasis>chat</emphasis> does the whole job for you.
</para>
<sect3>
<title>Chat scripts</title>

<para><anchor id="CFBSD-chat-script"/>
<indexterm><primary>chat</primary><secondary>script</secondary></indexterm>
<indexterm><primary>script</primary><secondary>chat</secondary></indexterm>
<indexterm><primary>expect</primary><secondary>string</secondary></indexterm>
<indexterm><primary>chat</primary><secondary>expect string</secondary></indexterm>
<indexterm><primary>send</primary><secondary>string</secondary></indexterm>
<indexterm><primary>chat</primary><secondary>send string</secondary></indexterm>
<emphasis>chat</emphasis> uses a <emphasis>chat script</emphasis> to define the functions to perform when
establishing a connection.  See the man page <emphasis>chat(8)</emphasis> for further
details.  The chat script consists primarily of alternate <emphasis>expect strings</emphasis>,
which <emphasis>chat</emphasis> waits to receive, followed by <emphasis>send</emphasis> strings, which
<emphasis>chat</emphasis> sends when it receives the <emphasis>expect</emphasis> string.
</para>

<para><indexterm><primary>/etc/ppp/dial.chat</primary></indexterm>
In addition to these strings, the chat script can contain other commands.  To
confuse things, they are frequently written on a single line, though this is not
necessary: <emphasis>chat</emphasis> does not pay any attention to line breaks.  Our chat
script, which we store in <emphasis>/etc/ppp/dial.chat</emphasis>, looks more intelligible
written in the following manner:
</para>
<programlisting>
# Abort the chat script if the modem replies BUSY or NO CARRIER
ABORT BUSY
ABORT 'NO CARRIER'
# Wait up to 5 seconds for the reply to each of these
TIMEOUT 5
\&amp;'' ATZ
OK ATDT1234567
# Wait 40 seconds for connection
TIMEOUT 40
CONNECT
TIMEOUT 5
gin:-\e\er-gin: <emphasis>username</emphasis>
sword: <emphasis>password</emphasis>
</programlisting>

<para>This script first tells <emphasis>chat</emphasis> to abort dial-up on a <emphasis>BUSY</emphasis> or
<emphasis>NO CARRIER</emphasis> response from the modem.  The next line waits for nothing
(<emphasis>''</emphasis>) and resets the modem with the command <emphasis>ATZ</emphasis>.  The following
line waits for the modem to reply with <emphasis>OK</emphasis>, and dials the ISP.
</para>

<para>Call setup can take a while, almost always more than five seconds for real
(analogue) modems, so we need to extend the timeout, in this case to 40 seconds.
During this time we must get the reply <emphasis>CONNECT</emphasis> from the modem.
</para>

<para>Next, we reset the timeout to five seconds and perform <emphasis>login</emphasis>
authentication.  It's important to reset the timeout, because otherwise a login
failure takes 40 seconds to complete.  Replace <emphasis>username</emphasis> and
<emphasis>password</emphasis> with your real user name and password.  The sequence
<emphasis>gin:-\e\er-gin:</emphasis> is a shorthand for ``expect <emphasis>gin:</emphasis>.  If you don't
get it, send <emphasis>\e\er</emphasis> and expect <emphasis>gin:</emphasis>''.  The string <emphasis>gin:</emphasis>
is, of course, the end of the <emphasis>login:</emphasis> prompt.
</para>
</sect3>
</sect2>
<sect2>
<title>Who throws the first stone?</title>

<para><indexterm><primary>/etc/ppp/options</primary></indexterm>
On page <xref linkend="CFBSD-first-stone"/> we saw how to specify whether we should start
negotiating or whether we should wait for the other end to start.  By default,
Kernel PPP starts negotiation.  If you want the other end to start, add the
keyword <emphasis>passive</emphasis> in your <emphasis>/etc/ppp/options</emphasis> file.
</para>
</sect2>
<sect2>
<title>Authentication</title>

<para><indexterm><primary>CHAP</primary></indexterm>
<indexterm><primary>PAP</primary></indexterm>
<indexterm><primary>/etc/ppp/chap-secrets</primary></indexterm>
<indexterm><primary>/etc/ppp/pap-secrets</primary></indexterm>
The previous example assumed <emphasis>login</emphasis> authentication.  As we have seen,
more and more ISPs are expecting <emphasis>CHAP</emphasis> or <emphasis>PAP</emphasis> authentication.  To
do this, create a file <emphasis>/etc/ppp/chap-secrets</emphasis> for <emphasis>CHAP</emphasis>, or
<emphasis>/etc/ppp/pap-secrets</emphasis> for <emphasis>PAP</emphasis>.  The format of either file is:
</para>
<programlisting>
<emphasis>username  systemname  password</emphasis>
</programlisting>

<para>To match any system name, set <emphasis>systemname</emphasis> to <emphasis>*</emphasis>.  For example, to
authenticate the <emphasis>BigBird</emphasis> we saw on page <xref linkend="CFBSD-BigBird"/>, we would enter the
following in the file:
</para>
<programlisting>
BigBird * X4dWg9327
</programlisting>

<para>In addition, you should add a <emphasis>domain</emphasis> line to specify your domain for
authentication purposes:
</para>
<programlisting>
domain example.org
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Dynamic IP configuration</title>

<para><indexterm><primary>/etc/ppp/conf</primary></indexterm>
By default, Kernel PPP performs dynamic address negotiation, so you don't need
to do anything special for dynamic IP.  If you have static addresses, add the
following line to <emphasis>/etc/ppp/conf</emphasis>:
</para>
<programlisting>
139.130.136.133:139.130.136.129
</programlisting>

<para>These are the addresses which you would use on machine <emphasis>gw.example.org</emphasis> to
set up the PPP link in the middle of Figure <xref linkend="CFBSD-reference-net"/> on page
<xref linkend="CFBSD-reference-net-page"/>.  The first address is the local end of the link (the
address of the <emphasis>ppp<emphasis>n</emphasis></emphasis> device), and the second is the address of
the remote machine (<emphasis>free-gw.example.net</emphasis>).
</para>
</sect2>
<sect2>
<title>Setting the default route</title>

<para>By default, kernel PPP assigns a default route when it brings up a line.  If you
don't want this to happen, specify the <emphasis>nodefaultroute</emphasis> option.
</para>
</sect2>
<sect2>
<title>Running Kernel PPP</title>

<para><indexterm><primary>pppd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>pppd</secondary></indexterm>
To run <emphasis>pppd</emphasis>, enter:
</para>
<programlisting>
# <command>pppd /dev/cuaa1 115200 connect 'chat -f /etc/ppp/dial.chat' user username</command>
</programlisting>

<para>This starts Kernel PPP on the serial line <emphasis>/dev/cuaa1</emphasis> at 115,200 bps.  The
option <emphasis>connect</emphasis> tells Kernel PPP that the following argument is the name
of a <emphasis>program</emphasis> to execute: it runs <emphasis>chat</emphasis> with the options <emphasis>-f
/etc/ppp/dial.chat</emphasis>, which tells <emphasis>chat</emphasis> the name of the chat file.
Finally, <emphasis>username</emphasis> tells Kernel PPP the user name to use for
authentication.
</para>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
After you run <emphasis>pppd</emphasis> with these arguments, the modem starts dialling and
then negotiates a connection with your provider, which should complete within 30
seconds.  During negotiation, you can observe progress with the <emphasis>ifconfig</emphasis>
command:
</para>
<programlisting>
$ <command>ifconfig ppp0</command>
ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
	<emphasis>\&amp;at this point, the interface has not yet started</emphasis>
$ <command>ifconfig ppp0</command>
ppp0: flags=8810&lt;POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500
	<emphasis>\&amp;now the interface has been started</emphasis>
$ <command>ifconfig ppp0</command>
ppp0: flags=8811&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 150
        inet 139.130.136.133 --&gt; 139.130.136.129 netmask 0xffffffff
	<emphasis>\&amp;now the connection has been established</emphasis>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Automating the process</title>

<para>You can automate connection setup and disconnection in a number of ways:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/ppp/options</primary></indexterm>
If you have a permanent connection, you can tell Kernel PPP to stay up all the
time.  Add the following line to <emphasis>/etc/ppp/options</emphasis>:
</para>
<programlisting>
persist
</programlisting>

<para>If this option is set, Kernel PPP dials immediately and keeps the connection up
regardless of whether traffic is passing or not.
</para>
</listitem>
<listitem>

<para>If you want to be able to connect to the net automatically whenever you have
something to say, use the <emphasis>demand</emphasis> option:
</para>
<programlisting>
demand
</programlisting>

<para>In this case, Kernel PPP does not dial immediately.  As soon as you attempt to
send data to the net, however, it dials automatically.  When the line has been
idle for the idle timeout period, it disconnects again and waits for more data
before dialling.
</para>
</listitem>
<listitem>

<para>Finally, you can start Kernel PPP without either of these options.  In this
case, you are connected immediately.  After the idle timeout period, Kernel PPP
disconnects and exits.  If you want to connect again, you must restart the
process.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Timeout parameters</title>

<para>A number of options specify when Kernel PPP should dial and disconnect:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/ppp/options</primary></indexterm>
The <emphasis>idle</emphasis> parameter tells Kernel PPP to disconnect if the line has been
idle for the specified number of seconds, and if <emphasis>persist</emphasis> (see above) has
not been specified.  For example, to disconnect after five minutes, you could
add the following line to the /<emphasis>/etc/ppp/options</emphasis> file:
</para>
<programlisting>
idle 300
</programlisting>

<para></para>
</listitem>
<listitem>

<para>The <emphasis>active-filter</emphasis> parameter may soon be implemented in FreeBSD.  It
specifies which packets are counted when determining whether the line is idle.
</para>
</listitem>
<listitem>

<para>The <emphasis>holdoff</emphasis> parameter tells Kernel PPP how long to wait before
redialling when the line has been disconnected for reasons other than being
idle.  If the line is disconnected because it was idle, and you have specified
<emphasis>demand</emphasis>, it dials as soon as the next valid packet is received.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Configuration summary</title>

<para><anchor id="CFBSD-pppd-quick-setup"/>
To summarize the examples above, we'll show the Kernel PPP versions of the
examples on page <xref linkend="CFBSD-ppp-quick-setup"/>.  As before, we assume that the reference
network on page <xref linkend="CFBSD-reference-net-page"/> uses <emphasis>CHAP</emphasis> authentication, and we
have to initiate.  The <emphasis>/etc/ppp/options</emphasis> looks like:
</para>
<programlisting>
# Options file for PPPD
crtscts							<emphasis>use hardware flow control</emphasis>
modem								<emphasis>use modem control lines</emphasis>
domain example.org					<emphasis>specify your domain name</emphasis>
persist							<emphasis>stay up all the time</emphasis>
user FREEBIE						<emphasis>name to present to ISP</emphasis>
139.130.136.133:139.130.136.129			<emphasis>specify IP addresses of link</emphasis>
idle 120							<emphasis>disconnect after two minutes idle time</emphasis>
</programlisting>

<para><indexterm><primary>/etc/ppp/dial.chat</primary></indexterm>
<emphasis>/etc/ppp/dial.chat</emphasis> is unchanged from the example on page
<xref linkend="CFBSD-chat-script"/>:
</para>
<programlisting>
# Abort the chat script if the modem replies BUSY or NO CARRIER
ABORT BUSY
ABORT 'NO CARRIER'
# Wait up to 5 seconds for the reply to each of these
TIMEOUT 5
\&amp;'' ATZ
OK ATDT1234567
# Wait 40 seconds for connection
TIMEOUT 40
CONNECT
TIMEOUT 5
gin:-\e\er-gin: <emphasis>username</emphasis>
sword: <emphasis>password</emphasis>
</programlisting>

<para><indexterm><primary>/etc/ppp/chap-secrets</primary></indexterm>
<emphasis>/etc/ppp/chap-secrets</emphasis> contains:
</para>
<programlisting>
BigBird * X4dWg9327
</programlisting>

<para><indexterm><primary>PAP</primary></indexterm>
<indexterm><primary>/etc/pap-secrets</primary></indexterm>
With Kernel PPP, there's no need to disable <emphasis>PAP</emphasis>: that happens
automatically if it can't find an authentication for <emphasis>BigBird</emphasis> in
<emphasis>/etc/pap-secrets</emphasis>.
</para>

<para><indexterm><primary>/etc/ppp/options</primary></indexterm>
The change for dynamic addressing is even simpler: remove the line with the IP
addresses from the <emphasis>/etc/ppp/options</emphasis> file:
</para>
<programlisting>
# Options file for PPPD
crtscts							<emphasis>use hardware flow control</emphasis>
modem								<emphasis>use modem control lines</emphasis>
domain example.org					<emphasis>specify your domain name</emphasis>
persist							<emphasis>stay up all the time</emphasis>
user FREEBIE						<emphasis>name to present to ISP</emphasis>
defaultroute						<emphasis>make this the default route</emphasis>
idle 120							<emphasis>disconnect after two minutes idle time</emphasis>
</programlisting>

<para><indexterm><primary>/etc/ppp/dial.chat</primary></indexterm>
Nowadays, login authentication is becoming less and less common.  If you don't
need it, remove the last few lines from <emphasis>/etc/ppp/dial.chat</emphasis>:
</para>
<programlisting>
# Abort the chat script if the modem replies BUSY or NO CARRIER
ABORT BUSY
ABORT 'NO CARRIER'
# Wait up to 5 seconds for the reply to each of these
TIMEOUT 5
\&amp;'' ATZ
OK ATDT1234567
# Wait 40 seconds for connection
TIMEOUT 40
CONNECT
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Dialin PPP</title>

<para>So far, we've looked at how to use PPP to dial in to another system.  It's also
possible to use both User and Kernel PPP to service dial-ins.  The manner in
which this is done is currently undergoing revision, so there's no point in
describing the method here.  See the online handbook for current details.

</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchslip"><title>UUCP and SLIP</title>

<para><indexterm><primary>UUCP</primary></indexterm>
<indexterm><primary>SLIP</primary></indexterm>
Before the advent of <emphasis>PPP</emphasis>, two other protocols were available for
connection to an Internet host: <emphasis>UUCP</emphasis> and <emphasis>SLIP</emphasis>.  They're both poor
seconds to <emphasis>PPP</emphasis>, but they each have a few advantages.  In this chapter,
we'll look at how to use these advantages.  We'll look at UUCP first, and on
page <xref linkend="CFBSD-SLIP"/> we'll look at SLIP.  First, however, we'll consider
authentication, which is the same for both protocols.
</para>
<sect1>
<title>Login authentication</title>

<para><indexterm><primary>authentication</primary><secondary>login</secondary></indexterm>
<indexterm><primary>login</primary><secondary>authentication</secondary></indexterm>
<emphasis>Authentication</emphasis> is the process of convincing the system into which you
are dialling that you are authorized to use the system.  It usually also sets
default values for the session.  As we have seen in <xref linkend="CFBSD-chppp"/>, PPP provides two
special kinds of authorization, <emphasis>PAP</emphasis> and <emphasis>CHAP</emphasis>.
</para>

<para>UUCP and SLIP do not support PPP's authentication scheme.  You have to log in as
a UNIX user.  The exact manner differs slightly between UUCP and SLIP:
</para>
<itemizedlist>
<listitem>

<para>UUCP is considered a system function, and it has a special user name
<emphasis>uucp</emphasis>.  Nevertheless, it's customary to have alias names for each system,
since the name determines where the data is stored, and what access rights the
system has.  For example, we might create a user <emphasis>Ufreebie</emphasis> for system
<emphasis>freebie</emphasis>, with the same user number as <emphasis>uucp</emphasis>.
</para>
</listitem>
<listitem>

<para>SLIP users frequently log in as a user rather than a system.  There are two
common possibilities:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para><indexterm><primary>sliplogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sliplogin</secondary></indexterm>
Log in as yourself, get a shell, and start <emphasis>sliplogin</emphasis>.
</para>
</listitem>
<listitem>

<para>Use the UUCP approach and create a second user ID with the same user number, and
set the shell to <emphasis>sliplogin</emphasis>.
</para>
</listitem>
</orderedlist>
In the SLIP examples, we'll use the second approach.
</itemizedlist>

<para></para>
<sect2>
<title>Adding the users</title>

<para><anchor id="CFBSD-add-SLIP-user"/>
<indexterm><primary>Lehey</primary><secondary>Norman</secondary></indexterm>
<indexterm><primary>/etc/master.passwd</primary></indexterm>
<indexterm><primary>vipw</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vipw</secondary></indexterm>
Let's start with the user <emphasis>norm</emphasis> from the example of
<emphasis>/etc/master.passwd</emphasis> on page <xref linkend="CFBSD-vipw"/>.  We'll use <emphasis>vipw</emphasis> to add a
second user <emphasis>Snorm</emphasis> for running SLIP, and a second user <emphasis>Ufreebie</emphasis>
for UUCP:
</para>
<programlisting>
uucp:*:66:66::0:0:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
<command>Ufreebie:*:66:66::0:0:UUCP from freebie:/var/spool/uucppublic:/usr/libexec/uucp/uucico</command>
norm::1021:1001::0:0:Norm, Beach of Passionate Love:/home/norm:/bin/bash
<command>Snorm::1021:1001::0:0:Norm, Beach of Passionate Love:/home/norm:/usr/sbin/sliplogin
</command></programlisting>

<para>Don't forget to set passwords for the new users when you're finished.  For
example:
</para>
<programlisting>
# <command>passwd Ufreebie</command>
Changing local password for Ufreebie.
New password:					<emphasis>doesn't echo</emphasis>
Retype new password:				<emphasis>still doesn't echo</emphasis>
passwd: rebuilding the database...
passwd: done
</programlisting>

<para>To check them, use <emphasis>su</emphasis>.  Make sure you're <emphasis>not</emphasis> root at the time, so
you have to enter a password.  For UUCP, you should see:
</para>
<programlisting>
$ <command>su Ufreebie</command>
Password:						<emphasis>doesn't echo</emphasis>
\(rnShere=uucphost					<emphasis>uucico prompt</emphasis>
</programlisting>

<para><indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
The message comes from <emphasis>uucico</emphasis>, which is looking for a partner.  You can't
stop the <emphasis>uucico</emphasis>.  After about a minute, it will get bored and go away.
</para>

<para>For SLIP, you should see <emphasis>one</emphasis> of the following error messages:
<anchor id="CFBSD-sliplogin-test"/>
</para>
<programlisting>
# <command>su Snorm</command>
Password:
su[1871]: /etc/sliphome/slip.hosts: No such file or directory
su[1871]: SLIP access denied for grog
</programlisting>

<para><indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
You get the first error message if you have not yet created the file
<emphasis>/etc/sliphome/slip.hosts</emphasis>, which is normal at this point.  If you have
already created it, you get the second error message.  This message specifies
user <emphasis>grog</emphasis>, not <emphasis>Snorm</emphasis>, since <emphasis>su</emphasis> doesn't change the user
ID.
</para>
</sect2>
</sect1>
<sect1>
<title>UUCP</title>

<para><indexterm><primary>UUCP</primary></indexterm>
<indexterm><primary>UNIX</primary><secondary>to UNIX copy</secondary></indexterm>
<indexterm><primary>bang</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>bang</secondary></indexterm>
<indexterm><primary>USENET</primary></indexterm>
Before the days of the Internet, UNIX machines communicated with the
<emphasis>UUCP</emphasis> protocol, which stands for <emphasis>UNIX to UNIX copy</emphasis>.  It's a much
more primitive protocol than IP, and has been largely superseded.  In
particular, it didn't perform routing, so you had to specify your own route,
called a <emphasis>bang path</emphasis>.  It's only been relatively recently that <emphasis>USENET</emphasis>,
the network news network, has abandoned bang paths, and occasionally you'll see
things like this old news posting:
</para>
<programlisting>
<command>From adagio!unido!Germany.EU.net!mcsun!uunet!news.uiowa.edu!ns-mx!pyrite.cs.uiowa.edu
Wed Jul 29 17:01:27 MST 1992</command>
Article: 26600 of alt.folklore.computers
Path: adagio!unido!Germany.EU.net!mcsun!uunet!news.uiowa.edu!ns-mx!pyrite.cs.uiowa.edu
From: jones@pyrite.cs.uiowa.edu (Douglas W. Jones,201H MLH,3193350740,3193382879)
Newsgroups: comp.arch,alt.folklore.computers,comp.benchmarks
Subject: Re: dinosaur horsepower
Message-ID: &lt;13307@ns-mx.uiowa.edu&gt;
Date: 28 Jul 92 14:48:02 GMT
References: &lt;Bs3oGt.6vp@helios.physics.utoronto.ca&gt;
Sender: news@ns-mx.uiowa.edu
Followup-To: comp.arch
Lines: 32
Xref: adagio alt.folklore.computers:26600 comp.benchmarks:135

&gt;From article &lt;Bs3oGt.6vp@helios.physics.utoronto.ca&gt;,
by sysmark@helios.physics.utoronto.ca (Mark Bartelt):
&gt;
&gt; But, in general, I think it would be fun to see MIPS/MFlops (KIPS/KFlops?
&gt; IPS/Flops?) values (at least, moderately authoritative ballpark estimates)
&gt; for some of the machines we grew up with.

The IBM 701, in 1953, had a fundamental machine cycle time of 12us.  A
memory to accumulator add took 5 cycles (60us) and a multiply took 38
cycles.  IBM claimed an average instruction execution rate of 14,000
instructions per second.  This machine had a 36 bit word.
<emphasis>\&amp;...etc</emphasis>
</programlisting>

<para>The first line of this article shows the exact route taken for this message,
starting with the destination (<emphasis>adagio</emphasis>) and working back to the source
system (<emphasis>pyrite.cs.uiowa.edu</emphasis>).  Each system name is separated by an
exclamation mark (<emphasis>!</emphasis>), frequently called a <emphasis>bang</emphasis>.
</para>

<para>Bang paths are now completely obsolete, but it's nice to understand how they
work.  In particular, <emphasis>sendmail</emphasis> may still generate them.
</para>

<para>Why use UUCP at all?  There are still a couple of reasons:
</para>
<itemizedlist>
<itemizedlist>
<listitem>

<para>It's still used by a number of people who have been using the Internet since the
days before the World Wide Web.  They have systems which can't run IP, and
they're happy with the level of service they get from UUCP.
</para>
</listitem>
<listitem>

<para>UUCP can be faster than <emphasis>ftp</emphasis>.  In particular, Taylor UUCP, the one we use,
can transfer data in both directions at the same time, which is very useful for
mail.  If you're using an expensive serial link, you might find it preferable to
maximize your througput with UUCP.
</para>
</listitem>
</itemizedlist>

<para>Note that in each of these cases, we don't have to worry about routing UUCP.
It's always a point to point link.
</para>
<sect2>
<title>How UUCP works</title>

<para><indexterm><primary>network</primary><secondary>store and forward</secondary></indexterm>
<indexterm><primary>store</primary><secondary>and forward network</secondary></indexterm>
UUCP is a <emphasis>store and forward</emphasis> network.  Viewed from the point of a machine
<emphasis>uucphost</emphasis> which communicates with the system <emphasis>freebie</emphasis>,
<footnote>

<para>UUCP systems don't have domain names.  In this discussion, we're thinking of
system <emphasis>freebie</emphasis> in the reference network, but it identifies itself as
<emphasis>freebie</emphasis>, not <emphasis>freebie.example.net</emphasis>.
</para>
</footnote>
<indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>/var/spool/uucp/freebie</primary></indexterm>
it collects data to be sent to <emphasis>freebie</emphasis> in a directory
<emphasis>/var/spool/uucp/freebie</emphasis>.  The directory <emphasis>/var/spool/uucp/freebie</emphasis>
contains three subdirectories:
</para>
<itemizedlist>
<listitem>

<para><emphasis>/var/spool/uucp/freebie/C.</emphasis> contains files queued for sending.
</para>
</listitem>
<listitem>

<para><emphasis>/var/spool/uucp/freebie/D.</emphasis> contains data files which have arrived from the
remote system and are awaiting processing.
</para>
</listitem>
<listitem>

<para><emphasis>/var/spool/uucp/freebie/X.</emphasis> contains command files to be executed by UUCP.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
<indexterm><primary>UNIX</primary><secondary>to UNIX Copy In</secondary></indexterm>
Periodically, or when <emphasis>uucphost</emphasis> discovers it is necessary, it starts the
<emphasis>uucico</emphasis> (<emphasis>UNIX to UNIX Copy In, Copy Out</emphasis>) program to establish a
connection with <emphasis>freebie</emphasis>, send the contents of a
<emphasis>/var/spool/uucp/freebie</emphasis>, and get any data that <emphasis>freebie</emphasis> has queued
to send to it.  <emphasis>freebie</emphasis> performs the same functions.  It doesn't matter
to the protocol which end initiates the communication: all data is transferred.
</para>

<para><indexterm><primary>uuxqt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uuxqt</secondary></indexterm>
When the data arrives at the machine for which it is destined, it is first
queued in the <emphasis>D.</emphasis> directory.  At the same time, a corresponding command
file is stored in the <emphasis>X.</emphasis> directory.  After the transfer is complete, or
when the directory becomes too full, <emphasis>uucico</emphasis> starts <emphasis>uuxqt</emphasis> to
execute the commands in the <emphasis>X.</emphasis> directory.  Typically, the commands send
mail or move the data to where it belongs.
</para>

<para><indexterm><primary>sys</primary><secondary>UUCP configuration file</secondary></indexterm>
UUCP configuration allows systems to restrict the directories into which and
from which the remote system may transfer data.  We'll see how this is done in
the description of the <emphasis>sys</emphasis> file below.
</para>
</sect2>
<sect2>
<title>Setting up UUCP</title>

<para><indexterm><primary>setting</primary><secondary>up UUCP</secondary></indexterm>
Those of us who were around in the days before the world discovered the Internet
remember with horror the trouble it took to set up a UUCP mail link.  A lot of
that changed when Ian Taylor released his version of UUCP, which rapidly became
the version of choice.
</para>

<para><indexterm><primary>HoneyDanBer</primary></indexterm>
<indexterm><primary>BNU</primary></indexterm>
<indexterm><primary>Basic</primary><secondary>Networking Utilities</secondary></indexterm>
Taylor UUCP retains a lot of compatibility with older versions of UUCP (Version
2 and <emphasis>HoneyDanBer</emphasis>, which System V calls <emphasis>BNU</emphasis> (<emphasis>Basic Networking
Utilities</emphasis>).  Unless you know these versions, there is no reason to use the
compatibility.  In the rest of this chapter we'll use the native Taylor UUCP
configuration.
</para>
</sect2>
<sect2>
<title>UUCP configuration files</title>

<para><indexterm><primary>/etc/uucp</primary></indexterm>
You don't need to do anything special to install <emphasis>UUCP</emphasis>: it's installed
with the base system.  It uses a number of configuration files, which it stores
in the directory <emphasis>/etc/uucp</emphasis>.  The important ones are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/uucp/dial</primary></indexterm>
<emphasis>/etc/uucp/dial</emphasis> describes how to dial.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/uucp/port</primary></indexterm>
<emphasis>/etc/uucp/port</emphasis> describes the serial ports you use for UUCP.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/uucp/sys</primary></indexterm>
<emphasis>/etc/uucp/sys</emphasis> describes the systems to which you want to connect.
</para>
</listitem>
</itemizedlist>

<para>You'll find a number of sample files in <emphasis>/etc/uucp</emphasis>.
</para>
<sect3>
<title>The dial file</title>

<para><indexterm><primary>/etc/uucp/dial.sample</primary></indexterm>
<emphasis>/etc/uucp/dial</emphasis> contains information on how to dial, including the chat
scripts for setting up the communication, but not the user name and password for
individual sites.
Normally you can use the file <emphasis>/etc/uucp/dial.sample</emphasis> unchanged.
</para>
</sect3>
<sect3>
<title>The port file</title>

<para><emphasis>/etc/uucp/port</emphasis> describes the serial ports you use for UUCP.  Again,
there is a sample file, but may want to change the defaults.  Here's an excerpt
from the file:
</para>
<programlisting>
type modem

# This is the name of the port.  This name may be used in the sys file
# to select the port, or the sys file may just specify a baud rate in
# which case the first matching unlocked port will be used.
port port1						<emphasis>change to sio1</emphasis>

# This is the device name to open to dial out.
device /dev/ttyd0				<emphasis>change to /dev/cuaa1</emphasis>

# This is the dialer to use, as described in the dialer file.
dialer hayes

# This is the baud rate to dial out at.
speed 2400						<emphasis>change to 57600</emphasis>

# Here is a second port.  This is like the first, except that it uses
# a different device.  It also permits a range of speeds, which is
# mainly useful if the system specifies a particular baud rate.
port port2
device /dev/ttyd1
dialer hayes
speed-range 2400 9600
</programlisting>

<para>The <emphasis>port</emphasis> starts a port definition and assigns a name to it.  Everything
down to the next <emphasis>port</emphasis> line defines properties of the port.  You'll note
in this case that the bit rate of the port is set to 2400, something that you'll
probably want to raise to 57,600 or even 115,200 bps.  In addition, FreeBSD
dialout ports are called <emphasis>/dev/cuaa<emphasis>&lt;number&gt;</emphasis></emphasis>, so you should change that
as well.  In this book, we're assuming the serial port on <emphasis>sio1</emphasis>, so we
should use <emphasis>/dev/cuaa1</emphasis>.  Without the comments, the resultant definition for
<emphasis>port1</emphasis> should look something like:
</para>
<programlisting>
port sio1
device /dev/cuaa1
dialer hayes
speed 57600
</programlisting>

<para></para>
</sect3>
<sect3>
<title>The sys file</title>

<para><indexterm><primary>/etc/uucp/sys</primary></indexterm>
Most of your configuration will be in the file <emphasis>/etc/uucp/sys</emphasis>.  This is
where you store the information you need to login to the remote system.  On
installation, you will have two files in <emphasis>/etc/uucp</emphasis>: <emphasis>sys1.sample</emphasis>
and <emphasis>sys2.sample</emphasis>.  We'll use a simplified version of <emphasis>sys1.sample</emphasis>
which doesn't require any further configuration files.
</para>

<para><emphasis>/etc/uucp/sys</emphasis> contains a global portion containing definitions which
relate to all systems to be called, followed by information for the individual
systems.  In our example, there is no global part.  The beginning of the
individual parts is signified by the keyword <emphasis>system</emphasis>:
</para>
<programlisting>
# The name of the remote system that we call.
system uunet

# The login name and password to use
call-login Ufreebie
call-password foobar

# We can send anything at any time.
time any

# The phone number to call.
phone 7389449

# uunet tends to be slow, so we increase the timeout
chat-timeout 120

# The port we use to dial out.
port sio1

# what we may transfer
# We can send files from /usr/src and /var/spool/uucp
local-send /usr/src  /var/spool/uucp/uucppublic
# And we can receive into /var/spool/uucp/uucppublic
local-receive /var/spool/uucp/uucppublic

# Remote users may send files to our /var/spool/uucp
remote-send /var/spool/uucp
# And they can receive files from /var/spool/uucp and /usr/src
remote-receive /var/spool/uucp /usr/src
</programlisting>

<para><indexterm><primary>/etc/uucp/call</primary></indexterm>
This information states that you will dial the system <emphasis>uunet</emphasis> whenever you
want to.  When you connect, you will log in as user <emphasis>Ufreebie</emphasis> with the
password <emphasis>foobar</emphasis>.  The sample files store the passwords in a different
file, <emphasis>/etc/uucp/call</emphasis>, but that's overkill if you're just calling one or
two systems.
</para>
</sect3>
</sect2>
<sect2>
<title>Testing the connection</title>

<para>To test whether things work, it's a good idea to send some data to it and see
what happens.  The program to copy data to the remote system is called
<emphasis>uucp</emphasis>.  It's supposed to look like <emphasis>cp</emphasis>, but the syntax for the remote
host name is unfortunate: it uses the bang paths we saw at the beginning of the
chapter.  To send a file <emphasis>/var/spool/uucppublic/foo</emphasis> to system
<emphasis>uucphost</emphasis>, you specify the file name as
<emphasis>uucphost!/var/spool/uucppublic/foo</emphasis>.  Unfortunately, the exclamation
mark (<emphasis>!</emphasis>) has since taken on a special significance when used in a shell,
so we have to precede it with an escape character (<emphasis>\e</emphasis>):
</para>
<programlisting>
$ <command>uucp -r foo uucphost\e!/var/spool/uucp/uucppublic/foo</command>
</programlisting>

<para>The <emphasis>-r</emphasis> option tells <emphasis>uucp</emphasis> to queue the file and not to start a
session immediately.
</para>

<para><indexterm><primary>Uutry</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>Uutry</secondary></indexterm>
<indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
Next, run the script <emphasis>Uutry</emphasis>.  <emphasis>Uutry</emphasis> is a standard script on System
V machines, but for some reason it's not supplied with Taylor UUCP.  You'll find
a copy on <emphasis><xref linkend="CFBSD-skelc"/>/scripts/Uutry</emphasis>.  <emphasis>Uutry</emphasis> starts <emphasis>uucico</emphasis>
and displays the log files as they are written.  We might see something like
this:
</para>
<programlisting>
# <command>Uutry uucphost</command>
uucico uucphost - (1997-09-25 15:46:33.90 27571) DEBUG: fcsend: Writing "atz\er" sleep
uucico uucphost - (1997-09-25 15:46:34.94 27571) DEBUG: icexpect: Looking for 2 "OK"
uucico uucphost - (1997-09-25 15:46:34.94 27571) DEBUG: icexpect: Got "atz\er\er\enOK" (found it)
uucico uucphost - (1997-09-25 15:46:34.94 27571) DEBUG: fcsend: Writing "atdt" \eT "83888725\er"
uucico uucphost - (1997-09-25 15:46:34.94 27571) DEBUG: icexpect: Looking for 7 "CONNECT"
uucico uucphost - (1997-09-25 15:46:34.94 27571) DEBUG: icexpect: Got "\er\enatdt83888725\er\er\enCONNE
CT" (found it)
uucico uucphost - (1997-09-25 15:46:54.54 27571) DEBUG: fcsend: Writing "\er"
uucico uucphost - (1997-09-25 15:46:54.54 27571) DEBUG: icexpect: Looking for 5 "ogin:"
uucico uucphost - (1997-09-25 15:46:54.54 27571) DEBUG: icexpect: Got " 57600\er\enLEMIS Modem (3840
0 bps) login:" (found it)
uucico uucphost - (1997-09-25 15:46:59.65 27571) DEBUG: fcsend: Writing login "Ufreebie\er"
uucico uucphost - (1997-09-25 15:46:59.65 27571) DEBUG: icexpect: Looking for 5 "word:"
uucico uucphost - (1997-09-25 15:46:59.65 27571) DEBUG: icexpect: Got " UfreebPassword:" (found it)
uucico uucphost - (1997-09-25 15:46:59.85 27571) DEBUG: fcsend: Writing password "freedom!\er"
uucico uucphost - (1997-09-25 15:46:59.85 27571) DEBUG: zget_uucp_cmd: Got "\er\enLast login: Thu Se
p 25 15:28:18 on ttyd1\er\enCopyright (c) 19"
uucico uucphost - (1997-09-25 15:47:00.31 27571) Login successful
</programlisting>

<para><indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
This log shows the chat script.  You'll notice the echo in the receive strings:
it sees what it has just written out (the user name, for example).  Then
<emphasis>login</emphasis> produces the message of the day (most of which has been omitted)
and starts <emphasis>uucico</emphasis>.  The two <emphasis>uucico</emphasis>s negotiate a protocol, and come
out with protocol <emphasis>G</emphasis>.
</para>
<note>

<para>We're not going to discuss protocols.  They're described in the documentation
for <emphasis>UUCP</emphasis>, but for our purposes it can be simplified to one line: ``Use the
<emphasis>G</emphasis> protocol''.
</para>
</note>

<para></para>
<programlisting>
uucico uucphost - (1997-09-25 15:47:00.31 27571) DEBUG: fsend_uucp_cmd: Sending "Sfreebie -R -N07"
uucico uucphost - (1997-09-25 15:47:00.31 27571) DEBUG: zget_uucp_cmd: Got "\e020ROKN07\e000"
uucico uucphost - (1997-09-25 15:47:00.70 27571) DEBUG: zget_uucp_cmd: Got "\e020PiagGjfvy\e000"
uucico uucphost - (1997-09-25 15:47:00.70 27571) DEBUG: fsend_uucp_cmd: Sending "UG"
uucico uucphost - (1997-09-25 15:47:00.70 27571) DEBUG: fgsend_control: Sending control INITA 7
uucico uucphost - (1997-09-25 15:47:00.70 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:00.82 27571) DEBUG: fgprocess_data: Got control INITA 7
uucico uucphost - (1997-09-25 15:47:00.82 27571) DEBUG: fgsend_control: Sending control INITB 1
uucico uucphost - (1997-09-25 15:47:00.82 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:00.90 27571) DEBUG: fgprocess_data: Got control INITB 1
uucico uucphost - (1997-09-25 15:47:00.90 27571) DEBUG: fgsend_control: Sending control INITC 7
uucico uucphost - (1997-09-25 15:47:00.90 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:00.98 27571) DEBUG: fgprocess_data: Got control INITC 7
uucico uucphost - (1997-09-25 15:47:00.98 27571) Handshake successful (protocol 'G' sending packet
/window 64/7 receiving 64/7)
</programlisting>

<para><indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
Here the two <emphasis>uucico</emphasis>s have agreed on using the <emphasis>G</emphasis> protocol.  Next,
our <emphasis>uucico</emphasis> starts sending the file <emphasis>/home/grog/foo</emphasis>.  It also logs
each packet as it sends it:
</para>
<programlisting>
uucico uucphost grog (1997-09-25 15:47:00.98 27571) DEBUG: fgsendcmd: Sending command "S /home/gro
g/foo /var/spool/uucp/uucppublic/foo grog -Cd D.0001 0600 "" 0x2be8"
uucico uucphost grog (1997-09-25 15:47:00.98 27571) DEBUG: fgsenddata: Sending packet 1 (64 bytes)
uucico uucphost grog (1997-09-25 15:47:00.98 27571) DEBUG: fgsenddata: Sending packet 2 (64 bytes)
uucico uucphost - (1997-09-25 15:47:00.98 27571) DEBUG: floop: Waiting for data
uucico uucphost - (1997-09-25 15:47:00.98 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:01.19 27571) DEBUG: fgprocess_data: Got control RR 1
uucico uucphost - (1997-09-25 15:47:01.19 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:01.20 27571) DEBUG: fgprocess_data: Got control RR 2
uucico uucphost - (1997-09-25 15:47:01.20 27571) DEBUG: fgwait_for_packet: Need 6 bytes
</programlisting>

<para><indexterm><primary>uucico</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>uucico</secondary></indexterm>
After many more such messages, the file has been transferred.  <emphasis>uucico</emphasis>
finds that it has nothing else to do.  The <emphasis>uucico</emphasis> at the other end
didn't have anything to transmit, so they stop.
</para>
<programlisting>
uucico uucphost grog (1997-09-25 15:47:08.02 27571) DEBUG: fgot_data: Charging 669641 to S /home/g
rog/foo /var/spool/uucp/uucppublic/foo
uucico uucphost - (1997-09-25 15:47:08.16 27571) DEBUG: floop: No work for master
uucico uucphost - (1997-09-25 15:47:08.16 27571) DEBUG: fgsendcmd: Sending command "H"
uucico uucphost - (1997-09-25 15:47:08.16 27571) DEBUG: fgsenddata: Sending packet 4 (64 bytes)
uucico uucphost - (1997-09-25 15:47:08.16 27571) DEBUG: floop: Waiting for data
uucico uucphost - (1997-09-25 15:47:08.16 27571) DEBUG: fgwait_for_packet: Need 6 bytes
uucico uucphost - (1997-09-25 15:47:08.28 27571) DEBUG: fgprocess_data: Got control RR 4
uucico uucphost - (1997-09-25 15:47:08.28 27571) DEBUG: fgwait_for_packet: Need 49 bytes
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgprocess_data: Got packet 3
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgsend_control: Sending control RR 3
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: ftadd_cmd: Got command "HY"
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgsendcmd: Sending command "HY"
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgsenddata: Sending packet 5 (64 bytes)
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgsend_control: Sending control CLOSE 0
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fgsend_control: Sending control CLOSE 0
uucico uucphost - (1997-09-25 15:47:08.30 27571) Protocol 'G' packets: sent 181, resent 0, receive
d 3
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fsend_uucp_cmd: Sending "OOOOOO"
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: fsend_uucp_cmd: Sending "OOOOOO"
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: zget_uucp_cmd: Got "\e020\e002kl$!HY\e000"
uucico uucphost - (1997-09-25 15:47:08.30 27571) DEBUG: zget_uucp_cmd: Got "\e000\e000\e000\e000\e000\e0
00\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000\e000
uucico uucphost - (1997-09-25 15:47:08.32 27571) DEBUG: zget_uucp_cmd: Got "\e000\e020\e011\e"*\e010\e01
1\e020\e011\e"*\e010\e011\e020OOOOOOO\e000"
uucico uucphost - (1997-09-25 15:47:08.33 27571) Call complete (9 seconds 11240 bytes 1248 bps)
uucico uucphost - (1997-09-25 15:47:08.33 27571) DEBUG: fcsend: Writing sleep sleep "+++" sleep sl
eep "ATH\er"
</programlisting>

<para>The lines with the many <emphasis>\e000\e000\e000\e000</emphasis>s are, in fact, noise after
the line hangs up.
</para>

<para><indexterm><primary>Uutry</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>Uutry</secondary></indexterm>
<emphasis>Uutry</emphasis> does stop when the communication is finished; the last line is
typical of the end of the communication.  When you've seen enough, hit
<keycap>Ctrl-C</keycap> to stop <emphasis>Uutry</emphasis>.  This won't stop the transfer even if it is
still running.
</para>

<para>Once you get this far, your UUCP link is functional.
</para>
</sect2>
</sect1>
<sect1>
<title>SLIP</title>

<para><anchor id="CFBSD-SLIP"/>
As we saw in <xref linkend="CFBSD-chppp"/>, SLIP is a poor choice if you can use PPP.  Still, you
may find a need to do so, so in this chapter we'll look at how to configure
SLIP.
</para>

<para>Setting up a SLIP connection involves the same kind of steps as in setting up a
PPP connection.  If you haven't read the description of how PPP setup works, you
might like to read it now&mdash;see page <xref linkend="CFBSD-PPP-theory"/>.  If you know all about
SLIP, you can skip the following sections and go straight to the summary on page
<xref linkend="CFBSD-SLIP-summary"/>.
</para>
<sect2>
<title>What we need to know</title>

<para>Most SLIP implementations can't handle dynamic IP addresses, so if you have a
SLIP connection, you're likely to have a static address.  This is the only
configuration we will consider.  We obviously need to know the addresses of each
end of the link, and we also need a form of authentication.
</para>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
You set the interface addresses with the <emphasis>ifconfig</emphasis> program.  In our
example, we'll assume we're setting up a connection from <emphasis>gw.example.org</emphasis>
to <emphasis>free-gw.example.net</emphasis>.
</para>
</sect2>
<sect2>
<title>Dialling out with SLIP</title>

<para><indexterm><primary>slattach</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>slattach</secondary></indexterm>
Use the <emphasis>slattach</emphasis> program to establish a connection with a SLIP server,
<emphasis>slattach</emphasis> does only some of the things that the PPP programs do.  In
particular, it doesn't set up the interfaces, and it doesn't dial.
</para>
<sect3>
<title>Setting the interface addresses</title>

<para>Set the interface address with <emphasis>ifconfig</emphasis>.  On <emphasis>gw.example.org</emphasis>, you
could enter:
</para>
<programlisting>
# <command>ifconfig  sl0  139.130.136.133  139.130.136.129</command>
</programlisting>

<para>The addresses are the addresses of <emphasis>gw.example.org</emphasis> and
<emphasis>free-gw.example.net</emphasis>.  We use the IP addresses and not the names because
it's unlikely that your name d&aelig;gmon will be able to resolve the names until
the link is up.  It doesn't matter whether you configure the interface before or
after dialling, but it won't work until you have done so.  In practice, it's
easiest to have the dial script perform this function, as we'll see below.
</para>

<para></para>
</sect3>
<sect3>
<title>How to dial</title>

<para><indexterm><primary>chat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chat</secondary></indexterm>
Like Kernel PPP, <emphasis>slattach</emphasis> doesn't dial, but it is able to invoke a
dialer.  We'll use <emphasis>chat</emphasis> again in the following example.  Dialling for a
SLIP link is essentially the same as for a PPP link.  We'll use the same chat
script we used for Kernel PPP.  See page <xref linkend="CFBSD-chat-script"/> for more details about
chat scripts.
</para>
<programlisting>
# Abort the chat script if the modem replies BUSY or NO CARRIER
ABORT BUSY
ABORT 'NO CARRIER'
# Wait up to 5 seconds for the reply to each of these
TIMEOUT 5
\&amp;'' ATZ
OK ATDT1234567
# Wait 40 seconds for connection
TIMEOUT 40
CONNECT
TIMEOUT 5
gin:-\er-gin: Snorm
sword: Oh!No!
</programlisting>

<para><indexterm><primary>/etc/sliphome</primary></indexterm>
<indexterm><primary>/etc/sliphome/slip.chat</primary></indexterm>
We'll put this script and everything else we need for SLIP in the directory
<emphasis>/etc/sliphome</emphasis>, which we may have to create.  We'll call this script
<emphasis>/etc/sliphome/slip.chat</emphasis>.  It first tells chat to abort dialup on a
<emphasis>BUSY</emphasis> or <emphasis>NO CARRIER</emphasis> response from the modem.  The next line waits
for nothing (<emphasis>''</emphasis>) and resets the modem.  The following line waits for the
modem to reply with <emphasis>OK</emphasis>, and dials the ISP.
</para>

<para>Call setup can take a while, almost always more than 5 seconds for real
(analogue) modems, so we need to extend the timeout, in this case to 40
seconds.  During this time we must get the reply <emphasis>CONNECT</emphasis> from the modem.
</para>

<para>Next, we reset the timeout to 5 seconds and perform <emphasis>login</emphasis>
authentication.  It's important to reset the timeout, because otherwise a login
failure will take 40 seconds to complete.  The sequence <emphasis>gin:-\er-gin:</emphasis> is
a shorthand for ``expect <emphasis>gin:</emphasis>.  If you don't get it, send <emphasis>\er</emphasis>
and expect ``<emphasis>gin:</emphasis>'', the end of the <emphasis>login:</emphasis> prompt.
</para>

<para>One of the weaknesses of the current SLIP configuration is that it is difficult
to control the assignment of network interfaces to serial lines.  This is, of
course, not a problem if you only have one SLIP interface.  See the man page
<emphasis>slattach(8)</emphasis> for details of how to handle multiple interfaces.
</para>
</sect3>
<sect3>
<title>Invoking slattach</title>

<para><anchor id="CFBSD-SLIP-route-add"/>
<indexterm><primary>/etc/sliphome/startslip</primary></indexterm>
To the SLIP link, first place the following commands in a file
<emphasis>/etc/sliphome/startslip</emphasis>:
</para>
<programlisting>
#!/bin/sh
# Dial a slip link
ifconfig  sl0  139.130.136.133  139.130.136.129  netmask 255.255.255.255
route delete default
route add default 139.130.136.129
slattach -h -r'chat -f /etc/sliphome/slip.chat' -s 57600 -L /dev/cuaa1
</programlisting>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
<indexterm><primary>slattach</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>slattach</secondary></indexterm>
The <emphasis>ifconfig</emphasis> line first configures the addresses of the link, and the
<emphasis>slattach</emphasis> line establishes the connection:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>-h</emphasis> option sets hardware handshaking (see page <xref linkend="CFBSD-handshaking"/>).
</para>
</listitem>
<listitem>

<para><indexterm><primary>DCD</primary><secondary>RS-232 signal</secondary></indexterm>
<indexterm><primary>RS-232</primary><secondary>signal</secondary></indexterm>
According to the man page, the <emphasis>-r</emphasis> option specifies what to do on
<emphasis>redial</emphasis>.  In fact, it is what to do if <emphasis>slattach</emphasis> finds that the
modem is not asserting <emphasis>DCD</emphasis>, so if it is started in this condition, it will
dial immediately.
</para>

<para><indexterm><primary>/etc/sliphome/slip.chat</primary></indexterm>
The chat script invokes the script <emphasis>/etc/sliphome/slip.chat</emphasis>, which we saw
above, to perform the dialling.
</para>
</listitem>
<listitem>

<para>The option <emphasis>-s 57600</emphasis> sets the bit rate of the local link to the modem.
</para>
</listitem>
<listitem>

<para><indexterm><primary>slattach</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>slattach</secondary></indexterm>
The option <emphasis>-L</emphasis> tells <emphasis>slattach</emphasis> to create a UUCP lock file.  See
page <xref linkend="CFBSD-UUCP-lock-file"/> for more details.
</para>
</listitem>
<listitem>

<para>Finally, <emphasis>/dev/cuaa1</emphasis> is the name of the serial line to use.
</para>
</listitem>
</itemizedlist>

<para>You'll notice that this invocation doesn't specify the name of the network
interface.  There is an option (<emphasis>-S</emphasis>) which does this, but normally the
interface is chosen automatically.  If you use <emphasis>-S</emphasis>, you need to find a
way to determine which interface is available.
</para>
</sect3>
<sect3>
<title>Starting the link</title>

<para><indexterm><primary>/etc/startslip</primary></indexterm>
<indexterm><primary>/etc/slip.chat</primary></indexterm>
Once we have set up <emphasis>/etc/startslip</emphasis> and <emphasis>/etc/slip.chat</emphasis>, we proceed
to set up the connection.  That's simple:
</para>
<programlisting>
# <command>/etc/sliphome/startslip</command>
</programlisting>

<para>The prompt returns immediately, but that doesn't mean the link is up.  First,
<emphasis>slattach</emphasis> discovers that there is no modem connection, and that it needs
to dial.  At this point, it logs the following message to the console and
<emphasis>/var/log/messages</emphasis>:
</para>
<programlisting>
Sep 24 13:24:04 freebie slattach[2680]: SIGHUP on /dev/cuaa1 (sl-1); running 'chat -v
-f /etc/sliphome/slip.chat'
</programlisting>

<para>After a successful connection&mdash;about 30 seconds&mdash;it logs another message:
</para>
<programlisting>
Sep 24 13:24:35 freebie slattach[2681]: sl0 connected to /dev/cuaa1 at 57600 baud
</programlisting>

<para>At this point, you can check the configuration:
</para>
<programlisting>
# <command>ifconfig sl0</command>
sl0: flags=8011&lt;UP,POINTOPOINT,MULTICAST&gt; mtu 552
        inet 139.130.136.133 --&gt; 139.130.136.129 netmask 0xffffffff
# <command>netstat -rn</command>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use     Netif Expire
default            139.130.136.129    UGSc       22    13032      sl0
139.130.136.129    139.130.136.133    UH         20        2      sl0
<emphasis>\&amp;... other entries</emphasis>
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>SLIP dialin</title>

<para>Like PPP, SLIP is a symmetrical protocol, but you wouldn't know this from the
way you have to configure SLIP dialin.
</para>
<sect3>
<title>Accepting calls and authentication</title>

<para><indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
<indexterm><primary>/etc/ttys</primary></indexterm>
SLIP uses the standard program that handles dialin, <emphasis>getty</emphasis>.  We've seen how
to set up <emphasis>getty</emphasis> on page <xref linkend="CFBSD-getty-setup"/>.  In our example, we'll put a
<emphasis>getty</emphasis> on the serial line <emphasis>/dev/ttyd1</emphasis>.  We put the following line in
<emphasis>/etc/ttys</emphasis>:
</para>
<programlisting>
ttyd1	"/usr/libexec/getty 38400"	unknown		on
</programlisting>

<para><indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
Then we get <emphasis>init</emphasis> to re-read <emphasis>/etc/ttys</emphasis> and start the
<emphasis>getty</emphasis>:
</para>
<programlisting>
# <command>kill -1 1</command>
</programlisting>

<para><indexterm><primary>login</primary><secondary>authentication</secondary></indexterm>
<indexterm><primary>authentication</primary><secondary>login</secondary></indexterm>
<indexterm><primary>/usr/sbin/sliplogin</primary></indexterm>
<emphasis>getty</emphasis> provides <emphasis>login authentication</emphasis>, so we don't need to perform
any additional steps for authentication.
In this example, we chose
for the user <emphasis>Snorm</emphasis> to automatically start <emphasis>/usr/sbin/sliplogin</emphasis> on
login.
</para>

<para><indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
<emphasis>sliplogin</emphasis> first searches a file <emphasis>/etc/sliphome/slip.hosts</emphasis> for an
entry which matches the logged in user.  If it finds one, it performs the
following steps:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
<indexterm><primary>/etc/sliphome/slip.slparms</primary></indexterm>
It checks for the existance of a file <emphasis>/etc/sliphome/slip.slparms</emphasis>.  If it
finds it, it loads certain operational parameters from it.
</para>
</listitem>
<listitem>

<para>It changes the line parameters to run SLIP.
</para>
</listitem>
<listitem>

<para>It selects a SLIP interface on which to run the network connection.
</para>
</listitem>
<listitem>

<para>It configures the interface with the addresses specified in the
<emphasis>/etc/sliphome/slip.hosts</emphasis> entry.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
<sect3>
<title>The slip.hosts file</title>

<para><indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
<indexterm><primary>/etc/sliphome/slip.slparms</primary></indexterm>
<indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
<emphasis>/etc/sliphome/slip.hosts</emphasis> contains one entry for each user which is
entitled to use SLIP.  On page <xref linkend="CFBSD-sliplogin-test"/> we saw the error message that
it produces if it doesn't find a user in this file.  The entries have the
following format:
</para>
<programlisting>
<emphasis>user</emphasis>	<emphasis>local system</emphasis>	<emphasis>remote system</emphasis>	<emphasis>net mask</emphasis>	<emphasis>options</emphasis>
</programlisting>

<para>The <emphasis>local system</emphasis> and <emphasis>remote system</emphasis> addresses and the net mask
are used to simulate an <emphasis>ifconfig</emphasis> entry.  As we have seen above, these
should be numeric values.
</para>

<para><indexterm><primary>ping</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ping</secondary></indexterm>
The <emphasis>options</emphasis> can be <emphasis>normal</emphasis> (use normal line discipline),
<emphasis>compress</emphasis> (enable Van Jacobsen header compression), <emphasis>noicmp</emphasis> (throw
away ICMP packets), or <emphasis>autocomp</emphasis> (auto enable Van Jacobsen header
compression).  If you throw away ICMP packets, you won't be able to ping across
the link, since <emphasis>ping</emphasis> produces ICMP packets.  In general, the only
interesting parameter is <emphasis>autocomp</emphasis>, which gives you compression if it's
possible.  The only valid reason to omit this parameter would be if your machine
is very slow, and the compression would slow it down further.  Nowadays, that's
hardly possible.
</para>
<programlisting>
Snorm	136.130.139.133	136.130.139.133	255.255.255.255	autocomp
</programlisting>

<para></para>
</sect3>
<sect3>
<title>slip.slparms options</title>

<para><indexterm><primary>/etc/sliphome/slip.slparms</primary></indexterm>
The file <emphasis>/etc/sliphome/slip.slparms</emphasis> contains a single line with up to
three parameters:
</para>
<programlisting>
<emphasis>keepalive</emphasis>		<emphasis>outfill</emphasis>		<emphasis>slunit</emphasis>
</programlisting>

<para><emphasis>keepalive</emphasis> is the line idle time after which the connection should be
dropped to save costs.  <emphasis>outfill</emphasis> is more or less the opposite: it's the
time after which the link should generate traffic in order to avoid the line at
the other end dropping.  Both units are in seconds.
</para>

<para><emphasis>slunit</emphasis> is the SLIP network interface unit number to use.  For example,
if you put a <emphasis>2</emphasis> here, <emphasis>sliplogin</emphasis> connects to interface <emphasis>sl2</emphasis>.
It does this even if <emphasis>sl2</emphasis> is active, so use this parameter with great
care.
</para>

<para>In our example, we don't want to keep the line up unnecessarily.  Instead, we'll
drop the line after five minutes of no activity.  Our
<emphasis>/etc/sliphome/slip.slparms</emphasis> contains only:
</para>
<programlisting>
300
</programlisting>

<para></para>
</sect3>
<sect3>
<title>Accepting a call</title>

<para>After setting up the files as above, we're ready to accept incoming calls.  When
one arrives, we notice it by the activity on the system console:
</para>
<programlisting>
Sep 24 13:24:35 gw -sliplogin[5658]: attaching slip unit 0 for Snorm
</programlisting>

<para>After this has occurred, you can check the network configuration:
</para>
<programlisting>
$ <command>ifconfig sl0</command>
sl0: flags=8011&lt;UP,POINTOPOINT,MULTICAST&gt; mtu 552
        inet 139.130.136.129 --&gt; 139.130.136.133 netmask 0xffffffff
$ <command>netstat -rn</command>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use     Netif Expire
192.109.197.197    192.109.197.156    UH          0        3       sl0
<emphasis>\&amp;...etc</emphasis>
</programlisting>

<para><indexterm><primary>sliplogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>sliplogin</secondary></indexterm>
<emphasis>sliplogin</emphasis> doesn't create a default route, and normally you won't want it
to.  If you need one, you can create it with the <emphasis>route add</emphasis> command, as
we have seen on page <xref linkend="CFBSD-SLIP-route-add"/>.
</para>
</sect3>
</sect2>
<sect2>
<title>Putting it all together</title>

<para><anchor id="CFBSD-SLIP-summary"/>
In this section we'll  summarize the steps above.
</para>
<sect3>
<title>Calling out</title>

<para>To call out, perform these steps:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/sliphome/startslip</primary></indexterm>
Create a dial script <emphasis>/etc/sliphome/startslip</emphasis>:
</para>
<programlisting>
#!/bin/sh
# Dial a slip link
ifconfig  sl0  139.130.136.133  139.130.136.129  netmask 255.255.255.255
route delete default
route add default 139.130.136.129
slattach -h -r'chat -f /etc/sliphome/slip.chat' -s 57600 -L /dev/cuaa1
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/sliphome/slip.chat</primary></indexterm>
Create a chat script <emphasis>/etc/sliphome/slip.chat</emphasis>:
</para>
<programlisting>
# Abort the chat script if the modem replies BUSY or NO CARRIER
ABORT BUSY
ABORT 'NO CARRIER'
# Wait up to 5 seconds for the reply to each of these
TIMEOUT 5
\&amp;'' ATZ
OK ATDT1234567
# Wait 40 seconds for connection
TIMEOUT 40
CONNECT
TIMEOUT 5
gin:-\er-gin: Snorm
sword: Oh!No!
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Start the link:
</para>
<programlisting>
# <command>/etc/sliphome/startslip</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/etc/sliphome/startslip</primary></indexterm>
<indexterm><primary>/etc/rc.local</primary></indexterm>
If you are using the SLIP link for a permanent connection, you should put the
invocation of <emphasis>/etc/sliphome/startslip</emphasis> in <emphasis>/etc/rc.local</emphasis>.
</para>
</sect3>
<sect3>
<title>Calling in</title>

<para>To accept incoming calls, perform these steps:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>vipw</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vipw</secondary></indexterm>
Create a user name for the connection (<emphasis>Snorm</emphasis> in this example) with
<emphasis>vipw</emphasis>:
</para>
<programlisting>
Snorm::1021:1001::0:0:Norm, Beach of Passionate Love:/home/norm:/usr/sbin/sliplogin
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Ensure that <emphasis>Snorm</emphasis> has the correct password.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
Enable a serial line in <emphasis>/etc/ttys</emphasis>:
</para>
<programlisting>
ttyd1	"/usr/libexec/getty 38400"	unknown		on
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>init</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>init</secondary></indexterm>
Get <emphasis>init</emphasis> to read <emphasis>/etc/ttys</emphasis>:
</para>
<programlisting>
# <command>kill -1 1</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/sliphome/slip.hosts</primary></indexterm>
Create a file <emphasis>/etc/sliphome/slip.hosts</emphasis> containing the following line:
</para>
<programlisting>
Snorm	136.130.139.133	136.130.139.133	255.255.255.255	autocomp
</programlisting>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
The addresses are in the same sequence that they are used in <emphasis>ifconfig</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/sliphome/slip.slparms</primary></indexterm>
Create a file <emphasis>/etc/sliphome/slip.slparms</emphasis> with the timeout value 300
seconds:
</para>
<programlisting>
300
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Problems</title>

<para>This description looks pretty straightforward, but consider it more like a
description of a safe path through a minefield: leave the path and all hell
breaks loose.  Here are some possible pitfalls:
</para>
<itemizedlist>
<listitem>

<para><emphasis>The chat script starts complaining, and you get lots of error messages on the
console</emphasis>
</para>

<para><indexterm><primary>chat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>chat</secondary></indexterm>
Check your chat script.  You can invoke <emphasis>chat</emphasis> manually.  If you give it
the correct input, it should give you the appropriate output.
</para>
</listitem>
<listitem>

<para><emphasis>You can't stop </emphasis>slattach<emphasis>&mdash;it keeps restarting.</emphasis>
</para>

<para>Stop it with:
</para>
<programlisting>
# <command>killall slattach</command>
</programlisting>

<para>This kills any SLIP session, so use it with care if you have more than one
running.
</para>
</listitem>
<listitem>

<para><emphasis>The modems dial, and you get a connection, and </emphasis>slattach<emphasis> says that the
connection is up, but you can't get any data across.  After about a minute, the
line drops.</emphasis>
</para>

<para>Probably authentication is failing at the other end.  There's no way to feed
this information back to the caller, so it just dies.  Check that the passwords
are correct.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchdns"><title>The Domain Name Service</title>

<para><anchor id="CFBSD-DNS-RR"/>
<indexterm><primary>/etc/hosts</primary></indexterm>
Ever since the beginning of the ARPAnet, systems have had both names and IP
addresses.  UNIX systems, as well as a lot of others who have copied the BSD IP
implementation, used the file <emphasis>/etc/hosts</emphasis> to convert between names to
addresses.
</para>

<para>It's clearly impossible to have an <emphasis>/etc/hosts</emphasis> which describes the
complete Internet.  Even if you had disk space, the number of updates would
overload your network.  The only viable solution is a distributed database.
</para>

<para><indexterm><primary>Domain</primary><secondary>Name System</secondary></indexterm>
<indexterm><primary>DNS</primary></indexterm>
<indexterm><primary>BIND</primary></indexterm>
<indexterm><primary>Berkeley</primary><secondary>Internet Name Domain</secondary></indexterm>
The solution to this problem is the <emphasis>Domain Name System</emphasis>, or <emphasis>DNS</emphasis>.  The
primary implementation of the DNS is <emphasis>BIND</emphasis>, the <emphasis>Berkeley Internet Name
Domain</emphasis>.
<footnote>

<para>Does this sound like an acronym in search of a name?  Yes, I think so too.
</para>
</footnote>
<indexterm><primary>named</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>named</secondary></indexterm>
<indexterm><primary>name</primary><secondary>dæmon</secondary></indexterm>
You'll notice the word <emphasis>Berkeley</emphasis> in there.  BIND is part of BSD, and it's
about the only game in town.  Despite these names, the program you use to
perform the resolution is called <emphasis>named</emphasis> (the <emphasis>name dæmon</emphasis>, pronounced
``name-dee'').
</para>

<para><indexterm><primary>Resource</primary><secondary>Record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>Resource Record</secondary></indexterm>
<indexterm><primary>RR</primary></indexterm>
DNS provides the information needed to connect to remote systems in the form of
<emphasis>Resource Records</emphasis>, or <emphasis>RR</emphasis>s.  Unfortunately, the names of the records
aren't as intuitive as you may like.  If you find the names confusing, don't
worry: they're not that important.
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>A</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>A record</secondary></indexterm>
<emphasis>A (address) records</emphasis> provide a translation from name to IP address.
These are what most people think of when they hear the name DNS.  The name
specified in the A record is called the <emphasis>canonical</emphasis> name of the interface,
and it should be the one to which the PTR record (see below) refers.
</para>
</listitem>
<listitem>

<para><indexterm><primary>PTR</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>PTR record</secondary></indexterm>
<indexterm><primary>reverse</primary><secondary>lookup</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>reverse lookup</secondary></indexterm>
<emphasis>PTR (pointer) records</emphasis> provide a translation from IP address to name.
This process is also called <emphasis>reverse lookup</emphasis>.  Very many systems don't have
this set up correctly.
</para>
</listitem>
<listitem>

<para><indexterm><primary>MX</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>MX record</secondary></indexterm>
<emphasis>MX (mail exchange) records</emphasis> don't relate to IP addresses at all.  They
specify where to send mail for a specific name.
</para>
</listitem>
<listitem>

<para><indexterm><primary>SOA</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>SOA record</secondary></indexterm>
<indexterm><primary>zone</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>zone</secondary></indexterm>
<emphasis>SOA (start of authority) records</emphasis> give information about <emphasis>zones</emphasis>,
which roughly correspond to domains.
</para>
</listitem>
<listitem>

<para><indexterm><primary>NS</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>NS record</secondary></indexterm>
<emphasis>NS (name server) records</emphasis> describe the address of a name server for a
zone.
</para>
</listitem>
<listitem>

<para><indexterm><primary>HINFO</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>HINFO record</secondary></indexterm>
<emphasis>HINFO (hardware information) records</emphasis> describe the hardware and software
which runs on a particular system.
</para>
</listitem>
<listitem>

<para><indexterm><primary>CNAME</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>CNAME record</secondary></indexterm>
<emphasis>CNAME (canonical name) records</emphasis> describe alternative names for a system.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/etc/hosts</primary></indexterm>
<indexterm><primary>resolv.conf</primary></indexterm>
FreeBSD provides the possibility of using both <emphasis>/etc/hosts</emphasis> and DNS.
There's no reason to do so, however, and I'm not going to discuss it any
further.  See the online handbook and the man page for <emphasis>resolver(5)</emphasis> if
you want to do this anyway.  There is only one reason for not running DNS
somewhere on your network: if you're not connected to a network.  Otherwise, you
should be running it.
</para>

<para>Many people find objections to running DNS:
</para>
<itemizedlist>
<listitem>

<para>It's supposedly difficult to set up DNS configuration files.
</para>
</listitem>
<listitem>

<para>DNS supposedly generates a lot of network traffic.
</para>
</listitem>
<listitem>

<para>DNS supposedly can cause a dial-on-demand system to dial all the time.
</para>
</listitem>
</itemizedlist>

<para>These statements are all untrue.  We'll look at them in the rest of this chapter
as we set up DNS for our reference network.
</para>
<sect1>
<title>Domains and zones</title>

<para><indexterm><primary>domain</primary></indexterm>
<indexterm><primary>zone</primary></indexterm>
<indexterm><primary>domain</primary><secondary>name</secondary></indexterm>
In Internet parlance, a <emphasis>domain</emphasis> is a group of names ending with a
specific <emphasis>domain name</emphasis>.  We looked at domain names in <xref linkend="CFBSD-chisp"/>, page
<xref linkend="CFBSD-domainreg"/>.  Note that, like file names, there are two kinds of domain names:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>fully-qualified</primary><secondary>domain name</secondary></indexterm>
<indexterm><primary>domain</primary><secondary>name</secondary></indexterm>
<indexterm><primary>FQDN</primary></indexterm>
A <emphasis>fully-qualified domain name</emphasis> (<emphasis>FQDN</emphasis>) ends in a period
(<emphasis>.</emphasis>).  This domain name relates to the root domain <emphasis>.</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>relative</primary><secondary>domain name</secondary></indexterm>
<indexterm><primary>domain</primary><secondary>name</secondary></indexterm>
A <emphasis>relative domain name</emphasis> relates to the current domain.  You'll see them
occasionally in the configuration files.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>freebie.example.org</primary></indexterm>
<indexterm><primary>freebie.example.org.example.org</primary></indexterm>
Most times, when you write a domain name, it's fully-qualified.  But if you
write it without the terminating period, DNS will frequently append your own
domain name.  For example, if you specify a name like
<emphasis>freebie.example.org</emphasis>, there's a very good chance that DNS will first look
for a name <emphasis>freebie.example.org.example.org</emphasis>.  It won't find it, of
course, but it'll spend a long time trying.  The moral is simple: when writing
DNS configuration, always put a period at the end of names which are fully
qualified.
</para>
<sect2>
<title>Zones</title>

<para><indexterm><primary>zone</primary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
<indexterm><primary>authoritative</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>subdomain</primary></indexterm>
In many ways, a <emphasis>zone</emphasis> is the same thing as a domain: it's the subset of
the DNS name space which is maintained by a specific set of name servers&mdash;in
DNS-speak, name servers are <emphasis>authoritative</emphasis> for the zone.  The difference
is mainly in the way it's used.  There is one exception, however: usually, a
<emphasis>subdomain</emphasis> will have a different name server.  This subdomain is part of
the domain, but not of the zone.
</para>

<para><indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>china.example.org</primary></indexterm>
<indexterm><primary>beijing.china.example.org</primary></indexterm>
<indexterm><primary>xianggang.china.example.org</primary></indexterm>
<indexterm><primary>freebie.example.org</primary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
For example, in our reference network, the name servers on <emphasis>freebie</emphasis> and
<emphasis>presto</emphasis> are authoritative for <emphasis>example.org</emphasis>.  The owner of the domain
might give permission for somebody, maybe in a different country, to run a
subdomain <emphasis>china.example.org</emphasis>, with nameservers
<emphasis>beijing.china.example.org</emphasis> and <emphasis>xianggang.china.example.org</emphasis>.
Because there are different name servers, there are two zones:
<emphasis>freebie.example.org</emphasis> would be authoritative for the zone
<emphasis>example.org</emphasis>, but not for <emphasis>china.example.org</emphasis>.
<emphasis>beijing.china.example.org</emphasis> and <emphasis>xianggang.china.example.org</emphasis> would
be authoritative for the zone <emphasis>china.example.org</emphasis>, but not for
<emphasis>example.org</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>Setting up a name server</title>

<para><indexterm><primary>name</primary><secondary>server</secondary></indexterm>
<anchor id="CFBSD-DNS-setup"/>
<indexterm><primary>named</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>named</secondary></indexterm>
<indexterm><primary>name</primary><secondary>dæmon</secondary></indexterm>
DNS service is supplied by the <emphasis>name dæmon</emphasis>, <emphasis>named</emphasis>.  <emphasis>named</emphasis>
can be run in a number of different modes.  In this chapter, we'll concentrate
on setting the appropriate configurations for our reference network.  If you
want to go further, check the following documents:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>BIND Operations Guide</emphasis>, in the source distribution in the directory
<emphasis>/usr/src/contrib/bind/doc/bog</emphasis>.  To make a printable version, change to
that directory and type <emphasis>make</emphasis> to create an ASCII version <emphasis>file.lst</emphasis>,
or <emphasis>make file.psf</emphasis> to create the printable PostScript version
<emphasis>file.psf</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>TCP/IP Network Administration</emphasis>, by Craig Hunt.
</para>
</listitem>
<listitem>

<para><emphasis>DNS and BIND</emphasis>, by Paul Albitz and Cricket Liu.
</para>
</listitem>
</itemizedlist>

<para>BIND has recently undergone some significant changes, partially as a result of
abuse on the net.  The current version is 8.1.2, but most documentation refers
to version 4 (there were no versions 5, 6 or 7).  The main configuration file
has changed its format completely since version 4; even the name has changed.
We'll look at how to convert the formats on page <xref linkend="CFBSD-bind-upgrade"/>.  Before using
the documentation above, make sure that it refers to version 8 of BIND (at the
time of writing the BIND Operations Guide didn't, for example).
</para>
</sect1>
<sect1>
<title>Passive DNS usage</title>

<para><indexterm><primary>passive</primary><secondary>DNS usage</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>usage</secondary></indexterm>
Not every system needs to run its own name d&aelig;gmon.  If you have another
machine on the same network, you can send requests to it.  For example, in the
reference network, <emphasis>freebie</emphasis> and <emphasis>presto</emphasis> may be running name
servers.  There's no particular reason for <emphasis>bumble</emphasis> and <emphasis>wait</emphasis>, both
presumably slower machines, to do so as well.  Instead, you can tell them to use
the name servers on the other two machines.
</para>

<para><indexterm><primary>/etc/defaults/rc.conf</primary></indexterm>
To do this, make sure that the following line is set in your
<emphasis>/etc/defaults/rc.conf</emphasis>, and that there is nothing in <emphasis>/etc/rc.conf</emphasis>
which overrides it.  This is the normal situation.
</para>
<programlisting>
named_enable="NO"			# Run named, the DNS server (or NO).
</programlisting>

<para><indexterm><primary>/etc/resolv.conf</primary></indexterm>
Create a file <emphasis>/etc/resolv.conf</emphasis> with the following contents:
</para>
<programlisting>
domain example.org
nameserver 223.147.37.1		# freebie
nameserver 223.147.37.2		# presto
</programlisting>

<para>Note that you need to specify IP addresses here.  This is a classic
chicken-and-egg problem: you can't access the name server to get its address
until you know its address.
</para>

<para>With this file in place, this machine will send all name server requests to
<emphasis>freebie</emphasis> or <emphasis>presto</emphasis>.  We'll look at their configuration later.
</para>
</sect1>
<sect1>
<title>Name server on a standalone system</title>

<para><anchor id="CFBSD-running-named"/>
<indexterm><primary>caching-only</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
If you only have a single machine connected to the network via a PPP link, and
your own machine is part of the ISP's zone, you can use the <emphasis>resolv.conf</emphasis>
method as well.  But it's not a good idea.  Every lookup goes over the link,
which is relatively slow.  Since the results of the lookup aren't stored
anywhere locally, you can end up performing the same lookup again and again.
The answer is obvious: save the information locally.  You can do this with a
<emphasis>caching-only name server</emphasis>.  As the name suggests, the caching-only name
server doesn't have any information of its own, but it stores the results of any
queries it makes to other systems, so if a program makes the same request
again&mdash;which happens very frequently&mdash;it presents the results much more
quickly on subsequent requests.
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/resolv.conf</primary></indexterm>
Either rename or remove <emphasis>/etc/resolv.conf</emphasis>, and create a new one with the
following contents:
</para>
<programlisting>
nameserver 127.0.0.1				<emphasis>local name server</emphasis>
nameserver 139.130.237.3			<emphasis>ISP's first name server</emphasis>
nameserver 139.130.237.17			<emphasis>ISP's second name server</emphasis>
</programlisting>

<para><emphasis>/etc/resolv.conf</emphasis> isn't necessary, but if you have one like in the example,
lookups will still succeed (but a little more slowly) if your name server should
fail for any reason.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
Put this line in <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
named_enable="YES"				# Run named, the DNS server (or NO).
</programlisting>

<para>If <emphasis>/etc/rc.conf</emphasis> doesn't exist, just create one with this content.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/namedb/localhost.rev</primary></indexterm>
Create a file <emphasis>/etc/namedb/localhost.rev</emphasis> containing:
</para>
<programlisting>
@       IN	SOA     @host@. root.@host@.  (
                                @date@  ; Serial
                                3600    ; Refresh
                                300     ; Retry
                                3600000 ; Expire
                                3600 )  ; Minimum
        IN	NS      @host@.
1       IN	PTR     localhost.@domain@.
</programlisting>

<para><indexterm><primary>/etc/namedb/PROTO.localhost.rev</primary></indexterm>
To create the file, you can start with the file
<emphasis>/etc/namedb/PROTO.localhost.rev</emphasis>, which contains a template for this file.
Replace <emphasis>@host@</emphasis> with the FQDN of your host (<emphasis>freebie.example.org</emphasis>
in this example), <emphasis>@date@</emphasis> (the serial number) with the date in the form
<emphasis>yyyymmddxx</emphasis>,
<footnote>

<para>We'll look at the serial number on page <xref linkend="CFBSD-DNS-serial-number"/>.
</para>
</footnote>
<indexterm><primary>/etc/namedb/make-localhost</primary></indexterm>
and <emphasis>@domain@</emphasis> with <emphasis>example.org.</emphasis>.  Make sure that the FQDNs end with
a trailing period.  Alternatively, you can run the script
<emphasis>/etc/namedb/make-localhost</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/namedb/named.conf</primary></indexterm>
Edit the file <emphasis>/etc/namedb/named.conf</emphasis> to contain:
<anchor id="CFBSD-passive-dns"/>
</para>
<programlisting>
options {
	directory "/etc/namedb";

	forwarders {
		139.130.237.3;   139.130.237.17;
	};

zone "0.0.127.in-addr.arpa" {
        type master;
        file "localhost.rev";
};
</programlisting>

<para><emphasis>/etc/namedb/named.conf</emphasis> should already be present on your system as well.
It contains a lot of comments, but at the end there's a similar zone definition,
which you can edit if you want.  The address <emphasis>139.130.237.3</emphasis> is the ISP's
name server address.  The <emphasis>forwarders</emphasis> line contains up to ten name server
addresses.  In this case, we're assuming that an additional name server exists
with the address <emphasis>139.130.237.17</emphasis>.
</para>
</listitem>
<listitem>

<para>Start <emphasis>named</emphasis>:
</para>
<programlisting>
# <command>named</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>Name server on an end-user network</title>

<para>Of course, a simple caching-only name server won't work when you have your own
domain.  In fact, most of the authorities who allocate domain names won't even
let you register an Internet domain unless you specify two functional name
servers, and they'll check them before the registration can proceed.  In this
section, we'll look at what you need to do to run a ``real'' name server.
</para>

<para><indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>/etc/namedb</primary></indexterm>
<indexterm><primary>/etc/namedb/db.example.org</primary></indexterm>
The first thing we need to do is to create a configuration file for our zone
<emphasis>example.org</emphasis>.  We'll put it and all other configuration files in a
directory <emphasis>/etc/namedb</emphasis> and call it <emphasis>/etc/namedb/db.example.org</emphasis>.
</para>
<sect2>
<title>The SOA record</title>

<para><indexterm><primary>Start</primary><secondary>of Authority</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>Start of Authority record</secondary></indexterm>
<indexterm><primary>SOA</primary><secondary>DNS record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>record</secondary></indexterm>
The first thing we need is a record describing the <emphasis>Start of Authority</emphasis>.
This defines a new zone.  Write:
</para>
<programlisting>
example.org.	IN	SOA	freebie.example.org. grog.example.org.  (
			1997010902 ; Serial (date, 2 digits version of day)
			86400   ; refresh (1 day)
			7200    ; retry (2 hours)
			8640000 ; expire (100 days)
			86400 ) ; minimum (1 day)
</programlisting>

<para><indexterm><primary>freebie.example.org</primary></indexterm>
<indexterm><primary>origin</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>origin</secondary></indexterm>
The name on the left is the name of the zone.  The keyword <emphasis>IN</emphasis> means
<emphasis>Internet</emphasis>, in other words the Internet Protocols.  The BIND software
includes support for multiple network types, most of which have now been
forgotten.  The keyword <emphasis>SOA</emphasis> defines the type of record.
<emphasis>freebie.example.org</emphasis> is called the <emphasis>origin</emphasis> of the zone.  It should
be the primary name server.
</para>

<para>The next field, <emphasis>grog.example.org</emphasis>, is the mail address of the DNS
administrator.  Wait a minute, you may say, that's not a mail address.  There
should be a <emphasis>@</emphasis> there, not a <emphasis>.</emphasis>.  That's right.  Unfortunately, DNS
uses the <emphasis>@</emphasis> sign for other purposes, and it would be a syntax error in
this position.  So the implementors resorted to this kludge.  To generate the
mail ID, replace the first <emphasis>.</emphasis> with a <emphasis>@</emphasis>, to give you
<emphasis>grog@example.org</emphasis>.
</para>

<para><anchor id="CFBSD-DNS-serial-number"/>
<indexterm><primary>serial</primary><secondary>number</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>serial number</secondary></indexterm>
The <emphasis>serial number</emphasis> identifies this version of the zone configuration.
Remote name servers first retreive the SOA record and check if the serial number
has incremented before deciding whether to load the whole zone, which could be
large.  Make sure you increment this field every time you edit the file.  If you
don't, your updates will not propagate to other name servers.  It's a good idea
to use a format which reflects the date, as here: the format gives four digits
for the year (so that you don't run into problems in the year 2000), two digits
for the month, two for the day, and two for the number of the modification on a
particular day.  The serial number in this example shows it to be the second
modification to the zone configuration on 9 September 1997.
</para>

<para>The remaining parameters describe the timeout characteristics of the zone.  All
parameters are specified in seconds.
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>refresh</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>refresh</secondary></indexterm>
The <emphasis>refresh</emphasis> time is the time after which a remote name server will check
whether the zone configuration has changed.  1 day is reasonable here unless you
change your configuration several times per day.
</para>
</listitem>
<listitem>

<para><indexterm><primary>retry</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>retry</secondary></indexterm>
The <emphasis>retry</emphasis> time is the time to wait if an attempt to load the zone fails.
</para>
</listitem>
<listitem>

<para><indexterm><primary>expire</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>expire</secondary></indexterm>
The <emphasis>expire</emphasis> time is the time after which a secondary name server will
drop the information about a zone if it has not been able to reload it from the
primary name server.  You probably want to make this large.
</para>
</listitem>
<listitem>

<para><indexterm><primary>minimum</primary><secondary>time to live</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>minimum time to live</secondary></indexterm>
The <emphasis>minimum time to live</emphasis> is the minimum time that a remote name server
should cache records from this zone.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>The A records</title>

<para><indexterm><primary>A</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>A record</secondary></indexterm>
<indexterm><primary>example.org</primary></indexterm>
The most obvious thing you need are the IP addresses of the systems on the
network.  In the zone <emphasis>example.org</emphasis>, you define the A records like this:
</para>
<programlisting>
freebie		IN	A	223.147.37.1
presto		IN	A	223.147.37.2
bumble		IN	A	223.147.37.3
wait			IN	A	223.147.37.4
gw			IN	A	223.147.37.5
</programlisting>

<para>In practice, as we will see in the completed configuration file, we tend to put
the A records further towards the end of the list, since they are usually the
most numerous.  It makes the file easier to read if we put them after the short
entries.
</para>
</sect2>
<sect2>
<title>The NS records</title>

<para><indexterm><primary>NS</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>NS record</secondary></indexterm>
For efficiency's sake, DNS uses a special kind of record to tell where your name
servers are.  In our case, we're running name servers on <emphasis>freebie</emphasis> and
<emphasis>presto</emphasis>.  We could write:
</para>
<programlisting>
		IN	NS	freebie.example.org.
		IN	NS	presto.example.org.
</programlisting>

<para>This would work just fine, but in fact, we'll do it a little differently, as
we'll see in the next section.
</para>
</sect2>
<sect2>
<title>Nicknames</title>

<para><indexterm><primary>nickname</primary><secondary>DNS</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>nickname</secondary></indexterm>
<anchor id="CFBSD-DNS-CNAME"/>
<indexterm><primary>www.example.org</primary></indexterm>
<indexterm><primary>ftp.example.org</primary></indexterm>
<indexterm><primary>ns.example.org</primary></indexterm>
We're running a whole lot of services on the reference network, in particular a
Web server and an ftp server.  By convention, a web server machine is called
<emphasis>www</emphasis>, an ftp server is called <emphasis>ftp</emphasis>, and a name server is called
<emphasis>ns</emphasis>.  But we don't have machines like that.  What do we do?  We give our
machines nicknames:
</para>
<programlisting>
www		IN	CNAME		freebie
ftp		IN	CNAME		presto
</programlisting>

<para>We'd like to do the same with the name servers, but unfortunately DNS doesn't
like that, and will complain about your DNS configuration all over the world if
you make <emphasis>ns</emphasis> a CNAME.  There's a good reason for this: if you use CNAME
records to define your name servers, remote systems have to perform two lookups
to find the address of the name server, one to retreive the CNAME and one to get
the corresponding A record for the CNAME.  Define new A records for them:
</para>
<programlisting>
		IN	NS	ns
		IN	NS	ns1

ns		IN	A	223.147.37.1
ns1		IN	A	223.147.37.2
</programlisting>

<para>You'll note that we're using relative domain names here.  They are taken to be
relative to the name which starts the SOA record.
</para>
</sect2>
<sect2>
<title>The MX records</title>

<para><indexterm><primary>MX</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>MX record</secondary></indexterm>
<anchor id="CFBSD-DNS-MX-record"/>
<indexterm><primary>mail.example.net</primary></indexterm>
As we will see on page <xref linkend="CFBSD-email-MX-record"/>, you can send mail to hosts listed in
an A record, but it's not a good idea.  Instead, you should have some MX records
to tell SMTP what to do with mail for your domain.  This method has an added
advantage: it allows you to rename individual machines without having to change
the users' mail IDs.  We'll take this advice and assume that all mail is sent to
\f(CIuser<emphasis>@example.org</emphasis>.  In addition, we'll use the ISP's mail server
<emphasis>mail.example.net</emphasis> as a backup in case our mail server is down.  That way,
when it comes back up, the delivery will be expedited.  The resulting MX records
look like:
</para>
<programlisting>
		IN	MX	50  bumble.example.org.
		IN	MX	100 mail.example.net.
</programlisting>

<para><indexterm><primary>preference</primary><secondary>MX</secondary></indexterm>
<indexterm><primary>MX</primary><secondary>preference</secondary></indexterm>
The numbers 50 and 100 are called <emphasis>preferences</emphasis>.  Theoretically you can make
them 0 and 1, except that you might want to put others in between.  A mail
transfer agent sends mail to the system with the lowest preference unless it
does not respond&mdash;then it tries the MX record with the next-lowest preference,
and so on.
</para>
</sect2>
<sect2>
<title>The HINFO records</title>

<para><indexterm><primary>HINFO</primary><secondary>record</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>HINFO record</secondary></indexterm>
Finally, you may want to tell the world about your hardware and this great
operating system you're running.  You can do that with the HINFO record:
</para>
<programlisting>
freebie		IN	HINFO		"Intel Pentium/133"	"FreeBSD 4.0-CURRENT (4.4BSD)"
presto		IN	HINFO		"Intel Pentium II /233" "FreeBSD 3.2 (4.4BSD)"
bumble		IN	HINFO		"Intel Pentium/133"	"SCO OpenServer"
wait			IN	HINFO		"Intel Pentium Pro 266"  "Microsoft Windows 95%"
gw			IN	HINFO		"Intel 486/33"		"FreeBSD 3.2 (4.4BSD)"
</programlisting>

<para>Of course, telling the world the truth about your hardware also helps crackers
choose the tools to use if they want to break in to your system.  If this
worries you, either don't use HINFO, or put in incorrect information.  It's
still the exception to see HINFO records.
</para>
</sect2>
<sect2>
<title>Putting it all together</title>

<para><indexterm><primary>/etc/namedb/db.example.org</primary></indexterm>
In summary, our configuration file <emphasis>/etc/namedb/db.example.org</emphasis> looks like:
</para>
<programlisting>
; Definition of zone example.org
example.org.	IN	SOA	freebie.example.org. grog.example.org.  (
					1997010902 ; Serial (date, 2 digits version of day)
					86400   ; refresh (1 day)
					7200    ; retry (2 hours)
					8640000 ; expire (100 days)
					86400 ) ; minimum (1 day)

; name servers
			IN	NS		ns
			IN	NS		ns1
ns			IN	A		223.147.37.1
ns1			IN	A		223.147.37.2
; MX records
			IN	MX		50  bumble.example.org.
			IN	MX		100 mail.example.net.

; Hosts
freebie		IN	A		223.147.37.1
presto		IN	A		223.147.37.2
bumble		IN	A		223.147.37.3
wait			IN	A		223.147.37.4
gw			IN	A		223.147.37.5

; nicknames
www			IN	CNAME		freebie
ftp			IN	CNAME		presto

; System information
freebie		IN	HINFO		"Intel Pentium/133"	"FreeBSD 4.0-CURRENT (4.4BSD)"
presto		IN	HINFO		"Intel Pentium II/233" "FreeBSD 3.2 (4.4BSD)"
bumble		IN	HINFO		"Intel Pentium/133"	"SCO OpenServer"
wait			IN	HINFO		"Intel Pentium Pro 266"  "Microsoft Windows 95%"
gw			IN	HINFO		"Intel 486/33"		"FreeBSD 3.2 (4.4BSD)"
</programlisting>

<para>You'll notice that comment lines start with <emphasis>;</emphasis>, and not with the more
usual <emphasis>#</emphasis>.
</para>

<para>That's all the information we need for our zone <emphasis>example.org</emphasis>.  But we're
not done yet, we need another zone.  Read on.
</para>
</sect2>
</sect1>
<sect1>
<title>Reverse lookup</title>

<para><indexterm><primary>reverse</primary><secondary>lookup</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>reverse lookup</secondary></indexterm>
<anchor id="CFBSD-reverse-lookup"/>
<indexterm><primary>/etc/hosts</primary></indexterm>
<emphasis>/etc/hosts</emphasis> is a file, so it can allow you to perform lookup in either
direction.  Not so with DNS: how can you know which name server is authoritative
for the domain if you don't know its name?  You can't, of course, so DNS uses a
trick: it fabricates a name from the address.  For the address
<emphasis>223.147.37.4</emphasis>, it creates a domain name <emphasis>37.147.223.in-addr.arpa</emphasis>
and looks up the name <emphasis>4</emphasis><emphasis>.37.147.223.in-addr.arpa</emphasis>.  You'll note that
the digits of the address are reversed, and the last digit is missing, since it
is considered the host part of the address.  This is one of the remaining cases
where the Internet address classes we discussed on page <xref linkend="CFBSD-inet-address-class"/>
still apply.
</para>

<para><indexterm><primary>/etc/namedb/example-reverse</primary></indexterm>
In order to resolve the names, we need another zone, then.  That means another
file, which we'll call <emphasis>/etc/namedb/example-reverse</emphasis>.  It's not quite as bad
as the forward file:
</para>
<programlisting>
@			IN	SOA	freebie.example.org. grog.example.org.  (
					1996110801 ; Serial (date, 2 digits version of day)
					86400   ; refresh (1 day)
					7200    ; retry (2 hours)
					8640000 ; expire (100 days)
					86400 ) ; minimum (1 day)
			IN	NS	ns.example.org.
			IN	NS	ns1.example.org.

1			IN	PTR	freebie.example.org.
2			IN	PTR	presto.example.org.
3			IN	PTR	bumble.example.org.
4			IN	PTR	wait.example.org.
5			IN	PTR	gw.example.org.
</programlisting>

<para><indexterm><primary>/etc/namedb/db.example.org</primary></indexterm>
<indexterm><primary>/etc/named/named.root</primary></indexterm>
In this case, the SOA record is identical to that in
<emphasis>/etc/namedb/db.example.org</emphasis>, with two exceptions: instead of the zone name
at the beginning of the line, we have the <emphasis>@</emphasis> symbol, and the serial
number is different: you don't normally need to update reverse lookup domains so
often.  This <emphasis>@</emphasis> symbol represents the name of the zone, in this case
<emphasis>37.147.223.in-addr.arpa.</emphasis>.  We'll see how that works when we make the
<emphasis>/etc/named/named.root</emphasis> file below.  We also use the same name server
entries.  This time they need to be fully qualified, since they are in a
different zone.
</para>

<para>Finally, we have the PTR (reverse lookup) records.  They specify only the last
digit (the host part) of the IP address, so this will be prepended to the zone
name.  The host name at the end of the line is in fully-qualified form, since
it's in another zone.  For example, in fully-qualified form, the entry for
<emphasis>wait</emphasis> could be written:
</para>
<programlisting>
4.37.147.223.in-addr.arpa.		IN	PTR	wait.example.org.
</programlisting>

<para></para>
<sect2>
<title>The distant view: the outside world</title>

<para><indexterm><primary>freefall.FreeBSD.org</primary></indexterm>
So far, we have gone to a lot of trouble to describe our own tiny part of the
Internet.  What about the rest?  How can the name server find the address of,
say, <emphasis>freefall.FreeBSD.org</emphasis>?  So far, it can't.
</para>

<para><indexterm><primary>root</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>A.ROOT-SERVERS.NET.</primary></indexterm>
<indexterm><primary>/etc/namedb/named.root</primary></indexterm>
What we need now is some information about other name servers who can help us,
specifically the thirteen <emphasis>root name servers</emphasis>.  These are named
<emphasis>A.ROOT-SERVERS.NET.</emphasis> through <emphasis>M.ROOT-SERVERS.NET.</emphasis>.  They are
described in a file which you can get from
<emphasis>ftp://ftp.rs.internic.net/domain/named.root</emphasis> if necessary, but you
shouldn't need to: after installing FreeBSD, it should be present in
<emphasis>/etc/namedb/named.root</emphasis>.  This file has hardly changed in years&mdash;the
names have changed (only once), but the addresses have stayed the same.  Of
course, it's always a good idea to check from time to time.
</para>
</sect2>
<sect2>
<title>The named.conf file</title>

<para><indexterm><primary>/etc/namedb/named.conf</primary></indexterm>
So far, we have two files, one for each zone for which our name server is
authoritative.  In a large system, there could be many more.  What we need now
is to tell the name server which files to use.  That's the main purpose of
<emphasis>named.conf</emphasis>.  There's already a skeleton in <emphasis>/etc/namedb/named.conf</emphasis>.
With most of the comments stripped, it looks like:
</para>
<programlisting>
options {
	directory "/etc/namedb";
	forwarders {
		127.0.0.1;
	};

zone "." {
	type hint;
	file "named.root";
};

zone "0.0.127.IN-ADDR.ARPA" {
	type master;
	file "localhost.rev";
};

zone "domain.com" {
	type slave;
	file "s/domain.com.bak";
	masters {
		192.168.1.1;
	};
};

zone "0.168.192.in-addr.arpa" {
	type slave;
	file "s/0.168.192.in-addr.arpa.bak";
	masters {
		192.168.1.1;
	};
};
</programlisting>

<para>Each entry consists of a keyword followed by text in braces (<emphasis>{}</emphasis>).  These
entries have the following significance:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>directory</emphasis> entry tells <emphasis>named</emphasis> where to look for the
configuration files.
</para>
</listitem>
<listitem>

<para><indexterm><primary>named.root</primary></indexterm>
The first zone is the top-level domain, <emphasis>.</emphasis>.  It's a hint: it tells
<emphasis>named</emphasis> to look in the file <emphasis>named.root</emphasis> in its configuration
directory.  <emphasis>named.root</emphasis> contains the IP addresses of the 13 top-level
name servers.
</para>
</listitem>
<listitem>

<para>We've seen the entry for <emphasis>0.0.127.IN-ADDR.ARPA</emphasis> already on page
<xref linkend="CFBSD-passive-dns"/>: it's the reverse lookup for the localhost address.
</para>
</listitem>
<listitem>

<para>The <emphasis>hint</emphasis> entry specifies the name of the file describing the root
servers (domain <emphasis>.</emphasis>).
</para>
</listitem>
<listitem>

<para><indexterm><primary>slave</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
<indexterm><primary>master</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
<indexterm><primary>secondary</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
<indexterm><primary>primary</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
The zone entries for <emphasis>domain.com</emphasis> and <emphasis>0.168.192.in-addr.arpa</emphasis>
define <emphasis>slave name servers</emphasis>.  A slave name server addresses all queries to
one of the specified <emphasis>master name servers</emphasis>.  In earlier versions of DNS, a
slave name server is called a <emphasis>secondary name server</emphasis>, and the master name
server was called a <emphasis>primary name server</emphasis>.  Since this is still current
usage outside BIND, and the documentation is not yet available, expect this to
change.  In this chapter, we'll retain the old terminology.
</para>
</listitem>
</itemizedlist>

<para>This file already contains most of the information we need.  The only things we
need to add is the information about the names of our zones and the location of
the description file:
</para>
<programlisting>
zone "example.org" {
        type master;
        file "db.example.org";
};

zone "37.147.223.in-addr.arpa" {
        type master;
        file "example-reverse";
};
</programlisting>

<para>When we've done that, we can start the name server:
</para>
<programlisting>
# <command>named</command>
</programlisting>

<para>If it's already running, we can restart it with a <emphasis>SIGHUP</emphasis> signal:
<anchor id="CFBSD-named-sighup"/>
</para>
<programlisting>
# <command>ps aux | grep named</command>
 root      55  0.0  1.0  1140  928  ??  Is   Thu12PM   0:25.66 named
# <command>kill -1 55</command>
</programlisting>

<para><indexterm><primary>/var/run/named.pid</primary></indexterm>
Alternatively we can use the a file <emphasis>/var/run/named.pid</emphasis>, which
contains the PID of <emphasis>named</emphasis>, and write:
</para>
<programlisting>
# <command>kill -1 `cat /var/run/named.pid`
</command></programlisting>

<para>Note the backquotes (<emphasis>``</emphasis>): they tell the shell to run the program
enclosed inside and replace the text with the standard output of the program.
If <emphasis>/var/run/named.pid</emphasis> contains the text <emphasis>55</emphasis>, this will
effectively reduce to <emphasis>kill -1 55</emphasis>.  The disadvantage of this method is
that it's easier to use <emphasis>ps</emphasis> to find the PID (and to confirm that it's
correct) than remember the name of the file (is it <emphasis>/etc/named.pid</emphasis>?  Is
it <emphasis>/var/run/named.pid</emphasis>?  Is it <emphasis>/var/run/pid.named</emphasis>?
</para>

<para><indexterm><primary>syslog</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>syslog</secondary></indexterm>
<indexterm><primary>/var/log/messages</primary></indexterm>
<indexterm><primary>named</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>named</secondary></indexterm>
Starting or restarting the name server doesn't mean it will work, of course.  If
you make a mistake in your configuration files, it may not work at all.
Otherwise it might start, but refuse to load specific zones.  <emphasis>named</emphasis> logs
messages with <emphasis>syslog</emphasis>, and if you are using the standard <emphasis>syslog</emphasis>
configuration they will be written to the console and to the file
<emphasis>/var/log/messages</emphasis>.  After starting <emphasis>named</emphasis>, you should check what it
said.  You should see something like:
</para>
<programlisting>
May 10 14:18:35 freebie named[1360]: starting.  named 8.1.2 Sun May  9 13:04:13 CST 1
999  grog@freebie.example.org:/usr/obj/usr.sbin/named
May 10 14:18:35 freebie named[1360]: master zone "example.org" (IN) loaded (serial 19
97010902)
May 10 14:18:35 freebie named[1360]: master zone "37.147.223.in-addr.arpa" (IN) loade
d (serial 1996110801)
May 10 14:18:35 freebie named[1360]: listening on [223.147.37.2].53 (ep0)
May 10 14:18:35 freebie named[1360]: listening on [127.0.0.1].53 (lo0)
May 10 14:18:35 freebie named[1360]: Forwarding source address is [0.0.0.0].1063
May 10 14:18:35 freebie named[1361]: Ready to answer queries.
</programlisting>

<para>What you don't want to see are error messages like:
</para>
<programlisting>
May 10 14:26:37 freebie named[1361]: db.example.org: Line 28: Unknown type: System.
May 10 14:26:37 freebie named[1361]: db.example.org:28: Database error (System)
May 10 14:26:37 freebie named[1361]: master zone "example.org" (IN) rejected due to e
rrors (serial 1997010902)
</programlisting>

<para><indexterm><primary>/etc/namedb/db.example.org</primary></indexterm>
Funny: if you look at line 28 of <emphasis>/etc/namedb/db.example.org</emphasis>, it looks
straightforward enough:
</para>
<programlisting>
# System information
freebie		IN	HINFO		"Intel Pentium/133"	"FreeBSD 3.0-CURRENT (4.4BSD)"
presto		IN	HINFO		"Intel Pentium II/233" "FreeBSD 2.2.5 (4.4BSD)"
</programlisting>

<para>The problem here is that <emphasis>named</emphasis> doesn't use the standard UNIX convention
for comments: the comment character is a semicolon (<emphasis>;</emphasis>), not a hash mark
(<emphasis>#</emphasis>).
</para>

<para>Most other configuration errors should be self-explanatory.  On page
<xref linkend="CFBSD-dns-runtime-errors"/> we'll look at messages that <emphasis>named</emphasis> produces during
normal operation.
</para>
</sect2>
</sect1>
<sect1>
<title>Secondary name servers</title>

<para><indexterm><primary>secondary</primary><secondary>name server</secondary></indexterm>
<indexterm><primary>name</primary><secondary>server</secondary></indexterm>
A lot of software relies on name resolution.  If for any reason a name server is
not accessible, it can cause serious problems.  This is one of the reasons why
InterNIC insists on at least two name servers before it will register a domain.
</para>

<para><indexterm><primary>/etc/namedb/named.conf</primary></indexterm>
If you run multiple name servers, it doesn't really matter which one answers.
So why a distinction between <emphasis>primary</emphasis> and <emphasis>secondary</emphasis> name servers?
It's purely organizational: a primary name server loads its data from the
configuration files you create, as we saw above.  A secondary name server loads
its data from a primary name server if it is running.  It saves the information
in a private file so that if it is restarted while the primary name server isn't
running, it can reload information about the zones it is serving from this file.
This makes it a lot easier to configure a secondary name server, of course: all
we need is in <emphasis>/etc/namedb/named.conf</emphasis>:
</para>
<programlisting>
zone "." {
        type hint;
        file "named.root";
};

zone "example.org" {
        type slave;
        file "backup.example.org";
        masters {
                223.147.37.1;
        };
};

zone "37.147.223.in-addr.arpa" {
        type slave;
        file "backup.example-reverse";
        masters {
                223.147.37.1;
        };
};

zone "0.0.127.in-addr.arpa" {
        type slave;
        file "localhost.rev";
        masters {
                223.147.37.1;
        };
};
</programlisting>

<para><anchor id="CFBSD-secondary-dns-backup-file"/>
<indexterm><primary>freebie.example.org</primary></indexterm>
<indexterm><primary>backup</primary><secondary>file</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>backup file</secondary></indexterm>
Recall that BIND version 8 uses the terms <emphasis>master</emphasis> and <emphasis>slave</emphasis> for
primary and secondary name servers.
</para>

<para>The numerical address is for <emphasis>freebie.example.org</emphasis>, the name server from
which the zone is to be loaded.  We use the numerical address because the name
server needs the address before it can perform resolution.  You can specify
multiple name servers if you want.  The <emphasis>backup file</emphasis> is the name of the
file where the zone information should be saved in case the name server is
restarted when the primary name server is not accessible.
</para>
</sect1>
<sect1>
<title>The next level up: delegating zones</title>

<para><indexterm><primary>delegating</primary><secondary>zones</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>delegating zones</secondary></indexterm>
<indexterm><primary>china.example.org</primary></indexterm>
In the previous example, we configured a name server for a single zone with no
subzones.  We did briefly consider what would happen if we created a subdomain
<emphasis>china.example.org</emphasis>.  In this section, we'll create the configuration
files for this subzone.
</para>
<sect2>
<title>china.example.org</title>

<para>For the subdomain <emphasis>china.example.org</emphasis>, the same considerations apply as in
our previous example: we have a domain without subdomains.  Only the names and
the addresses change.
</para>

<para><indexterm><primary>beijing.china.example.org</primary></indexterm>
<indexterm><primary>xianggang.china.example.org</primary></indexterm>
<indexterm><primary>/etc/namedb/db.china.example.org</primary></indexterm>
In the following examples, let's assume that <emphasis>china.example.org</emphasis> has two
name servers, <emphasis>beijing.china.example.org</emphasis> and
<emphasis>xianggang.china.example.org</emphasis>.  Let's look at the files we might have on
these systems, starting with <emphasis>/etc/namedb/db.china.example.org</emphasis>:
</para>
<programlisting>
; Definition of zone example.org
@			IN	SOA	beijing.china.example.org. zhang.china.example.org.  (
					1997070101 ; Serial (date, 2 digits version of day)
					86400   ; refresh (1 day)
					7200    ; retry (2 hours)
					8640000 ; expire (100 days)
					86400 ) ; minimum (1 day)

; name servers
			IN	NS	ns
			IN	NS	ns1
ns			IN	A	223.169.23.1
ns1			IN	A	223.169.23.2
; MX records
			IN	MX	50  xianggang.china.example.org.
			IN	MX	70  bumble.example.org.
			IN	MX	100 mail.example.net.

; Hosts
beijing		IN	A	223.169.23.1
xianggang		IN	A	223.169.23.2
shanghai		IN	A	223.169.23.3
guangzhou		IN	A	223.169.23.4
gw			IN	A	223.169.23.5

; nicknames
www			IN	CNAME		shanghai
ftp			IN	CNAME		shanghai
</programlisting>

<para><indexterm><primary>/etc/namedb/china-reverse</primary></indexterm>
Then, <emphasis>/etc/namedb/china-reverse</emphasis>:
</para>
<programlisting>
; Definition of zone china.example.org
@			IN	SOA	beijing.china.example.org. zhang.china.example.org.  (
					1997090501 ; Serial (date, 2 digits version of day)
					86400   ; refresh (1 day)
					7200    ; retry (2 hours)
					8640000 ; expire (100 days)
					86400 ) ; minimum (1 day)

; name servers
			IN	NS	ns.china.example.org.
			IN	NS	ns1.china.example.org.

; Hosts
1			IN	PTR	beijing
2			IN	PTR	xianggang
3			IN	PTR	shanghai
4			IN	PTR	guangzhou
5			IN	PTR	gw
</programlisting>

<para><indexterm><primary>/etc/namedb/named.conf</primary></indexterm>
and finally <emphasis>/etc/namedb/named.conf</emphasis>:
</para>
<programlisting>
zone "." {
        type hint;
        file "named.root";
};

zone "0.0.127.IN-ADDR.ARPA" {
        type master;
        file "localhost.rev";
};

zone "china.example.org" {
        type master;
        file "db.china.example.org";
};

zone "23.169.233.IN-ADDR.ARPA" {
        type master;
        file "china-reverse";
};
</programlisting>

<para>These files look very much like the corresponding files for <emphasis>example.org</emphasis>.
The real difference happens in the configuration for <emphasis>example.org</emphasis>, not
for <emphasis>china.example.org</emphasis>.  We'll look at it next.
</para>
</sect2>
<sect2>
<title>example.org with delegation</title>

<para>What does <emphasis>example.org</emphasis>'s name server need to know about
<emphasis>china.example.org</emphasis>?  You might think, ``nothing, they're separate
zones'', but that's not completely true.  The parent domain maintains name
server records for the subdomain, since any query for <emphasis>china.example.org</emphasis>
first goes via <emphasis>example.org</emphasis>.  It's obviously a good idea for the name
servers for <emphasis>example.org</emphasis> to maintain a secondary name server for
<emphasis>china</emphasis>, since that way we can save a lookup to the primary name servers for
<emphasis>china.example.org</emphasis> most of the time.  To do so, we add the following line
to <emphasis>/etc/namedb/named.conf</emphasis>:
</para>
<programlisting>
zone "china.example.org" {
        type slave;
        file "backup.china";
        masters {
                223.169.23.1;
                223.169.23.2;
        };
};

zone "23.169.223.in-addr.arpa" {
        type slave;
        file "backup.china-reverse";
        masters {
                223.169.23.1;
                223.169.23.2;
        };
};
</programlisting>

<para><indexterm><primary>/etc/namedb/db.example.org</primary></indexterm>
We add the following information to <emphasis>/etc/namedb/db.example.org</emphasis>:
</para>
<programlisting>
@			IN	SOA	freebie.example.org. grog.example.org.  (
					1997090501 ; Serial (date, 2 digits version of day)
					86400   ; refresh (1 day)
					7200    ; retry (2 hours)
					8640000 ; expire (100 days)
					86400 ) ; minimum (1 day)

china			IN	NS	ns.china.example.org.
china			IN	NS	ns1.china.example.org.
china			IN	NS	ns.example.org.

ns.china		IN	A	223.169.23.1
ns1.china		IN	A	223.169.23.2
</programlisting>

<para>Since we changed the information, we also change the serial number of the SOA
record so that the secondary name servers for <emphasis>example.org</emphasis> will reload
the updated information.
</para>

<para>We need to specify the addresses of the name servers as well, although strictly
speaking they belong to the zone <emphasis>china</emphasis>, because there is no way to find
these addresses from <emphasis>china.example.org</emphasis>: these are the addresses to which
we need to send any kind of query.
</para>

<para>After changing the configuration like this, we restart the name server and check
the output, either by looking on the system console, or by using the command
<emphasis>tail /var/log/messages</emphasis>.  We'll see something like:
</para>
<programlisting>
May 10 15:03:36 freebie named[1408]: starting.  named 8.1.2 Sun May  9 13:04:13 CST 1
999  grog@freebie.example.org:/usr/obj/usr.sbin/named
May 10 15:03:36 freebie named[1408]: cache zone "" (IN) loaded (serial 0)
May 10 15:03:36 freebie named[1408]: master zone "0.0.127.IN-ADDR.ARPA" (IN) loaded (
serial 97091501)
May 10 15:03:36 freebie named[1408]: master zone "example.org" (IN) loaded (serial 19
97090501)
May 10 15:03:36 freebie named[1408]: master zone "37.147.223.in-addr.arpa" (IN) loade
d (serial 1996110801)
May 10 15:03:36 freebie named[1408]: listening on [223.147.37.1].53 (ep0)
May 10 15:03:36 freebie named[1408]: listening on [127.0.0.1].53 (lo0)
May 10 15:03:36 freebie named[1408]: Forwarding source address is [0.0.0.0].1072
May 10 15:03:36 freebie named[1409]: Ready to answer queries.
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Messages from named</title>

<para><indexterm><primary>named</primary><secondary>messages</secondary></indexterm>
<anchor id="CFBSD-dns-runtime-errors"/>
Once your <emphasis>named</emphasis> is up and running, it may still produce a number of
messages.  Here are some examples:
<!-- XXX.Dx -->
<!-- XXXMay 10 14:18:45 freebie named[1361]: Sent NOTIFY for "37.147.223.in-addr.arpa IN SOA"  -->
<!-- XXX(37.147.223.in-addr.arpa); 2 NS, 2 A -->
<!-- XXXMay 10 14:19:03 freebie named[1361]: Sent NOTIFY for "example.org IN SOA" (example.or -->
<!-- XXXg); 2 NS, 2 A -->
<!-- XXX.De -->
</para>
<programlisting>
May 10 15:09:06 freebie named[124]: approved AXFR from [223.147.37.5].2872 for "ex
ample.org"
May 10 15:09:06 freebie named[124]: zone transfer of "example.org" (IN) to [192.10
9.197.137].2872
</programlisting>

<para>These messages indicate that another name server has loaded the zone specified.
This will typically be one of your secondary name servers.  This should happen
about as often as you have specified in your <emphasis>refresh</emphasis> parameter for the
zone.
<!-- XXX  By default, BIND version 8 will deny access to any other servers, will -->
<!--  XXXit? -->
</para>
<programlisting>
Sep 13 10:17:04 freebie named[55]: ns_resp: query(example.org) contains our address (F
REEBIE.example.org:223.147.37.1) learnt (A=198.41.0.4:NS=198.41.0.4)
</programlisting>

<para><indexterm><primary>lame</primary><secondary>delegation</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>lame delegation</secondary></indexterm>
This message indicates that the server indicated by the A record has asked us to
forward a query whose nameserver list includes our own name or address(es).
This used to be called a <emphasis>lame delegation</emphasis>.  It's interesting that the
address in this (real) message was <emphasis>a.root-servers.net</emphasis>, one of the nine
base servers for the whole Internet, which was probably forwarding a query from
some other system.  The server doesn't check the validity of the queries it
forwards, so it's quite possible that they could be in error.
</para>
<programlisting>
Sep 14 03:33:18 freebie named[55]: ns_forw: query(goldsword.com) NS points to CNAME (n
s-user.goldsword.com:) learnt (CNAME=199.170.202.100:NS=199.170.202.100)
</programlisting>

<para>As we saw above, a name server address should be an A record.  The administrator
of this system didn't know this, and pointed it to a CNAME record.
</para>
<programlisting>
Sep 14 15:55:52 freebie named[55]: ns_forw: query(219.158.96.202.in-addr.arpa) A RR ne
gative cache entry (ns.gz.gdpta.net.cn:) learnt (NODATA=202.96.128.68:NS=202.12.28.129)
</programlisting>

<para><indexterm><primary>negative</primary><secondary>cache entry</secondary></indexterm>
<indexterm><primary>DNS</primary><secondary>negative cache entry</secondary></indexterm>
This message indicates that the name server has already found that the name
server specified cannot be found, and has noted that fact in a <emphasis>negative cache
entry</emphasis>.
</para>
</sect1>
<sect1>
<title>Upgrading a version 4 configuration</title>

<para><anchor id="CFBSD-bind-upgrade"/>
Since the last edition of this book, version 8 of <emphasis>named</emphasis>, the DNS
d<emphasis>æmon</emphasis>, has been released.  Since the previous version (version 4)
<footnote>

<para>Don't ask what happened to versions 5, 6 and 7.  Rumour has it that the next
version will be version 16.
</para>
</footnote>
the format of the main configuration file has changed dramatically.  The
previous section described version 8.  If you have an existing DNS configuration
from version 4, the main configuration file will be called
<emphasis>/etc/named.boot</emphasis> or <emphasis>/etc/named/named.boot</emphasis>.  You can convert it to
the <emphasis>named.conf</emphasis> format with the script <emphasis>/usr/sbin/named-bootconf</emphasis>:
</para>
<programlisting>
# <command>named-bootconf &lt; /etc/namedb/named.boot &gt; /etc/namedb/named.conf</command>
</programlisting>

<para></para>
</sect1>
<sect1>
<title>DNS tools</title>

<para><indexterm><primary>DNS</primary><secondary>tools</secondary></indexterm>
<indexterm><primary>tools</primary><secondary>DNS</secondary></indexterm>
A number of tools are available for manipulating DNS entries:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>nslookup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>nslookup</secondary></indexterm>
<indexterm><primary>dig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>dig</secondary></indexterm>
You can use <emphasis>nslookup</emphasis> or <emphasis>dig</emphasis> to look up name information.  It's a
matter of preference which you use.  I use <emphasis>nslookup</emphasis> because the output
format of <emphasis>dig</emphasis> gets on my nerves.  Others prefer <emphasis>dig</emphasis> because its
output is more suited as input to <emphasis>named</emphasis>.  For example, the command
<emphasis>dig @a.root-servers.net . axfr</emphasis> produces a <emphasis>named.root</emphasis> file that
<emphasis>named</emphasis> understands.
</para>
</listitem>
<listitem>

<para><indexterm><primary>named-xfer</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>named-xfer</secondary></indexterm>
You can use <emphasis>named-xfer</emphasis> to download complete zones.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ndc</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ndc</secondary></indexterm>
You can use <emphasis>ndc</emphasis> to communicate with <emphasis>named</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>We'll look briefly at each of these in the following sections.
</para>
<sect2>
<title>nslookup</title>

<para><indexterm><primary>nslookup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>nslookup</secondary></indexterm>
<emphasis>nslookup</emphasis> is a program which performs DNS queries.  Here are some
examples:
</para>
<programlisting>
$ <command>nslookup</command>
Default Server:  freebie.example.org
Address:  0.0.0.0					<emphasis>this appears to be a bug in nslookup&mdash;see below</emphasis>
<!--  sjr: XXX I'll assume that you don't have a resolv.conf file, right? [Mine has -->
<!--  127.0.0.1 as its first nameserver...] -->

&gt; </emphasis><command>199.170.202.100</command>					<emphasis>what was that address in the printout above?
Server:  freebie.example.org
Address:  0.0.0.0

Name:    ns.goldsword.com
Address:  199.170.202.100

&gt; </emphasis><command>hub.freebsd.org</command>					<emphasis>get the address of the system
Server:  freebie.example.org
Address:  0.0.0.0

Name:    hub.freebsd.org
Address:  204.216.27.18

&gt; </emphasis><command>ftp.freebsd.org</command>					<emphasis>get another address
Server:  freebie.example.org
Address:  0.0.0.0

Non-authoritative answer:				<emphasis>this means that the name server</emphasis>
								<emphasis>had the result cached</emphasis>
Name:    wcarchive.cdrom.com			<emphasis>this is a CNAME record: it points</emphasis>
Address:  165.113.121.81				<emphasis>to another system</emphasis>
Aliases:  ftp.freebsd.org

&gt; <command>set type=soa</emphasis>						<emphasis>look for SOA records</command>
&gt; </emphasis><command>freebsd.org</command>						<emphasis>for freebsd.org
Server:  freebie.example.org
Address:  0.0.0.0

Non-authoritative answer:
freebsd.org						<emphasis>this is the SOA record</emphasis>
        origin = implode.root.com
        mail addr = hostmaster.freebsd.org
        serial = 97090900
        refresh = 3600 (1 hour)
        retry   = 600 (10 mins)
        expire  = 604800 (7 days)
        minimum ttl = 3600 (1 hour)

Authoritative answers can be found from:		<emphasis>and these are the name servers</emphasis>
freebsd.org     nameserver = WHO.CDROM.com
freebsd.org     nameserver = NS1.CRL.com
freebsd.org     nameserver = NS2.CRL.com
WHO.CDROM.com   internet address = 204.216.27.3	<emphasis>and their addresses</emphasis>
NS1.CRL.com     internet address = 165.113.1.36
NS2.CRL.com     internet address = 165.113.1.37
</programlisting>

<para>The server IP address in these examples looks funny.  It	 was on the same
machine, so it uses a different method to communicate with the name server (UNIX
domain transport instead of Internet domain transport).  UNIX domain transport
doesn't need addresses, but <emphasis>nslookup</emphasis> leaves a null address there anyway.
This appears to be a harmless bug which has been in <emphasis>nslookup</emphasis> for a long
time.
</para>

<para><indexterm><primary>FreeBSD.org</primary></indexterm>
In this last example, the local name server at <emphasis>example.org</emphasis> already had
the SOA record for <emphasis>FreeBSD.org</emphasis> in its cache.  As a result, it didn't
need to ask the name server which was authoritative for the zone.  It indicates
this fact with the message <emphasis>Non-authoritative answer</emphasis>, and tells you where
you can get a valid answer.  We can do that like this:
</para>
<programlisting>
&gt; <command>server who.cdrom.com</emphasis>				<emphasis>select an authoritative name server</command>
Default Server:  who.cdrom.com
Address:  204.216.27.3				<emphasis>this time the address is correct</emphasis>

&gt; </emphasis><command>freebsd.org.</command>						<emphasis>and repeat the query
Server:  who.cdrom.com
Address:  204.216.27.3

freebsd.org
        origin = implode.root.com
        mail addr = hostmaster.freebsd.org
        serial = 97090900
        refresh = 3600 (1 hour)
        retry   = 600 (10 mins)
        expire  = 604800 (7 days)
        minimum ttl = 3600 (1 hour)
freebsd.org     nameserver = who.cdrom.com
freebsd.org     nameserver = ns1.crl.com
freebsd.org     nameserver = ns2.crl.com
freebsd.org     nameserver = ns.gnome.co.uk
who.cdrom.com   internet address = 204.216.27.3
ns1.crl.com     internet address = 165.113.1.36
ns2.crl.com     internet address = 165.113.1.37
ns.gnome.co.uk  internet address = 193.243.228.142
</programlisting>

<para>Interestingly, though the serial number is the same, the information returned is
not: we have an additional name server.  This is probably an administrative
problem: one of the name servers has not been registered.
</para>

<para>Continuing,
</para>
<programlisting>
&gt; <command>set type=mx</emphasis>						<emphasis>look for MX records</command>
&gt; <command>freebsd.org</command>
Server:  who.cdrom.com
Address:  204.216.27.3

freebsd.org     preference = 10, mail exchanger = hub.freebsd.org
freebsd.org     nameserver = who.cdrom.com
freebsd.org     nameserver = ns1.crl.com
freebsd.org     nameserver = ns2.crl.com
freebsd.org     nameserver = ns.gnome.co.uk
hub.freebsd.org internet address = 204.216.27.18
who.cdrom.com   internet address = 204.216.27.3
ns1.crl.com     internet address = 165.113.1.36
ns2.crl.com     internet address = 165.113.1.37
ns.gnome.co.uk  internet address = 193.243.228.142
&gt; <command>set type=hinfo</emphasis>					<emphasis>look for HINFO records</command>
&gt; <command>hub.freebsd.org</command>
Server:  who.cdrom.com
Address:  204.216.27.3

*** No host information (HINFO) records available for hub.freebsd.org
</programlisting>

<para><indexterm><primary>hub.freebsd.org</primary></indexterm>
For some reason, <emphasis>hub.freebsd.org</emphasis> didn't have any HINFO records.  Oh
well, let's look at another system:
</para>
<programlisting>
&gt; <command>freefall.freebsd.org</command>
Server:  who.cdrom.com
Address:  204.216.27.3

freefall.freebsd.org    CPU = Pentium   OS = FreeBSD
</programlisting>

<para><indexterm><primary>nslookup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>nslookup</secondary></indexterm>
But how did we know about this system?  So far, we've been looking up individual
systems.  <emphasis>nslookup</emphasis> also includes a command to download a zone:
</para>
<programlisting>
&gt; <command>ls freebsd.org</command>
[who.cdrom.com]
 FreeBSD.org.                   server = who.cdrom.com
 FreeBSD.org.                   server = ns1.crl.com
 FreeBSD.org.                   server = ns2.crl.com
 FreeBSD.org.                   server = ns.gnome.co.uk
 FreeBSD.org.                   204.216.27.18
 www2                           206.109.20.118
 hub                            204.216.27.18
 lv                             server = ns.lv.freebsd.org
 ns.lv                          199.125.215.66
 www5                           207.90.181.14
 localhost                      127.0.0.1
 www6                           137.112.206.126
 nl                             server = ns1.IAEhv.nl
 nl                             server = ns2.IAEhv.nl
 nl                             server = who.cdrom.com
 no                             server = skarven.itea.ntnu.no
 no                             server = who.cdrom.com
 ns                             198.145.90.17
<emphasis>(etc)</emphasis>
</programlisting>

<para><indexterm><primary>named-xfer</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>named-xfer</secondary></indexterm>
This command lists the zone, along with a whole lot of information which it
considers interesting, but which doesn't belong to the zone.  To get the real
information, use <emphasis>named-xfer</emphasis>, which we'll look at next.
</para>
</sect2>
<sect2>
<title>named-xfer</title>

<para><anchor id="CFBSD-named-xfer"/>
<indexterm><primary>nslookup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>nslookup</secondary></indexterm>
<indexterm><primary>named</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>named</secondary></indexterm>
<emphasis>nslookup</emphasis> is useful for performing lookups.  As we saw in the previous
section, it's not ideal for transferring zones.  If that's what you want to do,
it's easier to use the tool that <emphasis>named</emphasis> uses.
</para>

<para><emphasis>named-xfer</emphasis> is intended to be started only by <emphasis>named</emphasis>, so it lives in
<emphasis>/usr/libexec</emphasis>, a directory which is not usually on a PATH.  To start it,
you need to tell it the name of a zone, the name of the name server, the name of
a file to store the zone, and the lowest serial number which interests you.
</para>

<para>The serial number is required because that's the way <emphasis>named</emphasis> avoids
useless transfers.  When using it outside <emphasis>named</emphasis>, you can accept any serial
number, so you set this value to 0.
</para>

<para>We run <emphasis>named-xfer</emphasis> like this:
</para>
<programlisting>
# <command>/usr/libexec/named-xfer -s 0 -z freebsd.org -f /tmp/foo who.cdrom.com</command>
# <command>cat /tmp/foo</command>
; BIND version named 4.9.6-REL Wed Aug 27 12:54:15 CST 1997
; BIND version grog@freebie.example.org:/usr/obj/src/FREEBIE/libexec/named-xfer
; zone 'freebsd.org'   last serial 0
; from 204.216.27.3   at Wed Sep 17 12:45:48 1997
$ORIGIN org.
freebsd         IN	SOA     implode.root.com. hostmaster.FreeBSD.org. (
                97090900 3600 600 604800 3600 )
                IN	NS      who.cdrom.com.
                IN	NS      ns1.crl.com.
                IN	NS      ns2.crl.com.
                IN	NS      ns.gnome.co.uk.
                IN	MX      10 hub.FreeBSD.org.
                IN	A       204.216.27.18
$ORIGIN FreeBSD.org.
<emphasis>(etc)</emphasis>
</programlisting>

<para>You'll notice the format of this file: it's effectively a configuration file,
except for the added <emphasis>$ORIGIN</emphasis> statements.  This is the file that a
secondary name server saves for restart (see page
<xref linkend="CFBSD-secondary-dns-backup-file"/>).
</para>
</sect2>
</sect1>
<sect1>
<title>Checking DNS for correctness</title>

<para>Several programs are available for diagnosing DNS configuration problems.
They're outside the scope of this book, but if you're managing large DNS
configurations, you should take a look at the collection at
<emphasis>ftp://ftp.isc.org/isc/bind/src/8.1.1/bind-contrib.tar.gz</emphasis>.
</para>
<sect2>
<title>Talking to named: ndc</title>

<para><indexterm><primary>ndc</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ndc</secondary></indexterm>
There are a number of things that you can say to the name server while it's
running, mainly by sending signals&mdash;see the man page <emphasis>named(8)</emphasis> for
further details.  For example, on page <xref linkend="CFBSD-named-sighup"/> we sent a <emphasis>SIGHUP</emphasis>
signal to reload the name server.  Alternatively, you can use <emphasis>ndc</emphasis>, which
wraps the requests in more conventional form.  See the man page <emphasis>ndc(8)</emphasis>
for further details.
</para>
</sect2>
</sect1>
<sect1>
<title>Converting /etc/hosts to DNS configuration files</title>

<para><indexterm><primary>/etc/hosts</primary></indexterm>
So far, we've talked about creating new configuration files for <emphasis>named</emphasis>.
But maybe you have a large <emphasis>/etc/hosts</emphasis> file, and you don't want to type
it all in again.
</para>

<para><indexterm><primary>h2n</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>h2n</secondary></indexterm>
You don't have to, of course: you can use an editor to change it.  But it's
probably more convenient to use <emphasis>h2n</emphasis>.  You can find it in
<emphasis><xref linkend="CFBSD-skelc"/>/dns/h2n</emphasis>. XXX where is this thing?
</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: post 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchfirewall"><title>Firewalls and IP aliasing</title>

<para>The Internet was developed by a relatively small community of computer
scientists, who were for the most part responsible people.  Since the Internet
has been opened to the general public, two problems have become evident:
</para>
<itemizedlist>
<listitem>

<para>A large number of people have sought to abuse its relatively lax security.
</para>
</listitem>
<listitem>

<para>The address space is no longer adequate for the number of machines connecting to
the network.
</para>
</listitem>
</itemizedlist>

<para>What do these problems have to do with each other?  Nothing much, but we'll see
that the solutions do, so we'll look at them together.  More specifically, we'll
consider:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Internet</primary><secondary>firewall</secondary></indexterm>
<indexterm><primary>firewall</primary><secondary>Internet</secondary></indexterm>
How to set up an <emphasis>Internet Firewall</emphasis> to keep intruders out of your
network.
</para>
</listitem>
<listitem>

<para>Security tools which will ensure that nobody can steal your password from a node
through which it passes.
</para>
</listitem>
<listitem>

<para><indexterm><primary>IP</primary><secondary>aliasing</secondary></indexterm>
<indexterm><primary>aliasing</primary><secondary>IP</secondary></indexterm>
Tools for <emphasis>IP aliasing</emphasis>, which translate IP addresses to make them appear to
come from the gateway machine.  The way this is done makes it impossible to set
them up from outside, so they also represent a kind of security device.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect1>
<title>Security and firewalls</title>

<para><indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
<indexterm><primary>telnet</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>telnet</secondary></indexterm>
<indexterm><primary>rlogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rlogin</secondary></indexterm>
<indexterm><primary>/etc/inetd.conf</primary></indexterm>
Recall from <xref linkend="CFBSD-chnetintro"/>, that incoming packets need to connect to an IP port,
and that some process on the machine must accept them.  By default, this process
is <emphasis>inetd</emphasis>.  You can limit the vulnerability of your machine by limiting the
number of services it supports.  Do you need to supply both a <emphasis>telnet</emphasis> and
an <emphasis>rlogin</emphasis> service?  You might be able to get rid of one or both by
commenting out the appropriate line in <emphasis>inetd.conf</emphasis>.  Obviously, careful
system configuration can minimize your vulnerability, but it also reduces your
accessibility: intruders can't get in, but neither can the people who need to
access the machine.
</para>

<para><indexterm><primary>packet</primary><secondary>filtering firewall</secondary></indexterm>
<indexterm><primary>firewall</primary><secondary>packet filtering</secondary></indexterm>
<indexterm><primary>proxy</primary><secondary>firewall</secondary></indexterm>
<indexterm><primary>firewall</primary><secondary>proxy</secondary></indexterm>
Obviously, you need a tool which passes authorized data and refuses to pass
unauthorized data.  Such a tool is called a <emphasis>firewall</emphasis>.  In this section,
we'll look at <emphasis>packet filtering firewalls</emphasis>: the firewall examines each
incoming packet and uses a set of predefined walls to decide whether to pass it
unchanged, whether to change it, or whether to simply discard it.  An
alternative approach is a <emphasis>proxy firewall</emphasis>, which analyzes each packet and
creates new requests based on its content.  We won't look at proxy firewalls in
this book.
</para>

<para>In this section, we'll look at the FreeBSD kernel firewall code.  Don't consider
this description to be sufficient: if you want to set up a firewall, check the
references in <xref linkend="CFBSD-biblio"/>.
</para>

<para>See page <xref linkend="CFBSD-config-IPFIREWALL"/> for details of how to configure the kernel for a
firewall.  Before you reboot your machine, make sure you understand how to set
the firewall options.  Until you do so, you will not be able to communicate with
<emphasis>any</emphasis> other machine (unless you use the
<emphasis>IPFIREWALL_DEFAULT_TO_ACCEPT</emphasis> option).  Read the following section, then
reboot your machine.
<indexterm><primary>ipfw</primary><secondary>packet types</secondary></indexterm>
<indexterm><primary>packet</primary><secondary>types</secondary></indexterm>
<table frame='all'><title><emphasis>ipfw</emphasis> packet types</title>
box,center,tab(#) ;
| lfCWp9w14 | lw59 | .
Keyword#Description
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> ip</entry><entry> All IP packets
</entry></row>
<row><entry> tcp</entry><entry> TCP packets
</entry></row>
<row><entry> udp</entry><entry> UDP packets
</entry></row>
<row><entry> icmp</entry><entry> ICMP packets
</entry></row>
<row><entry>
</entry></row>
<row><entry> <emphasis>service name or number</emphasis> </entry><entry>
</entry></row>
<row><entry> A packet destined for one of the services described in <emphasis>/etc/services</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<row><entry> src <emphasis>IP address range</emphasis> </entry><entry>
</entry></row>
<row><entry> A packet with a source address which matches <emphasis>IP address</emphasis>.  See below for the interpretation of <emphasis>IP address range</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<row><entry> A packet with a destination address which matches <emphasis>IP address</emphasis>.  See below for the interpretation of <emphasis>IP address range</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<row><entry> via <emphasis>interface</emphasis> </entry><entry>
</entry></row>
<row><entry> All packets going by the specified interface.  <emphasis>interface</emphasis> may be an interface name or an IP address associated with only one interface.
</entry></row>
<row><entry>
</entry></row>
<row><entry> recv <emphasis>interface</emphasis> </entry><entry>
</entry></row>
<row><entry> All packets arriving by the specified interface.  <emphasis>interface</emphasis> may be an interface name or an IP address associated with only one interface.
</entry></row>
<row><entry>
</entry></row>
<row><entry> xmit <emphasis>interface</emphasis> </entry><entry>
</entry></row>
<row><entry> All packets going out by the specified interface.  <emphasis>interface</emphasis> may be an interface name or an IP address associated with only one interface.  <emphasis>IP address</emphasis></entry><entry>
</entry></row>
<row><entry> This is an IP address.  It specifies a match for exactly this address.
</entry></row>
<row><entry> <emphasis>IP address</emphasis>/<emphasis>bits</emphasis></entry><entry>
</entry></row>
<row><entry> <emphasis>bits</emphasis> is a value between 0 and 32.  This form matches the first <emphasis>bits</emphasis> bits of <emphasis>IP address</emphasis>.
</entry></row>
<row><entry> <emphasis>IP address</emphasis>:<emphasis>mask</emphasis></entry><entry>
</entry></row>
<row><entry> <emphasis>mask</emphasis> is a 32-bit value.  This form matches those  bits of <emphasis>IP address</emphasis> which are specified in <emphasis>mask</emphasis>.  This is the same concept as a net mask&mdash;see <xref linkend="CFBSD-chnetintro"/>, page <xref linkend="CFBSD-netmask"/>, for a description of net masks.
</entry></row>
</tbody></tgroup></table>
</para>
<sect2>
<title><emphasis>ipfw</emphasis>: defining access rules</title>

<para>The program <emphasis>ipfw</emphasis> defines access rules for the firewall.  The default is
to allow no traffic.  The rules define particular kinds of packet, and what to
do with them.
</para>

<para>Table <xref linkend="CFBSD-firewall-keywords"/> shows the keywords you can use to define the packets
and the forms that <emphasis>IP address range</emphasis> can take.  These options can be
combined with a few restrictions:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>recv</emphasis> interface can be tested on either incoming or outgoing packets,
while the <emphasis>xmit</emphasis> interface can only be tested on outgoing packets.  This
means that you must specify the keyword <emphasis>out</emphasis> (and you may not specify
<emphasis>in</emphasis>) when you use <emphasis>xmit</emphasis>.  You can't specify <emphasis>via</emphasis> together
with <emphasis>xmit</emphasis> or <emphasis>recv</emphasis>.
</para>
</listitem>
<listitem>

<para>A packet which originates from the local host does not have a receive interface.
A packet destined for the local host has no transmit interface.
</para>
</listitem>
</itemizedlist>

<para>There are other tests which you can also apply, but these are the most
important.
</para>
</sect2>
<sect2>
<title>Actions</title>

<para>So far, we've seen how to identify packets.  Next, we need to decide what to do
with any packet that we single out.  In some cases, we can do more than one
thing with them: after performing a rule, the firewall code may continue
searching the remaining rules.  We'll note which of them do this below.  Table
<xref linkend="CFBSD-firewall-actions"/> shows the possibilities.
</para>
</sect2>
<sect2>
<title>Writing rules</title>

<para>The sequence in which rules are applied is <emphasis>not</emphasis> necessarily the sequence
in which they are read.  Instead, each rule can have a <emphasis>line number</emphasis>
between 1 and 65534.  Rules are applied from the lowest to the highest line
number.  If you enter a rule without a line number, however, it is automatically
numbered 100 higher than the previous rule.
</para>

<para>The highest-numbered rule is number 65535, which is always present:
</para>
<programlisting>
65535 deny all from any to any
</programlisting>

<para>In other words, if no other rules are present, or they don't match the packet,
it will be dropped.  If you build a kernel with the option
<emphasis>IPFIREWALL_DEFAULT_TO_ACCEPT</emphasis>, this rule is changed to its opposite:
</para>
<programlisting>
65535 allow all from any to any
</programlisting>

<para>These two rulesets  implicitly illustrate two basic security strategies.  You
may note parallels to certain political systems:
</para>
<itemizedlist>
<listitem>

<para>The first takes the attitude ``everything is forbidden unless explicitly
allowed''.
</para>
</listitem>
<listitem>

<para>The second takes the attitude ``everything is allowed unless explicitly
forbidden''.
</para>
</listitem>
</itemizedlist>

<para>It goes without saying that the first policy is more restrictive&mdash;and, many
argue, safer.  If you make a mistake with the first (more restrictive) ruleset,
you're more likely to lock people out of your system accidentally than you are
to let them in when you don't want them.
<table frame='all'><title>Actions on packets</title>
box,center,tab(#) ;
| lfCWp9w14 | lw65 | .
Keyword#Description
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> allow</entry><entry>
</entry></row>
<row><entry> Allow a packet to pass.  Stop processing the rules.  deny</entry><entry>
</entry></row>
<row><entry> Discard the packet.  Stop processing the rules.  unreach</entry><entry>
</entry></row>
<row><entry> Discard the packet and send an ICMP <emphasis>host unreachable</emphasis> message to the sender.  Stop processing the rules.  reset</entry><entry>
</entry></row>
<row><entry> Discard the packet and send a TCP reset message.  This can only apply to TCP packets.  Stop processing the rules.  count</entry><entry>
</entry></row>
<row><entry> Count the packet and continue processing the rules.
</entry></row>
<row><entry> divert <emphasis>port</emphasis> </entry><entry>
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>divert</primary><secondary>socket</secondary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>socket</primary><secondary>divert</secondary></indexterm>
<row><entry> Divert the packet to the <emphasis>divert socket</emphasis> bound to port <emphasis>port</emphasis>.  See the man page <emphasis>ipfw(8)</emphasis> for more details.  Stop processing the rules.  tee <emphasis>port</emphasis></entry><entry>
</entry></row>
<row><entry> Send a copy of the packet to the <emphasis>divert socket</emphasis> bound to port <emphasis>port</emphasis>. Continue processing the rules.  skipto <emphasis>rule</emphasis></entry><entry>
</entry></row>
<row><entry> Continue processing the rules at rule number <emphasis>rule</emphasis>.
</entry></row>
</tbody></tgroup></table>
</para>
</sect2>
<sect2>
<title>Configuration files</title>

<para><anchor id="CFBSD-firewall-configuration"/>
<indexterm><primary>/etc/rc.firewall</primary></indexterm>
The main configuration file is <emphasis>/etc/rc.firewall</emphasis>.  You will need to do a
lot of customization to get this to do what you want, so we'll just look at some
parts of it.  It starts with:
</para>
<programlisting>
/sbin/ipfw add 1000 pass all from 127.0.0.1 to 127.0.0.1
</programlisting>

<para>This rule allows all local traffic.
</para>

<para>To set up the firewall, first decide the kind of profile you need.  The current
version of <emphasis>/etc/rc.firewall</emphasis> defines three kinds of usage profile:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>open</emphasis> profile is effectively a disabled firewall.  It allows all
traffic.
</para>
</listitem>
<listitem>

<para>The <emphasis>client</emphasis> profile is a good starting point for a system which does not
provide many publicly accessible services to the net.
</para>
</listitem>
<listitem>

<para>The <emphasis>simple</emphasis> profile, despite its name, is intended for systems which do
provide a number of publicly accessible services to the net.
</para>
</listitem>
</itemizedlist>

<para>We'll look at them individually:
</para>
<sect3>
<title>The <emphasis>open</emphasis> profile</title>

<para></para>
<programlisting>
# Prototype setups.
if [ "${firewall}" = "open" ]; then

	/sbin/ipfw add 65000 pass all from any to any
</programlisting>

<para>In other words, everything is allowed.
</para>
</sect3>
<sect3>
<title>The <emphasis>client</emphasis> profile</title>

<para></para>
<programlisting>
elif [ "${firewall}" = "client" ]; then

    ############
    # This is a prototype setup that will protect your system somewhat against
    # people from outside your own network.
    ############

    # set these to your network and netmask and ip
    net="223.147.37.0"
    mask="255.255.255.0"
    ip="223.147.37.1"		<emphasis>freebie.example.org</emphasis>
</programlisting>

<para>In the current version of <emphasis>/etc/rc.firewall</emphasis>, you need to set these values
yourself.  This may change&mdash;check the addenda.
</para>
<programlisting>
    # Allow any traffic to or from my own net.
    /sbin/ipfw add pass all from ${ip} to ${net}:${mask}
    /sbin/ipfw add pass all from ${net}:${mask} to ${ip}
</programlisting>

<para>The preceding rules allow any traffic in the local network.
</para>
<programlisting>
    # Allow TCP through if setup succeeded
    /sbin/ipfw add pass tcp from any to any established
</programlisting>

<para>If a TCP connection has already been established, allow it to continue.
Establishing a TCP connection requires other rules, which we shall see below.
</para>
<programlisting>
    # Allow setup of incoming email
    /sbin/ipfw add pass tcp from any to ${ip} 25 setup

    # Allow setup of outgoing TCP connections only
    /sbin/ipfw add pass tcp from ${ip} to any setup

    # Disallow setup of all other TCP connections
    /sbin/ipfw add deny tcp from any to any setup
</programlisting>

<para>The preceding three rules allow external systems to establish a TCP connection
for delivering mail (first rule), but nothing else (third rule).  The second
rule allows setup of TCP connections to the outside world.
</para>
<programlisting>
    # Allow DNS queries out in the world
    /sbin/ipfw add pass udp from any 53 to ${ip}
    /sbin/ipfw add pass udp from ${ip} to any 53

    # Allow NTP queries out in the world
    /sbin/ipfw add pass udp from any 123 to ${ip}
    /sbin/ipfw add pass udp from ${ip} to any 123

    # Everything else is denied as default.
</programlisting>

<para>These two rules allow DNS and NTP queries.  Since these are all the rules, the
default <emphasis>deny</emphasis> rule prevents any other kind of traffic.
</para>
</sect3>
<sect3>
<title>The <emphasis>simple</emphasis> profile</title>

<para>Despite the name, the <emphasis>simple</emphasis> profile is really a simple server profile.
It assumes that the machine is a gateway, and that it will supply DNS and NTP
services to the outside world (for example, to the <emphasis>client</emphasis> machine we
just looked at.  This profile is more appropriate for the system
<emphasis>gw.example.org</emphasis>, so we'll use its addresses.
</para>
<programlisting>
elif [ "${firewall}" = "simple" ]; then
    # set these to your outside interface network and netmask and ip
    oif="tun0"
    onet="139.130.136.0"
    omask="255.255.255.0"
    oip="139.130.136.133"

    # set these to your inside interface network and netmask and ip
    iif="ep0"
    inet="223.147.37.0"
    imask="255.255.255.0"
    iip="223.147.37.0"
</programlisting>

<para>These addresses and networks correspond to the PPP link and the local ethernet,
respectively.
</para>
<programlisting>
    # Stop spoofing
    /sbin/ipfw add deny all from ${inet}:${imask} to any in via ${oif}
    /sbin/ipfw add deny all from ${onet}:${omask} to any in via ${iif}
</programlisting>

<para><indexterm><primary>spoofing</primary></indexterm>
These two rules stop any packets purporting to come from the local network which
arrive via the external network, and any packets purporting to come from the
remote network which arrive via the local interface.  These packets would have
been faked, an action known as <emphasis>spoofing</emphasis>.
</para>
<programlisting>
    # Stop RFC1918 nets on the outside interface
    /sbin/ipfw add deny all from 192.168.0.0:255.255.0.0 to any via ${oif}
    /sbin/ipfw add deny all from 172.16.0.0:255.240.0.0 to any via ${oif}
    /sbin/ipfw add deny all from 10.0.0.0:255.0.0.0 to any via ${oif}
</programlisting>

<para>RFC 1918 defines networks which should not be routed.  These rules enforce that
requirement.
</para>
<programlisting>
    # Allow TCP through if setup succeeded
    /sbin/ipfw add pass tcp from any to any established

    # Allow setup of incoming email
    /sbin/ipfw add pass tcp from any to ${oip} 25 setup

    # Allow access to our DNS
    /sbin/ipfw add pass tcp from any to ${oip} 53 setup

    # Allow access to our WWW
    /sbin/ipfw add pass tcp from any to ${oip} 80 setup
</programlisting>

<para>These rules add to what we saw for the <emphasis>client</emphasis> profile: in addition to
email, we will allow incoming DNS and WWW connections.
</para>
<note>

<para>Do you want to allow <emphasis>anybody</emphasis> to load your zone information?  See page
<xref linkend="CFBSD-named-xfer"/> for more details.  If you don't want them to, you can stop them
by disallowing tcp connections from the outside world: <emphasis>named-xfer</emphasis> uses
TCP to load zone information, but <emphasis>named</emphasis> uses UDP to get individual
records.
</para>
</note>

<para></para>
<programlisting>
    # Reject&amp;Log all setup of incoming connections from the outside
    /sbin/ipfw add deny log tcp from any to any in via ${oif} setup

    # Allow setup of any other TCP connection
    /sbin/ipfw add pass tcp from any to any setup
</programlisting>

<para>Here, we don't just reject TCP setup requests from the outside world, we log
them as well.
</para>
<programlisting>
    # Allow DNS queries out in the world
    /sbin/ipfw add pass udp from any 53 to ${oip}
    /sbin/ipfw add pass udp from ${oip} to any 53

    # Allow NTP queries out in the world
    /sbin/ipfw add pass udp from any 123 to ${oip}
    /sbin/ipfw add pass udp from ${oip} to any 123

    # Everything else is denied as default.
</programlisting>

<para>Finally, we allow DNS and NTP queries via UDP, and deny everything else from the
outside world.
</para>
</sect3>
<sect3>
<title>user-defined profiles</title>

<para><indexterm><primary>/etc/rc.firewall</primary></indexterm>
<indexterm><primary>ipfw</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ipfw</secondary></indexterm>
If the profile isn't one of the recognized keywords, <emphasis>/etc/rc.firewall</emphasis>
checks if there's a file with that name.  If so, it uses it as a command file to
pass to <emphasis>ipfw</emphasis>:
</para>
<programlisting>
elif [ "${firewall}" != "NONE" -a -r "${firewall}" ]; then
	/sbin/ipfw ${firewall}
</programlisting>

<para>Note that you can't put comment lines in the file defined by
<emphasis>${firewall}</emphasis>.
</para>
</sect3>
<sect3>
<title><emphasis>/etc/rc.conf</emphasis> </title>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
Once you have decided what kind of firewall configuration best suits your
network, note the fact in <emphasis>/etc/rc.conf</emphasis>.  Set the value of
<emphasis>firewall_enable</emphasis> to <command>YES</command> to enable the firewall, and the value of
<emphasis>firewall_type</emphasis> to indicate the type of firewall.  For our example
network, <emphasis>client</emphasis> is probably the most appropriate type:
</para>
<programlisting>
firewall_enable="<command>YES</command>"		# Set to YES to enable firewall functionality
firewall_type="<command>client</command>"		# Firewall type (see /etc/rc.firewall)
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Trying it out</title>

<para>You'll probably find that your first attempt at firewall configuration won't be
the optimum, to put it mildly.  You'll probably discover requirements that you
hadn't thought of which are now being denied by the default rule.  Be prepared
to spend some time getting everything to work, and <emphasis>do</emphasis> this at the system
console.  There's no good alternative, not even X in this case: if you mess
up your localhost rule, you won't be able to use X either.
</para>
</sect2>
</sect1>
<sect1>
<title>IP aliasing</title>

<para><anchor id="CFBSD-ip-aliasing"/>
<indexterm><primary>IP</primary><secondary>aliasing</secondary></indexterm>
<indexterm><primary>aliasing</primary><secondary>IP</secondary></indexterm>
In our reference network on page <xref linkend="CFBSD-ref-net"/>, we assumed that our local network
had a valid assigned IP address.  Sometimes, this isn't possible.  In fact, in
the Real World it's pretty well impossible to get a complete class C network for
a system with only five systems on it.  You have the alternative of getting a
subset of a class C network (in this case, 8 addresses would do) from your ISP,
or using just one address and running software which makes all traffic from the
network to the outside world look as if it's coming from that system.  The
latter approach, called <emphasis>IP aliasing</emphasis>, can be significantly cheaper: ISPs
usually charge good money for additional addresses.
</para>
<sect2>
<title>IP aliasing software</title>

<para>FreeBSD has a number of packages which provide IP aliasing.  If you're
connecting to the outside world via User PPP (see <xref linkend="CFBSD-chppp"/>, page <xref linkend="CFBSD-user-ppp"/>),
you can use the <emphasis>-alias</emphasis> keyword to tell PPP to alias <emphasis>all</emphasis> packets
coming from the network to the address of the tunnel interface.  In our
reference network, this would be the address <emphasis>139.130.136.133</emphasis>.
</para>

<para><indexterm><primary>Network</primary><secondary>Address Translation Dæmon</secondary></indexterm>
<indexterm><primary>natd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>natd</secondary></indexterm>
There are some good reasons not to use this particular form of IP aliasing: it
only works for a single User PPP connection to the outside world, and it's
global in its functionality.  One alternative is the <emphasis>Network Address
Translation Dæmon</emphasis>, or <emphasis>natd</emphasis>, which uses divert sockets to translate
addresses.  It works well in conjunction with the firewall software we looked at
above.
</para>
</sect2>
<sect2>
<title><emphasis>natd</emphasis> </title>

<para>To set up <emphasis>natd</emphasis>, perform the following steps:
</para>
<itemizedlist>
<listitem>

<para>Even if you don't plan to run an IP firewall, build a custom kernel with the
following options:
</para>
<programlisting>
options IPFIREWALL
options IPDIVERT
</programlisting>

<para>If you are running a firewall, configure the firewall normally, but be sure to
include the <emphasis>IPDIVERT</emphasis> option.
</para>
</listitem>
<listitem>

<para>Ensure that your machine is acting as a gateway.  See <xref linkend="CFBSD-chnetsetup"/>, page
<xref linkend="CFBSD-set-gateway"/> for further details.
</para>
</listitem>
<listitem>

<para>Make sure your interface is running.  For example, if you're running User PPP,
and you want to specify <emphasis>tun0</emphasis> as your interface, start <emphasis>ppp</emphasis> before
starting <emphasis>natd</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/services</primary></indexterm>
Make sure you have the following entry in <emphasis>/etc/services</emphasis>:
</para>
<programlisting>
natd          8668/divert  # Network Address Translation socket
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/rc.firewall</primary></indexterm>
Adjust the <emphasis>/etc/rc.firewall</emphasis> script as shown above.  If you're not using
a firewall, the following lines will be enough:
</para>
<programlisting>
/sbin/ipfw -f flush
/sbin/ipfw add divert natd all from any to any via tun0
/sbin/ipfw add pass all from any to any
</programlisting>

<para>Make sure you have the correct interface name in the second line.  This is the
name of the interface to the external world, not the LAN.
</para>

<para>Older versions of <emphasis>natd</emphasis> didn't look up the names in <emphasis>/etc/services</emphasis>.
If you run into problems, consider putting the service in as a number rather
than a name.
</para>

<para>If you specify real firewall rules, it's best to specify line 2 at the start of
the script so that natd sees all packets before they are dropped by the
firewall.  After <emphasis>natd</emphasis> translates the IP addresses, the firewall rules
will be run again on the translated packet, with the exception of the divert
rules.
</para>
</listitem>
<listitem>

<para>Enable your firewall as shown above in the firewall section.  If you don't wish
to reboot now, just run <emphasis>/etc/rc.firewall</emphasis> this by hand from the console:
</para>
<programlisting>
# <command>firewall=client sh /etc/rc.firewall</command>
</programlisting>

<para>The expression <emphasis>firewall=client</emphasis> tells the Bourne shell to set the value
of the variable <emphasis>firewall</emphasis> just for this command.  If you're using
<emphasis>csh</emphasis> or <emphasis>tcsh</emphasis>, use the following sequence:
</para>
<programlisting>
(setenv firewall=client; sh /etc/rc.firewall)
</programlisting>

<para><emphasis>Never</emphasis> start this script from an X terminal or across the network.  If
you do, you can lock yourself out of the session in the middle of the script,
and <emphasis>/etc/rc.firewall</emphasis> will stop at this point, blocking all accesses
permanently.
</para>
</listitem>
<listitem>

<para><anchor id="CFBSD-natd-rc.conf"/>
Add the following to <emphasis>/etc/rc.conf</emphasis>:
</para>
<programlisting>
natd_enable="YES"                # Enable natd (if firewall_enable == YES).
natd_interface="tun0"            # Public interface or IPaddress to use.
</programlisting>

<para>See the man page <emphasis>natd(8)</emphasis> for the meanings of the flags.  In particular,
<emphasis>-unregistered_only</emphasis> tells <emphasis>natd</emphasis> to only modify packets with
<emphasis>unregistered</emphasis> source addresses.  We'll look at them in the next section.
</para>
</sect2>
<sect2>
<title>Choosing an IP address for the LAN</title>

<para>One freedom that <emphasis>natd</emphasis> gives you is the choice of an IP address for the
LAN.  Theoretically, you can choose just about anything.  Of course, Murphy's
law dictates that you will then find that you need to communicate with the real
owner of that IP address.  The address will usually be hidden in a name (a URL,
for example), and finding out the problem can be quite complicated.
</para>

<para>There's no need for this problem.  We saw above that RFC 1918 defines networks
which should not be routed, so-called <emphasis>unregistered</emphasis> IP addresses.  Choose
one of the address ranges <emphasis>192.168.0.0</emphasis> to <emphasis>192.168.255.255</emphasis>,
<emphasis>172.16.0.0</emphasis> to <emphasis>172.31.255.255</emphasis>, or <emphasis>10.0.0.0</emphasis> to
<emphasis>10.255.255.255</emphasis>.  In practice, it's best to choose <emphasis>192.168.0.0</emphasis> to
<emphasis>192.168.255.255</emphasis>, since that address range is least likely to give you
problems with net masks.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<!--  XXX daemon -&gt; bumble -->
<!--  XXX allegro -&gt; presto -->
<!--  XXX lemis.com-&gt;example.org -->
<!--  XXX yana-&gt;wait -->
<chapter id="CFBSD-nchnetdebug"><title>Network debugging</title>

<para>The chances are that you'll have some problems somewhere when you set up your
network.  FreeBSD gives you a large number of tools with which to find and solve
the problem.
</para>

<para><indexterm><primary>ping</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ping</secondary></indexterm>
<indexterm><primary>traceroute</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>traceroute</secondary></indexterm>
<indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
In this chapter, we'll first look some of the more useful tools.  In particular,
in the next section we'll look at the <emphasis>ping</emphasis> program, on page
<xref linkend="CFBSD-traceroute"/> we'll look at <emphasis>traceroute</emphasis>, and on page <xref linkend="CFBSD-tcpdump"/> we'll
look at the <emphasis>tcpdump</emphasis> program.  After that, on page <xref linkend="CFBSD-netdebug"/>, we'll
consider a methodology of debugging network problems.
</para>
<sect1>
<title>Network debug tools</title>

<para><indexterm><primary>network</primary><secondary>debug tools</secondary></indexterm>
<indexterm><primary>debug</primary><secondary>tools</secondary></indexterm>
<anchor id="CFBSD-netdebugtools"/>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
<indexterm><primary>route</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>route</secondary></indexterm>
<indexterm><primary>netstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netstat</secondary></indexterm>
<indexterm><primary>ping</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ping</secondary></indexterm>
<indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
<indexterm><primary>traceroute</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>traceroute</secondary></indexterm>
We've already seen a number of tools which can also be of use to us in debugging
network problems, in particular <emphasis>ifconfig</emphasis> (page <xref linkend="CFBSD-ifconfig-example"/>),
<emphasis>route</emphasis> (page <xref linkend="CFBSD-route"/>), and <emphasis>netstat</emphasis> (page <xref linkend="CFBSD-netstat"/>).  In
addition, we have three tools which are used specifically for debugging:
<emphasis>ping</emphasis>, <emphasis>tcpdump</emphasis> and <emphasis>traceroute</emphasis>.  It will help to have your
finger in <xref linkend="CFBSD-chnetintro"/> while reading this section.
</para>
<sect2>
<title><emphasis>ping</emphasis> </title>

<para><indexterm><primary>ping</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ping</secondary></indexterm>
<anchor id="CFBSD-PING"/>
<indexterm><primary>ICMP</primary><secondary>echo packet</secondary></indexterm>
<indexterm><primary>ICMP</primary></indexterm>
<indexterm><primary>Internet</primary><secondary>Control Message Protocol</secondary></indexterm>
<emphasis>ping</emphasis> is a relatively simple program which sends a packet to a specific
IP address and checks the reply.  The packet is an <emphasis>ICMP echo packet</emphasis>.
<emphasis>ICMP</emphasis> is the <emphasis>Internet Control Message Protocol</emphasis>&mdash;see <emphasis>TCP/IP
Illustrated</emphasis>, by Richard Stevens, for more information.
</para>

<para>A typical <emphasis>ping</emphasis> session might look like:
</para>
<programlisting>
$ <command>ping daemon</command>
PING bumble.example.org (223.147.37.156): 56 data bytes
64 bytes from 223.147.37.156: icmp_seq=0 ttl=255 time=1.137 ms
64 bytes from 223.147.37.156: icmp_seq=1 ttl=255 time=0.640 ms
64 bytes from 223.147.37.156: icmp_seq=2 ttl=255 time=0.671 ms
64 bytes from 223.147.37.156: icmp_seq=3 ttl=255 time=0.612 ms
<command>^C</command>
--- bumble.example.org ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.612/0.765/1.137/0.216 ms
</programlisting>

<para><indexterm><primary>bumble.example.org</primary></indexterm>
In this case, we are sending the messages to the system
<emphasis>bumble.example.org</emphasis>.  By default, <emphasis>ping</emphasis> will send messages of 56
bytes.  With the IP header, this makes packets of 64 bytes.  When started
without parameters, <emphasis>ping</emphasis> continues until you stop it&mdash;notice the
<command>^C</command> indicating that this invocation was stopped by pressing <keycap>Ctrl-C</keycap>.
</para>

<para>The information that <emphasis>ping</emphasis> gives you isn't much, but it's useful:
</para>
<itemizedlist>
<listitem>

<para>It tells you how long it takes for each individual packet to get to its
destination and back.
</para>
</listitem>
<listitem>

<para>It tells you how many didn't make it.
</para>
</listitem>
<listitem>

<para>It also prints a summary of packet statistics.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>But what if this doesn't work?  You enter your ping command, and all you get is:
</para>
<programlisting>
$ <command>ping wait</command>
PING wait.example.org (223.147.37.4): 56 data bytes
<command>^C</command>
--- wait.example.org ping statistics ---
5 packets transmitted, 0 packets received, 100% packet loss
</programlisting>

<para>Obviously, something's wrong here.  We'll look at it in more detail below.  This
is <emphasis>very</emphasis> different, however, from this situation:
</para>
<programlisting>
$ <command>ping presto</command>
<command>^C</command>
</programlisting>

<para>In the second case, even after waiting a reasonable amount of time, nothing
happened at all.  <emphasis>ping</emphasis> didn't print the <emphasis>PING</emphasis> message, and when
we hit <keycap>Ctrl-C</keycap> there was no further output.  This is indicative of a name
resolution problem: <emphasis>ping</emphasis> can't print the first line (<emphasis>PING
presto...</emphasis>) until it has found the IP address of the system, in other words
until it has performed a DNS lookup.  If we wait long enough, it will time out,
and we get the message <emphasis>ping: cannot resolve presto: Unknown host</emphasis>.
</para>

<para>If this happens, use the IP address instead of the name.  As we'll see below, we
will solve name lookup problems later in the day.
</para>
</sect2>
<sect2>
<title><emphasis>traceroute</emphasis> </title>

<para><indexterm><primary>traceroute</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>traceroute</secondary></indexterm>
<anchor id="CFBSD-traceroute"/>
<emphasis>ping</emphasis> is a useful tool for telling you whether data is getting through to
the destination, and if so, how much is getting through.  If nothing gets
through, there are two possibilities:
</para>
<itemizedlist>
<listitem>

<para>If both systems are on the same network, you need to look at the network
connections.
</para>
</listitem>
<listitem>

<para>If the systems are on two different networks, we don't know which network to
look at.  It could be either of the networks on which the systems are located,
or it could also be a problem with one of the networks on the way.  How do you
find out where your packets get lost?
</para>
</listitem>
</itemizedlist>

<para>Another problem: you're losing 40% of your packets to <emphasis>foo.bar.org</emphasis>, and the
remaining ones are taking up to 5 <emphasis>seconds</emphasis> to get through.  Where's the
problem?  Based on the recent ``upgrade'' your ISP performed, and the fact that
you've had trouble getting to other sites, you suspect that the performance
problems might be occurring in the ISP's net.  How can you find out?
</para>

<para><indexterm><primary>time-to-live</primary><secondary>UDP field</secondary></indexterm>
<indexterm><primary>UDP</primary><secondary>field</secondary></indexterm>
<indexterm><primary>ICMP</primary><secondary>destination unreachable</secondary></indexterm>
In each case, it's difficult, but frequently <emphasis>traceroute</emphasis> can help.
<emphasis>traceroute</emphasis> sends UDP packets to the destination, but it modifies the
<emphasis>time-to-live</emphasis> field (see page <xref linkend="CFBSD-time-to-live"/>) so that, initially at any
rate, they don't get there.  As we saw on page <xref linkend="CFBSD-IP-header"/>, the time-to-live
field specifies the number of hops that a packet can go before it is discarded.
When it is, the system which discards it <emphasis>should</emphasis> send back an <emphasis>ICMP
destination unreachable</emphasis> message.  <emphasis>traceroute</emphasis> uses this feature and
sends out packets with time-to-live set first to one, then to two, and so on.
It prints the IP address of the system which sends the ``destination
unreachable'' message, and the time it took, thus giving something like a
three-dimensional <emphasis>ping</emphasis>.  Here's an example to <emphasis>hub.FreeBSD.org</emphasis>:
</para>
<programlisting>
$ <command>traceroute hub.freebsd.org</command>
traceroute to hub.freebsd.org (204.216.27.18), 30 hops max, 40 byte packets
 1  gw (223.147.37.5)  1.138 ms  0.811 ms  0.800 ms
 2  free-gw.example.net (139.130.136.129)  131.913 ms  122.231 ms  134.694 ms
 3  Ethernet1-0.way1.Adelaide.telstra.net (139.130.237.65)  118.229 ms  120.040 ms  118.723 ms
 4  Fddi0-0.way-core1.Adelaide.telstra.net (139.130.237.226)  171.590 ms  117.911 ms  123.513 ms
 5  Serial5-0.lon-core1.Melbourne.telstra.net (139.130.239.21)  129.267 ms  226.927 ms  125.547 ms
 6  Fddi0-0.lon5.Melbourne.telstra.net (139.130.239.231)  144.372 ms  133.998 ms  136.699 ms
 7  borderx2-hssi3-0.Bloomington.mci.net (204.70.208.121)  962.258 ms  482.393 ms  754.989 ms
 8  core2-fddi-1.Bloomington.mci.net (204.70.208.65)  821.636 ms *  701.920 ms
 9  bordercore3-loopback.SanFrancisco.mci.net (166.48.16.1)  424.254 ms  884.033 ms  645.302 ms
10  pb-nap.crl.net (198.32.128.20)  435.907 ms  438.933 ms  451.173 ms
11  E0-CRL-SFO-02-E0X0.US.CRL.NET (165.113.55.2)  440.425 ms  430.049 ms  447.340 ms
12  T1-CDROM-00-EX.US.CRL.NET (165.113.118.2)  553.624 ms  460.116 ms *
13  hub.FreeBSD.ORG (204.216.27.18)  642.032 ms  463.661 ms  432.976 ms
</programlisting>

<para>By default, <emphasis>traceroute</emphasis> tries each hop three times and prints out the
times as they happen, so if the reponse time is more than about 300 ms, you'll
notice it as it happens.  If there is no reply after a timeout period,
<emphasis>traceroute</emphasis> will print an asterisk (<emphasis>*</emphasis>).  You'll also occasionally
notice a significant delay at the beginning of a line, although the response
time seems reasonable.  In this case, the delay is probably caused by a DNS
reverse lookup for the name of the system.
</para>

<para>If you look more carefully at the times in the example above, you'll see three
groups of times:
</para>
<itemizedlist>
<listitem>

<para>The times to <emphasis>freebie</emphasis> are round 1 ms.  This is typical of an Ethernet.
</para>
</listitem>
<listitem>

<para>The times for hops 2 to 6 are in the order of 100 to 150 ms.  This is indicative
of the fact that the link between <emphasis>gw.example.org</emphasis> and
<emphasis>free-gw.example.net</emphasis> is running PPP at 33.6 kb/s.  The delay between
<emphasis>free-gw.example.net</emphasis> and <emphasis>Fddi0-0.lon5.Melbourne.telstra.net</emphasis> is
negligible compared to the delay across the PPP link, so you don't see much
difference.
</para>
</listitem>
<listitem>

<para>The times from <emphasis>borderx2-hssi3-0.Bloomington.mci.net</emphasis> to
<emphasis>hub.FreeBSD.ORG</emphasis> are significantly higher, between 400 and 1000 ms.  We
also note a couple of dropped packets.  This is indicative of the fact that the
line between <emphasis>Fddi0-0.lon5.Melbourne.telstra.net</emphasis> and
<emphasis>borderx2-hssi3-0.Bloomington.mci.net</emphasis> is overloaded.  The length of the
link (about 8,000 miles) is <emphasis>not</emphasis> relevant.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title><emphasis>tcpdump</emphasis> </title>

<para><indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
<anchor id="CFBSD-tcpdump"/>
<indexterm><primary>Berkeley</primary><secondary>Packet Filter</secondary></indexterm>
<emphasis>tcpdump</emphasis> is a program which monitors a network interface and displays
selected information which passes through it.  It uses the <emphasis>Berkeley Packet
Filter</emphasis> (<emphasis>bpf</emphasis>), an optional component of the kernel which is not
included in the <emphasis>GENERIC</emphasis> kernel: see <xref linkend="CFBSD-chbuild"/>, page
<xref linkend="CFBSD-config-bpfilter"/>, for information on how to configure it.
</para>

<para>If you don't configure the Berkeley Packet Filter, you will get a message like
</para>
<programlisting>
tcpdump: /dev/bpf0:  device not configured
</programlisting>

<para>If you forget to create the devices for bpf, you will get a message like:
</para>
<programlisting>
tcpdump: /dev/bpf0: No such file or directory
</programlisting>

<para>Since <emphasis>tcpdump</emphasis> poses a potential security problem, you must be
<emphasis>root</emphasis> in order to run it.  The simplest way to run it is without any
parameters.  This will cause <emphasis>tcpdump</emphasis> to monitor and display all traffic
on the first active network interface, normally Ethernet:
</para>
<programlisting>
# <command>tcpdump</command>
tcpdump: listening on ep0
<emphasis>1:</emphasis> 13:27:57.757157 arp who-has wait.example.org tell presto.example.org
<emphasis>2:</emphasis> 13:28:06.740047 0:4c:a5:0:0:0 2:0:0:0:45:0 4011 80:
                         c93c c06d c589 c06d c5ff 007b 007b 0038
                         5ccb 1d03 06ee 0000 5613 0000 1093 cb15
                         2512 b7e2 de6b 0ead c000 0000 0000 0000
                         0000 0000 0000
<emphasis>3:</emphasis> 13:28:06.740117 freebie.example.org.ntp &gt; 223.147.37.255.ntp: v3 bcast strat 3 p
oll 6  prec -18
<emphasis>4:</emphasis> 13:28:08.004715 arp who-has wait.example.org tell presto.example.org
<emphasis>5:</emphasis> 13:28:10.987453 bumble.example.org.who &gt; 223.147.37.255.who: udp 84
<emphasis>6:</emphasis> 13:28:13.790106 freebie.example.org.6000 &gt; presto.example.org.1089: P 536925467:
   536925851(384) ack 325114346 win 17280 &lt;nop,nop,timestamp 155186 1163778,nop,no
   p,[|tcp]&gt; (DF)
<emphasis>7:</emphasis> 13:28:13.934336 arp who-has freebie.example.org tell presto.example.org
<emphasis>8:</emphasis> 13:28:13.934444 arp reply freebie.example.org is-at 0:a0:24:37:d:2b
<emphasis>9:</emphasis> 13:28:13.935903 presto.example.org.1089 &gt; freebie.example.org.6000: . ack 536925
851 win 16896 &lt;nop,nop,timestamp 1190189 155186,nop,nop,[|tcp]&gt; (DF)
<emphasis>10:</emphasis> 13:28:13.936313 freebie.example.org.6000 &gt; presto.example.org.1089: P 536925851
   :536926299(448) ack 325114346 win 17280 &lt;nop,nop,timestamp 155186 1190189,nop,no
   p,[|tcp]&gt; (DF)
</programlisting>

<para>This output looks confusing at first.  Let's look at it in more detail:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
The first message shows the interface on which <emphasis>tcpdump</emphasis> listens.  By
default, it is the first running interface that it finds in its list.  The
sequence of the list is the same that <emphasis>ifconfig -a</emphasis> displays, but
generally you can assume it to be the Ethernet interface.  If you want to listen
on another interface, specify it on the command line.  For example, to listen on
a PPP interface, you would enter
</para>
<programlisting>
# <command>tcpdump -i tun0</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>At the beginning of each message is a timestamp, with a resolution of 1 \(*ms.
These times are relatively accurate; you'll frequently see time differences of
less than 1 ms.  In this example, the last two messages are 108 \(*ms apart.
These times are important: a lot of network problems are performance problems,
and there's a big difference in performance between a net where a reply takes
100 \(*ms and one in which a reply takes 100 ms.
</para>
</listitem>
<listitem>

<para>To make things easier, I have put a line number in \f(CIitalics at the
beginning of each line.  This line does not appear in the <emphasis>tcpdump</emphasis>
printout.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ARP</primary></indexterm>
Line 1 shows an <emphasis>ARP</emphasis> request: system <emphasis>presto</emphasis> is looking for the
Ethernet address of <emphasis>wait</emphasis>.  It would appear that <emphasis>wait</emphasis> is currently
not responding, since there is no reply.
</para>
</listitem>
<listitem>

<para>Line 2 is not an IP message at all.  <emphasis>tcpdump</emphasis> shows the Ethernet
addresses and the beginning of the packet.  We don't consider this kind of
request in this book.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ntp</primary></indexterm>
Line 3 is a broadcast <emphasis>ntp</emphasis> message.  We looked at <emphasis>ntp</emphasis> on page
<xref linkend="CFBSD-timekeeping"/>.
</para>
</listitem>
<listitem>

<para>Line 4 is another attempt by <emphasis>presto</emphasis> to find the IP address of
<emphasis>wait</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>rwho</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rwho</secondary></indexterm>
Line 5 is a broadcast message from <emphasis>bumble</emphasis> on the <emphasis>rwho</emphasis> port,
giving information about its current load averages and how long it has been up.
See the man page <emphasis>rwho(1)</emphasis> for more information.
</para>
</listitem>
<listitem>

<para>Line 6 is from a TCP connection between port 6000 on <emphasis>freebie</emphasis> and port
1089 on <emphasis>presto</emphasis>.  It is sending 384 bytes (with the sequence numbers
<emphasis>536925467</emphasis> to <emphasis>536925851</emphasis>; see page <xref linkend="CFBSD-TCP-header-page"/>), and is
acknowledging that the last byte it received from <emphasis>presto</emphasis> had the
sequence number <emphasis>325114346</emphasis>.  The window size is <emphasis>17280</emphasis>.
</para>
</listitem>
<listitem>

<para>Line 7 is another ARP request.  <emphasis>presto</emphasis> is looking for the Ethernet
address of <emphasis>freebie</emphasis>.  How can that happen?  We've just seen that they have
a TCP connection.  In fact, ARP information expires after 20 minutes.  It's
quite possible that all connections between <emphasis>presto</emphasis> and <emphasis>freebie</emphasis>
have been dormant for this period, so <emphasis>presto</emphasis> needs to find
<emphasis>freebie</emphasis>'s IP address again.
</para>
</listitem>
<listitem>

<para>Line 8 is the ARP reply from <emphasis>freebie</emphasis> to <emphasis>presto</emphasis> giving its
Ethernet address.
</para>
</listitem>
<listitem>

<para>Line 9 shows a reply from <emphasis>presto</emphasis> on the connection to <emphasis>freebie</emphasis>
that we saw on line 6.  It acknowledges the data up to sequence number
<emphasis>536925851</emphasis>, but doesn't send any itself.
</para>
</listitem>
<listitem>

<para>Line 10 shows another 448 bytes of data from <emphasis>freebie</emphasis> to <emphasis>presto</emphasis>,
and acknowledging the same sequence number from <emphasis>presto</emphasis> as in line 6.
</para>
</listitem>
</itemizedlist>

<para>11:20:33.131112 freebie.lemis.com.6000 &gt; allegro.lemis.com.1097: P 2935921485:2935921517(32) ack 3136829362 win 17280 &lt;nop,nop,timestamp 300066 1341257,nop,nop,[|tcp]&gt; (DF)
11:20:33.203300 allegro.lemis.com.1097 &gt; freebie.lemis.com.6000: . ack 32 win 17248 &lt;nop,nop,timestamp 1520547 300066,nop,nop,[|tcp]&gt; (DF)
11:20:33.203588 freebie.lemis.com.6000 &gt; allegro.lemis.com.1097: P 32:96(64) ack 1 win 17280 &lt;nop,nop,timestamp 300066 1520547,nop,nop,[|tcp]&gt; (DF)
11:20:33.402849 allegro.lemis.com.1097 &gt; freebie.lemis.com.6000: . ack 96 win 17280 &lt;nop,nop,timestamp 1520547 300066,nop,nop,[|tcp]&gt; (DF)
11:20:33.403052 freebie.lemis.com.6000 &gt; allegro.lemis.com.1097: P 96:128(32) ack 1 win 17280 &lt;nop,nop,timestamp 300066 1520547,nop,nop,[|tcp]&gt; (DF)
11:20:33.602242 allegro.lemis.com.1097 &gt; freebie.lemis.com.6000: . ack 128 win 17248 &lt;nop,nop,timestamp 1520547 300066,nop,nop,[|tcp]&gt; (DF)
11:20:33.602439 freebie.lemis.com.6000 &gt; allegro.lemis.com.1097: P 128:160(32) ack 1 win 17280 &lt;nop,nop,timestamp 300067 1520547,nop,nop,[|tcp]&gt; (DF)
11:20:33.782870 allegro.lemis.com.1097 &gt; freebie.lemis.com.6000: . 1:1441(1440) ack 160 win 17216 &lt;nop,nop,timestamp 1520548 300067,nop,nop,[|tcp]&gt; (DF)
11:20:33.783482 allegro.lemis.com.1097 &gt; freebie.lemis.com.6000: P 1441:2041(600) ack 160 win 17216 &lt;nop,nop,timestamp 1520548 300067,nop,nop,[|tcp]&gt; (DF)
</para>
</sect2>
</sect1>
<sect1>
<title>How to approach network problems</title>

<para><anchor id="CFBSD-netdebug"/>
You will recall from <xref linkend="CFBSD-chnetintro"/>, that network software and hardware operate
at at least four layers.  If one layer doesn't work, the ones on top won't
either.  It obviously makes sense to start at the bottom and work up.
</para>

<para>Most people understand this up to a point.  Nobody expects a PPP connection to
the Internet to work if the modem can't dial the ISP.  On the other hand, a
large number of messages to the <emphasis>FreeBSD-questions</emphasis> mailing list show that
many people seem to think that once this connection has been established,
everything else will work automatically.  If it doesn't, they're puzzled.
</para>

<para>Unfortunately, the Net isn't that simple.  In fact, it's too complicated to give
a hard-and-fast methodology at all.  Much network debugging can look more like
magic than anything rational.  Nevertheless, a surprising number of network
problems can be solved by using the steps below.  Even if they don't solve your
problem, read through them.  They might give you some ideas about where to look.
</para>
<sect2>
<title>The link layer</title>

<para><indexterm><primary>link</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>debugging</primary><secondary>link layer</secondary></indexterm>
<indexterm><primary>ping</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ping</secondary></indexterm>
The first thing to do is to ensure that the link layer is running.  You can do
this by <emphasis>ping</emphasis>ing another address on the same link.  In the case of a PPP
link, you don't get any choice: ping the address at the other end of the link.
In the case of an Ethernet, you have a choice of addresses.  In either case, be
sure to use the IP address, not the name: in order to get the address from the
name, you may need to issue a DNS query, which runs at the application layer.
The chances that the name resolution will fail are much higher than the chances
that the <emphasis>ping</emphasis> will fail.
</para>

<para><indexterm><primary>gw.example.org</primary></indexterm>
<indexterm><primary>free-gw.example.net</primary></indexterm>
A successful ping, here from <emphasis>gw.example.org</emphasis> to
<emphasis>free-gw.example.net</emphasis>, will look like this:
</para>
<programlisting>
$ <command>ping 139.130.136.129</command>
PING 139.130.136.129 (139.130.136.129): 56 data bytes
64 bytes from 139.130.136.129: icmp_seq=0 ttl=255 time=145.203 ms
64 bytes from 139.130.136.129: icmp_seq=1 ttl=255 time=140.743 ms
64 bytes from 139.130.136.129: icmp_seq=2 ttl=255 time=138.039 ms
64 bytes from 139.130.136.129: icmp_seq=3 ttl=255 time=139.783 ms
64 bytes from 139.130.136.129: icmp_seq=4 ttl=255 time=136.698 ms
64 bytes from 139.130.136.129: icmp_seq=5 ttl=255 time=138.753 ms
64 bytes from 139.130.136.129: icmp_seq=6 ttl=255 time=208.389 ms
64 bytes from 139.130.136.129: icmp_seq=7 ttl=255 time=187.463 ms
64 bytes from 139.130.136.129: icmp_seq=8 ttl=255 time=128.463 ms
64 bytes from 139.130.136.129: icmp_seq=9 ttl=255 time=333.895 ms
64 bytes from 139.130.136.129: icmp_seq=10 ttl=255 time=180.670 ms
</emphasis><command>^C</command>				<emphasis>stop by hitting <keycap>Ctrl-C<emphasis>
--- 139.130.136.129 ping statistics ---
11 packets transmitted, 11 packets received, 0% packet loss
round-trip min/avg/max/stddev = 128.463/170.736/333.895/57.179 ms
</emphasis></keycap></programlisting>

<para>When we looked at this display on page <xref linkend="CFBSD-PING"/>, we were just interested in
whether we got a reply or not.  This time, however, we need to look a little
more carefully:
</para>
<itemizedlist>
<listitem>

<para>Check if <emphasis>all</emphasis> packets got there.  Lost packets could mean line quality
problems.  In fact, there's an uncertainty here: you might hit <keycap>Ctrl-C</keycap>
after last packet went out, but before it came back.
</para>
</listitem>
<listitem>

<para>Check that each packet comes back only once.  If not, there's definitely
something wrong.
</para>
</listitem>
<listitem>

<para>Check the times.  A <emphasis>ping</emphasis> across an Ethernet should take between about
0.5 and 4 ms, a <emphasis>ping</emphasis> across an ISDN connection should take about 30 ms,
and a <emphasis>ping</emphasis> across a 33.6 kb/s analogue connection should take about 150
ms.  All of these times are for idle lines, and the time can go up to about 1.5
seconds for a line transferring large blocks of data (for example,
<emphasis>ftp</emphasis>ing a file).  In this example, some line traffic delayed the response
to individual pings.
</para>
</listitem>
</itemizedlist>

<para>If you get results like these, you can assume that the link layer is working
correctly, and you can continue at the next section, ``The network layer''.
Otherwise read on.
</para>
<sect3>
<title>Link layer problems</title>

<para><indexterm><primary>link</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>problems</primary><secondary>link layer</secondary></indexterm>
But maybe your <emphasis>ping</emphasis> output didn't look like the example above.  Let's
look at a couple of possibilities:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
Maybe your interface hasn't been configured correctly.  Check the output of
<emphasis>ifconfig</emphasis>:
</para>
<programlisting>
ifconfig ep0
ep0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        inet 223.147.37.1 netmask 0xffffff00 broadcast 223.147.37.255
        ether 00:a0:24:37:0d:2b
</programlisting>

<para>The second line is the important one: check that the IP address, net mask and
broadcast address are correct.  Don't rely on the fact that this is a class C
address: if somebody else than you is administering the network, check with him
that the net mask is what he has implemented.
</para>
</listitem>
<listitem>

<para>If your interface is configured correctly, check whether you are using the
correct connection to the network.  Many modern Ethernet boards support multiple
physical connections (for example, both BNC and UTP).  For example, if your
network runs on RG58 thin Ethernet, and your interface is set to receive from a
AUI, you may still be able to send data on the RG58, but you won't be able to
receive any.
</para>

<para>The method of setting the connection depends on the board you are using.  In the
case of some older boards, such as the Western Digital 8003, you may need to set
jumpers.  In others, you may need to run the setup utility under DOS,
<footnote>

<para><indexterm><primary>DOS</primary></indexterm>
<indexterm><primary>Diagnostic</primary><secondary>Operational Support</secondary></indexterm>
An old joke claims that <emphasis>DOS</emphasis> stands for <emphasis>Diagnostic Operational
Support</emphasis>, since many UNIX people use it only to run diagnostics.
</para>
</footnote>
<indexterm><primary>ifconfig</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ifconfig</secondary></indexterm>
and with other you can set it with the <emphasis>link</emphasis> flags to <emphasis>ifconfig</emphasis>.
For example, on a 3Com 3c509 ``combo'' board, you can set the connection like
this:
</para>
<programlisting>
# <command>ifconfig ep0 -link0</emphasis>			<emphasis>set BNC</command>
# <command>ifconfig ep0 link0 -link1</emphasis>		<emphasis>set AUI</command>
# <command>ifconfig ep0 link0 link1</emphasis>		<emphasis>set UTP</command>
</programlisting>

<para>Don't assume that these flags work the same way for other Ethernet boards: each
board has its own flags.  Read the man page for the board for the correct flags.
</para>
</listitem>
<listitem>

<para>If your interface looks OK, check whether you can <emphasis>ping</emphasis> other machines on
the network.  If so, of course, you should continue your search on the machine
that isn't responding.
</para>
</listitem>
<listitem>

<para>If you can't get any response, check whether you can communicate between other
machines on the network.  If none are working, you probably have a cabling
problem.  On an RG58 network, the solution to this one is ``divide and
conquer'': divide the network into two by disconnecting a segment in the middle
and placing terminators at each side of the division:
</para>
</listitem>
</itemizedlist>

<para><!--  XXX -->
<emphasis>Before</emphasis>
</para>

<para>	boxht = .4i
	boxwid = .6i
FREEBIE:	box
	"\s8<emphasis>freebie</emphasis>\s0" at FREEBIE
PRESTO:	box at FREEBIE+(1.4i,0)
	"\s8<emphasis>presto</emphasis>\s0" at PRESTO
BUMBLE:	box at PRESTO+(1.4i,0)
	"\s8<emphasis>bumble</emphasis>\s0" at BUMBLE
WAIT:	box at BUMBLE+(1.4i,0)
	"\s8<emphasis>wait</emphasis>\s0" at WAIT

E:	line thickness 1.5 from FREEBIE.sw-(.2i,.3i) to WAIT.se+(.2i,-.3i)
<!--  Terminators -->
	box wid .15i ht .08i fill 1 at E.w
	box wid .15i ht .08i fill 1 at E.e

	"\s14\(bu\s0" at FREEBIE.s+(.01,-.03)
	"\s14\(bu\s0" at PRESTO.s+(.01,-.03)
	"\s14\(bu\s0" at BUMBLE.s+(.01,-.03)
	"\s14\(bu\s0" at WAIT.s+(.01,-.03)

	line from FREEBIE.s to FREEBIE.s-(0,.3i)
	line from PRESTO.s to PRESTO.s-(0,.3i)
	line from BUMBLE.s to BUMBLE.s-(0,.3i)
	line from WAIT.s to WAIT.s-(0,.3i)

GW:	box at E.c+(.2,-.5)
	line from GW.n to GW.n+(0,.3)
	"\s14\(bu\s0" at GW.n+(0,-.03)
	"\s14\(bu\s0" at GW.s+(0,-.03)
	"\s8<emphasis>gw</emphasis>\s0" at GW above
	"Router" at GW below


<!--  Interface names -->
	"\s8<emphasis>ed0</emphasis>\s0" rjust at FREEBIE.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at PRESTO.s+(-.05,-.1)
	"\s8<emphasis>ze0</emphasis>\s0" rjust at BUMBLE.s+(-.05,-.1)
	"\s8<emphasis>ne0</emphasis>\s0" rjust at WAIT.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at GW.n+(-.05,.1)

</para>

<para><emphasis>After</emphasis>
</para>

<para>	boxht = .4i
	boxwid = .6i
FREEBIE:	box
	"\s8<emphasis>freebie</emphasis>\s0" at FREEBIE
PRESTO:	box at FREEBIE+(1.4i,0)
	"\s8<emphasis>presto</emphasis>\s0" at PRESTO
BUMBLE:	box at PRESTO+(1.4i,0)
	"\s8<emphasis>bumble</emphasis>\s0" at BUMBLE
WAIT:	box at BUMBLE+(1.4i,0)
	"\s8<emphasis>wait</emphasis>\s0" at WAIT

E1:	line thickness 1.5 from FREEBIE.sw-(.2i,.3i) to PRESTO.se+(.2i,-.3i)
E2:	line thickness 1.5 from BUMBLE.sw-(.2i,.3i) to WAIT.se+(.2i,-.3i)
<!--  Terminators -->
	box wid .15i ht .08i fill 1 at E1.w
	box wid .15i ht .08i fill 1 at E1.e
	box wid .15i ht .08i fill 1 at E2.w
	box wid .15i ht .08i fill 1 at E2.e

	"\s14\(bu\s0" at FREEBIE.s+(.01,-.03)
	"\s14\(bu\s0" at PRESTO.s+(.01,-.03)
	"\s14\(bu\s0" at BUMBLE.s+(.01,-.03)
	"\s14\(bu\s0" at WAIT.s+(.01,-.03)

	line from FREEBIE.s to FREEBIE.s-(0,.3i)
	line from PRESTO.s to PRESTO.s-(0,.3i)
	line from BUMBLE.s to BUMBLE.s-(0,.3i)
	line from WAIT.s to WAIT.s-(0,.3i)

GW:	box at E2.w+(.8,-.5)
	line from GW.n to GW.n+(0,.3)
	"\s14\(bu\s0" at GW.n+(0,-.03)
	"\s14\(bu\s0" at GW.s+(0,-.03)
	"\s8<emphasis>gw</emphasis>\s0" at GW above
	"Router" at GW below


<!--  Interface names -->
	"\s8<emphasis>ed0</emphasis>\s0" rjust at FREEBIE.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at PRESTO.s+(-.05,-.1)
	"\s8<emphasis>ze0</emphasis>\s0" rjust at BUMBLE.s+(-.05,-.1)
	"\s8<emphasis>ne0</emphasis>\s0" rjust at WAIT.s+(-.05,-.1)
	"\s8<emphasis>ep0</emphasis>\s0" rjust at GW.n+(-.05,.1)

</para>

<para>Typically, you will then find that one of the resultant networks will work, and
the other will not.  Repartition the network to find which one works, and
continue until you find the cabling fault.
</para>
</sect3>
</sect2>
<sect2>
<title>The network layer</title>

<para><indexterm><primary>network</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>debugging</primary><secondary>network layer</secondary></indexterm>
<indexterm><primary>network</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>problems</primary><secondary>network layer</secondary></indexterm>
<indexterm><primary>/etc/namedb/named.root</primary></indexterm>
<indexterm><primary>A.ROOT-SERVERS.NET.</primary></indexterm>
After you are sure that the link layer is functional,, check the network layer.
Try to ping a system which is not directly connected.  Typically, you'll have
been having communication problems with a specific system, so try to ping that
system.  If you don't have a specific machine, use one of the root name servers,
since we'll probably be performing a name server lookup later on.  The addresses
are in the file <emphasis>/etc/namedb/named.root</emphasis>, but you can usually rely on the
address of <emphasis>A.ROOT-SERVERS.NET.</emphasis> to be <emphasis>198.41.0.4</emphasis>.  The
<emphasis>ping</emphasis> looks much as before:
</para>
<programlisting>
$ <command>ping 198.41.0.4</command>
PING 198.41.0.4 (198.41.0.4): 56 data bytes
64 bytes from 198.41.0.4: icmp_seq=0 ttl=244 time=496.426 ms
64 bytes from 198.41.0.4: icmp_seq=1 ttl=244 time=491.334 ms
64 bytes from 198.41.0.4: icmp_seq=2 ttl=244 time=479.077 ms
64 bytes from 198.41.0.4: icmp_seq=3 ttl=244 time=473.774 ms
64 bytes from 198.41.0.4: icmp_seq=4 ttl=244 time=733.429 ms
64 bytes from 198.41.0.4: icmp_seq=5 ttl=244 time=644.726 ms
64 bytes from 198.41.0.4: icmp_seq=7 ttl=244 time=490.331 ms
64 bytes from 198.41.0.4: icmp_seq=8 ttl=244 time=839.671 ms
64 bytes from 198.41.0.4: icmp_seq=9 ttl=244 time=773.764 ms
64 bytes from 198.41.0.4: icmp_seq=10 ttl=244 time=553.067 ms
64 bytes from 198.41.0.4: icmp_seq=11 ttl=244 time=454.707 ms
64 bytes from 198.41.0.4: icmp_seq=12 ttl=244 time=472.212 ms
64 bytes from 198.41.0.4: icmp_seq=13 ttl=244 time=448.322 ms
64 bytes from 198.41.0.4: icmp_seq=14 ttl=244 time=441.352 ms
64 bytes from 198.41.0.4: icmp_seq=15 ttl=244 time=455.595 ms
64 bytes from 198.41.0.4: icmp_seq=16 ttl=244 time=460.040 ms
64 bytes from 198.41.0.4: icmp_seq=17 ttl=244 time=476.943 ms
64 bytes from 198.41.0.4: icmp_seq=18 ttl=244 time=514.615 ms
64 bytes from 198.41.0.4: icmp_seq=23 ttl=244 time=538.232 ms
64 bytes from 198.41.0.4: icmp_seq=24 ttl=244 time=444.123 ms
64 bytes from 198.41.0.4: icmp_seq=25 ttl=244 time=449.075 ms
^C
--- 198.41.0.4 ping statistics ---
27 packets transmitted, 21 packets received, 22% packet loss
round-trip min/avg/max/stddev = 441.352/530.039/839.671/113.674 ms
</programlisting>

<para>In this case, we have a connection.  What about the packet loss rate?  How high
a packet drop rate is still acceptable?  1% or 2% is probably still all right,
and you'll see that often enough.  By the time you get to 10%, though, things
look a lot worse.  10% packet drop rate doesn't mean that your connection slows
down by 10%.  For every dropped packet, you have a minimum delay of one second
until TCP retries it.  If that retried packet gets dropped too&mdash;which it will
every 10 dropped packets if you have a 10% drop rater&mdash;the second retry takes
another 3 seconds.  If you're transmitting packets of 64 bytes over a 33.6 kb/s
link, you can normally get about 60 packets through per second.  With 10% packet
loss, the time to get these packets through will be about 8 seconds: a
throughput loss of 87.5%.
</para>

<para>With 20% packet loss, the results are even more dramatic.  Now 12 of the 60
packets have to be retried, and 2.4 of them will be retried a second time (for 3
seconds delay), and 0.48 of them will be retried a third time (6 seconds
delay).  This makes a total of 22 seconds delay, a throughput degradation of
nearly 96%.
</para>

<para>Theoretically, you might think that the degradation would not be as bad for big
packets, such as you might have with file transfers with <emphasis>ftp</emphasis>.  In fact,
the situation is worse then: the packet drop rate rises sharply with the packet
size, and it's common enough that <emphasis>ftp</emphasis> will time out completely before it
can transfer a file.
</para>

<para><indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>hub</primary></indexterm>
<indexterm><primary>freebie.example.org</primary></indexterm>
<indexterm><primary>hub.FreeBSD.org</primary></indexterm>
The following example shows the result of sending some text on a
less-than-perfect <emphasis>ssh</emphasis> connection to <emphasis>hub.FreeBSD.org</emphasis>.  To make
things more readable, the names have been truncated to <emphasis>freebie</emphasis> and
<emphasis>hub</emphasis>.  In real-life output, they would be reported as
<emphasis>freebie.example.org</emphasis> and <emphasis>hub.FreeBSD.org</emphasis>.
</para>
<programlisting>
# <command>tcpdump -i ppp0 host hub.freebsd.org</command>
14:16:35.990506 freebie.1019 &gt; hub.22: P 20:40(20) ack 77 win 17520 (DF) [tos 0x10]
14:16:36.552149 hub.22 &gt; freebie.1019: P 77:97(20) ack 40 win 17520 (DF) [tos 0x10]
14:16:36.722290 freebie.1019 &gt; hub.22: . ack 97 win 17520 (DF) [tos 0x10]
14:16:39.344229 freebie.1019 &gt; hub.22: P 40:60(20) ack 97 win 17520 (DF) [tos 0x10]
14:16:41.321850 freebie.1019 &gt; hub.22: P 40:60(20) ack 97 win 17520 (DF) [tos 0x10]
</programlisting>

<para>The previous two lines are retries of the same acknowledgement, since
<emphasis>hub</emphasis> did not respond in time.
</para>
<programlisting>
14:16:42.316150 hub.22 &gt; freebie.1019: P 97:117(20) ack 60 win 17520 (DF) [tos 0x10]
</programlisting>

<para>This was the missing acknowledgement&mdash;it came another second later.
</para>
<programlisting>
14:16:42.321773 freebie.1019 &gt; hub.22: . ack 117 win 17520 (DF) [tos 0x10]
14:16:47.428694 freebie.1019 &gt; hub.22: P 60:80(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:48.590805 freebie.1019 &gt; hub.22: P 80:100(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:49.055735 freebie.1019 &gt; hub.22: P 100:120(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:49.190703 hub.22 &gt; freebie.1019: P 137:157(20) ack 100 win 17520 (DF) [tos 0x10]
</programlisting>

<para>Here, <emphasis>freebie</emphasis> has sent data to <emphasis>hub</emphasis>, and <emphasis>hub</emphasis> has replied
with an acknowledgement up to serial number <emphasis>100</emphasis>.  Unfortunately, the
data it sent (serial numbers <emphasis>137</emphasis> to <emphasis>157</emphasis>) don't line up with the
last previously received data (serial number <emphasis>117</emphasis> at 14:16:42.316150).
<emphasis>freebie</emphasis> thus repeats the previous acknowledgement and then continues
sending its data:
</para>
<programlisting>
14:16:49.190890 freebie.1019 &gt; hub.22: . ack 117 win 17520 (DF) [tos 0x10]
14:16:49.538607 freebie.1019 &gt; hub.22: P 120:140(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:49.599395 hub.22 &gt; freebie.1019: P 157:177(20) ack 120 win 17520 (DF) [tos 0x10]
</programlisting>

<para><indexterm><primary>freebie</primary></indexterm>
Here, <emphasis>hub</emphasis> has sent yet more data, now acknowledging the data that
<emphasis>freebie</emphasis> sent at 14:16:49.055735.  It still hasn't sent the data in the
serial number range <emphasis>117</emphasis> to <emphasis>136</emphasis>, so <emphasis>freebie</emphasis> resends the
last acknowledgement again and continues sending data:
</para>
<programlisting>
14:16:49.599538 freebie.1019 &gt; hub.22: . ack 117 win 17520 (DF) [tos 0x10]
14:16:49.620506 freebie.1019 &gt; hub.22: P 140:160(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:50.066698 hub.22 &gt; freebie.1019: P 177:197(20) ack 140 win 17520 (DF) [tos 0x10]
</programlisting>

<para><indexterm><primary>hub</primary></indexterm>
Again <emphasis>hub</emphasis> has sent more data, still without sending the missing packet.
<emphasis>freebie</emphasis> tries yet again, and then continues sending data:
</para>
<programlisting>
14:16:50.066868 freebie.1019 &gt; hub.22: . ack 117 win 17520 (DF) [tos 0x10]
14:16:51.820708 freebie.1019 &gt; hub.22: P 140:160(20) ack 117 win 17520 (DF) [tos 0x10]
14:16:52.308992 hub.22 &gt; freebie.1019: . ack 160 win 17520 (DF) [tos 0x10]
14:16:55.251176 hub.22 &gt; freebie.1019: P 117:217(100) ack 160 win 17520 (DF) [tos 0x10]
</programlisting>

<para>Finally, <emphasis>hub</emphasis> resends the missing data, with serial numbers from
<emphasis>117</emphasis> to <emphasis>217</emphasis>.  <emphasis>freebie</emphasis> is now happy, and acknowledges
receipt of all the data up to <emphasis>217</emphasis>.  That's all we transmitted, so after
about 1.5 seconds the two systems exchange final acknowledgements:
</para>
<programlisting>
14:16:55.251358 freebie.1019 &gt; hub.22: . ack 217 win 17420 (DF) [tos 0x10]
14:16:56.690779 hub.login &gt; freebie.1015: . ack 3255467530 win 17520
14:16:56.690941 freebie.1015 &gt; hub.login: . ack 1 win 17520 (DF) [tos 0x10]
</programlisting>

<para><indexterm><primary>traceroute</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>traceroute</secondary></indexterm>
This example shows us that the connection is less than perfect.  Why?  You can
use <emphasis>traceroute</emphasis> to find out where it's happening, but unless the place is
within your ISP's network, you can't do much about it.
</para>
</sect2>
<sect2>
<title>No connection</title>

<para>But maybe you don't get anything back.  You see something like this:
</para>
<programlisting>
$ <command>ping rider.fc.net</command>
PING rider.fc.net (207.170.123.194): 56 data bytes
^C
--- rider.fc.net ping statistics ---
8 packets transmitted, 0 packets received, 100% packet loss
</programlisting>

<para><indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
<emphasis>tcpdump</emphasis> shows:
</para>
<programlisting>
# <command>tcpdump -i ppp0 host rider.fc.net</command>
13:30:32.336432 freebie.example.org &gt; rider.fc.net: icmp: echo request
13:30:33.355045 freebie.example.org &gt; rider.fc.net: icmp: echo request
13:30:34.374888 freebie.example.org &gt; rider.fc.net: icmp: echo request
13:30:35.394728 freebie.example.org &gt; rider.fc.net: icmp: echo request
13:30:36.414769 freebie.example.org &gt; rider.fc.net: icmp: echo request
</programlisting>

<para><indexterm><primary>rider.fc.net</primary></indexterm>
For some reason, <emphasis>rider.fc.net</emphasis> is not reachable.  But why?  We know it's
not the local link, but somewhere the data isn't getting through.  Where?
<emphasis>traceroute</emphasis> can help:
</para>
<programlisting>
# <command>traceroute rider.fc.net</command>
traceroute to rider.fc.net (207.170.123.194), 30 hops max, 40 byte packets
 1  Cont0.way3.Adelaide.telstra.net (139.130.136.129)  359.252 ms  138.754 ms  380.136 ms
 2  Ethernet1-0.way1.Adelaide.telstra.net (139.130.237.65)  417.399 ms  641.075 ms  654.572 ms
 3  Fddi0-0.way-core1.Adelaide.telstra.net (139.130.237.226)  653.558 ms  807.843 ms  820.315 ms
 4  Serial5-5.pad-core2.Sydney.telstra.net (139.130.249.209)  861.472 ms  165.041 ms  149.836 ms
 5  Fddi0-0.pad8.Sydney.telstra.net (139.130.249.228)  163.000 ms  207.969 ms  448.134 ms
 6  bordercore4-hssi0-0.SanFrancisco.mci.net (166.48.19.249)  347.656 ms  404.727 ms  342.072 ms
 7  core2.Dallas.mci.net (204.70.4.69)  383.040 ms  639.875 ms  560.789 ms
 8  borderx1-fddi-1.Dallas.mci.net (204.70.114.52)  436.243 ms  575.502 ms  388.719 ms
 9  smart-technologies.Dallas.mci.net (204.70.114.110)  1025.478 ms  936.228 ms  1213.072 ms
10  freeside-100Mb.smart-nap.net (208.10.195.146)  1166.775 ms  1216.596 ms  1245.616 ms
11  6jane.fc.net (207.170.70.133)  1235.122 ms  398.822 ms  458.958 ms
12  * * *
13  *^C
</programlisting>

<para>This example shows that the data gets through fine as far as <emphasis>6jane.fc.net</emphasis>,
after which it disappears completely.  This is a pretty good sign that the
problem lies in the network <emphasis>fc.net</emphasis>.  If, as in this case, <emphasis>rider</emphasis> is
connected via PPP, it's a good assumption that it's currently not connected.
</para>

<para>On the other hand, you might see something like:
</para>
<programlisting>
# <command>traceroute rider.fc.net</command>
traceroute to rider.fc.net (207.170.123.194), 30 hops max, 40 byte packets
 1  gw (223.147.37.5)  1.519 ms  1.168 ms  1.100 ms
 2  * * *
 3  * * *
</programlisting>

<para>In this case, there is obviously something wrong on the local network.  You can
get the data as far as <emphasis>gw</emphasis>, but that's as far as it goes.
</para>

<para>There are more possible reasons for this than meet the eye.  Here are some of
them:
</para>
<itemizedlist>
<listitem>

<para>The link to the next system may be down.  The solution's obvious: bring it up
and try again.
</para>
</listitem>
<listitem>

<para><emphasis>gw</emphasis> may not be configured as a gateway.  You can check this with
</para>
<programlisting>
$ <command>sysctl net.inet.ip.forwarding</command>
net.inet.ip.forwarding: 1
</programlisting>

<para>For a router, this value should be <emphasis>1</emphasis>.  If it's 0, change it with:
</para>
<programlisting>
# <command>sysctl -w net.inet.ip.forwarding=1</command>
net.inet.ip.forwarding: 0 -&gt; 1
</programlisting>

<para>See page <xref linkend="CFBSD-set-gateway"/> for further details.
</para>
</listitem>
<listitem>

<para>You may be using a non-routable IP address such as those in the range
<emphasis>192.168.<emphasis>x</emphasis>.<emphasis>x</emphasis></emphasis>.  You can't do that.  You'll need to run some kind
of aliasing package.  See page <xref linkend="CFBSD-ip-aliasing"/> for further details.
</para>
</listitem>
<listitem>

<para><indexterm><primary>traceroute</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>traceroute</secondary></indexterm>
Maybe there is something wrong with routing to your network.  This is a
difficult one to check, but one possibility is to repeat the <emphasis>traceroute</emphasis>
from the machine <emphasis>gw</emphasis>.  The packets there will go out with the address
<emphasis>139.130.136.133</emphasis>, which belongs to another network, so they will not be
affected by a routing problem for network <emphasis>223.147.37.<emphasis>x</emphasis></emphasis>.  If this
proves to be the case, contact your ISP to solve it.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>Another possibility might be that you get messages like these:
</para>
<programlisting>
# <command>ping rider.fc.net</command>
PING rider.fc.net (207.170.123.194): 56 data bytes
36 bytes from gw.example.org (223.147.37.5): Destination Host Unreachable
Vr HL TOS  Len   ID Flg  off TTL Pro  cks      Src      Dst
 4  5  00 6800 c5da   0 0000  fe  01 246d 223.147.37.2  207.170.123.194

36 bytes from gw.example.org (223.147.37.5): Destination Host Unreachable
Vr HL TOS  Len   ID Flg  off TTL Pro  cks      Src      Dst
 4  5  00 6800 c5e7   0 0000  fe  01 2460 223.147.37.2  207.170.123.194

^C
--- rider.fc.net ping statistics ---
2 packets transmitted, 0 packets received, 100% packet loss
# <command>traceroute rider.fc.net</command>
traceroute to rider.fc.net (207.170.123.194), 30 hops max, 40 byte packets
 1  gw (223.147.37.5)  1.519 ms  1.168 ms  1.100 ms
 2  gw (223.147.37.5)  1.244 ms !H  1.242 ms !H  0.955 ms !
</programlisting>

<para>These messages are caused by ICMP messages returned from <emphasis>gw</emphasis> indicating
that it does not know where to send the data.  This is almost certainly a
problem of the routing tables: on <emphasis>gw</emphasis> you'll probably see something like
</para>
<programlisting>
$ <command>netstat -rn</command>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use     Netif Expire
127.0.0.1          127.0.0.1          UH          3    16671       lo0
139.130.136.129    223.147.37.5       UH         17        2      tun0
223.147.37         link#2             UC          0        0
223.147.37.1       0:0:c0:44:a5:68    UHLW        4    21375       ep0   1172
223.147.37.5       127.0.0.1          UGHS        1       90       lo0
223.147.37.255     ff:ff:ff:ff:ff:ff  UHLWb       2     3357       ep0
224/4              link#2             UCS         0        0
</programlisting>

<para><indexterm><primary>route</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>route</secondary></indexterm>
The problem here is that there is no <emphasis>default</emphasis> route.  Add it with the
<emphasis>route</emphasis> command:
</para>
<programlisting>
# <command>route add default 139.130.136.129</command>
# <command>netstat -rn</command>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use     Netif Expire
127.0.0.1          127.0.0.1          UH          3    16671       lo0
default            139.130.136.129    UGSc       18      221      tun0
139.130.136.129    223.147.37.5       UH         17        2      tun0
223.147.37         link#2             UC          0        0
223.147.37.1       0:0:c0:44:a5:68    UHLW        4    21375       ep0   1172
223.147.37.5       127.0.0.1          UGHS        1       90       lo0
223.147.37.255     ff:ff:ff:ff:ff:ff  UHLWb       2     3357       ep0
224/4              link#2             UCS         0        0
</programlisting>

<para>See <xref linkend="CFBSD-chnetsetup"/>, page <xref linkend="CFBSD-route"/>, for more details, including how to ensure
that the routes will be added automatically at boot time.
</para>
</sect2>
<sect2>
<title>Transport and Application layers</title>

<para><indexterm><primary>transport</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>problems</primary><secondary>transport layer</secondary></indexterm>
<indexterm><primary>application</primary><secondary>layer</secondary></indexterm>
<indexterm><primary>problems</primary><secondary>application layer</secondary></indexterm>
If you have got this far, the chances are that things will now work.  About the
only things that can still cause problems are the individual applications.
We'll look at some of these in the relevant chapters.
</para>

<para>One particular problem are is the Domain Name Service.  This is such an integral
part of the Internet Protocols that people tend to forget that it's really an
application.  If you get a timeout accessing a Web URL, for example, there's a
good chance that DNS is causing the problem.  Take a look at <xref linkend="CFBSD-chdns"/> for some
ideas.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchnfs"><title>The Network File System</title>

<para></para>
<sect1>
<title>Setting up NFS</title>

<para><indexterm><primary>setting</primary><secondary>up NFS</secondary></indexterm>
<indexterm><primary>NFS</primary><secondary>setting up</secondary></indexterm>
<anchor id="CFBSD-NFS-setup"/>
<indexterm><primary>Network</primary><secondary>File System</secondary></indexterm>
<indexterm><primary>NFS</primary></indexterm>
The <emphasis>Network File System</emphasis>, or <emphasis>NFS</emphasis>, is the standard way to share UNIX
files across a network.
</para>

<para><indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
We've already seen that UNIX file systems are accessible in a single tree by
<emphasis>mount</emphasis>ing them on a specific directory.  NFS continues this illusion
across the network.
</para>

<para>From a user point of view, there is little difference: you use the same
<emphasis>mount</emphasis> command, and it performs what looks like the same function.  For
example, if system <emphasis>presto</emphasis>'s system administrator wants to mount
<emphasis>freebie</emphasis>'s file systems <emphasis>/</emphasis>, <emphasis>/usr</emphasis> and <emphasis>/home</emphasis>, he could
enter:
</para>
<programlisting>
# <command>mkdir /freebie /freebie/usr /freebie/home</command>
# <command>mount freebie:/ /freebie</command>
# <command>mount freebie:/usr /freebie/usr</command>
# <command>mount freebie:/home /freebie/home</command>
</programlisting>

<para>You'll note how to specify the file systems: the system name, a colon
(<emphasis>:</emphasis>), and the file system name.  This terminology predates URLs;
nowadays, people would probably write <emphasis>nfs://freebie/usr</emphasis>.
</para>

<para>If you look at NFS more closely, things don't look quite as similar.  You access
local file systems via the disk driver, which is part of the kernel.  You access
NFS file systems via the NFS processes.
</para>

<para>Older implementations of NFS had a plethora of processes.  If you're used to
such systems, don't let the lack of processes make you think that there's
something missing.
</para>
</sect1>
<sect1>
<title>NFS</title>

<para>NFS runs in two directions:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>NFS</primary><secondary>client</secondary></indexterm>
<indexterm><primary>client</primary><secondary>NFS</secondary></indexterm>
When you mount a file system from another system on your system, your system is
an <emphasis>NFS Client</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>NFS</primary><secondary>server</secondary></indexterm>
<indexterm><primary>server</primary><secondary>NFS</secondary></indexterm>
When another system mounts one of your system's file system, your system is an
<emphasis>NFS Server</emphasis>.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
A system can, and often does, perform both of these functions at the same time.
A certain amount of setup is required, however.  We'll look at both in more
detail in the following sections, but the simple answer is: <emphasis>/etc/rc.conf</emphasis>
does it for you.  Just set these two lines:
</para>
<programlisting>
nfs_client_enable="YES"		# This host is an NFS client (or NO).
nfs_server_enable="YES"		# This host is an NFS server (or NO).
</programlisting>

<para>There are also a few other NFS-related flags you can put in <emphasis>/etc/rc.conf</emphasis>.
We'll look at them later.
</para>
</sect1>
<sect1>
<title>NFS client</title>

<para><indexterm><primary>NFS</primary><secondary>client</secondary></indexterm>
<indexterm><primary>client</primary><secondary>NFS</secondary></indexterm>
<indexterm><primary>nfsiod</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>nfsiod</secondary></indexterm>
You don't need any particular software to run as an NFS client, but the program
<emphasis>nfsiod</emphasis> greatly improves performance.  It's started at bootup time if you
specify <emphasis>nfs_client_enable="YES"</emphasis> in your <emphasis>/etc/rc.conf</emphasis>, but you can
also start it manually if it's not running:
</para>
<programlisting>
# <command>nfsiod -n 4</command>
</programlisting>

<para><indexterm><primary>/etc/rc.network</primary></indexterm>
The parameter <emphasis>-n 4</emphasis> tells <emphasis>nfsiod</emphasis> how many copies of itself to
start.  The default is four.  Each <emphasis>nfsiod</emphasis> can handle a concurrent I/O
request, so if you find that your performance isn't what you would like it to
be, and the CPU time used by each <emphasis>nfsiod</emphasis> is similar, then you might like
to increase this value.  To ensure it's done automatically at boot time, change
the value of this line in <emphasis>/etc/rc.network</emphasis>:
</para>
<programlisting>
	    echo -n ' nfsiod';		nfsiod -n 4
</programlisting>

<para>There is currently no way to configure this value from <emphasis>/etc/rc.conf</emphasis>.
</para>
<sect2>
<title>Mounting remote file systems</title>

<para><indexterm><primary>Mounting</primary><secondary>remote file systems</secondary></indexterm>
<indexterm><primary>mount</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount</secondary></indexterm>
<indexterm><primary>mount_ufs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount_ufs</secondary></indexterm>
<indexterm><primary>mount_nfs</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mount_nfs</secondary></indexterm>
As we've seen, we mount NFS file with the same <emphasis>mount</emphasis> command which we
use for local file systems.  This is another illusion: <emphasis>mount</emphasis> is just a
front-end program which determines which program to start.  In the case of local
file systems, it will start <emphasis>mount_ufs</emphasis>, and for NFS file systems it will
start <emphasis>mount_nfs</emphasis>.
</para>

<para>Unfortunately, the documentation isn't very clear about how it passes its
parameters.  You can mount a file system as we saw above, but there are a number
of parameters that you should consider:
<table frame='all'><title>NFS mount options</title>
<anchor id="CFBSD-NFS-mount-flags"/>
<indexterm><primary>/etc/fstab</primary></indexterm>
box,center,tab(#) ;
| lfCWp9 | lfCWp9 | lw56 | .
<emphasis>mount</emphasis>#<emphasis>mount_nfs</emphasis>#Meaning
option#option
=
bg#-b#T{
Continue attempting the mount in the background if it doesn't complete
immediately.  This is a very good idea in <emphasis>/etc/fstab</emphasis>, since otherwise the
boot process will wait until all mounts have completed.  If you've just had a
power failure, this can cause deadlocks otherwise.
T}
kerb#-K#T{
Pass Kerberos authenticators to the server for client-to-server user-credential
mapping.
T}
nfsv2#-2#T{
Use NFS version 2 protocol.  By default, <emphasis>mount_nfs</emphasis> will try NFS version
3 protocol first, and fall back to version 2 if the other end can't handle
version 3.
T}
retry=<emphasis>num</emphasis>#-R<emphasis>num</emphasis>#T{
Retry up to <emphasis>num</emphasis> times before aborting an I/O operation.
T}
-o ro#-o ro#T{
Mount the file system for read-only access.
T}
-o rw#-o rw#T{
Mount the file system for read and write access.
T}
-R <emphasis>num</emphasis>#-R <emphasis>num</emphasis>#T{
Retry the mount operation up to <emphasis>num</emphasis> times.  If you have chosen soft
mounting, fail I/O operations after <emphasis>num</emphasis> retries.  The default value is
10.
T}
-r <emphasis>size</emphasis>#-r <emphasis>size</emphasis>#T{
Set the read data block size to <emphasis>size</emphasis> bytes.  <emphasis>size</emphasis> should be a
power of 2 between 1024 and  32768.  The default value is 8192.
Use smaller block sizes
for UDP mounts if you have frequent ``fragments dropped due to timeout''
messages on the client.
T}
soft#-s#T{
If operations on the file system time out, don't retry for ever.  Instead, give
up after <emphasis>Retry</emphasis> timeouts.  See option <emphasis>-R</emphasis>.
T}
-t <emphasis>num</emphasis>#-t <emphasis>num</emphasis>#T{
Time out and retry an operation if it doesn't complete with in <emphasis>num</emphasis>/10
seconds.  The default value is 10 (1 second).
T}
tcp#-T#T{
Use TCP instead of UDP for mounts.  This is more reliable, but slightly slower.
In addition, not all implementations of NFS support TCP transport.
T}
-w <emphasis>size</emphasis>#-w <emphasis>size</emphasis>#T{
Set the write data block size to <emphasis>size</emphasis> bytes.  <emphasis>size</emphasis> should be a
power of 2 between 1024 and  32768.  The default value is 8192
Use smaller block sizes
for UDP mounts if you have frequent ``fragments dropped due to timeout''
messages on the server.
T}

</tbody></tgroup></table>
Normally, the only options that are of interest are <emphasis>-o ro</emphasis>, if you
specifically want to restrict write access to the file system, and <emphasis>soft</emphasis>,
which you should always use.
</para>
<note>

<para>Purists claim that <emphasis>soft</emphasis> compromises data integrity, because it may leave
data on the server machine in an unknown state.  That's true enough, but in
practice the alternative to soft mounting is to reboot the client machine.  This
is not only a nuisance, it <emphasis>also</emphasis> compromises data integrity.  The only
solution which doesn't always compromise data integrity is to wait for the
server machine to come back on line again.  It's unlikely that anybody will wait
more than a few hours at the outside for a server to come back.
</para>
</note>

<para>A typical mount operation might be:
</para>
<programlisting>
# <command>mount -o soft presto:/usr /presto/usr
</command></programlisting>

<para></para>
</sect2>
<sect2>
<title>Where to mount NFS file systems</title>

<para><indexterm><primary>mounting</primary><secondary>NFS file systems</secondary></indexterm>
<indexterm><primary>NFS</primary><secondary>file systems</secondary></indexterm>
<anchor id="CFBSD-NFS-mount-points"/>
<indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
You can mount an NFS file system just about anywhere you would mount a local
file system.  Still, a few considerations will make life easier.  In this
discussion, we'll assume that we have a large number of file systems mounted on
<emphasis>freebie</emphasis>, and we want to make them accessible to <emphasis>presto</emphasis>.
</para>
<itemizedlist>
<listitem>

<para>If you have a ``special'' file system which you want to mount on multiple
systems, it makes sense to mount them on the same mount point on every system.
<emphasis>freebie</emphasis> has two file systems, <emphasis>/S</emphasis> and <emphasis>/src</emphasis>, which contain
source files and are shared between all systems on the network.  It makes sense
to mount the file system on the same directory.
</para>
</listitem>
<listitem>

<para><emphasis>freebie</emphasis> has a CD-ROM changer, and mounts the disks on <emphasis>/cdrom/1</emphasis>
to <emphasis>/cdrom/7</emphasis>.  <emphasis>presto</emphasis> finds that too confusing, and mounts one of
them on <emphasis>/cdrom</emphasis>.
</para>
</listitem>
<listitem>

<para>Some other file systems can't be mounted in the same place.  For example,
<emphasis>freebie:/usr</emphasis> can't be mounted on <emphasis>/usr</emphasis>.  Mount them on directories
which match the system name.  For example, mount <emphasis>freebie:/usr</emphasis> on
<emphasis>/freebie/usr</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>Having done this, you might find the following file systems mounted on
<emphasis>freebie</emphasis>:
</para>
<programlisting>
# <command>df</command>
Filesystem  1024-blocks     Used    Avail Capacity  Mounted on
/dev/wd0a         30206    26830      960    97%    /
/dev/wd0s1e     1152422  1016196    44034    96%    /usr
/dev/da0h        931630   614047   243052    72%    /src
/dev/da1h       2049812  1256636   629192    67%    /home
procfs                4        4        0   100%    /proc
/dev/cd0a        656406   656406        0   100%    /cdrom/1
/dev/cd1a        664134   664134        0   100%    /cdrom/2
/dev/cd2a        640564   640564        0   100%    /cdrom/3
/dev/cd3a        660000   660000        0   100%    /cdrom/4
/dev/cd4a        525000   525000        0   100%    /cdrom/5
/dev/cd5a        615198   615198        0   100%    /cdrom/6
/dev/cd6a        278506   278506        0   100%    /cdrom/7
</programlisting>

<para>On <emphasis>presto</emphasis>, you might see:
</para>
<programlisting>
# <command>df</command>
Filesystem       1024-blocks     Used    Avail Capacity  Mounted on
/dev/da0a              29727    20593     6756    75%    /
/dev/da0s1e          1901185   742884  1006207    42%    /usr
procfs                     4        4        0   100%    /proc
freebie:/              30206    26830      960    97%    /freebie
freebie:/usr         1152422  1016198    44032    96%    /freebie/usr
freebie:/home        2049812  1256638   629190    67%    /home
freebie:/src          931630   614047   243052    72%    /src
freebie:/S           3866510  1437971  2119219    40%    /S
freebie:/cdrom/1      656406   656406        0   100%    /cdrom
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Mounting NFS file systems automatically</title>

<para><indexterm><primary>/etc/fstab</primary></indexterm>
<indexterm><primary>mountall</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mountall</secondary></indexterm>
If you want to mount NFS files automatically at boot time, make an entry for
them in the file <emphasis>/etc/fstab</emphasis>.  You can even do this if you don't
necessarily want to mount them: just add the keyword <emphasis>noauto</emphasis>, and
<emphasis>mountall</emphasis> will ignore them at boot time.  The advantage is that you then
just need to specify, say,
</para>
<programlisting>
# <command>mount /src</command>
</programlisting>

<para>instead of
</para>
<programlisting>
# <command>mount -s freebie:/src /src</command>
</programlisting>

<para><indexterm><primary>/etc/fstab</primary></indexterm>
See the description of <emphasis>/etc/fstab</emphasis> on page <xref linkend="CFBSD-/etc/fstab"/> for more
information.
</para>
</sect2>
</sect1>
<sect1>
<title>NFS server</title>

<para><indexterm><primary>NFS</primary><secondary>server</secondary></indexterm>
<indexterm><primary>server</primary><secondary>NFS</secondary></indexterm>
A number of processes are needed to provide NFS server functionality:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>NFS</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>nfsd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>nfsd</secondary></indexterm>
The <emphasis>NFS dæmon</emphasis>, <emphasis>nfsd</emphasis>, provides the NFS server capability.
</para>
</listitem>
<listitem>

<para><indexterm><primary>mount</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>mountd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>mountd</secondary></indexterm>
The <emphasis>mount dæmon</emphasis>, <emphasis>mountd</emphasis>, processes mount requests from clients.
</para>
</listitem>
<listitem>

<para><indexterm><primary>NFS</primary><secondary>lock dæmon</secondary></indexterm>
<indexterm><primary>rpc.lockd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rpc.lockd</secondary></indexterm>
The <emphasis>NFS lock dæmon</emphasis>, <emphasis>rpc.lockd</emphasis>, processes lock requests for NFS file
systems.  There are still a lot of problems with this function on all platforms.
It's best to avoid it if you can.
</para>
</listitem>
<listitem>

<para><indexterm><primary>status</primary><secondary>monitoring dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>status monitoring</secondary></indexterm>
<indexterm><primary>rpc.statd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rpc.statd</secondary></indexterm>
The <emphasis>Status monitoring dæmon</emphasis>, <emphasis>rpc.statd</emphasis>, provides a status monitoring
service.
</para>
</listitem>
</itemizedlist>

<para>In addition,
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>remote</primary><secondary>procedure call</secondary></indexterm>
<indexterm><primary>RPC</primary></indexterm>
<indexterm><primary>portmap</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>portmap</secondary></indexterm>
since NFS uses <emphasis>Remote procedure calls</emphasis> (<emphasis>RPC</emphasis>), the <emphasis>portmap</emphasis>
dæmon must be running.  <emphasis>portmap</emphasis> is not part of NFS, but it is required
to map RPC port numbers to IP service numbers.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/exports</primary></indexterm>
The server needs a file <emphasis>/etc/exports</emphasis> to define which file systems to
export and how to export them.  We'll look at this in the next section.
</para>
</listitem>
</itemizedlist>

<para></para>

<para></para>
<sect2>
<title>/etc/exports</title>

<para><anchor id="CFBSD-/etc/exports"/>
A number of security implications are associated with NFS.  Without some kind of
authentication, you could mount any file system on the Internet.
</para>

<para>NFS was developed at a time when users were relatively trusted.  As a result,
the security precautions are not overly sophisticated.  <emphasis>/etc/exports</emphasis>
describes one file system per line.  The format is:
</para>
<programlisting>
<emphasis>file system</emphasis>	<emphasis>options</emphasis>		<emphasis>systems</emphasis>
</programlisting>

<para><emphasis>systems</emphasis> is a list of systems which are allowed to mount the file system.
The only required field is the name of the file system, but if you're on the
Internet, you should at least limit the number of systems which can mount your
file systems.  If you don't, any system on the net can mount your file systems.
</para>

<para>There are a number of options.  Here are the more important ones:
</para>
<itemizedlist>
<listitem>

<para>The <emphasis>-maproot</emphasis> option describes how to treat <emphasis>root</emphasis>.  By default,
<emphasis>root</emphasis> does not have special privileges on the remote system.  Instead,
NFS changes the user ID to user <emphasis>nobody</emphasis>, which is user 65534 (or -2).
You can change this with the <emphasis>-maproot</emphasis> option.  For example, to map
<emphasis>root</emphasis> to the real <emphasis>root</emphasis> user for a specific file system, you would
add <emphasis>-maproot=0</emphasis> to the line describing the file system.
</para>
</listitem>
<listitem>

<para>The <emphasis>-mapall</emphasis> option maps the user IDs of other users.  This is relatively
uncommon.  See the man page <emphasis>exports(5)</emphasis> for more details.
</para>
</listitem>
<listitem>

<para>The <emphasis>-ro</emphasis> option restricts access to read-only.
</para>
</listitem>
<listitem>

<para>The <emphasis>-network</emphasis> option restricts the access to systems on the specified
network.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>/etc/exports</primary></indexterm>
<indexterm><primary>/etc/dfs/dfstab</primary></indexterm>
<indexterm><primary>share</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>share</secondary></indexterm>
If you come from a System V background, you'll notice that the mechanism is
different.  <emphasis>/etc/exports</emphasis> corresponds in concept roughly to System V's
<emphasis>/etc/dfs/dfstab</emphasis> file, except that the <emphasis>share</emphasis> statement does not
exist.
</para>
<sect3>
<title>Updating <emphasis>/etc/exports</emphasis> </title>

<para><indexterm><primary>mountd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>mountd</secondary></indexterm>
It's not enough to change the contents of <emphasis>/etc/exports</emphasis>: you also need to
tell <emphasis>mountd</emphasis> that you have done so.  You do this by the relatively common
method of sending a <emphasis>SIGHUP</emphasis> to <emphasis>mountd</emphasis>:
</para>
<programlisting>
# <command>ps waux | grep mountd</command>
root     103  0.0  0.0   636    0  ??  Is   Sat05PM   0:00.55 mountd -n
# <command>kill -1 103</command>
</programlisting>

<para><indexterm><primary>/etc/exports</primary></indexterm>
<indexterm><primary>presto</primary></indexterm>
A typical <emphasis>/etc/exports</emphasis> for <emphasis>presto</emphasis> might be:
</para>
<programlisting>
/ -maproot=0 presto bumble wait gw
/usr -maproot=0 -network 223.147.37.0
</programlisting>

<para></para>
</sect3>
</sect2>
<sect2>
<title>Setup in <emphasis>/etc/rc.conf</emphasis> </title>

<para><indexterm><primary>/etc/rc.conf</primary></indexterm>
A number of parameters in <emphasis>/etc/rc.conf</emphasis> relate to NFS server setup:
</para>
<itemizedlist>
<listitem>

<para>Set <emphasis>nfs_server_enable</emphasis> to <emphasis>YES</emphasis> to enable the system as an NFS
server.
</para>
</listitem>
<listitem>

<para>Set <emphasis>weak_mountd_authentication</emphasis> if you your network includes Microsoft
machines which can't provide a login.  This will cause the system to start
<emphasis>mountd</emphasis> with the <emphasis>-n</emphasis> option.
</para>
</listitem>
<listitem>

<para>Set <emphasis>nfs_reserved_port_only</emphasis> to <emphasis>YES</emphasis> if you want to provide NFS
only on a secure port.
</para>
</listitem>
<listitem>

<para><indexterm><primary>rpc.lockd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rpc.lockd</secondary></indexterm>
Set <emphasis>rpc_lockd_enable</emphasis> to <emphasis>YES</emphasis> to start <emphasis>rpc.lockd</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>rpc.statd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rpc.statd</secondary></indexterm>
Set <emphasis>rpc_statd_enable</emphasis> to <emphasis>YES</emphasis> to start <emphasis>rpc.statd</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>portmap</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>portmap</secondary></indexterm>
Set <emphasis>portmap_enable</emphasis> to <emphasis>YES</emphasis> to start <emphasis>portmap</emphasis>.  You don't
have any choice: you must do this to run an NFS server.  This parameter is only
supplied here separately because you may want to run <emphasis>portmap</emphasis> without the
NFS server.
</para>
</listitem>
<listitem>

<para>If you have special flags for <emphasis>portmap</emphasis>, set <emphasis>portmap_flags</emphasis> to them.
</para>
</listitem>
</itemizedlist>

<para>On a typical system, this section of <emphasis>/etc/rc.conf</emphasis> might look like:
</para>
<programlisting>
nfs_server_enable="YES"		# This host is an NFS server (or NO).
weak_mountd_authentication="NO"	# Running PCNFSD / other non-root nfsd (or NO).
nfs_reserved_port_only="NO"	# Provide NFS only on secure port (or NO).
rpc_lockd_enable="NO"		# Run NFS rpc.lockd (*broken!*) if nfs_server.
rpc_statd_enable="YES"		# Run NFS rpc.statd if nfs_server (or NO).
portmap_enable="YES"			# Run the portmapper service (or NO).
portmap_flags=""			# Flags to portmap (if enabled).
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>NFS strangenesses</title>

<para><indexterm><primary>NFS</primary><secondary>strangenesses</secondary></indexterm>
<indexterm><primary>strangenesses</primary><secondary>NFS</secondary></indexterm>
NFS mimics a local file system across the network.  It does a pretty good job,
but it's not perfect.  Here are some things that you should consider:
</para>
<sect2>
<title>No devices</title>

<para>NFS handles disk files and directories, but not devices.  Well, in fact, it
handles devices too, but not the way you would expect.
</para>

<para><indexterm><primary>device</primary><secondary>node</secondary></indexterm>
<indexterm><primary>node</primary><secondary>device</secondary></indexterm>
In a UNIX file system, a device is more correctly known as a <emphasis>device
node</emphasis>: it's an inode that <emphasis>describes</emphasis> a device in terms of its major
and minor numbers (see page <xref linkend="CFBSD-devices"/>).  The device itself is implemented by
the device driver.  NFS exports the device nodes, but it doesn't interpret the
fact that these devices are on another system.  If you refer to the devices, one
of three things will happen:
</para>
<itemizedlist>
<listitem>

<para>If a driver for the specified major number exists on your local system, and the
devices are the same on both systems, you will access the local device.
Depending on which device it is, this could create some subtle problems which
could go undetected for quite a while.
</para>
</listitem>
<listitem>

<para>If a driver for the for the specified major number exists on your local system,
and the devices are different on the two systems, you will still access the
local device.  The results could be very confusing.
</para>
</listitem>
<listitem>

<para>If no driver for the specified major number exists on your local system, the
request will fail.  This can still cause considerable confusion.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Just one file system</title>

<para>NFS exports file systems, not directory hierarchies.  Consider the example on
page <xref linkend="CFBSD-NFS-mount-points"/>.  <emphasis>presto</emphasis> has mounted both <emphasis>freebie:/</emphasis>
and <emphasis>freebie:/usr</emphasis>.  If it were just to mount <emphasis>freebie:/</emphasis>, we would see
the directory <emphasis>/freebie/usr</emphasis>, but it would be empty.
</para>

<para>Things can get even stranger: you can mount a local file system on a directory
which is not empty.  Consider the following scenario:
</para>
<itemizedlist>
<listitem>

<para>You install FreeBSD on system <emphasis>freebie</emphasis>.  In single user mode, before
mounting the other file systems, you create a directory <emphasis>/usr/bin</emphasis> and
a file <emphasis>/usr/bin/vi</emphasis>.  Since the <emphasis>/usr</emphasis> file system isn't mounted,
this file goes onto the root file system.
</para>
</listitem>
<listitem>

<para>You go to multiuser mode and mount the other file systems, including the file
system for <emphasis>/usr</emphasis>.  You can no longer see the <emphasis>/usr/bin/vi</emphasis> you put
there in single user mode.  It hasn't gone away, it's just masked.
</para>
</listitem>
<listitem>

<para>On <emphasis>presto</emphasis>, you mount the file system <emphasis>freebie:/</emphasis> on <emphasis>/freebie</emphasis>.
If you list the contents of the directory <emphasis>/freebie/usr</emphasis>, you will see the
original file <emphasis>vi</emphasis>, and not the contents that the users on <emphasis>freebie</emphasis>
will see.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchbasics"><title>Basic network access</title>

<para>Finally we have set up the network connections, and everything is working.  What
can we do with the network?  In this part of the book, we'll take a look at some
of the more important services which make up the application layer:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>telnet</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>telnet</secondary></indexterm>
<indexterm><primary>rlogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rlogin</secondary></indexterm>
<indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
<indexterm><primary>rcp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rcp</secondary></indexterm>
<indexterm><primary>ssh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ssh</secondary></indexterm>
<indexterm><primary>rsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rsh</secondary></indexterm>
<indexterm><primary>r</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>r</secondary></indexterm>
In the rest of this chapter, we'll look at the old diehards:  <emphasis>telnet</emphasis> and
<emphasis>rlogin</emphasis>, which give you interactive shell access to other systems, and
<emphasis>ftp</emphasis> and <emphasis>rcp</emphasis>, which transfer files across the network.  We'll also
look at <emphasis>ssh</emphasis>, a secure <emphasis>rsh</emphasis> lookalike.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chemail"/>, we'll look at electronic mail.
</para>
</listitem>
<listitem>

<para><indexterm><primary>World</primary><secondary>Wide Web</secondary></indexterm>
In <xref linkend="CFBSD-chwww"/>, we'll look at the <emphasis>World Wide Web</emphasis>, how to access it, and how
to provide services.
</para>
</listitem>
<listitem>

<para>In <xref linkend="CFBSD-chfax"/>, we'll look at how to send and receive faxes via computer.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>When the Internet Protocols were first implemented, <emphasis>telnet</emphasis> and
<emphasis>ftp</emphasis> were some of the most important protocols, and considerable time was
expended in ``getting them right''.  This was too long for the people at
Berkeley, who produced their own ``quick and dirty'' tools: <emphasis>rlogin</emphasis> does
what <emphasis>telnet</emphasis> was supposed to do, and <emphasis>rcp</emphasis> does what <emphasis>ftp</emphasis>
was supposed to do.  In addition, there is a command <emphasis>rsh</emphasis> which executes
batch commands on a remote machine.  These so-called <emphasis>r</emphasis> commands were
supposed to be replaced by <emphasis>telnet</emphasis> and <emphasis>ftp</emphasis>, but as the old rhyme
goes:
<indexterm><primary>kludge</primary></indexterm>
<emphasis>K</emphasis> is the kludge that you say
You require to avoid some delay.
But that interim fix
forms a habit that sticks,
And you'll find that it's in there to stay.
Thus <emphasis>rlogin</emphasis> and <emphasis>rcp</emphasis> are still around, and they still get a lot
of use.
</para>
<sect1>
<title><emphasis>telnet</emphasis> and <emphasis>rlogin</emphasis> </title>

<para><indexterm><primary>rlogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rlogin</secondary></indexterm>
<indexterm><primary>telnet</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>telnet</secondary></indexterm>
<indexterm><primary>rsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rsh</secondary></indexterm>
<emphasis>telnet</emphasis> and <emphasis>rlogin</emphasis> both perform the same function: they allow you
to start an interactive shell on another machine.  They are relatively similar
in use, but there are some differences.  In addition, <emphasis>rsh</emphasis> is a variant
of <emphasis>rlogin</emphasis> that will allow you to start a non-interactive shell on
another machine.  There's no direct <emphasis>telnet</emphasis> relative which will do this.
</para>
<sect2>
<title><emphasis>telnet</emphasis> </title>

<para>Start <emphasis>telnet</emphasis> with the name of the system you want to connect to:
</para>
<programlisting>
$ <command>telnet freebie</command>
Trying 223.147.37.1...
Connected to freebie.example.org.
Escape character is '^]'.

   FreeBSD (freebie.example.org) (ttyp9)

login: <command>grog</command>
Password:
Last login: Thu Oct  9 16:19:54 from unix:0.0
Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994
        The Regents of the University of California.  All rights reserved.

FreeBSD 3.0-CURRENT (FREEBIE) #37: Thu Oct  9 04:36:32 CST 1997

You have mail.
It is always preferable to visit home with a friend.  Your parents will
not be pleased with this plan, because they want you all to themselves
and because in the presence of your friend, they will have to act like
mature human beings ...
                -- Playboy, January 1983
$ <command>tty</command>
/dev/ttyp9
$
</programlisting>

<para><indexterm><primary>tty</primary></indexterm>
<indexterm><primary>pseudo-tty</primary></indexterm>
<indexterm><primary>pty</primary></indexterm>
<indexterm><primary>pity</primary></indexterm>
<indexterm><primary>xterm</primary></indexterm>
Once you get this far, you are connected to the machine in almost identical
manner as if you were directly connected.  This is particularly true if you are
running X.  As the output of the <emphasis>tty</emphasis> command shows, your ``terminal'' is
a <emphasis>pseudo-tty</emphasis> or <emphasis>pty</emphasis> (pronounced ``pity'').  This is the same
interface that you will have with an <emphasis>xterm</emphasis>.
</para>

<para>It's worth looking in more detail at how the connection is established:
</para>
<itemizedlist>
<listitem>

<para>The first line (<emphasis>Trying...</emphasis>) appears as soon as <emphasis>telnet</emphasis> has
resolved the IP address.
</para>
</listitem>
<listitem>

<para>The next three lines appear as soon as it has a reply from the other end.  At
this point, there can be a marked delay before <emphasis>telnet</emphasis> continues.
<emphasis>telnet</emphasis> performs a reverse DNS lookup to find the name of your system.
If you get a delay here, it could indicate that your reverse lookup is not
working correctly.  After DNS times out, it will continue normally, but the
delay is a nuisance.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/ttys</primary></indexterm>
Logging in is almost exactly the same as logging in locally.  Normally you won't
be able to log in directly as <emphasis>root</emphasis>, unless you have set
<emphasis>/dev/pty<emphasis>x</emphasis></emphasis> as <emphasis>secure</emphasis> in your <emphasis>/etc/ttys</emphasis> (see page
<xref linkend="CFBSD-ptys"/> for further details).  It's not a good idea to set your <emphasis>pty</emphasis>s as
secure.  Use <emphasis>su</emphasis> instead if you want to become <emphasis>root</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>When you log in via <emphasis>telnet</emphasis>, there's a good chance that your <emphasis>TERM</emphasis>
environment variable will be set incorrectly.  See table
<xref linkend="CFBSD-environment-variable-table"/> on page <xref linkend="CFBSD-environment-variable-table-page"/> for
more details.  Remember that <emphasis>TERM</emphasis> describes the display at your end of
the display, not the other end.  If you're running an <emphasis>xterm</emphasis>, this
shouldn't be a problem: probably the name <emphasis>xterm</emphasis> will propagate to the
other end.  If you're using a character-oriented display
(<emphasis>/dev/ttyv<emphasis>x</emphasis></emphasis>), however, your <emphasis>TERM</emphasis> variable will probably be
set to <emphasis>cons25</emphasis>, which many systems don't know.  If you have problems
where systems refuse to start full-screen modes when you connect from a virtual
terminal, try setting the <emphasis>TERM</emphasis> variable to <emphasis>ansi</emphasis>.
</para>

<para>To exit <emphasis>telnet</emphasis>, you just log off.  If you run into problems, however, like
a hung network, you can also hit </keycap><keycap>Ctrl-<command>]</command> to enter <emphasis>telnet</emphasis> command
mode, and from there enter <emphasis>quit</emphasis>:
</para>
<programlisting>
$ <command>^]</command>
telnet&gt; <command>quit</command>
$
</programlisting>

<para>If you hit </keycap><keycap>Ctrl-<command>]</command> by accident, just hit <keycap>Enter</keycap>, and you will be
returned to the telnet session.
</para>
</sect2>
<sect2>
<title><emphasis>rlogin</emphasis> </title>

<para><anchor id="CFBSD-rlogin"/>
<indexterm><primary>rlogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rlogin</secondary></indexterm>
You can run <emphasis>rlogin</emphasis> in almost exactly the same way as <emphasis>telnet</emphasis>.  By
default, <emphasis>rlogin</emphasis> makes a few assumptions, though: for example, it assumes
that you want to log in with the same user ID.  What you see is:
</para>
<programlisting>
$ <command>rlogin freebie</command>
Password:
Last login: Fri Oct 10 14:58:43 from allegro
Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994
        The Regents of the University of California.  All rights reserved.

FreeBSD 3.0-CURRENT (FREEBIE) #37: Thu Oct  9 04:36:32 CST 1997

You have mail.
A witty saying proves nothing, but saying something pointless gets
people's attention.
</programlisting>

<para><anchor id="CFBSD-.rhosts"/>
<indexterm><primary>.rhosts</primary></indexterm>
This saves a little effort, since you don't need to type in your user ID.  You
can even eliminate the need to type in the password: create a file
\&amp;<emphasis>.rhosts</emphasis> in your home directory on the destination system, specifying
the names of the systems from which your user ID allows access without password:
</para>
<programlisting>
$ <command>cat &gt; .rhosts</command>
freebie
presto
bumble
wait
gw
</emphasis><command>^D</command>					<emphasis>press <keycap>CTRL-D</keycap>
$ <command>chmod 600 .rhosts</emphasis>			<emphasis>and set accessible by you alone</command>
$ <command>ls -l .rhosts<emphasis>
-rw-------  1 grog  bin  30 Oct 10 16:01 .rhosts
</emphasis></command></programlisting>

<para>It's important to set the permissions of <emphasis>.rhosts</emphasis> to <emphasis>-rw-------</emphasis>,
since otherwise <emphasis>rlogin</emphasis> won't look at it.
</para>

<para>Once you have done this, you can connect to the system with <emphasis>rlogin</emphasis> with
no further problems:
</para>
<programlisting>
$ <command>rlogin freebie</command>
Last login: Fri Oct 10 15:57:05 from daemon
Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994
        The Regents of the University of California.  All rights reserved.

FreeBSD 3.0-CURRENT (FREEBIE) #37: Thu Oct  9 04:36:32 CST 1997

You have mail.
My mother loved children -- she would have given anything if I had been
one.
                -- Groucho Marx
$
</programlisting>

<para><anchor id="CFBSD-hosts-equiv"/>
<indexterm><primary>freebie</primary></indexterm>
<indexterm><primary>.rhosts</primary></indexterm>
<indexterm><primary>/etc/hosts.equiv</primary></indexterm>
The file <emphasis>.rhosts</emphasis> works on a per-user basis.  You may be allowed access
to <emphasis>freebie</emphasis>, while user <emphasis>norm</emphasis> may not.  If all users on the system
are allowed access to the machines in <emphasis>.rhosts</emphasis>, you can rename it to
<emphasis>/etc/hosts.equiv</emphasis>, and all users will be able to access the system.
</para>

<para>There's more to <emphasis>.rhosts</emphasis> and <emphasis>/etc/hosts.equiv</emphasis> than shown
here&mdash;look at the man page <emphasis>hosts.equiv(4)</emphasis>.
</para>
<sect3>
<title>Stopping <emphasis>rlogin</emphasis> </title>

<para>As with <emphasis>telnet</emphasis>, you usually stop <emphasis>rlogin</emphasis> by exiting the shell.  If
the net hangs, however, you have an alternative.  In this case, enter the
sequence <emphasis>~.</emphasis> at the beginning of the line:
</para>
<programlisting>
$ <command>~.</command>
rlogin: closed connection.
$
</programlisting>

<para>When you enter this sequence, the <emphasis>~</emphasis> does not echo until you enter the
next character.  This is because the <emphasis>~</emphasis> character is a special escape
character.  If you really <emphasis>want</emphasis> to enter a <emphasis>~</emphasis> at the beginning of
the line, you must enter it twice, and it will only echo the second time.  Read
the man page <emphasis>rsh(1)</emphasis> for other functions of the <command>~</command> character.
</para>
</sect3>
</sect2>
<sect2>
<title><emphasis>rsh</emphasis> </title>

<para><indexterm><primary>rsh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rsh</secondary></indexterm>
<emphasis>rsh</emphasis> is closely related to <emphasis>rlogin</emphasis>, so much so that you could
mistake them.  <emphasis>rsh</emphasis> executes a single command on a remote system.  At one
time, you couldn't use <emphasis>rsh</emphasis> to run programs which use full-screen
capabilities, but this is no longer the case: <emphasis>rsh</emphasis> without a command now
performs the same function as <emphasis>rlogin</emphasis>.  For a more typical example, to show
the status of processes running on <emphasis>freebie</emphasis> you might enter:
</para>
<programlisting>
$ <command>rsh freebie ps waux</command>
USER     PID %CPU %MEM   VSZ  RSS  TT  STAT STARTED      TIME COMMAND
grog   25722  0.0  0.3   700  316  ??  R     4:13PM   0:00.17 ps -waux
grog   24902  0.0  0.0     0    0  v0  Z    -         0:00.00  (rsh)
grog   25594  0.0  0.0     0    0  v0  Z    -         0:00.00  (rsh)
root       0  0.0  0.0     0    0  ??  DLs   7:43PM   0:00.71  (swapper)
root       1  0.0  0.1   480   96  ??  Ss    7:43PM   0:00.42 /sbin/init --
root       2  0.1  0.0     0    0  ??  DL    7:43PM   8:42.55  (pagedaemon)
<emphasis>(etc)</emphasis>
</programlisting>

<para><indexterm><primary>.rhosts</primary></indexterm>
<indexterm><primary>/etc/hosts.equiv</primary></indexterm>
In order for this to work, you <emphasis>must</emphasis> have an entry in <emphasis>.rhosts</emphasis> or
<emphasis>/etc/hosts.equiv</emphasis>.  If you don't, you will get the following message:
</para>
<programlisting>
$ <command>rsh freebie ps waux</command>
Permission denied.
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Using <emphasis>telnet</emphasis> for other services</title>

<para><indexterm><primary>telnet</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>telnet</secondary></indexterm>
<indexterm><primary>/etc/services</primary></indexterm>
The way we have used <emphasis>telnet</emphasis> so far, it connects to the default port,
<emphasis>telnet</emphasis> (number 23, as you can see in the file <emphasis>/etc/services</emphasis>).
This isn't the only possibility, though: you can tell <emphasis>telnet</emphasis> which port
to connect to.  In <xref linkend="CFBSD-chemail"/>, we'll see how to communicate with
<emphasis>sendmail</emphasis> using <emphasis>telnet</emphasis> on port <emphasis>smtp</emphasis> page
<xref linkend="CFBSD-telnet-to-smtp"/>, and how to communicate with <emphasis>POP</emphasis> on port <emphasis>pop</emphasis>,
page <xref linkend="CFBSD-telnet-to-pop"/>.  You'll find many other such uses as well.
</para>
</sect2>
</sect1>
<sect1>
<title><emphasis>ftp</emphasis> and <emphasis>rcp</emphasis> </title>

<para><anchor id="CFBSD-ftp"/>
The other basic function involves copying files between systems.  In this area,
<emphasis>ftp</emphasis> has a number of advantages over <emphasis>rcp</emphasis>.
</para>
<sect2>
<title><emphasis>ftp</emphasis> </title>

<para><indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
<indexterm><primary>rcp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rcp</secondary></indexterm>
<indexterm><primary>NFS</primary></indexterm>
<emphasis>ftp</emphasis> is the Internet File Transfer Program, and is the standard way to
transfer large files long distances across the net.  It works for small files and
short distances too, but you may find thet <emphasis>rcp</emphasis> or <emphasis>NFS</emphasis> are better
<indexterm><primary>NFS</primary></indexterm>
alternatives in these areas.
</para>

<para>One serious drawback in duplicating files across the net is that you need to
have permission to access the remote system.  Traditionally, you need a user id
to access a system.  Of course, the file server could have a specific user ID
without a password, but that would throw the system open to attack from
crackers.
<indexterm><primary>FTP</primary><secondary>anonymous</secondary></indexterm>
<indexterm><primary>anonymous</primary><secondary>FTP</secondary></indexterm>
</para>
<note>

<para><indexterm><primary>cracker</primary></indexterm>
<indexterm><primary>hacker</primary></indexterm>
The term <emphasis>cracker</emphasis> is used to indicate people who try to crack computer
system security.  The tabloid press users the word <emphasis>hacker</emphasis>, much to the
annoyance of dyed-in-the-wool UNIX hackers.  See the Jargon file entries on
<emphasis>hacker</emphasis> and <emphasis>cracker</emphasis> for much more information.
<indexterm><primary>hacker</primary></indexterm>
</para>
</note>

<para><indexterm><primary>anonymous</primary><secondary>user name</secondary></indexterm>
<indexterm><primary>user</primary><secondary>name</secondary></indexterm>
<indexterm><primary>ftp</primary><secondary>user name</secondary></indexterm>
<indexterm><primary>user</primary><secondary>name</secondary></indexterm>
<emphasis>ftp</emphasis> solves this problem by recognizing the special user name <emphasis>ftp</emphasis>.
This user name used to be <emphasis>anonymous</emphasis>, but it turned out to be a problem
to spell.  <emphasis>ftp</emphasis> servers still accept the name <emphasis>anonymous</emphasis> as well.
The user <emphasis>ftp</emphasis> doesn't really exist, but <emphasis>ftp</emphasis> can be set up to allow
access to the system if the user name <emphasis>ftp</emphasis> is specified&mdash;see page
\&amp;<xref linkend="CFBSD-ftpserver"/> for more details.  By convention, to help the system
administrators with their bookkeeping, you should enter your real user ID in
place of the password when logging in as <emphasis>ftp</emphasis>.  A typical session might
look like:
</para>
<programlisting>
$ <command>ftp ftp.tu-darmstadt.de<emphasis>
Connected to rs3.hrz.th-darmstadt.de.
220 rs3.hrz.th-darmstadt.de FTP server (Version 4.1) ready.
Name (grog): </emphasis></emphasis></command><command>ftp<emphasis>
331 Guest login ok, send ident as password.
Password: 				<emphasis>username does not echo<emphasis>
230 Guest login ok, access restrictions apply.
ftp&gt; </emphasis></emphasis></command><command>cd /pub/gnu<emphasis>
250 CWD command successful.
ftp&gt; </emphasis></emphasis></command><command>bin<emphasis>				to ensure binary transfer<emphasis>
200 Type set to I.
ftp&gt; </emphasis></command><command>get gdb-4.12.tar.gz<emphasis>	start the transfer<emphasis>
200 PORT command successful.
150 Opening data connection for gdb-4.12.tar.gz (3682855 bytes).
3682855 bytes received in 1.1e+04 seconds (0.34 Kbytes/s)
ftp&gt;
</emphasis></emphasis></command></programlisting>

<para>There are a couple of things to note about this transfer:
</para>
<itemizedlist>
<listitem>

<para>The server may have multiple names, and the one you use may not be its canonical
name (the name specified in the server's DNS A record&mdash;see page <xref linkend="CFBSD-DNS-RR"/>).
By convention, the first part of the name of an FTP server is <emphasis>ftp</emphasis>.  Here
we opened the server \s10<emphasis>ftp.tu-darmstadt.de</emphasis>\s0, but the canonical name
of the server is \s10<emphasis>rs3.hrz.th-darmstadt.de</emphasis>\s0.
</para>
</listitem>
<listitem>

<para><indexterm><primary>ftp</primary><secondary>binary transfer</secondary></indexterm>
<indexterm><primary>ftp</primary><secondary>ASCII transfer</secondary></indexterm>
Some versions of <emphasis>ftp</emphasis> transmit in ASCII mode by default: they change every
incidence of the ASCII line feed character (the C language constant
\&amp;\s10<emphasis>\en</emphasis>\s0) to the sequence \s10<emphasis>\er\en</emphasis>\s0 (they prepend an
ASCII carriage return character).  This permits you to print the results on
normal printers, but makes a terrible mess of binary files.  Transmitting in
binary form always works.  The message <emphasis>Type set to I.</emphasis> is <emphasis>ftp</emphasis>'s way
of telling you that it has set binary transmission mode.
</para>
</listitem>
</itemizedlist>

<para>This transmission is fairly typical (though the transfer rates are
appalling).  In real life, you might find some of the other of <emphasis>ftp</emphasis>'s 60-odd
commands of use.  We'll look at the most useful commands in the following
sections.
</para>
</sect2>
<sect2>
<title>mget</title>

<para>Frequently you need to copy more than a single file.  For example, if you
currently have <emphasis>gcc-2.5.0</emphasis> and want to get <emphasis>gcc-2.5.8</emphasis>, you will
discover the following files on the file server:
</para>
<programlisting>
ftp&gt; </emphasis><command>ls<emphasis>
200 PORT command successful.
150 Opening ASCII mode data connection for /bin/ls.
-rw-rw-r-- 1 117 1001   43367 Nov  1 02:37 gcc-2.5.0-2.5.2.diff.gz
-rw-rw-r-- 1 117 1001    1010 Nov  1 02:37 gcc-2.5.1-2.5.2.diff.gz
-rw-rw-r-- 1 117 1001   78731 Nov 11 13:53 gcc-2.5.2-2.5.3.diff.gz
-rw-rw-r-- 1 117 1001   13931 Nov 17 09:27 gcc-2.5.3-2.5.4.diff.gz
-rw-rw-r-- 1 117 1001   76271 Nov 27 16:48 gcc-2.5.4-2.5.5.diff.gz
-rw-rw-r-- 1 117 1001    8047 Dec  3 09:22 gcc-2.5.5-2.5.6.diff.gz
-rw-rw-r-- 1 117 1001 5994481 Nov 27 16:49 gcc-2.5.5.tar.gz
-rw-rw-r-- 1 117 1001   10753 Dec 12 19:15 gcc-2.5.6-2.5.7.diff.gz
-rw-rw-r-- 1 117 1001   14726 Jan 24 09:02 gcc-2.5.7-2.5.8.diff.gz
-rw-rw-r-- 1 117 1001 5955006 Dec 22 14:16 gcc-2.5.7.tar.gz
-rw-rw-r-- 1 117 1001 5997896 Jan 24 09:03 gcc-2.5.8.tar.gz
226 Transfer complete.
ftp&gt;
</command></programlisting>

<para><anchor id="CFBSD-get-patches"/>
In other words, you have the choice of transferring 6 megabytes of software in
<emphasis>gcc-2.5.8.tar.gz</emphasis> or 7 incremental patch files with a total of less than
250 kilobytes.  On the other hand, copying the diffs requires typing all these
long, complicated file names, so you might decide it's easier just to duplicate
the whole 6 MB.
</para>

<para>There is an easier way: <emphasis>mget</emphasis> (multiple get) duplicates files matching a
wild card.  You could perform the complete transfer with
</para>
<programlisting>
ftp&gt; <command>mget gcc-2*diff.gz<emphasis>
mget </emphasis></emphasis></command>gcc-2.5.0-2.5.2.diff.gz?<command>y<emphasis>
200 PORT command successful.
150 Opening BINARY mode data connection for
   gcc-2.5.0-2.5.2.diff.gz (43667 bytes).
226 Transfer complete.
43667 bytes received in 19 seconds (2.298 Kbytes/s)
mget </emphasis></command>gcc-2.5.1-2.5.2.diff.gz?<command>n	<emphasis>we don't need this one<emphasis>
mget </emphasis></emphasis></command>gcc-2.5.2-2.5.3.diff.gz?<command>y<emphasis>
200 PORT command successful.
150 Opening BINARY mode data connection for
   gcc-2.5.2-2.5.3.diff.gz (78731 bytes).
226 Transfer complete.
78731 bytes received in 33 seconds (2.835 Kbytes/s)
<emphasis>\&amp;... etc
</emphasis></command></programlisting>

<para></para>
</sect2>
<sect2>
<title>prompt</title>

<para>Using <emphasis>mget</emphasis> saves a lot of network bandwidth and copies the files faster,
but it has one disadvantage: <emphasis>ftp</emphasis> prompts you for each file name, so you
have to wait around to answer the prompts.  If you don't, <emphasis>ftp</emphasis> disconnects
after 15 minutes of inactivity.  It would be simpler to perform all the
<emphasis>get</emphasis>s without any intervention.  This is where the <emphasis>prompt</emphasis> command
comes in.
</para>

<para>The <emphasis>prompt</emphasis> command specifies whether to issue certain prompts or
not&mdash;the <emphasis>mget</emphasis> command is one example.  This command is a toggle&mdash;in
other words, if prompting is on, <emphasis>prompt</emphasis> turns it off, and if prompting
is off, <emphasis>prompt</emphasis> turns it on.  If prompting is off, the <emphasis>mget</emphasis>
command in the previous example would have gone through with no interruptions.
</para>

<para>In the previous example, you don't really want to transfer the file
<emphasis>gcc-2.5.1-2.5.2.diff.gz</emphasis>, since you don't need it to perform the patches:
you can upgrade from 2.5.0 to 2.5.2 directly with the file
<emphasis>gcc-2.5.0-2.5.2.diff.gz</emphasis>.  On the other hand, not copying the file would
mean sitting around for the duration of the transfer and answering the prompt
for each file, and the file is only 1 kilobyte long.  In this case, it is
reasonable to copy it as well&mdash;in other cases, you may need to consider other
alternatives.
</para>
</sect2>
<sect2>
<title>reget</title>

<para>Sooner or later, you will lose a connection in the middle of a transfer.
According to Murphy's law, this will usually happen with a file like
<emphasis>gcc-2.5.8.tar.gz</emphasis> in the previous example, and it will be shortly before the
transfer is finished.  If you notice this in time, it may be sufficient to
reestablish connection: TCP is a remarkably resilient protocol, and you may find
that it just continues as if nothing had happened.  If this isn't successful,
you may be able to save the day with <emphasis>reget</emphasis>, which picks up the transfer
where it left off.  The semantics are the same as for <emphasis>get</emphasis>.
</para>

<para>Unfortunately, not all versions of <emphasis>ftp</emphasis> have the <emphasis>reget</emphasis> command, and
on many systems that do have the command, it doesn't work correctly.  If you
<emphasis>do</emphasis> decide to use it, you should first make a copy of the partially copied
file, in case something goes wrong.
</para>
</sect2>
<sect2>
<title>user</title>

<para><indexterm><primary>.netrc</primary></indexterm>
Normally, <emphasis>ftp</emphasis> attempts to log in using the user name of the user who
started the <emphasis>ftp</emphasis> program.  To make establishing connections easier,
<emphasis>ftp</emphasis> checks for a file called <emphasis>.netrc</emphasis> when perfoming a login sequence.
<emphasis>\&amp;.netrc</emphasis> contains information on how to log in to specific systems.  A
typical <emphasis>.netrc</emphasis> might look like:
</para>
<programlisting>
machine freebie		login grog	password foo
machine presto		login grog	password bar
machine bumble		login grog	password baz
machine wait		login grog	password zot
default			login ftp	password grog@example.org
</programlisting>

<para>Lines starting with the keyword <emphasis>machine</emphasis> specify login name (<emphasis>grog</emphasis> in
this example) and password for each system.  The last line is the important one:
if the system is not mentioned by name, <emphasis>ftp</emphasis> attempts a login with user
name <emphasis>ftp</emphasis> and password <emphasis>grog@example.org</emphasis>.  Though this may be of
use with systems you don't know, it causes a problem: you <emphasis>must</emphasis> have an
entry for each system on which you have accounts.  Otherwise you will be unable
to log in to them as yourself: you will be user <emphasis>ftp</emphasis> instead.
</para>

<para><emphasis>ftp</emphasis> is not overly clear about login failures.  For example,
</para>
<programlisting>
$ <command>ftp ftp.tu-darmstadt.de<emphasis>
Connected to ftp.tu-darmstadt.de.
220 rs3.hrz.th-darmstadt.de FTP server (Version 4.1) ready.
331 Password required for grog.
530 Login incorrect.
Login failed.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt;
</emphasis></command></programlisting>

<para><indexterm><primary>ftp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ftp</secondary></indexterm>
This error message is not very obvious: although you're not logged in, you still
get the same prompt, and <emphasis>ftp</emphasis> produces enough verbiage that it's easy to
oversee that the login attempt failed.  In order to complete the login, you need
to use the <emphasis>user</emphasis> command:
</para>
<programlisting>
ftp&gt; <command>user ftp<emphasis>
331 Guest login ok, send ident as password.
Password: 			<emphasis>username does not echo<emphasis>
230 Guest login ok, access restrictions apply.
</emphasis></emphasis></emphasis></command></programlisting>

<para><indexterm><primary>.netrc</primary></indexterm>
Be aware that the <emphasis>.netrc</emphasis> file is a security risk: it contains all your
passwords in readable form.  If you use a <emphasis>\&amp;.netrc</emphasis> file, make sure it is
secured so that only you can read or write it.
</para>
</sect2>
<sect2>
<title>idle</title>

<para><indexterm><primary>ftp</primary><secondary>closing connection</secondary></indexterm>
By default <emphasis>ftp</emphasis> closes a connection if nothing happens for 15 minutes (900
seconds).  The \s10<emphasis>idle</emphasis>\s0 command can modify this time, up to a limit
of 2 hours, which can occasionally be of use on a local net.  <emphasis>Don't</emphasis> use
this option with an Internet file server!&mdash;it ties up valuable and scarce
resources that other people might be able to use.
</para>
</sect2>
</sect1>
<sect1>
<title><emphasis>rcp</emphasis> </title>

<para><indexterm><primary>rcp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rcp</secondary></indexterm>
<indexterm><primary>.rhosts</primary></indexterm>
<indexterm><primary>/etc/hosts.equiv</primary></indexterm>
<emphasis>rcp</emphasis> is the Berkeley alternative to <emphasis>ftp</emphasis>.  Like <emphasis>rlogin</emphasis> and
<emphasis>rcp</emphasis>, it provides simpler services, but they're easier to use.  If you have
set up an <emphasis>.rhosts</emphasis> or <emphasis>/etc/hosts.equiv</emphasis> file as described on page
<xref linkend="CFBSD-rlogin"/>, you can use <emphasis>rcp</emphasis> almost like <emphasis>cp</emphasis>.  For example, to copy
the file <emphasis>beowulf</emphasis> from your home directory on <emphasis>presto</emphasis> to your home
directory on the current machine (<emphasis>bumble</emphasis>), you could do:
</para>
<programlisting>
$ <command>rsh presto ls -l beowulf</command>
-rw-------  1 grog  wheel  1526 Oct  8 13:56 beowulf
$ <command>rcp presto:beowulf .</command>
$ <command>ls -l beowulf</command>
-rw-------  1 grog  wheel  1526 Oct 11 11:55 beowulf
$
</programlisting>

<para></para>
</sect1>
<sect1>
<title><emphasis>telnet</emphasis> and <emphasis>ftp</emphasis> servers</title>

<para><anchor id="CFBSD-ftpserver"/>
In the first half of this chapter, we saw how to use clients to access other
systems.  This is only half the picture, of course.  At the other end of the
link, we need <emphasis>servers</emphasis> to provide this service.
</para>

<para>Most of the time, the servers are relatively trivial.  For each client, there is
a server (a dæmon) whose name is usually derived from the client name by adding
a <emphasis>d</emphasis> to it:
<indexterm><primary>telnetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>telnetd</secondary></indexterm>
<indexterm><primary>rshd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rshd</secondary></indexterm>
<indexterm><primary>rlogind</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rlogind</secondary></indexterm>
<indexterm><primary>ftpd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>ftpd</secondary></indexterm>
<indexterm><primary>rshd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>rshd</secondary></indexterm>
<table frame='all'><title>Basic services dæmons</title>
box,center,tab(#) ;
l | l .
Client#Dæmon
=

<tgroup cols='2' align='left' colsep='1' rowsep='1'><tbody>
<row><entry> telnet</entry><entry>telnetd
</entry></row>
<row><entry> rsh</entry><entry>rshd
</entry></row>
<row><entry> rlogin</entry><entry>rlogind
</entry></row>
<row><entry> ftp</entry><entry>ftpd
</entry></row>
<row><entry> rcp</entry><entry>rshd
</entry></row>
<row><entry>
</entry></row>
</tbody></tgroup></table>
<indexterm><primary>rcp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>rcp</secondary></indexterm>
<emphasis>rcp</emphasis> does not have its own dæmon.  Instead, it uses <emphasis>rshd</emphasis> to start
another instance of <emphasis>rcp</emphasis> at the other end.
</para>

<para><indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
In most cases, these dæmons will be started by <emphasis>inetd</emphasis>.  If you are running
an <emphasis>ftp</emphasis> server, however, it makes more sense to have the dæmon running
all the time, since this saves overhead.
</para>

<para>To run <emphasis>ftpd</emphasis> directly,
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
Add the following line in <emphasis>/etc/rc.local</emphasis>:
</para>
<programlisting>
echo -n 'starting local daemons:'
# put your local stuff here
<command>echo " ftpd" &amp;&amp; ftpd -D</command>
</programlisting>

<para>The option <emphasis>-D</emphasis> tells <emphasis>ftpd</emphasis> to run as a dæmon.  You will possibly
want other options as well; see the discussion below.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
Comment out the <emphasis>ftp</emphasis> line in <emphasis>/etc/inetd.conf</emphasis> by adding a hash
mark (<emphasis>#</emphasis>) in front of it:
</para>
<programlisting>
<command>#</command> ftp	stream	tcp	nowait	root	/usr/libexec/ftpd	ftpd -l
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Either reboot, or cause <emphasis>inetd</emphasis> to re-read its configuration file:
</para>
<programlisting>
# <command>ps waux | grep inetd</emphasis>			<emphasis>find the PID of inetd (2nd column)</command>
root    7818  3.1  0.7   252  644  p6  S+   10:56AM   0:00.03 grep inetd
root     118  0.0  0.1   200   92  ??  Is   Thu10AM   0:01.78 inetd
# <command>kill -1 118</emphasis>					<emphasis>send a SIGHUP</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para>As shown above, you can run <emphasis>ftpd</emphasis> either directly or from <emphasis>inetd</emphasis>.
For security reasons, you will probably want to add options such as logging and
anonymous <emphasis>ftp</emphasis>.  We'll look at how to do that in the next two sections.
</para>
<sect2>
<title>anonymous <emphasis>ftp</emphasis> </title>

<para><indexterm><primary>anonymous</primary><secondary>FTP</secondary></indexterm>
<indexterm><primary>FTP</primary><secondary>anonymous</secondary></indexterm>
<anchor id="CFBSD-anonymous-ftp"/>
Anonymous <emphasis>ftp</emphasis> gives you a number of security options:
</para>
<itemizedlist>
<listitem>

<para>It restricts access to the home directory of user <emphasis>ftp</emphasis>.  From the point of
view of the user, <emphasis>ftp</emphasis>s home directory is the root directory, and he
cannot access any files outside this directory.  Note that this means that you
can't use symbolic links outside the <emphasis>ftp</emphasis> directory, either.
</para>
</listitem>
<listitem>

<para>It restricts access to the machine generally: the user doesn't learn any
passwords, so he has no other access to the machine.
</para>
</listitem>
</itemizedlist>

<para>In addition, you can start <emphasis>ftpd</emphasis> in such a manner that it will allow only
anonymous <emphasis>ftp</emphasis> connections.
</para>

<para>There are a number of preparations for anonymous <emphasis>ftp</emphasis>:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/var/spool/ftp</primary></indexterm>
Decide on a directory for storing anonymous ftp files.  The location will depend
on the amount of data you propose to store there.  A good choice is
<emphasis>/var/spool/ftp</emphasis>.
</para>
</listitem>
<listitem>

<para>Create a user <emphasis>ftp</emphasis>, with the anonymous <emphasis>ftp</emphasis> directory as the home
directory and the shell <emphasis>/dev/null</emphasis>.  Using <emphasis>/dev/null</emphasis> as the shell
makes it impossible to log in as user <emphasis>ftp</emphasis>, but does not interfere with the
use of anonymous <emphasis>ftp</emphasis>.  <emphasis>ftp</emphasis> can be a member of group <emphasis>bin</emphasis>, or
you can create a new group <emphasis>ftp</emphasis> by adding the group to <emphasis>/etc/group</emphasis>.
See page <xref linkend="CFBSD-adding-user"/> for more details of adding users, and the man page
<emphasis>group(5)</emphasis> for adding groups.
</para>
</listitem>
<listitem>

<para>Create subdirectories <emphasis>~ftp/bin</emphasis> and <emphasis>~/ftp/pub</emphasis>.  If you want to allow
incoming data, create a directory <emphasis>~ftp/incoming</emphasis> as well.  Set the
ownership of the directories like this:
</para>
<programlisting>
dr-xr-xr-x   2 ftp   ftp       512 Feb 28 12:57 bin
drwxr-xr-x   2 ftp   ftp       512 Oct  7 05:55 incoming
drwxrwxr-x  20 ftp   ftp       512 Jun  3 14:03 pub
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Copy the following files to <emphasis>~ftp/bin</emphasis>: <emphasis>/usr/bin/compress</emphasis>,
<emphasis>/usr/bin/gzip</emphasis>, <emphasis>/usr/bin/gunzip</emphasis>, <emphasis>/bin/ls</emphasis>, <emphasis>/usr/bin/tar</emphasis>
and <emphasis>/usr/bin/uncompress</emphasis>.  Since the view of anonymous <emphasis>ftp</emphasis> users is
restricted to the home directory, all programs which are to be executed must
also be in this directory.
</para>

<para>You can hard link the files if you want (and if you can, in other words if the
directory is on the same file system), but symbolic links will fail, since they
contain path names which do not point to the correct place when running in the
anonymous <emphasis>ftp</emphasis> environment.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Restricting access and logging</title>

<para><anchor id="CFBSD-syslog.conf"/>
A number of <emphasis>ftpd</emphasis> options make it easier to control and monitor
<emphasis>ftp</emphasis> access:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>syslogd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>syslogd</secondary></indexterm>
<indexterm><primary>/etc/syslog.conf</primary></indexterm>
The <emphasis>-l</emphasis> option logs each session, whether successful or not, to
<emphasis>syslogd</emphasis> with the facility <emphasis>LOG_FTP</emphasis>.  In order to enable this
logging, your <emphasis>/etc/syslog.conf</emphasis> should contain a line like
</para>
<programlisting>
ftp.*						/var/log/ftpd
</programlisting>

<para><indexterm><primary>/var/log/ftpd</primary></indexterm>
In addition, the file <emphasis>/var/log/ftpd</emphasis> must exist.  If it doesn't, create
it with:
</para>
<programlisting>
# <command>touch /var/log/ftpd</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>The <emphasis>-S</emphasis> option logs all anonymous transfers to the file
<emphasis>/var/log/ftpd</emphasis>.
</para>
</listitem>
<listitem>

<para>You can restrict access to <emphasis>only</emphasis> anonymous <emphasis>ftp</emphasis> with the
<emphasis>-A</emphasis> option.
</para>
</listitem>
</itemizedlist>

<para>There are a number of other options; see the man page <emphasis>ftpd(8)</emphasis> for
further details.
</para>

<para><anchor id="CFBSD-/etc/shells"/>
<indexterm><primary>/etc/shells</primary></indexterm>
In addition to these options, when a real user establishes a connection,
<emphasis>ftpd</emphasis> checks the user's shell.  If it is not listed in <emphasis>/etc/shells</emphasis>,
<emphasis>ftpd</emphasis> will deny the connection.  This can be useful if you don't want
specific users to access the system: give them a different shell, such as
<emphasis>/usr/bin/sh</emphasis> instead of <emphasis>/bin/sh</emphasis>, and ensure that
<emphasis>/usr/bin/sh</emphasis> is not in <emphasis>/etc/shells</emphasis>.
</para>
<sect3>
<title>Log file format</title>

<para>The format of the log files is a little unusual.  You'll see things like:
</para>
<programlisting>
Oct 12 16:32:03 freebie ftpd[8691]: connection from adam.adonai.net
Oct 12 16:32:04 freebie ftpd[8691]: ANONYMOUS FTP LOGIN FROM adam.adonai.net, leec@ado
nainet
Oct 12 18:33:32 freebie ftpd[9007]: connection from gateway.smith.net.au
Oct 12 18:33:37 freebie ftpd[9007]: ANONYMOUS FTP LOGIN FROM gateway.smith.net.au, mik
e
Oct 12 21:36:28 freebie ftpd[9369]: connection from grisu.bik-gmbh.de
Oct 12 21:36:29 freebie ftpd[9369]: ANONYMOUS FTP LOGIN FROM grisu.bik-gmbh.de, harves
t@
Oct 12 21:36:37 1997!harvest@!grisu.bik-gmbh.de!/pub/cfbsd/README!9228!1
Oct 12 21:37:05 freebie ftpd[9371]: connection from grisu.bik-gmbh.de
Oct 12 21:37:06 freebie ftpd[9371]: ANONYMOUS FTP LOGIN FROM grisu.bik-gmbh.de, harves
t@
Oct 13 09:38:19 freebie ftpd[13514]: connection from 151.197.101.46
Oct 13 09:38:21 freebie ftpd[13514]: ANONYMOUS FTP LOGIN FROM 151.197.101.46, bmc@hove
rcraft.willscreek.com
Oct 13 09:38:58 1997!bmc@hovercraft.willscreek.com!151.197.101.46!/pub/cfbsd/dear-revi
ewer!8890!1
Oct 13 09:41:42 1997!bmc@hovercraft.willscreek.com!151.197.101.46!/pub/cfbsd/txt/26-ne
tdebug.txt.gz!12188!1
Oct 13 09:42:05 1997!bmc@hovercraft.willscreek.com!151.197.101.46!/pub/cfbsd/txt/C-pac
kages.txt.gz!37951!1
Oct 13 09:59:07 freebie ftpd[14117]: connection from 151.197.101.46
Oct 13 09:59:08 freebie ftpd[14117]: ANONYMOUS FTP LOGIN FROM 151.197.101.46, bmc@hove
rcraft.willscreek.com
Oct 13 09:59:24 1997!bmc@hovercraft.willscreek.com!151.197.101.46!/pub/cfbsd/txt/D-bib
lio.txt.gz!1815!1
</programlisting>

<para>This log excerpt shows three kinds of message:
</para>
<itemizedlist>
<listitem>

<para>The messages starting with the text <emphasis>connection from</emphasis> occur when an
<emphasis>ftp</emphasis> connection is made.  They don't mean that any permission to access
has been given.  These messages are logged by the <emphasis>-l</emphasis> option.
</para>
</listitem>
<listitem>

<para>The <emphasis>ANONYMOUS FTP LOGIN</emphasis> messages show that somebody has logged in
anonymously.  The name follows, not always in the required username format.
The standard <emphasis>ftpd</emphasis> does not enforce this requirement; you may find
something which does in the Ports Collection.  These messages are logged by the
<emphasis>-S</emphasis> option.
</para>
</listitem>
<listitem>

<para>The lines full of <emphasis>!</emphasis> marks show files being transferred.  The <emphasis>!</emphasis>
marks delimit the fields, which are:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>The year, as an extension of the timestamp.
</para>
</listitem>
<listitem>

<para>The user ID.
</para>
</listitem>
<listitem>

<para>The IP address of the system to which the data is transferred.
</para>
</listitem>
<listitem>

<para>The name of the file transferred.
</para>
</listitem>
<listitem>

<para>The number of bytes transferred.
</para>
</listitem>
</orderedlist>
</itemizedlist>

<para></para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Secure interactive connections</title>

<para><indexterm><primary>secure</primary><secondary>network connections</secondary></indexterm>
<indexterm><primary>network</primary><secondary>connections</secondary></indexterm>
The traditional interactive connections between two machines on the Internet
have a serious disadvantage: it's relatively easy to wiretap them on the way
between source and destination.  From time to time cases become known where an
employee of an ISP does this and extracts confidential data, including
passwords.
</para>

<para><indexterm><primary>secure</primary><secondary>shell</secondary></indexterm>
<indexterm><primary>shell</primary><secondary>secure</secondary></indexterm>
<indexterm><primary>ssh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ssh</secondary></indexterm>
One answer to this problem is the <emphasis>secure shell</emphasis>, <emphasis>ssh</emphasis>.  You can use
<emphasis>ssh</emphasis> as a drop-in replacement for <emphasis>rlogin</emphasis>.  Unlike <emphasis>rlogin</emphasis>
and <emphasis>telnet</emphasis>, however, all data transferred is encrypted.
Due to US export restrictions on cryptology, there is no package for <emphasis>ssh</emphasis>
on the CD-ROM.  Instead, you'll have to build it from the port.
</para>
<note>

<para>In order to build the port, you must set the variable <emphasis>USA_RESIDENT</emphasis> to
<emphasis>YES</emphasis> or <emphasis>NO</emphasis>.  This is a remnant of the times when it was
prohibited to export freely available cryptology from the USA.  Currently, this
export is under review, and may change.  There's no problem for USA residents to
get the software from outside the country: you're allowed to import it into the
USA, only <emphasis>exporting</emphasis> it is prohibited.  If you understand this, please
explain it to me.
</para>
</note>

<para>For example, you might enter:
</para>
<programlisting>
# <command>USA_RESIDENT=NO make install</command>
</programlisting>

<para></para>
<sect2>
<title>What <emphasis>ssh</emphasis> does</title>

<para><indexterm><primary>ssh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>ssh</secondary></indexterm>
<indexterm><primary>scp</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>scp</secondary></indexterm>
<indexterm><primary>slogin</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>slogin</secondary></indexterm>
<indexterm><primary>sshd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>sshd</secondary></indexterm>
The <emphasis>ssh</emphasis> package works a lot like the traditional BSD <emphasis>r</emphasis>
commands (<emphasis>rsh</emphasis>, <emphasis>rlogin</emphasis> and <emphasis>rcp</emphasis>): there's a set of client
programs (<emphasis>ssh</emphasis>, <emphasis>scp</emphasis> and <emphasis>slogin</emphasis>) that you run on the local
machine to connect to a remote machine, and there's a dæmon on the remote system
(<emphasis>sshd</emphasis>) to which the clients connect to establish the remote session.
From your viewpoint, the main difference between the BSD <emphasis>r</emphasis> commands and
<emphasis>ssh</emphasis> suite is that the network traffic between the <emphasis>ssh</emphasis> clients
and <emphasis>sshd</emphasis> is encrypted.
</para>

<para>Encrypted remote login sessions protect against the following dangers:
</para>
<itemizedlist>
<itemizedlist>
<listitem>

<para><indexterm><primary>spoofing</primary></indexterm>
IP spoofing and IP source routing, two techniques used by attackers to make IP
packets appear to come from host that is implicitly trusted by a local machine.
</para>
</listitem>
<listitem>

<para>DNS spoofing, where an attacker forges name server records.
</para>
</listitem>
<listitem>

<para>Interception of cleartext passwords and other data by intermediate hosts.
</para>
</listitem>
<listitem>

<para>Manipulation of data by people in control of intermediate hosts.
</para>
</listitem>
<listitem>

<para>Attacks based on listening to X authentication data and spoofed connection to
the X11 server.
</para>
</listitem>
</itemizedlist>

<para><emphasis>ssh</emphasis> uses encryption to protect against IP-spoofing and public-key
authentication to protect against DNS and routing spoofing.
</para>

<para>To illustrate, consider these two real-world scenarios:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>sniffing</primary><secondary>network traffic</secondary></indexterm>
<indexterm><primary>tcpdump</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>tcpdump</secondary></indexterm>
Someone is ``sniffing'' network traffic (for example, with <emphasis>tcpdump</emphasis>),
either at your site, at the remote site to which you're connected, or at an ISP
in between.  Suppose you connect to the remote system with <emphasis>rlogin</emphasis> or
<emphasis>telnet</emphasis>.  When the remote system prompts you for your password, you type
your password, and it is transmitted <emphasis>in the clear</emphasis>.  The attacker now has
your login name and password on the remote system and can log in as you.  Worse,
you might <emphasis>su</emphasis> to <emphasis>root</emphasis> on the remote system once you've logged in.
If that happens, the attacker now has the keys to the store.
</para>

<para>Compare this to what happens when you log into the remote system using
<emphasis>ssh</emphasis>.  All traffic between your machine in the remote host is encrypted.
Even if you <emphasis>su</emphasis> to <emphasis>root</emphasis> and type in <emphasis>root</emphasis>'s password, the
data on the wire is encrypted and is of no use to the attacker who's sniffing
the IP packets.
</para>
</listitem>
<listitem>

<para>In another scenario, someone is sniffing network traffic, but only because he
wants to be able to tell when you initiate an <emphasis>rlogin</emphasis> session to the
remote host.  This time, however, he starts sniffing <emphasis>after</emphasis> you've
already logged in.  No problem: he simply hijacks your TCP connection,
effectively stealing it out from under you.  What you see is a connection that
mysteriously drops; however, the attacker is now using <emphasis>your</emphasis> login
session, and he's probably putting in a back door to allow him to get in later
from anywhere he wants.
</para>
</listitem>
</itemizedlist>

<para>Both kinds of attacks can, and do, happen.  You can find prebuilt cracker kits
on the Internet and on various BBSs to make those sorts of attacks easier.
Using <emphasis>ssh</emphasis> to encrypt your login sessions goes a long way toward
thwarting that kind of attack.
</para>

<para></para>
</sect2>
<sect2>
<title>Running <emphasis>ssh</emphasis> </title>

<para>To use ssh, the remote system must be capable of accepting incoming <emphasis>ssh</emphasis>
connections, which usually means that it should be running <emphasis>sshd</emphasis>.  You can
start it directly:
</para>
<programlisting>
# <command>sshd</command>
</programlisting>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
You'll probably find it easier to add the following line to your
<emphasis>/etc/rc.local</emphasis>:
</para>
<programlisting>
echo -n 'starting local daemons:'

# put your local stuff here
<command>echo " sshd"; /usr/local/sbin/sshd</command>
</programlisting>

<para><indexterm><primary>/var/log/messages</primary></indexterm>
When you run <emphasis>sshd</emphasis> for the first time, it will log the following messages
to <emphasis>/var/log/messages</emphasis>, shown here when running <emphasis>sshd</emphasis> on
<emphasis>freebie</emphasis>:
</para>
<programlisting>
Nov 28 09:57:31 freebie sshd[28796]: log: Server listening on port 22.
Nov 28 09:57:31 freebie sshd[28796]: log: Generating 768 bit RSA key.
Nov 28 09:57:34 freebie sshd[28796]: log: RSA key generation complete.
</programlisting>

<para>After that, it's ready to accept connections.  On the requesting machine, enter:
</para>
<programlisting>
$ <command>ssh freebie</command>
Host key not found from the list of known hosts.
Are you sure you want to continue connecting (yes/no)? <command>yes</command>
Host 'freebie' added to the list of known hosts.
grog's password:				<emphasis>doesn't echo</emphasis>
Last login: Fri Nov 28 10:07:50 1997 from hub.freebsd.org
Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994
        The Regents of the University of California.   All rights reserved.

FreeBSD 3.0-CURRENT (FREEBIE) #1: Sun Nov 23 18:53:11 CST 1997

You have mail.
The universe does not have laws -- it has habits, and habits can be
broken.
=== grog@freebie (/dev/ttyp8) ~ 1 -&gt;
</programlisting>

<para>You only get the first three lines the first time you log in from a specific
system.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchemail"><title>Electronic Mail</title>

<para>Before the advent of the World-Wide Web, the two most important uses of the
Internet from the popular point of view were electronic mail and Usenet news.
Both of these systems have roughly the same purpose: they are means of personal
communications.  Electronic mail is more personal, whereas News is a
free-for-all.  Nowadays, Email is going from strength to strength, while the
increase in the size of the Internet has reduced the viability of News, which is
increasingly showing signs of age.
In this chapter, we'll look at how to set up Email.  Due to lack of interest,
this book does not cover Internet News.
</para>
<sect1>
<title>Electronic mail</title>

<para><anchor id="CFBSD-mail-setup"/>
<indexterm><primary>electronic</primary><secondary>mail</secondary></indexterm>
<indexterm><primary>Email</primary></indexterm>
<indexterm><primary>E-mail</primary></indexterm>
<indexterm><primary>Mail</primary></indexterm>
One of the most important applications on the Internet is <emphasis>electronic mail</emphasis>,
usually called <emphasis>Email</emphasis>, <emphasis>E-mail</emphasis> or simply <emphasis>Mail</emphasis>, the ability to
send messages to other people on the Net.  In this chapter, we'll look at some
ways to set up and run mail.
</para>

<para>There are two kinds of mail software:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Mail</primary><secondary>User Agent</secondary></indexterm>
<indexterm><primary>MUA</primary></indexterm>
<indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
The part of the mail system that most users know is the <emphasis>Mail User Agent</emphasis>,
or <emphasis>MUA</emphasis>, the program that interacts with the user and handles incoming and
outgoing mail.  We'll look at my favourite MUA, <emphasis>mutt</emphasis>, in the next section,
and we'll briefly touch on what others are available.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Mail</primary><secondary>Transfer Agent</secondary></indexterm>
<indexterm><primary>MTA</primary></indexterm>
<indexterm><primary>sendmail</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>sendmail</secondary></indexterm>
The <emphasis>Mail Transfer Agent</emphasis>, or <emphasis>MTA</emphasis>.  As the name suggests, it is
responsible for moving mail from one system to another.  We'll look at the most
popular MTA, <emphasis>sendmail</emphasis>, on page <xref linkend="CFBSD-sendmail"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect1>
<sect1>
<title>Mail user agents</title>

<para><indexterm><primary>Mail</primary><secondary>user agent</secondary></indexterm>
<anchor id="CFBSD-MUA"/>
<indexterm><primary>folder</primary></indexterm>
A <emphasis>mail user agent</emphasis> is a program which interfaces between the user and the
mail system.  It allows the user to read, forward and reply to incoming mail,
and to send his own mail.  Beyond that, it usually has facilities for creating
and maintaining <emphasis>folders</emphasis>, where you can keep received mail messages.  For
most UNIX MUAs, a folder is the same thing as a file.
</para>
<sect2>
<title><emphasis>mail</emphasis> </title>

<para><indexterm><primary>mail</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mail</secondary></indexterm>
The oldest MUA you're likely to meet is <emphasis>mail</emphasis>.  It's a very primitive,
character-oriented program, but nevertheless it has its advantages.  You can use
it in scripts to send mail.  For example, if you have a job running and
producing copious output, where you want to save the output, you might normally
write something like
</para>
<programlisting>
$ <command>longjob 2&gt;&amp;1 &gt; logfile</command>
</programlisting>

<para>This command runs <emphasis>longjob</emphasis>.  The sequence <emphasis>2&gt;&amp;1</emphasis> redirects the error
output to the standard output, and the <emphasis>&gt;</emphasis> writes them to the file
<emphasis>logfile</emphasis>.  While this is a good way to solve the problem, you might find
that you have a lot of such jobs, or that you tend to forget the log files and
leave them cluttering up your disks.  An alternative would be to send yourself
mail.  You could do this with the following command:
</para>
<programlisting>
$ <command>longjob 2&gt;&amp;1 | mail <emphasis>me</emphasis></command>
</programlisting>

<para><indexterm><primary>cron</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>cron</secondary></indexterm>
In this case, <emphasis>me</emphasis> represents your user ID.  When the job finishes, you
will get a mail message with the output of the commands.  <emphasis>cron</emphasis> (see page
<xref linkend="CFBSD-cron"/>) uses this method to send you its output.
</para>
</sect2>
<sect2>
<title>Other MUAs</title>

<para>The trouble with <emphasis>mail</emphasis> is that it can't deal very well with long mail
messages, and it's difficult to keep an overview of large quantities of mail,
like most people seem to accumulate.  Many more sophisticated mailers have been
written since <emphasis>mail</emphasis> Some of the more popular ones, which are also available
in the Ports Collection, are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>elm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>elm</secondary></indexterm>
<emphasis>elm</emphasis> is one of the oldest full-screen mailers.  Its age is showing: it
has a few annoying problems which make it less desirable now that there's a
choice.
</para>
</listitem>
<listitem>

<para><indexterm><primary>pine</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>pine</secondary></indexterm>
<indexterm><primary>elm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>elm</secondary></indexterm>
<emphasis>pine</emphasis> is not <emphasis>elm</emphasis>&mdash;that's what the acronym means.  It's quite like
<emphasis>elm</emphasis>, nonetheless.
</para>
</listitem>
<listitem>

<para><indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
<emphasis>mutt</emphasis> is also similar to <emphasis>elm</emphasis> and <emphasis>pine</emphasis>.  It's my current
favourite, and we'll look at it in the next section.
</para>
</listitem>
<listitem>

<para><indexterm><primary>exmh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>exmh</secondary></indexterm>
<indexterm><primary>mh</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mh</secondary></indexterm>
<emphasis>exmh</emphasis> is built on Rand's <emphasis>mh</emphasis> MUA.  Some people like it, but it has
a mailbox format incompatible with most of the others.  It also seems relatively
easy to configure it to mutilate messages.
</para>
</listitem>
<listitem>

<para><indexterm><primary>xfmail</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>xfmail</secondary></indexterm>
<emphasis>xfmail</emphasis> is an X-based mailer, which you might prefer to the text-based
mailers we're talking about here.  It also has an incompatible mailbox format,
so if you try it out, be sure first to back up any mail you might want to keep.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title><emphasis>mutt</emphasis> </title>

<para><anchor id="CFBSD-mutt"/>
<indexterm><primary>mutt</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mutt</secondary></indexterm>
In this section, we'll take a detailed look at <emphasis>mutt</emphasis>.  Start it just by
typing in its name.  Like most UNIX mailers, <emphasis>mutt</emphasis> runs on a
character-oriented terminal, including of course an <emphasis>xterm</emphasis>.  We'll take a
look into my mailbox.  When I start it up, I get a full-screen display like the
one shown in figure <xref linkend="CFBSD-mutt-main"/>.
</para>

<para><figure><title><emphasis>mutt</emphasis> main menu</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>

<para>This display shows a number of things:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>thread</primary><secondary>mutt</secondary></indexterm>
<indexterm><primary>mutt</primary><secondary>thread</secondary></indexterm>
The line at the top specifies the name of the folder (<emphasis>/var/mail/grog</emphasis>),
the number of messages in the folder, and its size.  It also states the manner
in which the messages are sorted: by <emphasis>threads</emphasis>.  We'll look at threads
further down.
</para>
</listitem>
<listitem>

<para>The bottom line gives a brief summary of the most common commands.  Each command
is a single character.  You don't need to press <keycap>Enter</keycap> to execute the
command.
</para>
</listitem>
<listitem>

<para>The rest of the screen contains information about the messages in the folder.
The first column gives the message a number, then come some flags:
</para>
</listitem>
</itemizedlist>
<orderedlist>
<listitem>

<para>In the first column, we can see <emphasis>r</emphasis> next to some messages.  This indicates
that I have already replied to these messages.
</para>
</listitem>
<listitem>

<para>In the same column, <emphasis>N</emphasis> signalizes a <emphasis>new</emphasis> message (an unread
message which has arrived after the last invocation of <emphasis>mutt</emphasis> finished).
</para>
</listitem>
<listitem>

<para><keycap>O</keycap> signalizes an <emphasis>old</emphasis> message (an unread message which arrived
before the last invocation of <emphasis>mutt</emphasis> finished).
</para>
</listitem>
<listitem>

<para>The symbol <emphasis>D</emphasis> means that the message has been marked for deletion.  It
won't be deleted until you leave <emphasis>mutt</emphasis> or update the display with the
<emphasis>$</emphasis> command, and until then you can undelete it with the <emphasis>u</emphasis> command
</para>
</listitem>
<listitem>

<para>The symbol <emphasis>+</emphasis> means that the message is addressed to me, and only to me.
</para>
</listitem>
<listitem>

<para>The symbol <emphasis>T</emphasis> means that the message is addressed to me and also to other
people.
</para>
</listitem>
<listitem>

<para>The symbol <emphasis>C</emphasis> means that the message is addressed to other people, and
that I have been copied.
</para>
</listitem>
<listitem>

<para>The symbol <emphasis>F</emphasis> means that the message is from me.
</para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>

<para>The next column is the date (in international notation in this example, but it
can be changed).
</para>
</listitem>
<listitem>

<para>The next column is the name of the sender, or, if I'm the sender, the name of
the recipient.
</para>
</listitem>
<listitem>

<para>The next column gives the size of the message.  The format is variable: you can
specify the size in kilobytes (as in the example), or the number of lines.
</para>
</listitem>
<listitem>

<para><indexterm><primary>threading</primary><secondary>mutt</secondary></indexterm>
<indexterm><primary>mutt</primary><secondary>threading</secondary></indexterm>
The last column is usually the subject.  We'll see alternatives when we discuss
<emphasis>threading</emphasis> below.
</para>
</listitem>
</itemizedlist>

<para></para>

<para><figure><title><emphasis>mutt</emphasis> message display</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
You'll notice that message 9 has been represented in reverse video.  This
indicates that this message has been <emphasis>selected</emphasis>: certain commands, such as
<emphasis>r</emphasis> (reply) or <keycap>Enter</keycap> (read) will apply to this message.  For
example, Figure <xref linkend="CFBSD-mutt-read"/> shows the display you get by pressing
<keycap>Enter</keycap> at this point.  Here, the display has changed to show the contents
of the message.  The top line now tells you the name and mail ID of the message,
the subject, and the percentage of the message that is displayed: 15%.  As
before, the bottom line tells you the most common commands you might need in
this context: they're not all the same as in the menu display.
</para>

<para><indexterm><primary>mail</primary><secondary>header</secondary></indexterm>
The message itself is divided into three parts: the first 5 lines are called the
<emphasis>headers</emphasis>.  They include information on how the message got here, when it
was sent, who sent it, who it was sent to, and much more.  The display here
shows only a selection of the headers.
</para>

<para>After the header comes an empty line to signalize the end of the headers, and
then the message itself.  The first part, which <emphasis>mutt</emphasis> displays in <keycap>bold
face</keycap>, is <emphasis>quoted</emphasis> text: by putting a <emphasis>&gt;</emphasis> character before each
line, the sender has signalized that the text was written by the person to whom
it is addressed: this message is a reply, and the text is what he is replying
to.
</para>

<para>To read the rest of the message, press <keycap>SPACE</keycap>.  A 25 line display is
obviously inadequate for this kind of message.  On an X display, choose as high
a window as you can.
</para>
</sect2>
<sect2>
<title>Replying to a message</title>

<para><indexterm><primary>replying</primary><secondary>to a mail message</secondary></indexterm>
<indexterm><primary>mail</primary><secondary>message</secondary></indexterm>
<indexterm><primary>.muttrc</primary></indexterm>
To reply to a message, simply press <emphasis>r</emphasis>.  <emphasis>mutt</emphasis> will start your
favourite editor for you.  How does it know which one?  If you set your
<emphasis>EDITOR</emphasis> environment variable to the name of your editor, it will start
that editor, otherwise it will start <emphasis>vi</emphasis>.  See page
<xref linkend="CFBSD-environment-variables"/> for more details.  You can also specify it in the file
\&amp;<emphasis>.muttrc</emphasis>.
</para>

<para><figure><title>Replying to a message</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
In this case, we start Emacs.  Figure <xref linkend="CFBSD-mail-reply"/> shows the resultant screen
before entering any text.  See page <xref linkend="CFBSD-Emacs"/> for more information on the Emacs
editor.  You'll notice that <emphasis>mutt</emphasis> automatically ``quotes'' the text.  For
example, the original text started with:
</para>
<programlisting>
rdkeys@csemail.cropsci.ncsu.edu writes:
&gt; Not to pick at nits.... but, I am still confused as to what EXACTLY
&gt; is the ``stable'' FreeBSD.  Please enlighten me, and tell me the
&gt; reasoning behind it.
\&amp;<emphasis>(lines omitted)</emphasis>
OK, I'll take a shot at this.  To really understand what 2.2-STABLE is,
you have to have some idea of how the FreeBSD team uses 'branches'.  In
particular, we are talking about branches as implemented by the CVS
</programlisting>

<para>This message itself starts with quoted text, which indicates that it was written
by somebody else (<emphasis>rdkeys@csemail.cropsci.ncsu.edu</emphasis>).  The text from the
submitter starts with <emphasis>OK, I'll have a shot at this</emphasis>.  When you reply,
however, all this text is quoted, so what you see on the screen is:
</para>
<programlisting>
&gt; rdkeys@csemail.cropsci.ncsu.edu writes:
&gt; &gt; Not to pick at nits.... but, I am still confused as to what EXACTLY
&gt; &gt; is the ``stable'' FreeBSD.  Please enlighten me, and tell me the
&gt; &gt; reasoning behind it.
\&amp;<emphasis>(lines omitted)</emphasis>
&gt; OK, I'll take a shot at this.  To really understand what 2.2-STABLE is,
&gt; you have to have some idea of how the FreeBSD team uses 'branches'.  In
&gt; particular, we are talking about branches as implemented by the CVS
</programlisting>

<para>This is the standard way to reply to mail messages.
</para>
</sect2>
<sect2>
<title>How to send and reply to mail</title>

<para>In the impersonal world of the Internet, your mail messages are the most
tangible thing about you.  Send out a well thought out, clear and legible
message, and you will leave a good impression.  Send out a badly formulated,
badly formatted and badly spelt message, and you will leave a bad impression.
</para>

<para>So what's good and what's bad?  That's a matter of opinion (and
self-expression), of course.  We've seen some of the following things already:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>Netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>Netscape</secondary></indexterm>
Unless there's a very good reason, avoid proprietary formats.  Most mailers can
handle them nowadays, but some can't.  For example, some people set up Microsoft
mailers to use HTML as the standard format.  Most other mailers have difficulty
with HTML (<emphasis>mutt</emphasis> can display it, however, with the help of
<emphasis>Netscape</emphasis>).  Other Microsoft mailers send out mail in Microsoft Word
format, which is illegible to just about anybody without a Microsoft system.
</para>
</listitem>
<listitem>

<para>When sending ``conventional'' mail, ensure that you adhere to the standards.
Again, Microsoft mailers are often bad in this respect: without telling you,
they either transform paragraphs into one long line, or they break lines into
two, one long and one short.  The resulting appearance of the message looks like
(taking this paragraph as an example):
</para>
<programlisting>
When sending ``conventional'' mail, ensure that you adhere to the standards. Agai
n, Microsoft mailers are often bad in this respect: without telling you, they eit
her transform paragraphs into one long line, or they break lines into two, one lo
ng and one short.  The resulting appearance of the message looks like (taking thi
s paragraph as an example):
</programlisting>

<para><figure><title>One line per paragraph</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<programlisting>
When sending ``conventional'' mail, ensure that you adhere to the
standards.
Again, Microsoft mailers are often bad in this respect: without telling
you,
they either transform paragraphs into one long line, or they break
lines into
two, one long and one short.  The resulting appearance of the message
looks like
(taking this paragraph as an example):
</programlisting>

<para><figure><title>Alternate long and short lines</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
The insidious thing about these conversions is that you may not be aware of
them.  If you get messages from other people which appear to be garbled, your
mailer may be reformatting them on arrival, in which case it is possibly
reformatting them before transmission.
</para>
</listitem>
<listitem>

<para>When replying, ensure that you use a quote convention as shown above.
Place your reply text directly below the part of the text to which you are
replying.
</para>
</listitem>
<listitem>

<para>Messages tend to grow as more and more replies get added.  If large parts of the
original text are irrelevant, remove them from the reply.
</para>
</listitem>
<listitem>

<para>Leave an empty line between the original text and your reply, and leave a space
after the <emphasis>&gt;</emphasis> quote character.  Both make the message more legible.  For
example, compare these two fragments:
</para>
<programlisting>
&gt; rdkeys@csemail.cropsci.ncsu.edu writes:
&gt;&gt;Not to pick at nits.... but, I am still confused as to what EXACTLY
&gt;&gt;is the ``stable'' FreeBSD.  Please enlighten me, and tell me the
&gt;&gt;reasoning behind it.
&gt;OK, I'll take a shot at this.  To really understand what 2.2-STABLE is,
&gt;you have to have some idea of how the FreeBSD team uses 'branches'.  In
&gt;particular, we are talking about branches as implemented by the CVS
</programlisting>

<para><figure><title>Less legible reply</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
<programlisting>
&gt; rdkeys@csemail.cropsci.ncsu.edu writes:
&gt;&gt; Not to pick at nits.... but, I am still confused as to what EXACTLY
&gt;&gt; is the ``stable'' FreeBSD.  Please enlighten me, and tell me the
&gt;&gt; reasoning behind it.

&gt; OK, I'll take a shot at this.  To really understand what 2.2-STABLE is,
&gt; you have to have some idea of how the FreeBSD team uses 'branches'.  In
&gt; particular, we are talking about branches as implemented by the CVS
</programlisting>

<para><figure><title>More legible reply</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
</para>
</listitem>
<listitem>

<para>What about salutations?  You'll see a lot of messages out there which don't
start with ``Dear Fred'', and either aren't even signed or just have the name of
the author.  This looks rather rude at first, but it has become pretty much a
standard on the net.  There's a chance that this will change in the course of
time, but at the moment it's the way things are, and you shouldn't assume any
implicit rudeness on the part of people who write in this manner.
</para>
</listitem>
<listitem>

<para><indexterm><primary>~/.signature</primary></indexterm>
At the other end of the scale, some people add a standard signature block to
each message.  You can do this automatically by storing the text in a file
called <emphasis>~/.signature</emphasis>.  If you do this, consider that it appears in
<emphasis>every</emphasis> message you write, and that it can get on people's nerves if it's
too long or too scurrile.
</para>
</listitem>
<listitem>

<para>Make sure that your user ID states who you are.  It doesn't make a very good
impression to see mail from <emphasis>foobar (The greatest guru on Earth)</emphasis>,
especially if he happens to make an incorrect statement.  There are better ways
to express your individuality.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title><emphasis>mutt</emphasis> configuration</title>

<para><indexterm><primary>mutt</primary><secondary>configuration</secondary></indexterm>
Like most mailers, there are a lot of things that you can change about
<emphasis>mutt</emphasis>'s behaviour.  They are described in a file <emphasis>~/.muttrc</emphasis> (in
other words, the file <emphasis>.muttrc</emphasis> in your home directory).  You'll find the
\&amp;<emphasis>.muttrc</emphasis> file that created these examples in
<emphasis><xref linkend="CFBSD-skelc"/>/mutt/.muttrc</emphasis>.  Read the <emphasis>mutt</emphasis> documentation (installed in
HTML in <emphasis>file:/usr/local/share/doc/mutt/manual.html</emphasis>) for details on how
to customize the configuration.
</para>
</sect2>
<sect2>
<title>Mail aliases</title>

<para><indexterm><primary>mail</primary><secondary>alias</secondary></indexterm>
<anchor id="CFBSD-mutt-aliases"/>
<indexterm><primary>~/.muttrc</primary></indexterm>
<indexterm><primary>.mail_aliases</primary></indexterm>
You'll find that some people have strange mail IDs: they are unusual, confusing,
or just plain difficult to type.  Most mailers give you the option of setting up
<emphasis>aliases</emphasis>, short names for people you often contact.  In <emphasis>mutt</emphasis>, you can
put the aliases in the <emphasis>~/.muttrc</emphasis> file, or you can put them in a separate
file and tell <emphasis>mutt</emphasis> when to find them in the <emphasis>~/.muttrc</emphasis> file.
You'll find a sample file which uses the latter method in
<emphasis><xref linkend="CFBSD-skelc"/>/mutt/.mail_aliases</emphasis>.  Figure <xref linkend="CFBSD-aliases-entries"/> shows a typical
entry:
</para>
<programlisting>
alias questions questions@FreeBSD.org (FreeBSD Questions)
alias stable FreeBSD Stable Users &lt;freebsd-stable@freebsd.org&gt;
</programlisting>

<para><figure><title>Mail aliases</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
The format is straightforward:
</para>
<itemizedlist>
<listitem>

<para>First comes the keyword <emphasis>alias</emphasis>.  Aliases can be placed in
<emphasis>~/.muttrc</emphasis>, so the word <emphasis>alias</emphasis> is used to distinguish them from
other commands.
</para>
</listitem>
<listitem>

<para>Next is the alias name (<emphasis>questions</emphasis> and <emphasis>stable</emphasis> in this example).
</para>
</listitem>
<listitem>

<para>Next comes the mail ID in one of two forms: either the name followed by the mail
ID in angle brackets (<emphasis>&lt;&gt;</emphasis>), or the mail ID followed by the name in
parentheses (<emphasis>()</emphasis>).
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Mail headers</title>

<para><indexterm><primary>mail</primary><secondary>header</secondary></indexterm>
</para>

<para><figure><title>Mail message with all headers</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
In the message display above we saw only a selection of the mail headers that
a message might contain.  Sometimes it's interesting to look at them in more
detail, especially if you're having mail problems.  To look at the complete
headers, press the <emphasis>h</emphasis> key.  The previous message (now saved in a
different folder) is shown in figure <xref linkend="CFBSD-mailheaders"/>.  These headers show:
</para>
<itemizedlist>
<listitem>

<para>The first line shows the name of the sender and the date it arrived at this
machine.  The date is in local time.
</para>
</listitem>
<listitem>

<para>The next line (<emphasis>Received:</emphasis>) shows the most recent step of the message's
journey to its destination.  It shows that it was receive from
<emphasis>smyrno.sol.net</emphasis> by <emphasis>freebie.lemis.com</emphasis>, and that
<emphasis>freebie.lemis.com</emphasis> was running version <emphasis>8.8.5</emphasis> of <emphasis>sendmail</emphasis>,
and that the configuration files were made at version <emphasis>8.6.12</emphasis>.  It also
shows the time the message arrived at <emphasis>freebie</emphasis>, 15:13:03 on 26 August 1997.
The time zone is 9\(12 hours ahead of UTC.  The message ID is <emphasis>PAA09815</emphasis>.
</para>

<para>This line is continued over two screen lines.  <emphasis>mutt</emphasis> shows this by
starting the continuation lines with the <emphasis>+</emphasis> character.
</para>
</listitem>
<listitem>

<para>The next line shows that the message arrived at <emphasis>smyrno.sol.net</emphasis> from
<emphasis>hub.freebsd.org</emphasis> at 00:42:26 local time on 26 August 1997, and that the
local time was 5 hours behind UTC.  <emphasis>smyrno.sol.net</emphasis> was running
<emphasis>sendmail</emphasis> version <emphasis>8.8.5</emphasis>, and its configuration files were also
version <emphasis>8.6.12</emphasis>.  The message ID is <emphasis>AAA09389</emphasis>.
</para>
</listitem>
<listitem>

<para>The next header is split into three lines, a modification due to more recent
version of the configuration files.  It shows that the message was received
locally by <emphasis>hub.FreeBSD.org</emphasis> at 22:06:35 on 25 August 1997.
<emphasis>hub.FreeBSD.org</emphasis> is running version <emphasis>8.8.7</emphasis> of <emphasis>sendmail</emphasis>, and
its configuration files are also at version <emphasis>8.8.7</emphasis>, which may explain the
slight difference in format.  The local time is 7 hours behind UTC.  The message
ID is <emphasis>WAA08079</emphasis>.
</para>
</listitem>
<listitem>

<para>The next header shows that the message was received again by
<emphasis>hub.freebsd.org</emphasis>, this time at 22:06:35 (ten seconds earlier), with the
message ID WAA08051.  This is the header associated with distributing the
message to <emphasis>questions@FreeBSD.org</emphasis>.
</para>
</listitem>
<listitem>

<para>The next header shows the message being received by <emphasis>hub.FreeBSD.org</emphasis> for
the first of three times, this time at 22:06:19.  It came from
<emphasis>obie.softweyr.ml.org</emphasis>.  This time the message ID is <emphasis>WAA08046</emphasis>.
</para>
</listitem>
<listitem>

<para>Finally (or initially), the message was received from a mail user agent on the
local host by <emphasis>obie.softweyr.ml.org</emphasis>, which is running <emphasis>sendmail</emphasis>
version <emphasis>8.7.5</emphasis> with configuration files of release <emphasis>8.6.12</emphasis>.  The
message was sent at 23:16:41 local time, which is 6 hours before UTC.  On
careful comparison, you'll notice that this is a little more than ten minutes
after it was supposed to have arrived at <emphasis>hub.FreeBSD.org</emphasis>.  It's reasonable
to assume that this means that the timekeeping on one of these two machines is
incorrect.  Since this is the original message, this is also the time allocated
to the message.  The message ID is <emphasis>XAA22495</emphasis>.
</para>
</listitem>
<listitem>

<para>The next header is the date.  We saw this in the previous example.
</para>
</listitem>
<listitem>

<para>We've just seen six different message IDs.  So why the header
<emphasis>Message-Id:</emphasis>?  That's exactly the reason: the other six IDs are local to
the system they pass through.  The line beginning with <emphasis>Message-Id:</emphasis> gives
a definitive message ID which can be used for references.
</para>
</listitem>
<listitem>

<para>The next four headers are the same as we have seen before.  They can appear in
any order, and may be interspersed with other headers, like the <emphasis>Date:</emphasis>
header we saw before.
</para>
</listitem>
<listitem>

<para>The <emphasis>In-Reply-To:</emphasis> header shows the ID of the message to which this is a
reply.  This is used for threading.  You'll notice that the <emphasis>Emacs</emphasis> screen
of the reply in figure <xref linkend="CFBSD-mail-reply"/> shows an <emphasis>In-Reply-To:</emphasis> header
referring to this message.
</para>
</listitem>
<listitem>

<para><indexterm><primary>Peters</primary><secondary>Wes</secondary></indexterm>
The <emphasis>References:</emphasis> header shows a list of messages to which this message
refers.  The <emphasis>Sender:</emphasis> header is the address of the <emphasis>real sender</emphasis>.
Although this message is <emphasis>From:</emphasis> Wes Peters, it was resent from the
<emphasis>FreeBSD-questions</emphasis> mailing list.  This header documents the fact.
</para>
</listitem>
<listitem>

<para>Headers starting with <emphasis>X-</emphasis> are <emphasis>official custom headers</emphasis>.
<emphasis>sendmail</emphasis> doesn't process them.  <emphasis>X-Loop</emphasis> is another indication
that the message went through <emphasis>FreeBSD-questions</emphasis>.  The <emphasis>X-Status</emphasis>
header isn't documented.
</para>
</listitem>
<listitem>

<para>The <emphasis>Precedence:</emphasis> header is used internally by <emphasis>sendmail</emphasis> to
determine the order in which messages should be sent.  <emphasis>bulk</emphasis> is a low
priority.
</para>
</listitem>
<listitem>

<para>The final headers are added by <emphasis>mutt</emphasis> when it updates the mail folder, for
example when it exits.  Other MUAs add similar headers.
</para>

<para>The <emphasis>Status:</emphasis> flag is used by the MUA to set flags in the display.  The
letters each have their own meaning: <emphasis>R</emphasis> means that the message has been
read, and <emphasis>O</emphasis> means that it is old (in other words, it was already in the
mail folder when the MUA last exited).
</para>
</listitem>
<listitem>

<para>The <emphasis>Content-Length:</emphasis> header specifies the <emphasis>approximate</emphasis> length of
the message (without the headers) in bytes.  It is used by some MUAs to speed
things up.
</para>
</listitem>
<listitem>

<para>The <emphasis>Lines:</emphasis> header states the length of the message in lines.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Who gets the mail?</title>

<para><anchor id="CFBSD-email-MX-record"/>
<indexterm><primary>masquerading</primary><secondary>sendmail</secondary></indexterm>
<indexterm><primary>sendmail</primary><secondary>masquerading</secondary></indexterm>
According to RFC 822, a mail ID is something like <emphasis>grog@lemis.com</emphasis>.  This
looks very much like a user ID, the <emphasis>@</emphasis> sign, and the name of a machine.
This similarity is intended, but it's still only a similarity.  Consider the
system manager of <emphasis>example.org</emphasis>.  At different times he might send mail from
<emphasis>freebie.example.org</emphasis>, <emphasis>bumble.example.org</emphasis>, and <emphasis>wait.example.org</emphasis>.
If the mail ID were associated with the machine, he would have three different
mail IDs: <emphasis>fred@freebie.example.org</emphasis>, <emphasis>fred@bumble.example.org</emphasis> and
<emphasis>fred@wait.example.org</emphasis>.  It would make things a whole lot simpler (and
easier to type) if his mail ID were simply <emphasis>fred@example.org</emphasis>.
<emphasis>sendmail</emphasis> calls this name change <emphasis>masquerading</emphasis>.
</para>

<para><indexterm><primary>mail</primary><secondary>exchanger</secondary></indexterm>
One way to do this would be to associate the name <emphasis>example.org</emphasis> as a
<emphasis>CNAME</emphasis> with one of the machines&mdash;say <emphasis>wait.example.org</emphasis>.  This
would work, but it would mean that mail would always have to come from and go to
<emphasis>wait.example.org</emphasis>.  In addition, this is purely a mail function.  DNS
solves this problem with a special class of record, the <emphasis>MX</emphasis> record
(<emphasis>mail exchanger</emphasis>).  We saw how to add them on page <xref linkend="CFBSD-DNS-MX-record"/>.  MX
records are not directly associated with any particular machine, though they
point to the names of machines which handle mail.
</para>
</sect2>
</sect1>
<sect1>
<title>sendmail</title>

<para><anchor id="CFBSD-sendmail"/>
<anchor id="CFBSD-MTA"/>
<indexterm><primary>sendmail</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>sendmail</secondary></indexterm>
<indexterm><primary>MTA</primary></indexterm>
<indexterm><primary>Mail</primary><secondary>Transfer Agent</secondary></indexterm>
Mail has been around for a long time now, at least 20 years.  In that time, many
mail systems have come and gone.  One seems to have been around for ever: the
<emphasis>sendmail</emphasis> MTA.  <emphasis>sendmail</emphasis> has an unparalleled reputation.  On the
one hand, it can do just about anything, but on the other hand, its
configuration file is one of the most arcane ever to be seen.  Still, nothing
has appeared to even come close to it, and it is still actively being developed.
</para>

<para>The definitive book on <emphasis>sendmail</emphasis> was written by Bryan Costales and
others&mdash;see <xref linkend="CFBSD-biblio"/> for more details.  It is over 1000 pages long.
Obviously this book can't compete with it.
</para>

<para>The good news about <emphasis>sendmail</emphasis> is: it works.  It is possible to install
<emphasis>sendmail</emphasis> and run it with no configuration whatsoever.  Nevertheless,
there are a couple of things that you might like to do with it.
</para>

<para><indexterm><primary>/etc/sendmail.cf</primary></indexterm>
There are two ways to change the <emphasis>sendmail</emphasis> configuration: you can change
the template files supplied as part of <emphasis>sendmail</emphasis>, and then reinstall
<filename></filename>/etc/sendmail.cf ,
or you can edit
<filename></filename>/etc/sendmail.cf
directly.  There's not much difference in complexity, and it's easier to edit
<filename></filename>/etc/sendmail.cf
directly, so that's the method I'll show here.  Let's look at some of the more
likely things you will want to change:
</para>
<itemizedlist>
<listitem>

<para>By default, <emphasis>sendmail</emphasis> accepts mail sent to the local system only, and in
the headers it sends out, it shows the name of the local system.  If we want to
masquerade as the domain name, as we discussed above, we have to modify
<filename></filename>/etc/sendmail.cf .
Find the line beginning with <emphasis>DM</emphasis> and add the masquerade name:
</para>
<programlisting>
# who I masquerade as (null for no masquerading) (see also $=M)
DM<command>example.org</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>masquerading</primary><secondary>sendmail</secondary></indexterm>
<indexterm><primary>sendmail</primary><secondary>masquerading</secondary></indexterm>
You may also want to receive mail for other domains.  This is also sometimes
called <emphasis>masquerading</emphasis>, but there's a difference: you accept mail for these
domains, but when you send mail, it's given the name specified in the <emphasis>DM</emphasis>
line above.
</para>

<para>To accept mail for other domains, create a file
<filename></filename>/etc/sendmail.cw
(by default it doesn't exist), and enter the domain names, one per line:
</para>
<programlisting>
freebsd.example.org
example.com
</programlisting>

<para>This file would cause <emphasis>sendmail</emphasis> to accept mail addressed to names like
<emphasis>fred@example.com</emphasis> and <emphasis>beastie@freebsd.example.org</emphasis>.
</para>
</listitem>
<listitem>

<para>Finally, you may find it convenient to let some other system handle all your
mail delivery for you: you just send anything you can't deliver locally to this
other host, which <emphasis>sendmail</emphasis> calls a <emphasis>smart host</emphasis>.  This is
particularly convenient if you send your mail with <emphasis>UUCP</emphasis>.
</para>

<para>To tell <emphasis>sendmail</emphasis> to use a smart host (in our case,
<emphasis>mail.example.net</emphasis>), find the following line in <emphasis>sendmail.cf</emphasis>:
</para>
<programlisting>
# "Smart" relay host (may be null)
DS
</programlisting>

<para>Change it to:
</para>
<programlisting>
# "Smart" relay host (may be null)
DS<command>mail.example.net</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para><anchor id="CFBSD-restart-sendmail"/>
After changing the <emphasis>sendmail</emphasis> configuration, restart <emphasis>sendmail</emphasis> by
sending it a <emphasis>SIGHUP</emphasis> signal.
</para>
<programlisting>
# <command>ps waux | grep sendmail</command>
root    9137  2.3  0.7   252  636  p6  S+    4:13PM   0:00.02 grep sendmail
root     136  0.0  0.3   552  284  ??  Ss   Thu10AM   0:11.99 sendmail: <command>accepting connections</command> on p
root    9135  0.0  0.5   552  504  ??  S     4:13PM   0:00.01 sendmail: startup with 194.93.177.11
# <command>kill -1 136</emphasis>				<emphasis>choose the one which is <emphasis>accepting</emphasis> connections<emphasis>
# </emphasis></command><command>ps waux | grep sendmail</command>
root    9144  2.3  0.9   600  892  ??  S     4:13PM   0:00.02 sendmail: server relay.ucb.crimea.ua
root    9135  0.1  0.8   600  764  ??  S     4:13PM   0:00.04 sendmail: server relay.ucb.crimea.ua
root    9142  0.0  0.9   552  888  ??  Ss    4:13PM   0:00.01 sendmail: accepting connections on p
</programlisting>

<para>In this example, the other <emphasis>sendmail</emphasis> processes are handling individual
incoming mail messages.  As you can see, unlike some other programs,
<emphasis>sendmail</emphasis> doesn't just read the configuration files: it really does
restart.
</para>
<sect2>
<title>Running <emphasis>sendmail</emphasis> at boot time</title>

<para><anchor id="CFBSD-sendmail-enable"/>
By default, the system starts <emphasis>sendmail</emphasis> at boot time.  You don't need to
do anything special.  There are two parameters in
<filename></filename>/etc/rc.conf :
</para>
<programlisting>
sendmail_enable="YES"	# Run the sendmail daemon (or NO).
sendmail_flags="-bd -q30m" # -bd is pretty mandatory
</programlisting>

<para>The flags have the following meanings:
</para>
<itemizedlist>
<listitem>

<para><emphasis>-bd</emphasis> means <emphasis>become dæmon</emphasis>: <emphasis>sendmail</emphasis> will run as a dæmon.
</para>
</listitem>
<listitem>

<para><emphasis>-q30m</emphasis> means ``try to send queued messages every 30 minutes''
(<emphasis>30m</emphasis>).  If you wanted to try to send them every 2 hours, you would write
<emphasis>-q2h</emphasis>.  The default
<filename></filename>/etc/sendmail.cf
file tries to send messages immediately, but if they can't be delivered
immediately, this interval specifies how often <emphasis>sendmail</emphasis> will try to send
the message.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Talking to <emphasis>sendmail</emphasis> </title>

<para><anchor id="CFBSD-telnet-to-smtp"/>
<indexterm><primary>Simple</primary><secondary>Mail Transfer Protocol</secondary></indexterm>
<indexterm><primary>SMTP</primary></indexterm>
<indexterm><primary>sendmail</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>sendmail</secondary></indexterm>
The <emphasis>Simple Mail Transfer Protocol</emphasis>, or <emphasis>SMTP</emphasis>, is a text-based
protocol.  If you want, you can talk to <emphasis>sendmail</emphasis> directly on the
<emphasis>smtp</emphasis> port.  Try this with <emphasis>telnet</emphasis>:
</para>
<programlisting>
$ <command>telnet localhost smtp</command>
Trying 127.0.0.1...
Connected to localhost.example.org.
Escape character is '^]'.
220 freebie.example.org ESMTP Sendmail 8.8.8/8.8.5; Fri, 28 Nov 1997 11:35:09 +1030 (CST)
<command>ehlo freebie.example.org</emphasis>					<emphasis>say who you are</command>
250-freebie.example.org Hello localhost.example.org [127.0.0.1], pleased to meet you
250-EXPN								<emphasis>short list of possible commands</emphasis>
250-VERB
250-8BITMIME
250-SIZE
250-DSN
250-ONEX
250-ETRN
250-XUSR
250 HELP
<command>mail from: grog@example.org</emphasis>					<emphasis>say who the mail is from</command>
250 grog@example.org... Sender ok
<command>rcpt to: grog@example.org</emphasis>					<emphasis>and who it goes to</command>
250 grog@example.org... Recipient ok
</emphasis><command>data</command>									<emphasis>start the body of the message
354 Enter mail, end with "." on a line by itself
<command>Test data</emphasis>								<emphasis>the message itself</command>
<command>.</command>
250 LAA01997 Message accepted for delivery
</emphasis><command>quit</command>									<emphasis>and exit
221 freebie.example.org closing connection
Connection closed by foreign host.
</programlisting>

<para>This rather cumbersome method is useful if you're having trouble with
<emphasis>sendmail</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>Aliases revisited</title>

<para><anchor id="CFBSD-/etc/aliases"/>
<indexterm><primary>/etc/aliases</primary></indexterm>
On page <xref linkend="CFBSD-mutt-aliases"/> we looked at how to set up individual aliases for use
with <emphasis>mutt</emphasis>.  <emphasis>sendmail</emphasis> also has an alias facility, this time at the
system level.  The file is called
<filename></filename>/etc/aliases . 
The default
<filename></filename>/etc/aliases
looks like:
</para>
<programlisting>
# Basic system aliases -- these MUST be present
MAILER-DAEMON: postmaster
postmaster: root

# General redirections for pseudo accounts
bin:    root
daemon: root
games:  root
ingres: root
nobody: root
system: root
toor:   root
uucp:   root

# Well-known aliases -- these should be filled in!
# root:
# manager:
# dumper:
# operator:

root:	grog
</programlisting>

<para>Each line contains the name of an alias, followed by the name of the user which
should receive it.  In this case, mail addressed to the users <emphasis>bin</emphasis>,
<emphasis>daemon</emphasis>, <emphasis>games</emphasis>, <emphasis>ingres</emphasis>, <emphasis>nobody</emphasis>, <emphasis>system</emphasis>,
<emphasis>toor</emphasis> and <emphasis>uucp</emphasis> will be sent to <emphasis>root</emphasis> instead.  Note that
the last line redefines <emphasis>root</emphasis> to send all mail to a specific user.
</para>

<para><indexterm><primary>newaliases</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>newaliases</secondary></indexterm>
<indexterm><primary>newalias</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>newalias</secondary></indexterm>
After changing
<filename></filename>/etc/aliases ,
you must run the <emphasis>newaliases</emphasis> program to rebuild the aliases database.
Don't confuse this with the <emphasis>newalias</emphasis> program, which is part of the
<emphasis>elm</emphasis> mail reader.
</para>
</sect1>
<sect1>
<title>Downloading mail from your ISP</title>

<para><indexterm><primary>downloading</primary><secondary>mail</secondary></indexterm>
As we saw before, the Internet wasn't designed for dialup use.  Most protocols
assume that systems are up a large proportion of the time: down time indicates
some kind of failure.  This can cause problems delivering mail if you are not
permanently connected to the Internet.
</para>

<para>As we saw above, if you have an MX record which points to another system which
is permanently connected, this doesn't seem to be a problem: the mail will be
sent to that system instead.  When you connect, the mail can be sent to you.
</para>

<para>How does the mail system know when you connect?  Normally it doesn't.  That's
the first problem.  Most systems set up <emphasis>sendmail</emphasis> to try to deliver mail
every 30 to 120 minutes.  If you are connected that long, the chances are good
that the mail will be delivered automatically, but you don't know when.
</para>

<para>One possibility here is to tell the remote <emphasis>sendmail</emphasis> when you're
connected.  You can do this with the <emphasis>sendmail</emphasis> <emphasis>ETRN</emphasis> command.
Telnet to the <emphasis>smtp</emphasis> port on the system where the mail is queued:
</para>
<programlisting>
$ <command>telnet mail.example.net  smtp</command>
Trying 139.130.237.17...
Connected to mail.example.net.
Escape character is '^]'.
220 freebie.example.org ESMTP Sendmail 8.8.7/8.8.7 ready at Mon, 5 May 1997
12:55:10 +0930 (CST)

<command>etrn freebie.example.org</command>
250 Queuing for node freebie.example.org started
<command>quit</command>
221 mail.example.net closing connection
Connection closed by foreign host.
</programlisting>

<para>The mail will start coming after the message <emphasis>Queuing for node
freebie.example.org started</emphasis>.  Depending on how much mail it is, it might take
a while, but you don't need to wait for it.
</para>

<para><indexterm><primary>Post</primary><secondary>Office Protocol</secondary></indexterm>
<indexterm><primary>POP</primary></indexterm>
Another alternative is the <emphasis>Post Office Protocol</emphasis>, or <emphasis>POP</emphasis>.  POP was
designed originally for Microsoft-style computers which can't run dæmons, so
they have to explicitly request the other end to download the data.  POP is an
Internet service, so you need the cooperation of the other system in order to
run it.  We'll look at POP in the next section.
</para>
<sect2>
<title>POP: the Post Office Protocol</title>

<para><anchor id="CFBSD-POP"/>
<indexterm><primary>popper</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>popper</secondary></indexterm>
<indexterm><primary>popclient</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>popclient</secondary></indexterm>
The Post Office Protocol is a means for transferring already-delivered mail to
another site.  It consists of two parts, the client and the server.  A number of
both clients and servers are available.  In this discussion, we'll look at the
server <emphasis>popper</emphasis> and the client <emphasis>popclient</emphasis>, both of which are in the
Ports Collection.
</para>
</sect2>
<sect2>
<title><emphasis>popper</emphasis>: the server</title>

<para><indexterm><primary>vipw</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>vipw</secondary></indexterm>
To install <emphasis>popper</emphasis>, you need to define a user <emphasis>pop</emphasis>.  The
installation procedure suggests that you define the user with <emphasis>vipw</emphasis> (see
page <xref linkend="CFBSD-vipw"/>) as follows:
</para>
<programlisting>
pop:*:68:1::0:0:Post Office Owner:/nonexistent:/nonexistent
</programlisting>

<para>This assumes that user number 68 is free; otherwise use any other available
number.
</para>

<para><indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
<emphasis>popper</emphasis> is designed to be started only via <emphasis>inetd</emphasis>.  To enable it,
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
Edit
<filename></filename>/etc/inetd.conf .
By default, it should contain the following line commented out with a <emphasis>#</emphasis>
character:
</para>
<programlisting>
pop3	stream	tcp	nowait	root	/usr/local/libexec/popper	popper
</programlisting>

<para>Remove the <command>#</command> or add the line.
</para>
</listitem>
<listitem>

<para>Either reboot, or cause <emphasis>inetd</emphasis> to re-read its configuration file:
</para>
<programlisting>
# <command>ps waux | grep inetd</emphasis>				<emphasis>find the PID of inetd (2nd column)</command>
root    7818  3.1  0.7   252  644  p6  S+   10:56AM   0:00.03 grep inetd
root     118  0.0  0.1   200   92  ??  Is   Thu10AM   0:01.78 inetd
# <command>kill -1 118</emphasis>					<emphasis>send a SIGHUP</command>
#
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para>To test the server, telnet to the <emphasis>pop3</emphasis> port.  You can't do much like
this, but at least you can confirm that the server is answering:
<anchor id="CFBSD-telnet-to-pop"/>
</para>
<programlisting>
$ <command>telnet localhost pop3</command>
Trying 127.0.0.1...
Connected to localhost.example.org.
Escape character is '^]'.
+OK QPOP (version 2.3) at freebie.example.org starting.
&lt;12061.876903437@freebie.exam
ple.org&gt;
quit
+OK Pop server at freebie.example.org signing off.
Connection closed by foreign host.
</programlisting>

<para></para>
</sect2>
<sect2>
<title><emphasis>popclient</emphasis>: the client</title>

<para><indexterm><primary>popclient</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>popclient</secondary></indexterm>
Install <emphasis>popclient</emphasis> from the Ports Collection.  To run it, just specify
the name of the server from which you want to load the mail.
</para>
<programlisting>
$ <command>popclient hub</command>
querying hub
Enter mailserver password:			<emphasis>doesn't echo</emphasis>
QPOP (version 2.3) at hub.freebsd.org starting.  &lt;27540.876902406@hub.freebsd.org&gt;
7 messages in folder, 6 new messages.
reading message 1...
flushing message 2
reading message 2....
flushing message 3
reading message 3...
flushing message 4
reading message 4...
flushing message 5
reading message 5....
flushing message 6
reading message 6..
flushing message 7
</programlisting>

<para><emphasis>popclient</emphasis> and <emphasis>popper</emphasis> are relatively simple to use.  My main
objections to them are that they add another level of complexity to the mail
system, and that they require manual intervention in a system which is designed
to be automatic.  In addition, <emphasis>popclient</emphasis> is not a speed demon: if you
have a lot of mail to transfer, be prepared to wait much longer than
<emphasis>sendmail</emphasis> would take.
</para>
</sect2>
</sect1>
<sect1>
<title>Mailing lists: majordomo</title>

<para><!-- XXX Get this right -->
<indexterm><primary>majordomo</primary></indexterm>
<emphasis>majordomo</emphasis> is a mail list manager.  If you run mailing lists, you
probably want to use majordomo: it saves you manually modifying the mailing
lists.
</para>

<para>As usual, you can find <emphasis>majordomo</emphasis> in the Ports Collection, in the
directory <emphasis>/usr/ports/mail/majordomo</emphasis>.  When installing, you'll notice a
message:
</para>
<programlisting>
To finish the installation, 'su' to root and type:

            make install-wrapper

If not installing the wrapper, type

            cd /usr/local/majordomo; ./wrapper config-test

(no 'su' necessary) to verify the installation.
\&amp;./install.sh -o root -g 54  -m 4755 wrapper /usr/local/majordomo/wrapper
</programlisting>

<para>With the exception of the last line, this comes from the original
<emphasis>majordomo</emphasis> installation procedure.  The last line is the port performing
the <emphasis>make install-wrapper</emphasis> for you.  You don't need to do anything else,
and you can ignore the messages.
</para>

<para>After installation, you still need to perform some configuration:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/usr/local/majordomo/majordomo.cf</primary></indexterm>
Customize
<filename></filename>/usr/local/majordomo/majordomo.cf .
This should be easy enough to read, and you may not need to change anything.
Once you have it up and running, you might like to consider changing the
<emphasis>default_subscribe_policy</emphasis>.
</para>
</listitem>
<listitem>

<para>Define your lists in
<filename></filename>/usr/local/majordomo/aliases.majordomo .
This file contains a single list, <emphasis>test-l</emphasis>, which you should remove once
you have things up and running.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/aliases</primary></indexterm>
Ensure that there is a mail user <emphasis>majordomo-owner</emphasis> on the system.
Probably the best way to handle this is to add an entry in
<filename></filename>/etc/aliases
(see page <xref linkend="CFBSD-/etc/aliases"/>):
</para>
<programlisting>
majordomo-owner:	root
</programlisting>

<para>Since <emphasis>root</emphasis> should be an alias for your mail ID, this will mean that you
get the mail for <emphasis>majordomo-owner</emphasis> as well.  Don't run
<filename></filename>newaliases
yet.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/sendmail.cf</primary></indexterm>
Add
<filename></filename>/usr/local/majordomo/aliases.majordomo
to the <emphasis>sendmail</emphasis>
aliases.  Find the following line in
<filename></filename>/etc/sendmail.cf ,
and add the text in <keycap>bold type</keycap>:
</para>
<programlisting>
O AliasFile=/etc/aliases<command>,/usr/local/majordomo/aliases.majordomo</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para><indexterm><primary>newaliases</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>newaliases</secondary></indexterm>
Run <emphasis>newaliases</emphasis>.  You may get the following message:
</para>
<programlisting>
/etc/aliases: 12 aliases, longest 14 bytes, 146 bytes total
hash map "Alias1": unsafe map file /usr/local/majordomo/aliases.majordomo: Permissi
on denied
WARNING: cannot open alias database /usr/local/majordomo/aliases.majordomo
Cannot create database for alias file /usr/local/majordomo/aliases.majordomo: Opera
tion not supported by device
</programlisting>

<para>If this happens, perform the following steps:
</para>
<programlisting>
# <command>cd /usr/local/majordomo</command>
# <command>chmod 777 .</command>
# <command>newaliases</command>
/etc/aliases: 12 aliases, longest 14 bytes, 146 bytes total
WARNING: writable directory /usr/local/majordomo
WARNING: writable directory /usr/local/majordomo
WARNING: writable directory /usr/local/majordomo
/usr/local/majordomo/aliases.majordomo: 16 aliases, longest 235 bytes, 890 bytes to
tal
# <command>chmod 755 .</command>
# <command>newaliases</command>
/etc/aliases: 12 aliases, longest 14 bytes, 146 bytes total
/usr/local/majordomo/aliases.majordomo: 16 aliases, longest 235 bytes, 890 bytes to
tal
</programlisting>

<para>This will create the files with the correct permissions.
</para>
</listitem>
<listitem>

<para>Restart <emphasis>sendmail</emphasis>&mdash;see page <xref linkend="CFBSD-restart-sendmail"/>.  You don't need to do
this if you're planning to reboot before using <emphasis>majordomo</emphasis>.
</para>
</listitem>
</itemizedlist>

<para>That's all you need to do.  You don't need to start any processes to run
<emphasis>majordomo</emphasis>: it gets started automatically when a mail message is
received.

</para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchwww"><title>The World-Wide Web</title>

<para><indexterm><primary>World-Wide</primary><secondary>Web</secondary></indexterm>
For the vast majority of the public, the Internet and the <emphasis>World-Wide Web</emphasis>
are the same thing.  FreeBSD is an important contender in this area.  Some of
the world's largest Web sites, including Yahoo!  (<emphasis>http://www.yahoo.com/</emphasis>)
run FreeBSD.  FreeBSD's web performance appears to be at least an order of
magnitude better than that of Microsoft NT, not to mention other Microsoft
platforms.
</para>

<para>We'll look at web browsers first, then on page <xref linkend="CFBSD-web-server"/> we'll look at how
to set up a web server.
</para>
<title>Uniform Resource Locators</title>

<para><anchor id="CFBSD-URL"/>
<indexterm><primary>Uniform</primary><secondary>Resource Locator</secondary></indexterm>
<indexterm><primary>URL</primary></indexterm>
Another term has become widely known in connection with the World Wide Web: the
concept of a <emphasis>Uniform Resource Locator</emphasis> or <emphasis>URL</emphasis>, the means by which
resources are located on the Internet.  The most usual kind of URL can consist
of up to 6 components, although most contain only 3.  The syntax is (roughly
translated into UNIX terminology):
<emphasis>service</emphasis>://<emphasis>user</emphasis>:<emphasis>password</emphasis>@<emphasis>host</emphasis>:<emphasis>port</emphasis>/<emphasis>path</emphasis>
These names have the following meaning:
<table frame='all'><title>URL syntax</title>
box,center,tab(#) ;
lf(I) | lw65 .
Component#Meaning
=

<tgroup cols='1' align='left' colsep='1' rowsep='1'><tbody>
<row><entry>
</entry></row>
<indexterm><primary>/etc/services</primary></indexterm>
<row><entry> service</entry><entry> An IP service, normally described in <emphasis>/etc/services</emphasis>.  See page <xref linkend="CFBSD-services"/> for more details.  Some exceptions are the string <emphasis>mailto</emphasis>, which identifies the <emphasis>user</emphasis> and <emphasis>host</emphasis> components as a mail ID, and <emphasis>file</emphasis>, which identifies the following pathname as the name of a local file.  The most common services are <emphasis>http</emphasis>, <emphasis>ftp</emphasis> and <emphasis>telnet</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/etc/passwd</primary></indexterm>
<row><entry> user</entry><entry> The name of a user on whose behalf the operation is performed.  For example, when using the <emphasis>ftp</emphasis> service, this would be the user name to use for logging in to the FTP server.  We've seen that it represents the name of the recipient for mail.  From a UNIX perspective, the <emphasis>user</emphasis> information comes from <emphasis>/etc/passwd</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/etc/spwd.db</primary></indexterm>
<row><entry> password</entry><entry> Where authentication is needed, the password to use.  You'll see this occasionally in FTP URLs.  Traditionally, this information is stored in <emphasis>/etc/passwd</emphasis>, but FreeBSD stores it in a separate file, <emphasis>/etc/spwd.db</emphasis>, which is accessible only to <emphasis>root</emphasis>.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/etc/namedb/db.domain</primary></indexterm>
<row><entry> host</entry><entry> The DNS name of the system on which the resource is located.  Some non-UNIX sites also use an IP address here.  This information is stored in a file such as <emphasis>/etc/namedb/db.domain</emphasis> for the local system, and retrieved via DNS.
</entry></row>
<row><entry>
</entry></row>
<indexterm><primary>/usr/local/www/data/</primary></indexterm>
<row><entry>
</entry></row>
<indexterm><primary>~user/public_html/</primary></indexterm>
<row><entry> path</entry><entry> A UNIX path name, in other words a complete file name.  Unlike other UNIX path names, the root is not normally the root file system.  For the <emphasis>http</emphasis> service, the root is implementation defined.  For Apache on FreeBSD, it's normally <emphasis>/usr/local/www/data/</emphasis>.  If you use the <emphasis>~</emphasis> notation to mean <emphasis>home directory</emphasis> (see page <xref linkend="CFBSD-home-directory"/>), you will get <emphasis>~user/public_html/</emphasis>.
</entry></row>
</para>

<para><row><entry> For <emphasis>ftp</emphasis>, it's the directory which belongs to <emphasis>user</emphasis>.  If you omit <emphasis>user</emphasis> for <emphasis>ftp</emphasis>, you'll get the user <emphasis>ftp</emphasis>, so the pathname <emphasis>/pub</emphasis> maps to the UNIX file name <emphasis>~ftp/pub</emphasis>.
</entry></row>
</tbody></tgroup></table>
As you'll see, all of these components are intimately related to UNIX.  See RFC
1738 at <emphasis>http://www.cis.ohio-state.edu/htbin/rfc/rfc1738.html</emphasis> for a
precise definition.
</para>
</sect1>
<sect1>
<title>Web browsers</title>

<para><indexterm><primary>web</primary><secondary>browser</secondary></indexterm>
<indexterm><primary>browser</primary><secondary>web</secondary></indexterm>
A <emphasis>web browser</emphasis> is a piece of software which retrieves documents from the
Web and displays them.  FreeBSD does not include a web browser, but a large
number are available in the Ports Collection.  The most important are:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>lynx</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>lynx</secondary></indexterm>
<emphasis>lynx</emphasis> is a web browser for people who don't use X.  It displays text
only.
</para>
</listitem>
<listitem>

<para><indexterm><primary>mosaic</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>mosaic</secondary></indexterm>
<emphasis>mosaic</emphasis> was the original web browser.  It's looking a bit dated now.
</para>
</listitem>
<listitem>

<para><indexterm><primary>netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netscape</secondary></indexterm>
<emphasis>netscape</emphasis> is the most popular browser available.  We'll look at it in
more detail later.
</para>
</listitem>
</itemizedlist>

<para><indexterm><primary>internet</primary><secondary>explorer</secondary></indexterm>
<indexterm><primary>Microsoft</primary><secondary>internet explorer</secondary></indexterm>
You'll note one exception on this list: Microsoft's <emphasis>Internet Explorer</emphasis> is
not available for FreeBSD.  Nobody seems to have missed it.  In view of the fact
that Microsoft appears to be trying to fragment the web market,
<!-- XXX.FS -->
<!-- XXXSee <emphasis>http://192.9.48.5/announcement/letter.html</emphasis> for details of Sun -->
<!-- XXXMicrosystems' legal action against Microsoft for violating the license terms for -->
<!-- XXXSun's Java programming language. -->
<!-- XXX.FE -->
I can't recommend it even for those platforms for which it is available.
</para>
<sect2>
<title>Netscape</title>

<para><indexterm><primary>netscape</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>netscape</secondary></indexterm>
Until recently, there was no native version of Netscape for FreeBSD, but both
BSDI and Linux versions work.  The BSDI version is preferable, since it doesn't
have any particular prerequisites.  The Linux version requires Linux emulation,
of course&mdash;see page <xref linkend="CFBSD-Linux-emulation"/> for more details.  Now Netscape also
has a FreeBSD version, so that's the one to choose.
</para>

<para>Theoretically you could download Netscape in the same way you download any other
version of Netscape.  The installation instructions are rather complicated,
however, so FreeBSD provides an installation procedure in the Ports Collection.
This doesn't compile Netscape&mdash;the sources are not all available&mdash;but it
does ensure that the installation completes correctly.  Installation looks like
this:
</para>
<programlisting>
# <command>cd /usr/ports/web/netscape4</command>
# <command>make install</command>
&gt;&gt; communicator-v403b8-export.x86-unknown-freebsd.tar.gz doesn't seem to exist on this
 system.
&gt;&gt; Attempting to fetch from file:/cdrom/ports/distfiles//.
cp: /cdrom/ports/distfiles//communicator-v403b8-export.x86-unknown-freebsd.tar.gz: No
such file or directory
&gt;&gt; Attempting to fetch from ftp://ftp.netscape.com/pub/communicator/4.03/4.03b8/englis
h/unix/freebsd/base_install/.
Receiving communicator-v403b8-export.x86-unknown-freebsd.tar.gz (7639662 bytes)
7639662 bytes transfered in 2547.6 seconds  (2.93 Kbytes/s)
&gt;&gt; Checksum OK for communicator-v403b8-export.x86-unknown-freebsd.tar.gz.
===&gt;  Extracting for netscape-4.03b8
===&gt;  Patching for netscape-4.03b8
===&gt;  Applying FreeBSD patches for netscape-4.03b8
===&gt;  Configuring for netscape-4.03b8
===&gt;  Installing for netscape-4.03b8
===&gt;  Warning: your umask is "0000".
      If this is not desired, set it to an appropriate value
      and install this port again by ``make reinstall''.
<emphasis>\&amp;... lots of information</emphasis>

Installing Communicator files...
Installing Communicator Java files...
Installing additional component files...
Registering Communicator 4.03b8...

The Netscape Communicator software installation is complete.
<emphasis>\&amp;... more information</emphasis>

Note: If Java applets fail to display.  Type this as root:
		cd /usr/X11R6/lib/X11/fonts/misc
		/usr/X11R6/bin/mkfontdir
		chmod 444 fonts.dir
      And then exit and restart your X server.
===&gt;  Registering installation for netscape-4.03b8
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Running Netscape</title>

<para><indexterm><primary>running</primary><secondary>netscape</secondary></indexterm>
<indexterm><primary>netscape</primary><secondary>running</secondary></indexterm>
</para>

<para><figure><title>Default netscape display</title><graphic format="JPEG" fileref="images/missing.jpg"></graphic></figure>
To run Netscape, just enter the name:
</para>
<programlisting>
$ <command>netscape &amp;</command>
</programlisting>

<para>Netscape starts in a separate window.  The <emphasis>&amp;</emphasis> character after the name is
not essential, but if you don't specify it, you won't be able to use the window
in which you start it until netscape terminates.
</para>

<para>Figure <xref linkend="CFBSD-netscrape"/> shows the default netscape display.  There are many
configuration possibilities&mdash;see the instructions for further information.
One thing is not immediately apparent, however: when entering text to Netscape,
you can use most Emacs <keycap>Ctrl-</keycap> keys, such as <keycap>Ctrl-A</keycap> to go to the
beginning of the line, <keycap>Ctrl-D</keycap> to delete the next character after the
cursor, and so on.
</para>
</sect2>
</sect1>
<sect1>
<title>Setting up a web server</title>

<para><indexterm><primary>setting</primary><secondary>up a web server</secondary></indexterm>
<indexterm><primary>web</primary><secondary>server</secondary></indexterm>
<anchor id="CFBSD-web-server"/>
<indexterm><primary>apache</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>apache</secondary></indexterm>
FreeBSD is a system of choice for running web servers, so it's not surprising
that a large number are available.  Probably the most popular is <emphasis>apache</emphasis>,
which is available in the Ports Collection.  Install with:
</para>
<programlisting>
# <command>pkg_add /cdrom/packages/www/apache-1.2.4.tgz</command>
</programlisting>

<para>In future versions, the name <emphasis>apache-1.2.4</emphasis> will change.  Apache comes
with a lot of documentation in HTML format (of course), but the port doesn't
install it anywhere.  You can access the current documentation at
<emphasis>http://www.apache.org/manual-index/docs</emphasis>.
</para>
<sect2>
<title>Configuring apache</title>

<para><indexterm><primary>configuring</primary><secondary>apache</secondary></indexterm>
<indexterm><primary>apache</primary><secondary>configuring</secondary></indexterm>
The Apache port uses the following directories:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/usr/local/etc/apache</primary></indexterm>
The configuration files are in the directory hierarchy
<emphasis>/usr/local/etc/apache</emphasis>.  The port installs prototype configuration files,
but they need to be modified.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/local/www/data</primary></indexterm>
Web pages are in <emphasis>/usr/local/www/data</emphasis>.  This is the ``root'' directory for
the web pages: the file <emphasis>/usr/local/www/data/foo.html</emphasis> on
<emphasis>www.example.org</emphasis> will have the URL <emphasis>http://www.example.org/foo.html</emphasis>.
You can change it by changing the entry <emphasis>DocumentRoot</emphasis> in
<emphasis>/usr/local/etc/apache/access.conf</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/local/www/icons</primary></indexterm>
Icons are stored in <emphasis>/usr/local/www/icons</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/local/www/cgi-bin</primary></indexterm>
CGI scripts are stored in <emphasis>/usr/local/www/cgi-bin</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>The configuration files</title>

<para><indexterm><primary>configuration</primary><secondary>file</secondary></indexterm>
<indexterm><primary>apache</primary><secondary>configuration file</secondary></indexterm>
There are three configuration files in <emphasis>/usr/local/etc/apache</emphasis>:
<emphasis>access.conf</emphasis>, which controls access to the system, <emphasis>httpd.conf</emphasis>, which
defines most server parameters, and <emphasis>srm.conf</emphasis>, which defines the mapping
between the file names and URLs.  <emphasis>httpd.conf</emphasis> is the only one you must
change.  See the <emphasis>apache</emphasis> documentation if you need to change the other
files.
</para>
</sect2>
<sect2>
<title><emphasis>httpd.conf</emphasis> </title>

<para><indexterm><primary>httpd.conf</primary></indexterm>
<indexterm><primary>/usr/local/etc/apache/httpd.conf</primary></indexterm>
Probably the best way to understand <emphasis>httpd.conf</emphasis> is to read through it.
Most entries can be left the way there are.  We'll look at the ones that may
need change.
</para>
<itemizedlist>
<listitem>

<para><emphasis>ServerAdmin</emphasis> is the mail ID of the system administrator.  It's set to
<emphasis>you@your.address</emphasis>, which obviously needs to be changed.
</para>
</listitem>
<listitem>

<para>The comments about <emphasis>ScoreBoardFile</emphasis> suggest that you should check to see
if the system creates one.  Don't bother: FreeBSD doesn't create this file.
</para>
</listitem>
<listitem>

<para><indexterm><primary>www.example.org</primary></indexterm>
You don't need to set <emphasis>ServerName</emphasis>, but it may be a good idea.  For
example, <emphasis>www.example.org</emphasis> is a CNAME for <emphasis>freebie.example.org</emphasis> (see
page <xref linkend="CFBSD-DNS-CNAME"/>), and if we don't set this value, clients will access
<emphasis>www.example.org</emphasis>, but the server will return the name
<emphasis>freebie.example.org</emphasis>.
</para>
</listitem>
<listitem>

<para>If you set the parameter <emphasis>CacheNegotiatedDocs</emphasis>, Apache tells proxy servers
to cache any documents it receives.  This improves performance if the page is referenced
again.  It is disabled (commented out) in the original configuration file.
Unfortunately, you can't specify this parameter for individual pages: it's
either on or off for all pages.
</para>
</listitem>
<listitem>

<para>The Keep-Alive extension to HTTP, as defined by the <emphasis>HTTP/1.1 draft</emphasis>,
allows persistent connections.  These long-lived HTTP sessions allow multiple
requests to be sent over the same TCP connection, and in some cases have been
shown to result in an almost 50% speedup in latency times for HTML documents
with lots of images.
</para>
</listitem>
<listitem>

<para>The parameters <emphasis>MinSpareServers</emphasis>, <emphasis>MaxSpareServers</emphasis>,
<emphasis>StartServers</emphasis>, <emphasis>MaxClients</emphasis> and <emphasis>MaxRequestsPerChild</emphasis> are
used for server tuning.  The default values should work initially, but if you
have a lot of Web traffic, you should consider changing them.
</para>
</listitem>
<listitem>

<para>The parameter <emphasis>ProxyRequests</emphasis> allows Apache to function as a <emphasis>proxy
server</emphasis>.  We'll look at this in more detail below.
</para>
</listitem>
<listitem>

<para>The parameters starting with <emphasis>Cache</emphasis> apply only to proxy servers, so we'll
look at them below as well.
</para>
</listitem>
<listitem>

<para>The <emphasis>Listen</emphasis> parameter defines alternate ports on which Apache listens.
</para>
</listitem>
<listitem>

<para><emphasis>VirtualHost</emphasis> allows Apache to serve as multiple hosts.  This feature is
important enough that we'll talk about it in its own section on page
<xref linkend="CFBSD-virtual-host"/>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Proxy web servers</title>

<para><indexterm><primary>proxy</primary><secondary>web server</secondary></indexterm>
<indexterm><primary>web</primary><secondary>server</secondary></indexterm>
<indexterm><primary>natd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>natd</secondary></indexterm>
<indexterm><primary>caching</primary><secondary>web</secondary></indexterm>
<indexterm><primary>web</primary><secondary>caching</secondary></indexterm>
Apache is capable of operating as a proxy server: it can accept requests
for web pages of other systems.   This can be an alternative to a general IP
aliasing package such as <emphasis>natd</emphasis> (see page <xref linkend="CFBSD-ip-aliasing"/>) if you need it
only for Web access.  It's also useful in conjunction with <emphasis>caching</emphasis>.
</para>

<para>Unfortunately, by default the current version of Apache does not support proxy
servers.  You need to rebuild the package manually after enabling it in the
configuration file&mdash;see the file
<emphasis>/usr/ports/www/apache/work/apache-1.2.4/src/INSTALL</emphasis> for more details.
In addition to reinstalling the server with code for proxy serving, you must set
<emphasis>ProxyRequests</emphasis> to <emphasis>On</emphasis> in order to enable the proxy server.
</para>
</sect2>
<sect2>
<title>Caching</title>

<para><indexterm><primary>caching</primary><secondary>web</secondary></indexterm>
<indexterm><primary>web</primary><secondary>caching</secondary></indexterm>
One reason for enabling the proxy server is in order to <emphasis>cache</emphasis> data
requests.  Caching keeps pages which have been requested through the proxy and
presents them again if they are requested again.  This is particularly useful if
the server serves a large number of people who communicate with each other and
are thus likely to request many of the same pages.
</para>

<para><indexterm><primary>/usr/local/www/proxy</primary></indexterm>
The <emphasis>Cache</emphasis> parameters are commented out by default.  If you uncomment
them, you should uncomment them all execpt possibly <emphasis>NoCache</emphasis>.  When
setting these values, change the name of the directory <emphasis>CacheRoot</emphasis>.  A
good name might be <emphasis>/usr/local/www/proxy</emphasis>.
</para>
</sect2>
<sect2>
<title>Virtual hosts</title>

<para><indexterm><primary>virtual</primary><secondary>host</secondary></indexterm>
<indexterm><primary>web</primary><secondary>virtual host</secondary></indexterm>
<anchor id="CFBSD-virtual-host"/>
<indexterm><primary>example.org</primary></indexterm>
<indexterm><primary>biguser.com</primary></indexterm>
<indexterm><primary>/usr/local/etc/apache/httpd.conf</primary></indexterm>
Running and maintaining a web server is enough work that you might want to use
the same server to host several sets of web pages, for example for a number of
different organizations.  For example, at <emphasis>example.org</emphasis> you may run your
own web pages and also a set of pages for <emphasis>biguser.com</emphasis> (see page
<xref linkend="CFBSD-ISP-routing"/>).  To do this, you add the following section to
<emphasis>/usr/local/etc/apache/httpd.conf</emphasis>:
</para>
<programlisting>
&lt;VirtualHost www.biguser.com&gt;
ServerAdmin grog@example.org
DocumentRoot /usr/local/www/biguser			<emphasis>where we put the web pages</emphasis>
ServerName www.biguser.com				<emphasis>the name that the server will claim to be</emphasis>
ErrorLog /var/log/biguser/error_log
TransferLog /var/log/biguser/access_log
&lt;/VirtualHost&gt;
</programlisting>

<para>The log files don't contain any information about the names by which the data
was invoked, so it's important to have separate log files for each virtual
domain.  In this case we've put them in a subdirectory of <emphasis>/var/log</emphasis>,
<emphasis>/var/log/biguser</emphasis>.  You must create this directory before restarting the
server.
</para>

<para><indexterm><primary>apache</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>apache</secondary></indexterm>
<indexterm><primary>/usr/local/etc/apache/access.conf</primary></indexterm>
After restarting <emphasis>apache</emphasis>, it handles any requests to
<emphasis>www.biguser.com</emphasis> with these parameters.  If you don't define a virtual
host, the server will access the main web pages (defined by the entry
<emphasis>DocumentRoot</emphasis> in <emphasis>/usr/local/etc/apache/access.conf</emphasis>).
</para>
</sect2>
<sect2>
<title>Running apache</title>

<para><indexterm><primary>running</primary><secondary>apache</secondary></indexterm>
<indexterm><primary>apache</primary><secondary>running</secondary></indexterm>
<indexterm><primary>/usr/local/www/server/httpd</primary></indexterm>
Depending on the origin of your port, the server is stored either in
<emphasis>/usr/local/sbin/httpd</emphasis> or in the rather unusual location
<emphasis>/usr/local/www/server/httpd</emphasis>.  You can run it with no parameters:
</para>
<programlisting>
# <command>/usr/local/www/server/httpd</command>
</programlisting>

<para>It automatically starts 7 other processes.
</para>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
To start <emphasis>apache</emphasis> automatically at boot time, add the following entry to
<emphasis>/etc/rc.local</emphasis>:
</para>
<programlisting>
echo -n 'starting local daemons:'
# put your local stuff here

<command>echo " httpd"; /usr/local/www/server/httpd</command>
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Stopping apache</title>

<para><indexterm><primary>stopping</primary><secondary>apache</secondary></indexterm>
<indexterm><primary>apache</primary><secondary>stopping</secondary></indexterm>
One of the disadvantages of the number of processes is that it's confusing to
stop <emphasis>apache</emphasis>.  In fact, it's not as difficult as it looks.  The original
<emphasis>httpd</emphasis> process belongs to <emphasis>root</emphasis>, and the others belong to
<emphasis>nobody</emphasis>.  Use <emphasis>ps</emphasis> to find the first one, and kill it gently
(without <emphasis>-9</emphasis>) so that it can close its files:
</para>
<programlisting>
root   29322  0.0  0.2   520  192  ??  Ss   10:42AM   0:01.79 httpd
nobody 29323  0.0  0.2   556  168  ??  I    10:42AM   0:00.02 httpd
nobody 29324  0.0  0.2   568  172  ??  I    10:42AM   0:00.04 httpd
nobody 29325  0.0  0.2   568  172  ??  I    10:42AM   0:00.03 httpd
nobody 29326  0.0  0.2   568  172  ??  I    10:42AM   0:00.04 httpd
nobody 29327  0.0  0.2   556  168  ??  I    10:42AM   0:00.02 httpd
nobody   281  0.0  0.2   520  168  ??  I    10:54AM   0:00.00 httpd
nobody   282  0.0  0.2   520  168  ??  I    10:54AM   0:00.00 httpd
root    4748  0.0  0.7   252  644  p5  S+    1:05PM   0:00.02 grep http
# <command>kill 29322</emphasis>					<emphasis>the one belonging to root</command>
# <command>ps waux | grep http</command>
root    4793  0.0  0.7   252  644  p5  S+    1:06PM   0:00.02 grep http
</programlisting>

<para></para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchfax"><title>HylaFAX</title>

<para><indexterm><primary>Leffler</primary><secondary>Sam</secondary></indexterm>
<indexterm><primary>HylaFAX</primary></indexterm>
<emphasis>HylaFAX</emphasis> is a free fax software packet written by Sam Leffler, one of the
authors of <emphasis>The Design and the Implementation of the 4.3BSD UNIX Operating
System</emphasis>.  It is supplied in the Ports Collection&mdash;see page
<xref linkend="CFBSD-ports-collection"/> for details of how to install a port.
</para>
<sect1>
<title>Setting up HylaFAX</title>

<para><indexterm><primary>setting</primary><secondary>up HylaFAX</secondary></indexterm>
<indexterm><primary>HylaFAX</primary><secondary>setting up</secondary></indexterm>
<indexterm><primary>faxq</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>faxq</secondary></indexterm>
<indexterm><primary>hfaxd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>hfaxd</secondary></indexterm>
<indexterm><primary>faxgetty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>faxgetty</secondary></indexterm>
<emphasis>HylaFAX</emphasis> consists of two parts, a <emphasis>client</emphasis> and a <emphasis>server</emphasis>.  As a
user, you use the client to send and display faxes.  The server is responsible
for the delivery to or from another system.  A server system usually runs at
least two server processes, the scheduler process <emphasis>faxq</emphasis> and server
<emphasis>hfaxd</emphasis>.  Server systems may also use <emphasis>faxgetty</emphasis> to monitor modems and
possibly receive incoming fax calls.  If you're running a send-only system, you
would run <emphasis>faxq</emphasis> and <emphasis>hfaxd</emphasis> but not <emphasis>faxgetty</emphasis>.
</para>

<para><indexterm><primary>faxqclean</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxqclean</secondary></indexterm>
<indexterm><primary>faxcron</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxcron</secondary></indexterm>
<indexterm><primary>cron</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>cron</secondary></indexterm>
In addition to the server processes that operate all the time, <emphasis>HylaFAX</emphasis>
comes with two programs that are intended to be run periodically.  On a server,
<emphasis>faxqclean</emphasis> removes unwanted files from the spooling area, and
<emphasis>faxcron</emphasis> monitors the spooling area and performs routine maintenance
tasks such as truncating log files.  These programs are usually invoked by
<emphasis>cron</emphasis>.
</para>

<para>In the remainder of this chapter we'll look at the basic steps required to set
up <emphasis>HylaFAX</emphasis>.  They are:
</para>
<itemizedlist>
<listitem>

<para>Install the <emphasis>HylaFAX</emphasis> software.
</para>
</listitem>
<listitem>

<para>Select a facsimile modem for use.
</para>
</listitem>
<listitem>

<para>Check your modem is functional.
</para>
</listitem>
<listitem>

<para>Select a flow control scheme to use for facsimile communication.
</para>
</listitem>
<listitem>

<para>Select a TTY device to use.
</para>
</listitem>
<listitem>

<para><indexterm><primary>faxsetup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxsetup</secondary></indexterm>
Use <emphasis>faxsetup</emphasis> to configure a server machine.
</para>
</listitem>
<listitem>

<para><indexterm><primary>faxaddmodem</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxaddmodem</secondary></indexterm>
Use <emphasis>faxaddmodem</emphasis> to configure modems.
</para>
</listitem>
<listitem>

<para>Start up outbound service.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Selecting a fax modem</title>

<para><emphasis>HylaFAX</emphasis> has drivers for Class 1, Class 2, and Class 2.0 fax modems.  Avoid
Class 1 modems, which are now obsolete.  Class 2 modems are the most common, but
compatibility can be a problem.  In addition, the quality of Class 2 modems
varies significantly.  Class 2.0 modems follow the latest standard, a ratified
version of the specification used in implementing Class 2 modems.  There are
significantly fewer Class 2.0 modems available, and the quality of these modems
also varies.  The <emphasis>HylaFAX</emphasis> distribution includes a list of modems that have
been tried with <emphasis>HylaFAX</emphasis>, including several modems that have been found to
be reliable for use in sending and receiving.
</para>
</sect2>
<sect2>
<title>Flow control</title>

<para>Modern fax modems can run at speeds of up to 14,400 bps.  At these speeds, you
should use hardware flow control to avoid data loss&mdash;see page <xref linkend="CFBSD-handshaking"/>.
Some modems only implement hardware flow control correctly when doing data
communication, and may not support hardware flow control during fax
communication.  Consult the modem information supplied with the distribution for
specifics on some modems.  If the <emphasis>HylaFAX</emphasis> distribution includes a
prototype configuration file for your modem, then use the appropriate default
flow control scheme defined for the modem.  In case of doubt, or if you have
trouble, configure the modem to use software flow control for fax use.
</para>
</sect2>
<sect2>
<title>Choosing a <emphasis>tty</emphasis> device</title>

<para>As we saw in <xref linkend="CFBSD-chmodems"/>, your choice of <emphasis>tty</emphasis> device depends on the way
you want to use it.  Choose <emphasis>/dev/cuaa\f(CIn</emphasis> for dialout connections and
<emphasis>dev/ttyd\f(CIn</emphasis> for dialin connections.
</para>
</sect2>
<sect2>
<title>Using <emphasis>faxsetup</emphasis> to configure a server machine</title>

<para><indexterm><primary>faxsetup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxsetup</secondary></indexterm>
Before using any <emphasis>HylaFAX</emphasis> software, run the <emphasis>faxsetup</emphasis> script to verify
the software installation to carry out a number of one-time tasks to prepare the
system for use.  It's especially important to run <emphasis>faxsetup</emphasis> if you install
the <emphasis>HylaFAX</emphasis> package, because it checks that the parameters set up at the
time the package was built are correct for your machine.
</para>

<para><indexterm><primary>/var/spool/fax/etc/setup.cache</primary></indexterm>
<indexterm><primary>/var/spool/fax/etc/setup.modem</primary></indexterm>
After testing, <emphasis>faxsetup</emphasis> writes configuration information to two files in
the <emphasis>HylaFAX</emphasis> spool directory.  <emphasis>/var/spool/fax/etc/setup.cache</emphasis>
contains the parameter settings used by <emphasis>HylaFAX</emphasis> command scripts, and
<emphasis>/var/spool/fax/etc/setup.modem</emphasis> contains settings and shell functions used
by command scripts that communicate with modems.
</para>
<note>

<para>The <emphasis>setup.cache</emphasis> and <emphasis>setup.modem</emphasis> files must be present for
<emphasis>HylaFAX</emphasis> to function properly.  If these files do not exist then
<emphasis>HylaFAX</emphasis> server applications will terminate with an error message.
</para>
</note>

<para></para>

<para><emphasis>faxsetup</emphasis> performs the following tasks.  It always prompts for permission
before doing anything that might affect normal system operation (for example
adding a new user to the password file).
</para>
<itemizedlist>
<listitem>

<para>It verifies that the pathnames compiled into <emphasis>HylaFAX</emphasis> applications are
correct and that the directory hierarchy is present and set up correctly.  If
any of these checks fails then it is assumed that <emphasis>HylaFAX</emphasis> has not been
installed or that there is a misconfiguration problem such as might occur when a
binary distribution is loaded in an unexpected location.
</para>
</listitem>
<listitem>

<para>It verifies that the TIFF software distribution is properly installed on the
server machine.  <emphasis>HylaFAX</emphasis> uses certain of the TIFF tools in normal server
operation.
</para>
</listitem>
<listitem>

<para><indexterm><primary>tiffg3</primary><secondary>ghostscript driver</secondary></indexterm>
<indexterm><primary>ghostscript</primary><secondary>tiffg3 driver</secondary></indexterm>
It verifies that the configured PostScript RIP is present and that it has the
necessary functionality to use it with <emphasis>HylaFAX</emphasis>.  If you're using
Ghostscript, make sure to configure the <emphasis>tiffg3</emphasis> device driver when
building Ghostscript for use with <emphasis>HylaFAX</emphasis>.
</para>
</listitem>
<listitem>

<para>It verifies that a user <emphasis>fax</emphasis> exists.  If it doesn't find one, it will
create it.  The user <emphasis>fax</emphasis> is used in various places in <emphasis>HylaFAX</emphasis>.
You should set it up to have the same user number as that of <emphasis>uucp</emphasis> so
that UUCP lock files can be shared.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/services</primary></indexterm>
It verifies that <emphasis>/etc/services</emphasis> contains suitable entries for the
<emphasis>hylafax</emphasis> and <emphasis>snpp</emphasis>.  If no entries are present then they may
optionally be set up, though the software will still work correctly without
them.
</para>
</listitem>
<listitem>

<para><indexterm><primary>hfaxd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>hfaxd</secondary></indexterm>
<indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
<indexterm><primary>HylaFAX</primary></indexterm>
It verifies that <emphasis>hfaxd</emphasis> is started when the system is brought up
multi-user, or that <emphasis>hfaxd</emphasis> is started by the <emphasis>inetd</emphasis> d&aelig;gmon.
<emphasis>hfaxd</emphasis> is the central <emphasis>HylaFAX</emphasis> d&aelig;gmon.  It operates most
efficiently when started standalone, but it may also be invoked through
<emphasis>inetd</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>faxsetup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxsetup</secondary></indexterm>
It verifies that the mail aliases database contains an entry <emphasis>FaxMaster</emphasis>.
This alias is equivalent to the normal <emphasis>postmaster</emphasis> alias used to deliver
mail-related problems.  <emphasis>HylaFAX</emphasis> directs notices about problems and
received fax to this alias.  The FaxMaster alias should list those system
administrators that will handle <emphasis>HylaFAX</emphasis>-specific problems.  If this alias
is not present, <emphasis>faxsetup</emphasis> creates one.
</para>
</listitem>
</itemizedlist>

<para>Next, <emphasis>faxsetup</emphasis> prompts to create a configuration file for the
<emphasis>HylaFAX</emphasis> scheduler process and for any modems on the system that are to be
used by <emphasis>HylaFAX</emphasis>.  Finally it starts the <emphasis>HylaFAX</emphasis> server processes, or
restarts them if an existing installation is being updated or reconfigured, and
any modem configuration work is performed.  In the following sections we'll look
at this process in more detail.
</para>
</sect2>
<sect2>
<title>Using <emphasis>faxaddmodem</emphasis> to configure modems</title>

<para><indexterm><primary>faxaddmodem</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxaddmodem</secondary></indexterm>
<indexterm><primary>HylaFAX</primary></indexterm>
<indexterm><primary>FlexFAX</primary></indexterm>
<emphasis>faxaddmodem</emphasis> configures modems for use.  It walks you through the
configuration and installation of a new or existing modem.  Even if you have a
previous version of <emphasis>HylaFAX</emphasis> or <emphasis>FlexFAX</emphasis> installed, it's a good idea
to run <emphasis>faxaddmodem</emphasis> to update the configuration information for your modems
after installing a new distribution.
</para>

<para>You can <emphasis>faxaddmodem</emphasis> directly from the command line, but for a first-time
installation it's better to run it via <emphasis>faxsetup</emphasis>.
</para>

<para>The remainder of this section shows a sample configuration session and describes
the work done.  <emphasis>faxaddmodem</emphasis> displays the current or default setting for a
configuration parameter enclosed in ``<emphasis>[]</emphasis>''.  To accept the current
value, type <keycap>Enter</keycap>.
</para>

<para></para>
<programlisting>
# <command>faxsetup</command>

Setup program for HylaFAX (tm) v4.0pl1.

Created for i386-unknown-freebsd3.0 on Fri Jun  6 17:01:48 CST 1997.

Checking system for proper client configuration.
Checking system for proper server configuration.

Warning: /bin/vgetty does not exist or is not an executable program!

The file:

    /bin/vgetty

does not exist or this file is not an executable program.  The
HylaFAX software optionally uses this program and the fact that
it does not exist on the system is not a fatal error.  If the
program resides in a different location and you do not want to
install a symbolic link for /bin/vgetty that points to your program
then you must reconfigure and rebuild HylaFAX from source code.
</programlisting>

<para><indexterm><primary>vgetty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>vgetty</secondary></indexterm>
<indexterm><primary>getty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>getty</secondary></indexterm>
There is in fact no program called <emphasis>vgetty</emphasis>: if you want a <emphasis>getty</emphasis>
which understands voice calls as well, you should install it and create the
symbolic link <emphasis>vgetty</emphasis> to point to it.
</para>

<para><indexterm><primary>egetty</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>egetty</secondary></indexterm>
Next, <emphasis>faxsetup</emphasis> repeats this message almost exactly for <emphasis>egetty</emphasis>, an
external program which determines the type of the call.  Then it continues:
</para>
<programlisting>
Make /var/spool/fax/bin/ps2fax a link to /var/spool/fax/bin/ps2fax.gs.

You do not appear to have a "fax" user in the password file.
HylaFAX needs this to work properly, add it [yes]? <emphasis>ENTER</emphasis>
Added user "fax" to /etc/master.passwd.

Warning: No hylafax service entry found!

No entry was found for the hylafax service in the YP/NIS database
or in the /etc/services file.  The software should work properly
without one (except if you want to start hfaxd from inetd), but you
will see warning messages whenever you run a <emphasis>HylaFAX</emphasis> client
application.  If you want to manually add an entry the following
information should be used:

hylafax 4559/tcp                # HylaFAX client-server protocol

Should a hylafax entry be added to /etc/services [yes]?  <emphasis>ENTER</emphasis>

Warning: /etc/inetd.conf is setup wrong!

The /etc/inetd.conf file is set up to start /home/Book/FreeBSD
instead of /usr/local/sbin/hfaxd.  You will need to correct
this before client requests to submit jobs will be properly serviced.

Should the entry in /etc/inetd.conf be corrected [yes]?  <emphasis>ENTER</emphasis>
?

FATAL ERROR: Unable to correct HylaFAX entry in /etc/inetd.conf!

We were unable to edit the /etc/inetd.conf file to correct the entry
for starting up the <emphasis>HylaFAX</emphasis> client-server protocol process.  You
must manually correct this entry so that it reads:

hylafax stream  tcp     nowait  fax     /usr/local/sbin/hfaxd   hfaxd -I

and then rerun faxsetup.
</programlisting>

<para>What went wrong now?  I don't know either: it looks like a bug in
<emphasis>faxsetup</emphasis>.  The <emphasis>/etc/inetd.conf</emphasis> file looks just fine, but
<emphasis>faxsetup</emphasis> somehow thought it specified the home directory
(<emphasis>/home/Book/FreeBSD</emphasis> in this case).
</para>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
At this point, you have two choices: find out what is wrong with
<emphasis>faxsetup</emphasis> (and let Sam Leffler know when you fix it), or modify
<emphasis>/etc/inetd.conf</emphasis> manually, as suggested.  We'll take the latter approach.
After that, we restart <emphasis>faxsetup</emphasis>.  After the messages about the missing
<emphasis>getty</emphasis>s, we see:
</para>
<programlisting>
# <command>faxsetup</command>
Make /var/spool/fax/bin/ps2fax a link to /var/spool/fax/bin/ps2fax.gs.

Modem support functions written to /var/spool/fax/etc/setup.modem.
Configuration parameters written to /var/spool/fax/etc/setup.cache.

No scheduler config file exists, creating one from scratch.
</programlisting>

<para>The next few questions ask about phone numbers and prefixes.
</para>
<programlisting>
Country code [1]? 61					<emphasis>Australia</emphasis>
Area code []? 8						<emphasis>Adelaide area</emphasis>
Long distance dialing prefix [1]? <command>0</command>
International dialing prefix [011]? <command>0011</command>
Dial string rules file (relative to /var/spool/fax) ["etc/dialrules"]? <emphasis>ENTER</emphasis>
Tracing during normal server operation [1]? <emphasis>ENTER</emphasis>
Default tracing during send and receive sessions [0xffffffff]? <emphasis>ENTER</emphasis>
Continuation cover page (relative to /var/spool/fax) []? <emphasis>ENTER</emphasis>
Timeout when converting PostScript documents (secs) [180]? <emphasis>ENTER</emphasis>
Maximum number of concurrent jobs to a destination [1]? <emphasis>ENTER</emphasis>
Define a class of modems []? <emphasis>ENTER</emphasis>
Time of day restrictions for outbound jobs ["Any"]? <emphasis>ENTER</emphasis>
Pathname of destination controls file (relative to /var/spool/fax) []? <emphasis>ENTER</emphasis>
Timeout before purging a stale UUCP lock file (secs) [30]? <emphasis>ENTER</emphasis>
Max number of pages to permit in an outbound job [0xffffffff]? <emphasis>ENTER</emphasis>
Syslog facility name for ServerTracing messages [daemon]? <emphasis>ENTER</emphasis>

The non-default scheduler parameters are:

CountryCode:            61
AreaCode:               8
LongDistancePrefix:     0

Are these ok [yes]? <emphasis>ENTER</emphasis>

Creating new configuration file /var/spool/fax/etc/config...

Restarting HylaFAX server processes.
</programlisting>

<para>At this point, the <emphasis>HylaFAX</emphasis> d&aelig;gmon and any other processes have been restarted.
Next, you need to configure your modem.  If you're connecting to the standard
serial ports, use the devices <emphasis>/dev/cuaa0</emphasis> to <emphasis>/dev/cuaa3</emphasis>.  Enter the
just the filename part, since the script automatically adds the <emphasis>/dev/</emphasis> to
the beginning of the name:
</para>
<programlisting>
You do not appear to have any modems configured for use.  Modems are
configured for use with HylaFAX with the faxaddmodem(1M) command.
Do you want to run faxaddmodem to configure a modem [yes]? <emphasis>ENTER</emphasis>
Serial port that modem is connected to []? <command>cuaa0</command>
Hmm, there does not appear to be an fuser command on your machine.
This means that I am unable to insure that all processes using the
modem have been killed.  I will keep going, but beware that you may
have competition for the modem.

Ok, time to setup a configuration file for the modem.  The manual
page config(4F) may be useful during this process.  Also be aware
that at any time you can safely interrupt this procedure.

Reading scheduler config file /var/spool/fax/etc/config.

No existing configuration, let's do this from scratch.
</programlisting>

<para><indexterm><primary>/var/spool/fax/etc/config</primary></indexterm>
This claim is not quite correct: it refers only to the modem configuration file.
It does use the information in the configuration file
<emphasis>/var/spool/fax/etc/config</emphasis>, including the phone number information we added
above, and it uses it:
</para>
<programlisting>
Country code [61]? <emphasis>ENTER</emphasis>
Area code [8]? <emphasis>ENTER</emphasis>
Phone number of fax modem [+1.999.555.1212]? <command>+61-8-8388-8725</command>
</programlisting>

<para>This is the phone number of the modem, and is used to insert on the header line
of the fax.
</para>
<programlisting>
Local identification string (for TSI/CIG) ["NothingSetup"]? <command>LEMIS, Echunga</command>
</programlisting>

<para>The local identification string is passed to peer fax machines during
communication.  If it is not specified, or set to a null string, then <emphasis>HylaFAX</emphasis>
uses the canonical phone number of the fax modem instead.
</para>
<programlisting>
Long distance dialing prefix [0]? <emphasis>ENTER</emphasis>
International dialing prefix [0011]? <emphasis>ENTER</emphasis>
Dial string rules file (relative to /var/spool/fax) ["etc/dialrules"]? <emphasis>ENTER</emphasis>
Tracing during normal server operation [1]? <emphasis>ENTER</emphasis>
Tracing during send and receive sessions [11]? <emphasis>ENTER</emphasis>
Protection mode for received facsimile [0600]? <emphasis>ENTER</emphasis>
Protection mode for session logs [0600]? <emphasis>ENTER</emphasis>
Protection mode for cuaa0 [0660]? <emphasis>ENTER</emphasis>
Rings to wait before answering [1]? <emphasis>ENTER</emphasis>
Modem speaker volume [off]? <emphasis>ENTER</emphasis>
Command line arguments to getty program ["std.%s"]? <emphasis>ENTER</emphasis>
Pathname of TSI access control list file (relative to /var/spool/fax) [""]? <emphasis>ENTER</emphasis>
Pathname of Caller-ID access control list file (relative to /var/spool/fax) [""]? <emphasis>ENTER</emphasis>
Tag line font file (relative to /var/spool/fax) [etc/lutRS18.pcf]? <emphasis>ENTER</emphasis>
Tag line format string ["From %%l|%c|Page %%p of %%t"]? <emphasis>ENTER</emphasis>
Time before purging a stale UUCP lock file (secs) [30]? <emphasis>ENTER</emphasis>
Hold UUCP lockfile during inbound data calls [Yes]? <emphasis>ENTER</emphasis>
Hold UUCP lockfile during inbound voice calls [Yes]? <emphasis>ENTER</emphasis>
Percent good lines to accept during copy quality checking [95]? <emphasis>ENTER</emphasis>
Max consecutive bad lines to accept during copy quality checking [5]? <emphasis>ENTER</emphasis>
Max number of pages to accept in a received facsimile [25]? <emphasis>ENTER</emphasis>
Syslog facility name for ServerTracing messages [daemon]? <emphasis>ENTER</emphasis>
Set UID to 0 to manipulate CLOCAL [""]? <emphasis>ENTER</emphasis>

The non-default server configuration parameters are:

CountryCode:            61
AreaCode:               8
FAXNumber:              +61-8-8388-8725
LongDistancePrefix:     0
InternationalPrefix:    0011
DialStringRules:        "etc/dialrules"
SessionTracing:         11
DeviceMode:             0660
RingsBeforeAnswer:      1
SpeakerVolume:          off
GettyArgs:              "std.%s"
LocalIdentifier:        LEMIS, Echunga
TagLineFont:            etc/lutRS18.pcf
TagLineFormat:          "From %%l|%c|Page %%p of %%t"
MaxRecvPages:           25

Are these ok [yes]? <emphasis>ENTER</emphasis>
</programlisting>

<para>Some of the questions above merit more discussion:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>HylaFAX</primary></indexterm>
<emphasis>HylaFAX</emphasis> includes a trace facility.  We won't look at this in this book; check
the documentation supplied with <emphasis>HylaFAX</emphasis> for more detail.
</para>
</listitem>
<listitem>

<para>The default number of rings before answering is 1.  You might think that you
could speed things up further by setting this value to 0, but this will disable
answering altogether.  See page <xref linkend="CFBSD-auto-answer"/> for more details.
</para>
</listitem>
<listitem>

<para>The <emphasis>tag line</emphasis> is the line across the top of most faxes which gives
information on the date and origin of the fax.  <emphasis>HylaFAX</emphasis> supplies a number of
utilities to configure this line to your liking&mdash;see the documentation for
further information.
</para>
</listitem>
<listitem>

<para><indexterm><primary>UUCP</primary></indexterm>
By default, Hylafax uses the <emphasis>UUCP</emphasis> locking scheme to ensure that only one
process accesses the serial port at a time.  This is a good choice, since most
other programs, including just about every flavour of <emphasis>getty</emphasis> and
<emphasis>ppp</emphasis>, do so as well.  It doesn't mean that <emphasis>HylaFAX</emphasis> has anything to do
with UUCP except that they could conceivably both want to access the same serial
port.
</para>
</listitem>
<listitem>

<para>The <emphasis>percent good lines</emphasis> and <emphasis>maximum consecutive bad lines</emphasis> can be
set to control the minimum acceptable quality of a page when receiving a fax.
The term <emphasis>line</emphasis> applies to a line of data, about 1/50<emphasis>"</emphasis> in normal
mode, and 1/100<emphasis>"</emphasis> in fine mode.  The values given are probably the
minimum quality you should accept: 5 consecutive bad lines would make a line of
text almost unreadable.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>Testing the modem</title>

<para>The next step is to test the modem to determine its capabilities.  This carries
straight on from the previous section:
</para>
<programlisting>
Now we are going to probe the tty port to figure out the type
of modem that is attached.  This takes a few seconds, so be patient.
Note that if you do not have the modem cabled to the port, or the
modem is turned off, this may hang (just go and cable up the modem
or turn it on, or whatever).

Probing for best speed to talk to modem: 38400 OK.
[1]+  Terminated              ( trap 0 1 2 15; while true; do
    sleep 10; echo ""; echo "Hmm, something seems to be hung, check your modem eh?";
done )&amp;

This modem looks to have support for both Class 1 and 2;
how should it be configured [2]? <emphasis>ENTER</emphasis>

Hmm, this looks like a Class 2 modem.
Modem manufacturer is "ROCKWELL".
Modem model is "AC/V34".
DTE-DCE flow control scheme [default]? <emphasis>ENTER</emphasis>
</programlisting>

<para>The results you see above may look surprising.  In all probability, you don't
have a Rockwell modem, and the model number may also look completely different
from what is written on the modem.  In fact, the manufacturer and model stated
often refer to the modem chipset, and not the modem itself.
</para>
<programlisting>
Using prototype configuration file rc288dpi...

The modem configuration parameters are:

ModemAnswerFaxBeginCmd: "&lt;19200&gt;&lt;xon&gt;"
ModemDialCmd:           ATDT%s
ModemFlowControl:       rtscts
ModemHardFlowCmd:       AT&amp;K3
ModemNoFlowCmd:         AT&amp;K0
ModemRate:              38400
ModemRecvFillOrder:     MSB2LSB
ModemSendFillOrder:     LSB2MSB
ModemSetupAACmd:        AT+FAA=1
ModemSetupDCDCmd:       AT&amp;C1
ModemSetupDTRCmd:       AT&amp;D3
ModemSoftFlowCmd:       AT&amp;K4
Class2RecvDataTrigger:  "\022"

Are these ok [yes]? <emphasis>ENTER</emphasis>

Creating new configuration file /var/spool/fax/etc/config.cuaa0...
Creating fifo /var/spool/fax/FIFO.cuaa0 for faxgetty... done.
Done setting up the modem configuration.

Checking /var/spool/fax/etc/config for consistency...
\&amp;...everything looks ok; leaving existing file unchanged.

Don't forget to run faxmodem(1M) (if you have a send-only environment)
or configure init to run faxgetty on cuaa0.
Do you want to run faxaddmodem to configure another modem [yes]? <command>no</command>

You do not appear to be using faxgetty to notify the HylaFAX scheduler
about new modems and/or their status.  This means that you must use the
faxmodem program to inform the new faxq process about the modems you
want to have scheduled by HylaFAX.  Beware that if you have modems that
require non-default capabilities specified to faxmodem then you should
read faxmodem(1M) manual page and do this work yourself (since this
script is not intelligent enough to automatically figure out the modem
capabilities and supply the appropriate arguments).

Should I run faxmodem for each configured modem [yes]? <emphasis>ENTER</emphasis>
/usr/local/sbin/faxmodem cuaa0

Done verifying system setup.
</programlisting>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Starting HylaFAX</title>

<para><indexterm><primary>starting</primary><secondary>HylaFAX</secondary></indexterm>
<indexterm><primary>HylaFAX</primary><secondary>starting</secondary></indexterm>
When you configured <emphasis>HylaFAX</emphasis> in the previous section, you also started it, and
set it up to run automatically when the system is booted.  Normally, there's
nothing more you need to do.
</para>
<sect2>
<title>Checking fax system status</title>

<para><indexterm><primary>HylaFAX</primary><secondary>checking status</secondary></indexterm>
<indexterm><primary>faxstat</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>faxstat</secondary></indexterm>
You may have occasion to want to find out what the current status of the fax
system is.  You do this with <emphasis>faxstat</emphasis>.  Typically, you just enter the name:
</para>
<programlisting>
# <command>faxstat</command>
HylaFAX scheduler on freebie.example.org: Running
Modem cuaa0 (+61-8-8388-8725): Sending job 1
</programlisting>

<para></para>
</sect2>
<sect2>
<title>Restarting the <emphasis>hfaxd</emphasis> d&aelig;gmon</title>

<para>Sometimes you may find that the <emphasis>hfaxd</emphasis> d&aelig;gmon is not running, and it
can't be restarted.  You can restart it (as root) with the following:
</para>
<programlisting>
# <command>hfaxd -i hylafax</command>
</programlisting>

<para><indexterm><primary>syslogd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>syslogd</secondary></indexterm>
<indexterm><primary>/var/log/messages</primary></indexterm>
You will not get any messages, even if it dies: it logs its messages via
<emphasis>syslogd</emphasis>, and you will normally find them on the console or in the log file
<emphasis>/var/log/messages</emphasis>.
</para>
</sect2>
</sect1>
<sect1>
<title>Sending a fax</title>

<para><indexterm><primary>HylaFAX</primary><secondary>sending a fax</secondary></indexterm>
<indexterm><primary>fax</primary><secondary>sending</secondary></indexterm>
Finally your fax configuration is complete.  So how do you go about sending a
fax?
</para>

<para>The simple part is: the program is called <emphasis>sendfax</emphasis>.  Unfortunately, it
takes a plethora of parameters, so you'll probably want to write a small script
to take care of some of the aspects.  In this section, we'll look at the
information needed to complete a fax.
</para>

<para>Whenever you send a fax, whether with a computer or with an old-fashioned fax
machine, you need the following information:
</para>
<itemizedlist>
<listitem>

<para>The destination to which you want to send the fax.  Normally this is a phone
number, but <emphasis>HylaFAX</emphasis> gives you the opportunity to send faxes over the Internet.
We'll look at this below as well.
</para>
</listitem>
<listitem>

<para>The document or documents you want to send.  This seems straightforward enough,
but with a computer, you need to consider the format.  We'll look at this in
detail below.
</para>
</listitem>
<listitem>

<para><indexterm><primary>cover</primary><secondary>sheet</secondary></indexterm>
Possibly a <emphasis>fax cover sheet</emphasis>.  There are a number of ways to create a cover
sheet.  We'll look at some of them further down.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>The destination</title>

<para>If the destination is a phone number, you just need to specify it with the
<emphasis>-d</emphasis> option:
</para>
<programlisting>
$ <command>sendfax -d+49-6637-919122</command>
</programlisting>

<para>This will send a fax to the number specified, in this case an international
connection.
</para>
</sect2>
<sect2>
<title>The document</title>

<para>Faxes are transmitted in a special format which is not used anywhere else One of
<emphasis>HylaFAX</emphasis>'s functions is to convert documents into this format.  It recognizes a
number of other formats and performs the conversion automatically.
To send a document, you just specify the names of the document on the command
line.  For example, to send the documents <emphasis>logfile.txt</emphasis> and
<emphasis>example.ps</emphasis>, which are in plain ASCII text and PostScript respectively, to
the fax machine in the previous example, you could enter:
</para>
<programlisting>
$ <command>sendfax -d+49-6637-919122 logfile.txt example.ps</command>
</programlisting>

<para>This example will send a single fax containing both documents and a default
cover sheet.
</para>
</sect2>
<sect2>
<title>The cover sheet</title>

<para><indexterm><primary>HylaFAX</primary></indexterm>
<indexterm><primary>/usr/local/lib/fax/faxcover.ps</primary></indexterm>
<emphasis>HylaFAX</emphasis> supplies a default cover sheet,
<emphasis>/usr/local/lib/fax/faxcover.ps</emphasis>.  You will probably not want to use the
cover sheet in this form, since it includes a Silicon Graphics logo.  If you do,
however, you will need to fill out a number of fields:
</para>
<itemizedlist>
<listitem>

<para>To specify the name of the recipient, include it in the dialling information
supplied to the <emphasis>-d</emphasis> option, with an <emphasis>@</emphasis> sign in between:
</para>
<programlisting>
$ <command>sendfax -d"Mister Never There@+49-6637-919122" wakeupcall.ps</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>The fax number.  This is done automatically from the <emphasis>-d</emphasis> option.
</para>
</listitem>
<listitem>

<para>The destination company name.  Set this with the <emphasis>-x</emphasis> option:
</para>
<programlisting>
$ <command>sendfax -d"Mister Never There@+49-6637-919122" -x "Yoyodyne Cosmetics" \e
&gt; wakeupcall.ps</command>
</programlisting>

<para>This line has been continued over two lines.  The second line has a different
prompt.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/passwd</primary></indexterm>
Optionally, you may specify a name for the ``from'' line with the <emphasis>-f</emphasis>
option.  If you don't specify one, it will be generated automatically from your
user entry in <emphasis>/etc/passwd</emphasis> (the so-called GECOS field, which is also used
for mail).  In this example, we'll leave out this option, as people will
normally do.
</para>
</listitem>
<listitem>

<para>You may also specify a ``regarding'' field, which is in fact abbreviated to
``Re'', with the <emphasis>-r</emphasis> option.  For example, you might write:
</para>
<programlisting>
$ <command>sendfax -d"Mister Never There@+49-6637-919122" -x "Yoyodyne Cosmetics" \e
&gt; </command><command>-r "Your voice mail yesterday" wakeupcall.ps</command>
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Finally, if you haven't had enough already, you can send up to five lines of
comments.  We might write:
</para>
<programlisting>
$ <command>sendfax -d"Mister Never There@+49-6637-919122" -x "Yoyodyne Cosmetics" \e
&gt; </command><command>-r "Your voice mail yesterday" -c "I've been trying to call you for the
last 8 hours.  Where have you been?" wakeupcall.ps</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para>The examples above will generate the following line on the cover sheet:
</para>

<para>tab(#) ;
r l .
To:#Mister Never There
Fax Number:#+49-6637-919122
Company:#Yoyodyne cosmetics
From:#Greg Lehey
Re:#Your voice mail yesterday
Today's date:#Tue Jun 10 1997 11:50:55 CST

</tbody></tgroup></table>
# of pages to follow this sheet:  3
Comments: I've been trying to call you for the
	  last 8 hours.  Where have you been?
</para>

<para>You'll notice a couple of fields that get filled in automatically.  The date and
the ``number of pages'' field are determined automatically.  Unfortunately, the
``number of pages'' field doesn't include the cover sheet, which is not normal
practice.
</para>
</sect2>
<sect2>
<title>How to omit the cover sheet</title>

<para>Of course, a cover sheet may not be for you.  It costs time and money to
transmit, especially for a non-local call.  Alternatively, you may include a
cover sheet along with the document.  In this case, you can omit the automatic
cover sheet generation by using the <emphasis>-n</emphasis> option to <emphasis>sendfax</emphasis>:
</para>
<programlisting>
$ <command>sendfax -n -d5551212 enquiry.ps</command>
</programlisting>

<para><!--  XXX what the &amp;*^&amp;*^*&amp;? -->
This will send just the document <emphasis>enquiry.ps</emphasis> to the specified number.
</para>
</sect2>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: 3rd edition -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  -->
<chapter id="CFBSD-nchmicronet"><title>Connecting to non-IP networks</title>

<para><indexterm><primary>SMB</primary></indexterm>
<indexterm><primary>System</primary><secondary>Message Block</secondary></indexterm>
<indexterm><primary>LanManager</primary></indexterm>
<indexterm><primary>NetBIOS</primary></indexterm>
<indexterm><primary>IPX</primary></indexterm>
BSD UNIX and the Internet grew up together, but it took other vendors a long
time to accept the Internet Protocols.  In that time, a number of other
protocols arose.  We've already mentioned X.25 and SNA, currently both not
supported by FreeBSD.  The protocols that grew up in the DOS world are more
important: <emphasis>SMB</emphasis> (<emphasis>System Message Block</emphasis>), which is often also known
by names like <emphasis>LanManager</emphasis> and <emphasis>NetBIOS</emphasis>, and Novell's <emphasis>IPX</emphasis>.
</para>

<para><indexterm><primary>IPXrouted</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>IPXrouted</secondary></indexterm>
<indexterm><primary>samba</primary></indexterm>
IPX support is relatively rudimentary.  FreeBSD includes an IPX routing dæmon,
<emphasis>IPXrouted</emphasis>.  See the man page <emphasis>IPXrouted(8)</emphasis> for further information.
In the rest of this chapter we'll look at a more extensive networking
implementation, <emphasis>samba</emphasis>.
</para>
<sect1>
<title>Samba</title>

<para><indexterm><primary>/usr/ports/net/samba</primary></indexterm>
<emphasis>Samba</emphasis> is a collection of software components which implement the SMB
protocol over TCP/IP.  You can use it to interface with Microsoft environments
such as Windows for Workgroups, Windows 95 and Windows NT.  It is part of the
Ports Collection, in <emphasis>/usr/ports/net/samba</emphasis>, and you can get more
information, including support, from <emphasis>http://samba.anu.edu.au</emphasis>.  There's
also a mailing list&mdash;see the web page for details.
</para>

<para><emphasis>Samba</emphasis> consists of the following components:
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>smbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>smbd</secondary></indexterm>
<emphasis>smbd</emphasis>, a dæmon which provides file and print services to SMB clients.
</para>
</listitem>
<listitem>

<para><indexterm><primary>nmbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>nmbd</secondary></indexterm>
<emphasis>nmbd</emphasis> provides name services for NetBIOS.
</para>
</listitem>
<listitem>

<para><indexterm><primary>smbclient</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbclient</secondary></indexterm>
<emphasis>smbclient</emphasis> is a simple ftp-like client which is useful for accessing SMB
shared files on other servers, such as Windows for Workgroups.  You can also use
it to allow a UNIX box to print to a printer attached to any SMB server.
</para>
</listitem>
<listitem>

<para><indexterm><primary>testparm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>testparm</secondary></indexterm>
<indexterm><primary>samba</primary></indexterm>
<indexterm><primary>smb.conf</primary></indexterm>
<emphasis>testparm</emphasis> tests the <emphasis>samba</emphasis> configuration file, <emphasis>smb.conf</emphasis>.
</para>
</listitem>
<listitem>

<para><indexterm><primary>smbstatus</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbstatus</secondary></indexterm>
<emphasis>smbstatus</emphasis> tells you who is using the <emphasis>smbd</emphasis> dæmon.
</para>
</listitem>
</itemizedlist>

<para></para>
<sect2>
<title>Installing the <emphasis>samba</emphasis> software</title>

<para><indexterm><primary>installing</primary><secondary>samba</secondary></indexterm>
<indexterm><primary>samba</primary><secondary>installing</secondary></indexterm>
Install <emphasis>samba</emphasis> from the port:
</para>
<programlisting>
# <command>cd /usr/ports/net/samba</command>
# <command>make install</command>
</programlisting>

<para><indexterm><primary>addtosmbpass</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>addtosmbpass</secondary></indexterm>
<indexterm><primary>nmblookup</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>nmblookup</secondary></indexterm>
<indexterm><primary>smbclient</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbclient</secondary></indexterm>
<indexterm><primary>smbpasswd</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbpasswd</secondary></indexterm>
<indexterm><primary>smbrun</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbrun</secondary></indexterm>
<indexterm><primary>smbstatus</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbstatus</secondary></indexterm>
<indexterm><primary>smbtar</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbtar</secondary></indexterm>
<indexterm><primary>testparm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>testparm</secondary></indexterm>
<indexterm><primary>testprns</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>testprns</secondary></indexterm>
<indexterm><primary>smbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>smbd</secondary></indexterm>
<indexterm><primary>nmbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>nmbd</secondary></indexterm>
This operation installs the binaries <emphasis>addtosmbpass</emphasis>, <emphasis>nmblookup</emphasis>,
<emphasis>smbclient</emphasis>, <emphasis>smbpasswd</emphasis>, <emphasis>smbrun</emphasis>, <emphasis>smbstatus</emphasis>, <emphasis>smbtar</emphasis>,
<emphasis>testparm</emphasis> and <emphasis>testprns</emphasis> in <emphasis>/usr/local/bin</emphasis>, the standard
location for additional binaries on a BSD system, and the dæmons <emphasis>smbd</emphasis>
and <emphasis>nmbd</emphasis> in <emphasis>/usr/local/sbin</emphasis>.  These are appropriate for FreeBSD,
but they are <emphasis>not</emphasis> the locations that the Samba documentation recommends.
It also installs the man pages in <emphasis>/usr/local/man</emphasis>, where the <emphasis>man</emphasis>
program can find them.  That is all that the port installs.  In particular, it
does not install a sample configuration file.  We'll see how to do that further
down.
</para>

<para>There are a number of security implications for the server, since it handles
sensitive data.  To maintain an adequate security level,
</para>
<itemizedlist>
<listitem>

<para>Ensure that the software is readable by all and writeable only by <emphasis>root</emphasis>.
<emphasis>smbd</emphasis> should be executable by all.  Don't make it <emphasis>setuid</emphasis>.  If an
individual user runs it, it runs with their permissions.
</para>
</listitem>
<listitem>

<para>Put server log files in a directory readable and writable only by <emphasis>root</emphasis>,
since they may contain sensitive information.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/local/etc/smb.conf</primary></indexterm>
Put the <emphasis>smbd</emphasis> configuration file in <emphasis>/usr/local/etc/smb.conf</emphasis>, and
ensure that it is secured so that only <emphasis>root</emphasis> can change it.
</para>

<para>The Samba documentation recommends setting the directory readable and writeable
only by <emphasis>root</emphasis>.  Depending on what other configuration files you have in
<emphasis>/etc/local/etc</emphasis>, this could cause problems.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title><emphasis>smbd</emphasis> and <emphasis>nmbd</emphasis>: the Samba dæmons</title>

<para><indexterm><primary>samba</primary><secondary>dæmons</secondary></indexterm>
<indexterm><primary>dæmons</primary><secondary>samba</secondary></indexterm>
<indexterm><primary>nmbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>nmbd</secondary></indexterm>
<indexterm><primary>smbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>smbd</secondary></indexterm>
The main component of Samba is <emphasis>smbd</emphasis>, the SMB dæmon.  In addition, you need
the Samba name dæmon, <emphasis>nmbd</emphasis>, which supplies NetBIOS name services for
Samba.  <emphasis>smbd</emphasis> requires a configuration file, which we'll look at below,
while you don't normally need one for <emphasis>nmbd</emphasis>.  By default, <emphasis>nmbd</emphasis> maps
DNS host names (without the domain part) to NetBIOS names, though it can perform
other functions if you need them.  In this chapter we'll assume the default
behaviour.  See the man page <emphasis>nmbd(8)</emphasis> for other possibilities.
</para>

<para><indexterm><primary>/etc/rc.local</primary></indexterm>
<indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
You have two choices of how to run <emphasis>smbd</emphasis> and <emphasis>nmbd</emphasis>: you can start
them from <emphasis>/etc/rc.local</emphasis> at boot time, or you can let <emphasis>inetd</emphasis> start
them.
</para>

<para>To start <emphasis>smbd</emphasis> at boot time, put the following lines (shown in <command>bold
face</command>) in <emphasis>/etc/rc.local</emphasis>:
</para>
<programlisting>
echo -n 'starting local daemons:'
# put your local stuff here
<command>echo " smbd" &amp;&amp; /usr/local/sbin/smbd -D</command>
<command>echo " nmbd" &amp;&amp; /usr/local/sbin/nmbd -D</command>
</programlisting>

<para>The option <emphasis>-D</emphasis> tells the dæmons to run as a dæmon; otherwise they expect
to have a connection and exit when the connection closes.
</para>

<para><indexterm><primary>/usr/local/etc/smb.conf</primary></indexterm>
The man page for <emphasis>smbd</emphasis> gives a number of parameters to specify the
configuration file and the log file.  As long as you stick to the specified file
names, you shouldn't need this: by default, <emphasis>smbd</emphasis> looks for the
configuration file at <emphasis>/usr/local/etc/smb.conf</emphasis>, and this file contains the
names of the other files.
</para>
<sect2>
<title>Running the dæmons from <emphasis>inetd</emphasis> </title>

<para><indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
To run the dæmons from <emphasis>inetd</emphasis>,
</para>
<itemizedlist>
<listitem>

<para><indexterm><primary>/etc/inetd.conf</primary></indexterm>
Edit <emphasis>/etc/inetd.conf</emphasis>.  You should find the following two lines towards the
bottom of the file with a <emphasis>#</emphasis> in front.  Remove the <emphasis>#</emphasis> to show the
lines as they are here.  If your <emphasis>inetd.conf</emphasis> doesn't contain these lines,
add them.
</para>
<programlisting>
netbios-ssn	stream	tcp	nowait	root	/usr/local/sbin/smbd	smbd
netbios-ns	dgram	udp	wait	root	/usr/local/sbin/nmbd	nmbd
</programlisting>

<para></para>
</listitem>
<listitem>

<para>Either reboot, or cause <emphasis>inetd</emphasis> to re-read its configuration file:
</para>
<programlisting>
# <command>ps waux | grep inetd</emphasis>				<emphasis>find the PID of inetd (2nd column)</command>
root    7818  3.1  0.7   252  644  p6  S+   10:56AM   0:00.03 grep inetd
root     118  0.0  0.1   200   92  ??  Is   Thu10AM   0:01.78 inetd
# <command>kill -1 118</emphasis>					<emphasis>send a SIGHUP</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>The configuration file</title>

<para><indexterm><primary>samba</primary><secondary>configuration file</secondary></indexterm>
<indexterm><primary>configuration</primary><secondary>file</secondary></indexterm>
The Samba configuration file describes the services that the dæmon offers.
These are primarily printer and file access services.
</para>

<para>The configuration file is divided into sections identified by a label in
brackets.  Most labels correspond to a service, but there are also three special
labels: <emphasis>[global]</emphasis>, <emphasis>[homes]</emphasis> and <emphasis>[printers]</emphasis>, all of which
are optional.  We'll look at them in the following sections.
</para>
<sect2>
<title>The <emphasis>[global]</emphasis> section</title>

<para>As the name suggests, the <emphasis>[global]</emphasis> section defines parameters which
either apply to the server as a whole, or which are defaults for the other
services.  The interesting ones for us are:
</para>
<itemizedlist>
<listitem>

<para><emphasis>socket options</emphasis> is hardly mentioned in the documentation, but it's very
important: many Microsoft implementations of TCP/IP are inefficient and
establish a new TCP more often than necessary.  Select the socket options
<emphasis>TCP_NODELAY</emphasis> and <emphasis>IPTOS_LOWDELAY</emphasis>, which can speed up the response
time of such applications by over 95%.
</para>
</listitem>
<listitem>

<para><emphasis>printing</emphasis> describes the kind of printing services the system offers.
Choose <emphasis>bsd</emphasis>, the default.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/etc/printcap</primary></indexterm>
<emphasis>printcap name</emphasis> is the name of the <emphasis>printcap</emphasis> file.  Choose the
default <emphasis>/etc/printcap</emphasis>.
</para>
</listitem>
<listitem>

<para><emphasis>guest account</emphasis> is the account (in UNIX terms: user ID) to use if no
password is supplied.  You probably want to define a guest account, since many
Microsoft clients don't use user IDs.  Ensure that the privileges are set
appropriately.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/usr/local/samba/var/locks</primary></indexterm>
<emphasis>lock directory</emphasis> is a directory in which Samba places file locks for
concurrent access.  If you have concurrent write access to files, you should
enable this option: by default it is commented out.  The default directory name
is <emphasis>/usr/local/samba/var/locks</emphasis>, which doesn't get created automatically.
If you use this option, create the directory:
</para>
<programlisting>
# <command>mkdir -p /usr/local/samba/var/locks</command>
</programlisting>

<para></para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>The <emphasis>[homes]</emphasis> section</title>

<para>The <emphasis>[homes]</emphasis> section allows clients to connect to their home directories
without needing an entry in the configuration file.  If this section is present,
and an incoming request specifies a service which is not defined in the
configuration file, Samba checks if it matches a user ID.  If it does, and if
the specified password is correct, Samba creates a service which supplies the
user's home directory.
</para>

<para>The following options are of interest in the <emphasis>[homes]</emphasis> section:
</para>
<itemizedlist>
<listitem>

<para><emphasis>writeable</emphasis> can be <emphasis>yes</emphasis> or <emphasis>no</emphasis>, and specifies whether the
user is allowed to write to the directory.
</para>
</listitem>
<listitem>

<para><emphasis>create mode</emphasis> specifies the permission bits (in octal) to set for files
which are created.
</para>
</listitem>
<listitem>

<para><emphasis>public</emphasis> specifies whether other users are allowed access to this
directory.  In combination with a <emphasis>guest</emphasis> user, this can be a serious
security liability.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
<sect2>
<title>The <emphasis>[printers]</emphasis> section</title>

<para>The <emphasis>[printers]</emphasis> section describes printing services.  It doesn't need the
names of the printers: if it doesn't find the specified service, either in the
configuration file or in the <emphasis>[homes]</emphasis> section, if it exists, it looks for
them in the <emphasis>/etc/printcap</emphasis> file.
</para>

<para><indexterm><primary>smbd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>smbd</secondary></indexterm>
You probably don't want to change anything in this section.  In particular,
don't change the <emphasis>printable</emphasis> option.  If you do, <emphasis>smbd</emphasis> will refuse
to run.
</para>
</sect2>
<sect2>
<title>Other sections: service descriptions</title>

<para>Samba takes any section name except for <emphasis>[global]</emphasis>, <emphasis>[homes]</emphasis> or
<emphasis>[printers]</emphasis> as the definition of a service.  A typical example might be:
</para>
<programlisting>
[ftp]
  comment = ftp server file area
  path = /var/spool/ftp/pub
  read only = yes
  public = yes
  write list = grog
</programlisting>

<para>This entry defines access to the anonymous <emphasis>ftp</emphasis> section.  Anybody can
read it, but only user <emphasis>grog</emphasis> can write to it.
</para>
</sect2>
<sect2>
<title>Creating the configuration file</title>

<para>The port does not currently install a configuration file, but there is a sample
file in the port.  To install it, perform the following steps manually:
</para>
<itemizedlist>
<listitem>

<para>Copy the sample configuration file to the correct location:
</para>
<programlisting>
# <command>cp /usr/ports/net/samba/work/samba-1.9.16p11/examples/simple/smb.conf \e
&gt; /usr/local/etc</command>
</programlisting>

<para>Sorry about the name of the directory, especially as it will change in the next
version of Samba: the section <emphasis>samba-1.9.16p11</emphasis> will change to reflect the
new version number.  Note also that this is <emphasis>not</emphasis> the location mentioned
in the Samba documentation.
</para>
</listitem>
<listitem>

<para><indexterm><primary>/var/log/samba</primary></indexterm>
Create a directory <emphasis>/var/log/samba</emphasis> readable and writeable only by
<emphasis>root</emphasis>.  This is for the log files, which may contain confidential data,
so you shouldn't put them in the publicly readable <emphasis>/var/log</emphasis> directory.
</para>
</listitem>
</itemizedlist>

<para></para>

<para>Next, edit the configuration file to suit FreeBSD and your personal needs.
There's also a fair amount of commentary in the file.  Consider the following:
</para>
<itemizedlist>
<listitem>

<para>Either create a user <emphasis>pcguest</emphasis> (see <xref linkend="CFBSD-chunixref"/>, page <xref linkend="CFBSD-adding-user"/>),
or change the entry <emphasis>guest_account</emphasis> to point to an existing account.
</para>
</listitem>
<listitem>

<para>Change the entry <emphasis>log file</emphasis> in the <emphasis>[global]</emphasis> section to point to
<emphasis>/var/log/samba/log.%m</emphasis>.
</para>
</listitem>
</itemizedlist>

<para></para>
</sect2>
</sect1>
<sect1>
<title>Testing the installation</title>

<para><indexterm><primary>samba</primary><secondary>testing</secondary></indexterm>
<indexterm><primary>testparm</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>testparm</secondary></indexterm>
Once you have performed the steps described above, you can proceed to test the
installation.  First, run <emphasis>testparm</emphasis> to check the correctness of the
configuration file:
</para>
<programlisting>
$ <command>testparm</command>
Load smb config files from /usr/local/etc/smb.conf
Processing section "[homes]"
Processing section "[printers]"
No path in service printers - using /tmp
Processing section "[tmp]"
Processing section "[ftp]"
Processing section "[grog]"
Loaded services file OK.
Press enter to see a dump of your service definitions		<emphasis>Press</emphasis> <keycap>Enter<emphasis>

Global parameters:
<emphasis>\&amp;lots of information which could be of use in debugging</emphasis>

Service parameters [homes]:
        comment: Home Directories
        browseable: No
        read only: No
        create mask: 0750

Service parameters [printers]:
        comment: All Printers
        browseable: No
        path: /tmp
        create mask: 0700
        print ok: Yes

Service parameters [tmp]:
        comment: Temporary file space
        path: /usr/tmp
        read only: No
        create mask: 01775
        guest ok: Yes

Service parameters [ftp]:
        comment: ftp server file area
        path: /var/spool/ftp/pub
        write list: grog
        guest ok: Yes

Service parameters [lp]:
        comment: local LaserJet 6MP printer
        path: /tmp
        create mask: 0700
        print ok: Yes
        printer: lp

Service parameters [IPC$]:
        comment: IPC Service (Samba 1.9.16p11)
        path: /tmp
        status: No
        guest ok: Yes
$
</emphasis></keycap></programlisting>

<para>As you see, <emphasis>testparm</emphasis> spells out all the parameters which have been
created, whether explicitly or by default.  If you run into problems, this is
the first place to which to return.
</para>

<para><indexterm><primary>smbclient</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbclient</secondary></indexterm>
<indexterm><primary>inetd</primary><secondary>dæmon</secondary></indexterm>
<indexterm><primary>dæmon</primary><secondary>inetd</secondary></indexterm>
Next, test the functionality with <emphasis>smbclient</emphasis>.  If you're running the
servers as dæmons, start them now.  If you're starting them from <emphasis>inetd</emphasis>,
you don't need to do anything.
</para>

<para><indexterm><primary>freebie</primary></indexterm>
<anchor id="CFBSD-multibackslash"/>
Samba services are specified in Microsoft format:
<emphasis>\e\e</emphasis><emphasis>system</emphasis><emphasis>\e</emphasis><emphasis>service</emphasis>.  To make this worse, UNIX
interprets the <emphasis>\e</emphasis> character specially, so you need to repeat the
character.  For example, to access the <emphasis>ftp</emphasis> service on <emphasis>freebie</emphasis>, you
must enter <emphasis>\e\e\e\efreebie\e\eftp</emphasis>.  To test, start <emphasis>smbclient</emphasis>
from another system:
</para>
<programlisting>
$ <command>smbclient \e\e\e\efreebie\e\eftp</command>
Added interface ip=223.147.37.4 bcast=223.147.37.4 nmask=255.255.255.255
Server time is Thu Oct 16 12:36:13 1997
Timezone is UTC+9.5
Password:					<emphasis>leave empty: it's a public service</emphasis>
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 1.9.16p11]
smb: \e&gt; </emphasis><command>ls</command>				<emphasis>list the files
  cfbsd                               D         0  Thu Oct 16 10:57:28 1997
  elm.irix5.gz                        A    184318  Fri Jan 31 04:40:25 1997
  muscan.tar.gz                             53812  Tue Jul 29 12:18:25 1997
  scan.tar.gz                               45418  Tue Jul 29 12:18:55 1997
  pppd                               AR     94208  Fri Sep 19 12:58:38 1997
  libc.so.3.0.gz                      R    198583  Tue May 20 20:00:22 1997
  fvwm-1.23b-core.tar.gz                   212920  Sat Sep 13 18:55:48 1997
  fvwm-1.23b-icons.tar.gz                   17881  Sat Sep 13 18:55:50 1997
  fvwm-1.23b-modules.tar.gz                158579  Sat Sep 13 18:55:55 1997
  ppp-chapter                         D         0  Thu Oct  9 16:08:23 1997
  mail.local                         AR     12288  Fri Oct  3 14:36:29 1997
  xterm                               R    151552  Thu Aug  7 20:55:54 1997

                64056 blocks of size 32768. 18093 blocks available
smb: \e&gt;
</programlisting>

<para>If you get this far, Samba is working.  The next step is to attach to the
services from the Microsoft machines.  That's not a topic for this book.  Note,
however, that Samba only works with TCP/IP transport, not with NetBEUI.
</para>
</sect1>
<sect1>
<title>Displaying Samba status</title>

<para><indexterm><primary>samba</primary><secondary>displaying status</secondary></indexterm>
<indexterm><primary>smbstatus</primary><secondary>command</secondary></indexterm>
<indexterm><primary>command</primary><secondary>smbstatus</secondary></indexterm>
You can display the status of Samba connections with <emphasis>smbstatus</emphasis>.  For example,
</para>
<programlisting>
$ <command>smbstatus</command>

Samba version 1.9.16p11
Service      uid      gid      pid     machine
----------------------------------------------
ftp          guest    guest    17820   wait    (223.147.37.4) Thu Oct 16 12:36:17 1997

No locked files
</programlisting>

<para></para>
</sect1>
</chapter>
<!--  This file is in -*- sgml-fill -*- mode -->
<!--  STATUS: unstarted -->
<!--  $Id: sample.sgml,v 1.1.1.1 2001-12-16 00:34:09 root Exp $ -->
<!--  $Log: not supported by cvs2svn $
<!--  Revision 1.5  2001/12/15 23:28:13  mikal
<!--  Mikal: Released to Greg and Andy as 0.3
<!-- -->
<!--  Revision 1.3  1997/10/04 04:47:08  grog -->
<!--  Checkin 4 October -->
<!--  -->
<!--  Revision 1.2  1997/09/15 01:53:20  grog -->
<!--  Checkpoint 16 September -->
<!--  -->
<!--  Revision 1.1  1997/09/03 01:04:41  grog -->
<!--  Initial revision -->
<!--  -->
<!--  Revision 1.1  1997/09/03 00:45:10  grog -->
<!--  Initial revision -->
<!--  -->
<!--  -->
<chapter id="CFBSD-nchmobile"><title>On the road with FreeBSD</title>

<para></para>
</sect1>
</chapter>
</book>


<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/xsl" href="C:\Documents and Settings\Administrator\My Documents\Articles\1 - Templates\dw-document-html-2.1.xsl"?>
<dw-document xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\Administrator\My Documents\Articles\1 - Templates\dw-document-2.1.xsd">

<!-- SKILL LEVEL 
If known, specify the (skill) level, 1 to 5 -->
<dw-article toc="auto" ratings="auto" level="1" localsite="worldwide" related_contents="auto">
<id domino-uid=""/>

<todo>
<!-- META DATA 
Enter unique keywords for this article in the content field. -->
<meta name="keywords" content="Unique keywords for your article go here.  Case doesn't matter; no need to include both upper and lower case for same item.  Separate keywords with commas."/>
<!-- Fill in or leave blank for production to fill in.  -->
<meta name="lastupdate" content="2003mmdd your-initials"/>

<!-- ZONE  
Fill in or leave blank for production to fill in.  -->
<zone name="linux"/>

<!-- TITLE
If this article belongs to a column or a series of articles, enter the column name or series title on the seriestitle tag.  Enter the article title on the title tag.  Enter the subtitle on the subtitle tag. -->
<seriestitle></seriestitle>
<title>Command line imaging tools</title>
<subtitle></subtitle>
<!--  End TITLE -->

<!-- Ignore these lines. -->
<!-- <forumurl url=""/> -->
<!-- <zip url=""/> -->
<!-- <pdf size="" url=""/> -->

<!-- AUTHOR INFO
Create an author tag for each author. Provide author's company name, e-mail address, job title, name, and brief biography. Bio should convey relevant expertise or qualifications to write this article. -->
<author company="TOWER Software" email="mikal@stillhq.com" jobtitle="Senior Software Engineer" name="Michael Still">
<bio>Michael has been working in the image processing field for several years, including a couple of years managing and developing large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as a bunch of other Open Source code.</bio></author>
<!--  End AUTHOR -->

<!-- DATE INFO
Fill in or leave blank for production to fill in.-->
<date month="5" day="15" year="2003"/>

<todo>
<!-- ABSTRACT 
Enter a brief summary of the article. Do not include any line breaks in the content. Do not worry about providing a "miniabstract."  Production will take care of that if it's necessary. -->
<abstract miniabstract="">Your article summary (3 to 7 sentences) goes here. Highlight the main points of the article or the task the developer will be able to do after reading the article. Put the primary points and key phrases close to the beginning of the abstract, because the abstract may be truncated in search results. Avoid line breaks in the abstract, please.</abstract>

<!-- Ignore these lines. -->
<column-info col-name="" col-icon=""/>
<docbody>

<!-- BEGIN THE BODY OF THE ARTICLE -->

<!-- INTRODUCTORY PARAGRAPHS
Every paragraph needs a <p> and </p>. -->
<p>In previous articles, we've discussed imaging coding using libtiff. This article has a different focus, it discusses how to perform image manipulation using command line tools. This is something I do personally quite often, especially since I have picked up a couple of digital cameras, and now have to manage a library of several thousand happy snaps. It's an especially attractive option when you only want to perform a manipulation once or twice, and don't mind if it takes a little longer than it absolutely has to.</p>

<p>This article takes the form of discussing specific problems as examples, but the concepts should be applicable to other problem spaces as well.</p>

<p>It should be noted that there are many ways to do the things discussed in this article. I will only discuss the methods I use, and know work for me. That doesn't mean the other tools out there are broken, it just means that I'm happy with what I am using now.</p>

<todo>
<p>Most of the command line tools discussed in this article are part of the excellent imagemagick suite, which is available from www.imagemagick.org for free.</p>

<heading refname="" type="major" toc="yes" name="" alttoc="">Generating thumbnails</heading>
<p>The first thing I needed to do with my picture collection was to generate thumbnails. I also wanted to reduce the size of the images for the website version, as many people don't really want to see a 1920 by 1440 picture of my sons.</p>

<p>The tool I use to do this is called <i>convert</i>, which is part of the imagemagick suite. <i>Convert</i> is really cool. It doesn't just do image resizing. It also antialiases, averages a set of images, blurs, converts between image formats, crops, despeckles, dithers, draw borderss, flips, joins, resamples, resizes, and much more. Checkout the man page for more information on it's various command line options. Many of the more visually interesting effects offered by <i>convert</i> are also discussed later in this article.</p>

<p>Let's assume I want to make a thumbnail of this rather nice image of a rose:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 1. A picture of a rose</heading>
<img src="rose.jpg" width="640" height="480" alt="A picture of a rose"/>
</figure>

<p>To resize the image with convert, just use the -sample command line option. For example, let's say that I want thumbnails to be 80x40 pixels. The command line would be:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 1. Create a thumbnail with a fixed size</heading>
<code type="section">
convert -sample 80x40 input.jpg output.jpg
</code>

<p>This produces a thumbnail which looks like:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 2. A first attempt at a thumbnail</heading>
<img src="convert-sample-8040.jpg" width="80" height="40" alt="A thumbnail of a rose"/>
</figure>

<todo>
<p>It looks a little like 8040 has had it's aspect ratio saved. I need to confirm this.  If you want to maintain the aspect ratio of the image, then you can use percentages, such as:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 2. Create a thumbnail which is a percentage of the old size</heading>
<code type="section">
convert -sample 25%x25% input.jpg output.jpg
</code>

<p>Now we have a thumbnail which looks like:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 3. A second attempt at a thumbnail</heading>
<img src="convert-sample-25pct.jpg" width="160" height="120" alt="A thumbnail of a rose"/>
</figure>

<p>This can be used on the command line to generate thumbnails for images within a directory. Whilst this article isn't about shell scripting, I'll quickly show you an example of how to generate a thumbnail of each JPEG in the current directory.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Thumbnailing all the JPEGs in the current directory</heading>
<code type="section">
for img in `ls *.jpg`
do
  convert -sample 25%x25% $img thumb-$img
done
</code>

<p>This will produce a series of thumbnails 25% the size of the real image, with a filename which is the name of the JPEG file with a <i>thumb-</i> prepended.</p>














<heading refname="" type="major" toc="yes" name="" alttoc="">Getting information about an image file</heading>

<p>Another example of something which people commonly need to do is to determine the dimensions of an image file. This might be in order to determine how big to make the thumbnail from the previous example, or any other reason you can think of.</p>

<p>Many imaging libraries come with excellent tools for this sort of purpose. For example, libtiff ships with <i>tiffinfo</i>, which display the following sort of information about TIFF files:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 3. An example usage of tiffinfo</heading>
<code type="section">
deathstar:/home/mikal# tiffinfo output.tif
TIFF Directory at offset 0x146
  Image Width: 352 Image Length: 288
  Bits/Sample: 8
  Compression Scheme: Deflate
  Photometric Interpretation: RGB color
  Samples/Pixel: 3
  Planar Configuration: single image plane
</code>

<p>This isn't an exhaustive example of how to use <i>tiffinfo</i>, but you can see that it returns useful information such as the size of the image, the pixel depth (a combination of the number of bits per sample, and the number of samples per pizel), and the compression scheme used.</p>

<p>Similarly, there is a <i>pnginfo</i> command which returns similar information for PNG files:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 4. An example usage of pnginfo</heading>
<code type="section">
deathstar:/home/mikal# pnginfo sample.png 
sample.png...
  Image Width: 640 Image Length: 480
  Bitdepth (Bits/Sample): 8
  Channels (Samples/Pixel): 3
  Pixel depth (Pixel Depth): 24
  Colour Type (Photometric Interpretation): RGB 
  Image filter: Single row per byte filter 
  Interlacing: No interlacing 
  Compression Scheme: Deflate method 8, 32k window
  Resolution: 0, 0 (unit unknown)
  FillOrder: msb-to-lsb
  Byte Order: Network (Big Endian)
  Number of text strings: 0 of 0
</code>

<sidebar>
<heading refname="" type="sidebar" toc="no" name="" alttoc="">pnginfo?</heading>
<p>I had been a user of libtiff for quite some time when I started using PNG. At the time, there was no <i>tiffinfo</i> equivalent for PNG files, which is why I wrote <i>pnginfo</i>. <i>pnginfo</i> can be downloaded from the URL at the end of this article.</p> 
</sidebar>

<p>I am not aware of equivalent individual tools for other formats such as BMP, GIF and JPEG. However, here imagemagick comes to the rescue once more, this time with a tool called <i>identify</i>.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 5. An example usage of identify</heading>
<code type="section">
deathstar:/home/mikal# identify -verbose sample.png 
Image: sample.png
  Format: PNG (Portable Network Graphics)
  Geometry: 640x480
  Class: DirectClass
  Type: true color
  Depth: 8 bits-per-pixel component
  Colors: 142360
  Filesize: 555.6k
  Interlace: None
  Background Color: grey100
  Border Color: #DFDFDF
  Matte Color: grey74
  Dispose: Undefined
  Iterations: 0
  Compression: Zip
  signature: 361fe70ae623ef6f1fca44e0d29d157c2d701039fcf0f8625862925d881e13a4
  Tainted: False
  User Time: 0.190u
  Elapsed Time: 0:01
</code>

<p>You can see from this example that <i>identify</i> displays a bunch of useful information about the image file, for example the size of the image in pixels, the color depth of the image, and the image format.</p>

<p><i>identify</i> also has a -format command line flag which allows you to specify that only the information you want be output. For example, if we were only interested in the image dimensions, the you might use a command like shown in this example:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing 6. Using the format option on identify</heading>
<code type="section">
deathstar:/home/mikal# identify -format "%wx%h" sample.png 
640x480
</code>

<p>Here, <i>%w</i> means image width, and <i>%h</i> means image height. Checkout the <i>identify</i> man page for more information on the formatting characters which can be used with the option.</p>










<heading refname="" type="major" toc="yes" name="" alttoc="">Rotating images</heading>

<p>Another commonly needed image manipulation is the rotation of images. For example, many of the photos I take with my digital cameras are rotated ninety degrees, as they are taken as portrait pictures. My camera doesn't rotate these for me, so I have a script which does it for me once I have downloaded the images from the camera.<p>

<p>For example, this is a photo taken on a trip I made to Port Arthur in Tasmania recently:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 4. Port Arthur on it's side</heading>
<img src="portarthur.jpg" width="640" height="480" alt="A sideways picture of Port Arthur"/>
</figure>

<p>To rotate this picture, we again turn to the <i>convert</i> command from imagemagick. The command line to use is:</p>


<heading refname="" type="code" toc="no" name="" alttoc="">Listing 7. Rotating an image with convert</heading>
<code type="section">
convert -rotate 90 input.jpg output.jpg
</code>

<p>This produces an image which looks like:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure 5. Port Arthur</heading>
<img src="portarthur-rot.jpg" width="480" height="640" alt="A picture of Port Arthur"/>
</figure>

<p>Note that the arguement to the -rotate option is the number of degrees of the right to rotate the image. If you want to rotate to the left, then use a negative number.</p>





<heading refname="" type="major" toc="yes" name="" alttoc="">Changing the format of an image</heading>

<p>The <i>convert</i> imagemagick command is also capable of converting the formation of the image files. This includes converting between image formats, such as converting a JPEG image to PNG, but it also includes converting from color to grayscale, dithering, and similar operations.</p>

<p><i>convert</i> knows what image format the input and output are based on the file extensions given on the command line. Therefore, to convert a JPEG to a PNG, use a command line like the following:</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Changing the format of an image</heading>
<code type="section">
convert input.jpg output.png
</code>

<p>Imagemagick supports 89 image formats at the time of writing this article. Checkout the imagemagick website for more information.</p>










<heading refname="" type="major" toc="yes" name="" alttoc="">Adding textual annotations to an image</heading>

<p>Sometimes you need to add textual annotations to an image. For example, imagine that your company had a standard business card image, and needed to put each employee's details onto the card before sending it to the printer. Another example generating presentation certificates for users of your website, for instance when they pass an online course.</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. A picture from Floriade 2003</heading>
<img src="floriade.jpg" width="640" height="480" alt="Floriade 2002"/>
</figure>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Annotating the image</heading>
<code type="section">
convert -font helvetica -fill white -pointsize 36 \
-draw 'text 10,50 "Floriade 2002, Canberra, Australia"' \
floriade.jpg comment.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. An annotated picture from Floriade 2002</heading>
<img src="comment.jpg" width="640" height="480" alt="Floriade 2002 after annotation"/>
</figure>

<p>This is by far the most complex <i>convert</i> commmand line we have seen so far in the article, so I will take some time to explain it bit by bit.</p>

<p><i>-font helvetica</i>: sets the font for the annotation to helvetica. It is possible here to specify a path to a font file as well. For example, this example badges the image so it can't be reused by other websites without permission, but does so using a font which is in a non-standard location...</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Annotating the image</heading>
<code type="section">
convert -font fonts/1900805.ttf -fill white -pointsize 36 \
-draw 'text 10,475 "stillhq.com"' \
floriade.jpg stillhq.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. An image which has been badged to stop unauthorized use</heading>
<img src="stillhq.jpg" width="640" height="480" alt="Floriade after badging"/>
</figure>

<p><i>-fill white</i>: fill the letters with white, instead of the standard black.</p>

<p><i>-pointsize 36</i>: the size of the letters, in points. There are 72 points to an inch.</p>

<p><i>-draw 'text 10,50 "..."'</i>: a set of drawing commands, in this case move to the position 10, 50 and then draw the text in the double quotes. The single quotes are used because the double quotes are needed within the drawing command if more than one word is to be drawn, and you cannot have double quotes within double quotes.</p>











<heading refname="" type="major" toc="yes" name="" alttoc="">Other, more artistic, conversions</heading>

<p><i>convert</i> also implements a series of quite artistic conversions. I will briefly demonstrate them here. The input image I will use for the demonstrations is:</p>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset</heading>
<img src="uluru.jpg" width="640" height="480" alt="Uluru"/>
</figure>





<heading refname="" type="minor" toc="no" name="" alttoc="">Charcoal</heading>

<todo>
<p>Charcoal</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying a charcoal effect</heading>
<code type="section">
convert -charcoal 2 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset after a charcoal effect is applied</heading>
<img src="charcoal.jpg" width="640" height="480" alt="Uluru after a charcoal effect"/>
</figure>

<p>Increasing the magnitude of the arguement to the charcoal option increases the amount of "charcoal" applied to the image, but also makes the generation of the image much slower. Here's an example with a little more charcoal.</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying a higher level charcoal effect.</heading>
<code type="section">
convert -charcoal 10 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset more charcoal effect is applied</heading>
<img src="charcoal-medium.jpg" width="640" height="480" alt="Uluru after more charcoal effect"/>
</figure>

<todo>
<p>Charcoal intense.</p>
<p>200</p>




<heading refname="" type="minor" toc="no" name="" alttoc="">Colorize</heading>

<todo>
<p>What is colorizing?</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying a colorizing effect</heading>
<code type="section">
convert -colourize 255 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset after a colorizing effect is applied</heading>
<img src="colorize.jpg" width="640" height="480" alt="Uluru after a charcoal effect"/>
</figure>






<heading refname="" type="minor" toc="no" name="" alttoc="">Implode</heading>

<todo>
<p>Implode</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying an imploding effect</heading>
<code type="section">
convert -implode 4 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset after imploding</heading>
<img src="implode.jpg" width="640" height="480" alt="Uluru after an implosion effect"/>
</figure>



<heading refname="" type="minor" toc="no" name="" alttoc="">Solarize</heading>

<todo>
<p>Solarize</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying a solarizing effect</heading>
<code type="section">
convert -solarize 42 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset after solarizing</heading>
<img src="solarize.jpg" width="640" height="480" alt="Uluru after a solarization effect"/>
</figure>





<heading refname="" type="minor" toc="no" name="" alttoc="">Spread</heading>

<todo>
<p>Spread</p>

<heading refname="" type="code" toc="no" name="" alttoc="">Listing xxx. Applying a spreading effect</heading>
<code type="section">
convert -spread 5 input.jpg output.jpg
</code>

<figure>	
<heading refname="" type="figure" toc="no" name="" alttoc="">Figure xxx. Uluru at sunset after spreading</heading>
<img src="spread.jpg" width="640" height="480" alt="Uluru after a spreading effect"/>
</figure>











<heading refname="" type="major" toc="yes" name="" alttoc="">Multiple commands in one imagemagick invocation</heading>

<todo>
<p>Say something</p>






<heading refname="" type="major" toc="yes" name="" alttoc="">PDF generation</heading>

<todo>
<p>Whilst imagemagick supports PDF generation, it is not wonderful.</p>






<heading refname="" type="major" toc="yes" name="" alttoc="">Things to note about image manipulation</heading>

<todo>
<p>JPEG is lossy</p>

<todo>
<p>Refer to libtiff article convering compression options</p>







<!-- END THE BODY OF THE ARTICLE -->

<!-- Ignore this line. -->
</docbody>

<!-- RELATED LIST
The related list includes 2 or 3 selected links to dW content that is especially relevant to the article.  All resources listed here should also be in the resource list. Links to the dW newsletter and Toolbox subscription are automatically filled in; no need to list them here. -->
<!-- <relatedlist> -->
<!-- <a href="">Title</a> -->
<!-- <a href="">Title</a> -->
<!-- </relatedlist> -->

<!-- RESOURCE LIST
The resource list includes links to downloadable code for the article, to all resources mentioned in the article, and to other resources related to the topic.  Resources may be from IBM, developerWorks, alphaWorks, the IBM developer domains or product sites, or non-IBM sites. Annotate each link by explaining the value and relevance for the reader. Put article titles in quotes, book titles in italics. 
Use the format shown for each type of resource. -->
<resourcelist>
<ul>

<!-- EXAMPLE FOR CODE DOWNLOADS -->
<li>Download the <a href="">source code</a> used in this article.</li>

<!-- EXAMPLE FOR ARTICLES -->
<li>"<a href="">Article title</a>" offers additional insight on the pros and cons of the techniques discussed in this article.</li>

<!-- EXAMPLE FOR dW ARTICLES -->
<li>"<a href="">Article title</a>" (<i>developerWorks</i>, month year) offers additional insight on the pros and cons of the techniques discussed in this article.</li>

<!-- EXAMPLE FOR WEB SITES -->
<li>The <a href="http://www.stillhq.com/cgi-bin/getpage?area=pngtools">pnginfo</a> is part of the pngtools suite.</li>

<!-- EXAMPLE FOR BOOKS -->
<li>The classic work in this field is <a href=""><i>UNIX Power Tools</i></a> by Jerry Peek, Tim O'Reilly, and Mike Loukides (O'Reilly &amp; Associates, 1997).</li>
</ul>
</resourcelist>

<!-- END THE ARTICLE -->

<!-- You're done! Ignore these last two lines. -->

</dw-article>
</dw-document>
#!/bin/bash

# If $1 == "--force", then ignore the age of the last backup
# If $2 is present, it is the name of the backup target

source /data/backups/secrets

export OUTPUT_DIR=/data/backups/duplicity-output
export SVN_PATH=/data/src/stillhq_public/trunk/duplicity

# Ensure there isn't a recent backup
age=$(( `date +%s` - `date +%s -r $OUTPUT_DIR/log` ))
if [ "%$1%" == "%--force%" ]
then
  echo `date`" Backup run forced" >> $OUTPUT_DIR/log
  age=$(( 100 * 24 * 24 ))
fi

echo `date`" Previous backup was $age seconds ago" >> $OUTPUT_DIR/log
if [ $age -lt $(( 8 * 60 * 60 )) ]
then
  echo `date`" Previous backup is too recent. Abort" >> $OUTPUT_DIR/log
  exit 0
fi

if [ "%$2%" == "%%" ]
then
  targets="/home/mikal /boot /etc /var"
  for target in `ls /data | egrep -v "(\.du$|^backups$|^backups-linux$|^backups-linux-canonical$|duplicity|lost\+found|mongodb|mysql|mythtv|openstack|squid|temp|video|virtualbox)"`
  do
    targets="$targets /data/$target"
  done
else
  targets=$2
fi

if [ -e $OUTPUT_DIR/dpkg ]
then
  mv $OUTPUT_DIR/dpkg $OUTPUTDIR/dpkg.old
fi
if [ -e $OUTPUT_DIR/mikal_crontab ]
then
  mv $OUTPUT_DIR/mikal_crontab $OUTPUT_DIR/mikal_crontab.old
fi

# First sync the backups with a local USB disk if one can be found
disk=`find /media -type d -name duplicity | head -1 | sed 's/\/duplicity//'`
if [ "%$disk%" != "%%" ]
then
  echo `date`" Syncing backups to $disk" >> $OUTPUT_DIR/log
  cd $OUTPUT_DIR
  ./rsync $disk
  echo `date`" Synced backups to $disk" >> $OUTPUT_DIR/log
fi

need_clean=0
for target in $targets
do
  before=`du -s $OUTPUT_DIR/$target | cut -f 1`
  echo `date`" Removing old backups for $target. " >> $OUTPUT_DIR/log
  echo `date`" Size before: $before" >> $OUTPUT_DIR/log
  /data/src/duplicity/duplicity-bin \
    remove-all-but-n-full 1 --force \
    --allow-source-mismatch \
    --archive-dir /data/temp/duplicity/ \
    file://$OUTPUT_DIR/$target

  if [ $? -gt 0 ]
  then
    echo `date`" $targets returned non-zero exit code $?" >> $OUTPUT_DIR/log
  fi

  /data/src/duplicity/duplicity-bin \
    cleanup --force \
    --allow-source-mismatch \
    --archive-dir /data/temp/duplicity/ \
    file://$OUTPUT_DIR/$target

  if [ $? -gt 0 ]
  then
    echo `date`" $targets returned non-zero exit code $?" >> $OUTPUT_DIR/log
  fi

  after=`du -s $OUTPUT_DIR/$target | cut -f 1`
  echo `date`" Size after:  $after" >> $OUTPUT_DIR/log

  if [ $after -lt $before ]
  then
    need_clean=1
  fi
done

if [ $need_clean -gt 0 ]
then
  echo `date`" Repository shrunk. Clearing local media" >> $OUTPUT_DIR/log
  $SVN_PATH/clearmedia --media local
  echo `date`" Clear complete" >> $OUTPUT_DIR/log
fi

# Dedup workstation backups, and make sure we can iterate directories
echo `date`" Ensure sensible permissions for workstation backups" >> $OUTPUT_DIR/log
find /data/backups-linux -type d -exec chmod u+rx {} \;
echo `date`" Permissions fix finished" >> $OUTPUT_DIR/log

echo `date`" Dedup workstation backups" >> $OUTPUT_DIR/log
$SVN_PATH/dedup \
  --path /data/backups-linux \
  --canonical /data/backups-linux-canonical >> /data/backups-linux/dedup.log
echo `date`" Dedup finished" >> $OUTPUT_DIR/log

# Now backup
while [ "%$targets%" != "%%" ]
do
  echo `date`" Targets: $targets" >> $OUTPUT_DIR/log
  total_change=0
  new_targets=""

  for target in $targets
  do
    echo `date`" Backing up $target"
    /data/src/duplicity/duplicity-bin \
      --archive-dir=/data/duplicity \
      --full-if-older-than 2M \
      --encrypt-key=${GPG_KEY} \
      --sign-key=${GPG_KEY} \
      --allow-source-mismatch \
      --archive-dir /data/temp/duplicity/ \
      -v info \
      --exclude-if-present --exclude=homedir/.cache \
      incremental \
      $target file://$OUTPUT_DIR/$target | tee /tmp/duplicity.log

    if [ $? -gt 0 ]
    then
      echo `date`" $targets returned non-zero exit code $?" >> $OUTPUT_DIR/log
    fi

    change=`grep TotalDestinationSizeChange /tmp/duplicity.log | cut -f 2 -d " "`
    total_change=$(( $total_change + $change ))
    echo `date`" $target: $change" >> $OUTPUT_DIR/log

    if [ $change -lt 2500000000 ]
    then
      echo "Backup was short"
    else
      new_targets="$new_targets $target"
    fi

    echo "****** TOTAL CHANGE $total_change ******"
    echo

    targets="$new_targets"
  done
done

# Now sync the backups with a local USB disk if one can be found
disk=`find /media -type d -name duplicity | head -1 | sed 's/\/duplicity//'`
if [ "%$disk%" != "%%" ]
then
  echo `date`" Syncing backups to $disk" >> $OUTPUT_DIR/log
  cd $OUTPUT_DIR
  ./rsync $disk
  echo `date`" Synced backups to $disk" >> $OUTPUT_DIR/log
fi

# Now make sure we have records of what is where
cd $SVN_PATH
./listfiles --media local --path $OUTPUT_DIR
echo `date`" Finished listing local media" >> $OUTPUT_DIR/log

if [ ! -e $disk/duplicity/NAME ]
then
  echo `date`" Skipping removable media listing as it has no name" >> $OUTPUT_DIR/log
else
  media=`cat $disk/duplicity/NAME`
  echo `date`" Listing $media" >> $OUTPUT_DIR/log
  ./listfiles --media $media --path $disk/duplicity
  echo `date`" Finished listing removable media" >> $OUTPUT_DIR/log

  echo `date`" "`df -h $disk | tail -1` >> $OUTPUT_DIR/log
fi

#!/usr/bin/python

"""Is it safe to delete these files?"""

import sys
sys.path.append('/data/src/stillhq_public/trunk/python/')

import datetime
import os
import time
import MySQLdb

import gflags
import sql
import utility


FLAGS = gflags.FLAGS
gflags.DEFINE_string('dbuser', 'duplicity', 'DB username')
gflags.DEFINE_string('dbpassword', 'duplicity', 'DB user password')
gflags.DEFINE_string('dbname', 'duplicity', 'DB name')


total_size = 0


def CheckReplication(cursor, path):
  """This only works on files, not directories."""

  s = ('select * from versions where path=%s order by epoch desc;'
       % sql.FormatSqlValue('path', path))
  cursor.execute(s)
  if cursor.rowcount == 0:
    return (False, 'not backed up')

  row = cursor.fetchone()
  mtime = os.path.getmtime(path)
  if mtime != row['epoch']:
    return (False, ('backup is out of date (%d seconds too old)'
                    % (mtime - row['epoch'])))

  locations = []
  for key in row:
    if key.startswith('media') and row[key] == 'N':
      locations.append(key[len('media_'):])

  if len(locations) < 2:
    return (False, ('backup is under replicated (%d locations, %s)'
                    %(len(locations), ' '.join(locations))))

  return (True, '')


def RecurseDirectory(cursor, path):
  global total_size

  overall_ok = True

  if os.path.isfile(path):
    total_size += os.path.getsize(path)

    ok, reason = CheckReplication(cursor, path)
    if not ok:
      overall_ok = False
      print '%s not ok to delete, %s' %(path, reason)

  elif os.path.isdir(path):
    for ent in os.listdir(path):
      ok = RecurseDirectory(cursor, os.path.join(path, ent))
      if not ok:
        overall_ok = False

  return overall_ok


def main(argv):
  global total_size

  # Parse flags
  try:
    argv = FLAGS(argv)

  except gflags.FlagsError, e:
    print 'Flags error: %s' % e
    print
    print FLAGS

  db = MySQLdb.connect(user = FLAGS.dbuser, db = FLAGS.dbname,
                       passwd = FLAGS.dbpassword)
  cursor = db.cursor(MySQLdb.cursors.DictCursor)

  # Recurse directories looking for under replicated files
  overall_ok = RecurseDirectory(cursor, argv[1])
  if not overall_ok:
    print ('Summary: not safe to delete, delete would clear %s'
           % utility.DisplayFriendlySize(total_size))
    sys.exit(1)

  print ('Summary: ok to delete, delete would clear %s'
         % utility.DisplayFriendlySize(total_size))

if __name__ == "__main__":
  main(sys.argv)

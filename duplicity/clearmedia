#!/usr/bin/python

"""Clear all references to a piece of backup media, ready for a rescan."""

# Note that this is an expensive operation

import sys
sys.path.append('/data/src/stillhq_public/trunk/python/')

import datetime
import os
import time
import MySQLdb

import gflags
import sql


FLAGS = gflags.FLAGS
gflags.DEFINE_string('dbuser', 'duplicity', 'DB username')
gflags.DEFINE_string('dbpassword', 'duplicity', 'DB user password')
gflags.DEFINE_string('dbname', 'duplicity', 'DB name')

gflags.DEFINE_string('media', '', 'The name of the backup media')


def main(argv):
  # Parse flags
  try:
    argv = FLAGS(argv)

  except gflags.FlagsError, e:
    print 'Flags error: %s' % e
    print
    print FLAGS

  if not FLAGS.media:
    print 'Please specify the name of this backup set with --media'
    sys.exit(1)

  db = MySQLdb.connect(user = FLAGS.dbuser, db = FLAGS.dbname,
                       passwd = FLAGS.dbpassword)
  cursor = db.cursor(MySQLdb.cursors.DictCursor)
  cursor2 = db.cursor(MySQLdb.cursors.DictCursor)

  # Remove versions
  removed_versions = 0
  cursor.execute('select * from versions where seen_on like "%%%s%%";'
                 % FLAGS.media)
  for row in cursor:
    print '%s at %s exists at %s' %(row['path'], row['epoch'], row['seen_on'])
    if row['seen_on'] == FLAGS.media:
      print '*** Warning: %s is now orphaned' % row['path']
    
    seen = row['seen_on'].split()
    seen.remove(FLAGS.media)

    prev = []
    if row['previously_seen_on']:
      prev = row['previously_seen_on'].split()
    if not FLAGS.media in prev:
      prev.append(FLAGS.media)

    cursor2.execute('update versions set seen_on="%s", previously_seen_on="%s" '
                    'where path="%s" and epoch=%d;'
                    %(' '.join(seen), ' '.join(prev), row['path'],
                      row['epoch']))
    cursor2.execute('commit;')
    removed_versions += 1

  # Remove seen files
  cursor.execute('delete from seen where media="%s";' % FLAGS.media)
  cursor.execute('commit;')

  print 'Done, touching %d versions' % removed_versions
      

if __name__ == "__main__":
  main(sys.argv)

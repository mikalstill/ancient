#!/usr/bin/python

"""Is it safe to clear this backup media?"""

# Note that this is an expensive operation

import sys
sys.path.append('/data/src/stillhq_public/trunk/python/')

import datetime
import os
import time
import MySQLdb

import gflags
import sql


FLAGS = gflags.FLAGS
gflags.DEFINE_string('dbuser', 'duplicity', 'DB username')
gflags.DEFINE_string('dbpassword', 'duplicity', 'DB user password')
gflags.DEFINE_string('dbname', 'duplicity', 'DB name')

gflags.DEFINE_string('media', '', 'The name of the backup media')


def main(argv):
  # Parse flags
  try:
    argv = FLAGS(argv)

  except gflags.FlagsError, e:
    print 'Flags error: %s' % e
    print
    print FLAGS

  if not FLAGS.media:
    print 'Please specify the name of this backup set with --media'
    sys.exit(1)

  db = MySQLdb.connect(user = FLAGS.dbuser, db = FLAGS.dbname,
                       passwd = FLAGS.dbpassword)
  cursor = db.cursor(MySQLdb.cursors.DictCursor)
  cursor2 = db.cursor(MySQLdb.cursors.DictCursor)

  # Check removal
  overall_ok = True
  cursor.execute('select * from versions where seen_on like "%%%s%%";'
                 % FLAGS.media)
  for row in cursor:
    if row['seen_on'] == FLAGS.media:
      print '%s on %s would be orphaned' %(row['path'], row['epoch'])
      overall_ok = False

    else:
      seen = row['seen_on'].split()
      seen.remove(FLAGS.media)
      if len(seen) < 2:
        print '%s on %s would be under replicated' %(row['path'], row['epoch'])
        overall_ok = False

  if not overall_ok:
    print 'Summary: it is not ok to remove this media'
      

if __name__ == "__main__":
  main(sys.argv)

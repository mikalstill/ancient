<sect1><title>Frequency Domain Analysis</title>

<sect2><title>Introduction</title>

<para>
  Fourier transforms enable us to view the frequency representation of data that exists in the time domain. In visual terms, the
  result is frequency on the horizontal axis with amplitude on the vertical. From such a graph, we can see details of what is happening in
  the data at particular frequencies. This provides for opportunities such as the removal of erroneous frequencies in the given data set
  and noise reduction. Once the desired actions have been carried out in the frequency domain, an inverse transform can be applied to
  return the data to the time domain.

  Another use of Fourier Transforms are to produce Power Spectral Density (PSD) plots.

</para>

</sect2> <!--Introduction-->



<sect2><title>Theory</title>

<para>
  The concepts of frequency domain analysis should commence with the Fourier transform. Any waveform can be constructed purely from sine
  and cosine waves. An example of this is a pure square wave. It can be constructed using only the odd harmonics of a sin wave as
  follows:
  <equation>
    <title>Square Wave</title>
    <alt>x(n) = sin(f) + 1/3*sin(3f) + 1/5*(sin5f)</alt>
    <execute><cmd>img</cmd><args>fSquareWave.gif</args></execute>
  </equation>
	...for all odd harmonics. Where f is the fundamental frequency.
</para>

<para>
  So given that waveforms can be constructed using sin and cosine waves, it stands to reason that any waveform can be broken down into
  to these sine and cosine components. The
  Fourier transform is such a tool to carry out this analysis. The Fourier transform effectively analysis a given input signal, by
  decomposing it into those sinusoids of different frequencies, that sum the original signal.
</para>

<para>
  The resulting function from a Fourier transform is function of frequency. This can be expressed in terms of frequency f, or angular
  frequency. The Fourier transform of a signal x(n) is:
  
  X(&ohgr;) = &Sgr;x(n)e<superscript>j&ohgr;</superscript>

  <equation>
    <title>Fourier Transform</title>
    <execute><cmd>img</cmd><args>fForward_fourier.gif</args></execute>
  </equation>
</para>

<para>
  We can also computer the inverse Fourier transform, returning us a function of time:

  <equation>
    <title>Inverse Fourier Transform</title>
    <alt>x(n) = 1/2pi * int( X( e^(jw) ) * e^(jwn) )dw - where w = 2pif</alt>
    <execute><cmd>img</cmd><args>fInverse_fourier.gif</args></execute>
  </equation>
</para>

<para>
  The above transforms, are not however, available for all sequences x(n). This is where the Discrete Fourier transform (DFT) comes in. It
  restricts the sequence x(n) to the following conditions:
</para>

<para>
<itemizedlist>
<listitem><para> The N values x(0)..x(N-1).</para></listitem>
<listitem><para> Equidistant values around the unit circle.</para></listitem>
</itemizedlist>
</para>

<para>
 The formula for the DFT is:

  <equation>
    <title>Forward Discrete Fourier Transform</title>
    <alt>X(k) = X(e^(j2pik/N)) = sum from n=0 ..N-1 ( x(n)*e^(-j2pikn/N) )</alt>
    <execute><cmd>img</cmd><args>fForward_discrete_fourier.gif</args></execute>
  </equation>

  and the inverse DFT:

  <equation>
    <title>Inverse Discrete Fourier Transform</title>
    <alt>x(n) = 1/N * sum from n-0..N-1(X(k)e^(j2pikn/N))</alt>
    <execute><cmd>img</cmd><args>fInverse_discrete_fourier.gif</args></execute>
  </equation>

  The discrete frequency k above is given by f(k) = k*fs/N where fs is the sampling frequency of the signal.
</para>

<para>
  The problem with the DFT is that it is slow, with O(N<superscript>2</superscript>). This brought about the Fast Fourier transform.
  The Fast Fourier transform takes into account that the DFT wastes a good deal of time with unnecessary multiplications. For example,
  there is no need to multiply something by zero, when the zero can be used outright. Given that multiplication is one of the slower
  instructions on computers, this is a time saver. Another area where the FFT screams efficiency, is that it takes into account the fact
  that value repeat in sinusoids. For example, every 90 degrees, the value 1 reappears on a sine or cosine changing only its sine. Therefore
  many results may determined by taking into account these factors. Through this increased efficiency, the FFT reduces the computation
  time to O(NlogN).
</para>

<para>
  The power spectrum is very useful in signal processing. It is the most common frequency measuremnt, allowing you to find how much energy
  exists at a given frequency. Derived from the power spectrum is the power spectral density (PSD) measurment. A PSD plot provides
  information on how much energy exists in a band of frequencies. This technique is particularly useful for measuring the noise content
  in a signal. A PSD plot is created by plotting the magnitude of the real and imaginary components of the FFT results. A good
  illustration of this concept is that of a sine wave with its corresponding PSD plot. From it we can see some stuff wohoo TODO>
  
  <figure><title>50 kHz sin wave</title>
  <!-- <graphic fileref="figures/pythag"></graphic>-->
      <execute><cmd>img</cmd><args>50HzSin.bmp</args></execute>
  </figure>

  <figure><title>PSD plot of a 50 kHz sin wave</title>
  <!-- <graphic fileref="figures/pythag"></graphic>-->
      <execute><cmd>img</cmd><args>fft50HzSin.bmp</args></execute>
  </figure>
  
  So we see in the PSD plot above, that the sin wave has energy at 50Hz

</para>

<para>
  There are some constraints which are implied when carrying frequency analysis.
  
  <itemizedlist>
  <listitem><para>Maximum frequency analysed.</para></listitem>
  <listitem><para>Frequency resolution.</para></listitem>
  </itemizedlist>
  
  The maximum frequency analysed relates to the sampling theorem, also know as the Nyquist theorem. The theorem effectively states:
</para>

<para>
  Given a signal x(n) sampled at a sampling frequency of f<subscript>s</subscript>, the maximum frequency that can be analysed,
  f<subscript>max</subscript> is equal to 1/2 of f<subscript>s</subscript>. In other words, to accurately represent and analyse the
  signal x(n), it must be sampled at a rate greater the 2f<subscript>s</subscript>, where 2f<subscript>s</subscript> =
  f<subscript>N</subscript>, where f<subscript>N</subscript> is known as the Nyquist frequency. The simplest ecxample to illustrate this
  is the sampling of a 20kHz audio signal. To accurately represent this signal, it must be sampled at greater than 40kHz. This value is
  typically 44100Hz, for example CD audio. Generally signals are smapled at several times f<subscript>N</subscript> to ensure accurate
  results. In the more relavent case of time series analysis, where datasets may consist of a sample per day, the maximum frequency that
  can be analysed here is 0.5cycles/day.
</para>

<para>
  The resolution is also an interesting point. The frequency resolution of a signal in the frequency domain, is inversely proportional
  to the length of the waveform. So if the length of the analysed waveform is doubled, the resolutionn is halved. This is clearer if we
  consider the relationship f<subscript>res</subscript>= f<subscript>s</subscript>/N, N being the number of points. If we double the
  number of points while maintaing the sample rate, our frequency reosolution is halved.
</para>

</sect2> <!--Theory-->


<sect2><title>Conclusion</title>
  <para>
    There is no question as to the value and importance of frequency domain analysis. We are able to see information invisble to us in
    the time domain. Trends in the data relating to frequency can be identified, and it is even possible to reduce noise by removing
    points while in the frequency domain before returning to the time domain. TODO: more more more...
  </para>
</sect2> <!--Conclusion-->

</sect1> <!--FDA-->


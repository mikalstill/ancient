.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "cepMatrix" "3" "26 November 2002" "" ""
.SH NAME
cepMatrix \- Provides a matrix class template data container for all mathematical operations.
.SH SYNOPSIS

.nf
 The follwing example show how to create a cepMatrix.
 
 Declaring a NULL matrix:-
 cepMatrix<T> matrix()
 
 Declaring a 2D matrix:-
 cepMatrix<T> matrix(const int & rows, const int & cols)
 
 <para><itemizedlist>
 <listitem><para>rows:- the number of rows in the matrix</para></listitem>
 <listitem><para>cols:- the number of colums in the matrix</para></listitem>
 </itemizedlist></para>
 
 
 Declaring a 3D matrix:-
 cepMatrix<T> matrix(const int & rows, const int & cols, const int & tabs)
 
 <para><itemizedlist>
 <listitem><para>rows:- the number of rows in the matrix</para></listitem>
 <listitem><para>cols:- the number of colums in the matrix</para></listitem>
 <listitem><para>tabs:- the number of tables in the matrix</para></listitem>
 </itemizedlist></para>
 
.fi
.SH "DESCRIPTION"
.PP
An implementation of the <command>cepMatrix</command> template class
data container.
</para>
<para> 
<command>const cepMatrix<T> & operator+= (const cepMatrix &B)</command>
Calculates A+B.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>B:- the matrix to be added to the current matrix object</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const cepMatrix<T> & operator-= (const cepMatrix &B)</command>
Calculates A-B.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>B:- the matrix to be subtracted to the current matrix object</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const cepMatrix<T> & operator*= (const cepMatrix &B)</command>
Calculates A*B.
<para><itemizedlist>
<listitem><para>B:- the matrix to be multiplied with the current matrix object</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const cepMatrix<T> & operator*= (const T &scalar)
Calculates c*A.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>c:- the scalar value that the current matrix object is to be multiplied by</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const cepMatrix<T> & operator= (const cepMatrix &B)</command>
Sets A=B.
<para><itemizedlist>
<listitem><para>B:- the matrix that the current matrix object is to be set to</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>bool operator== (const cepMatrix &B)</command>
Compares A to B and returns true if A is equal to B, otherwise false is returned.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>B:- the matrix to be compared to the current matrix object</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>bool operator!= (const cepMatrix &B)</command>
Compares A to B and returns true if A is not equal B, otherwise false is returned.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>B:- the matrix to be compared to the current matrix object</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>bool isDiagonal ()</command>
Determies whether this matrix object is a strictly Diagonal matrix.
This fuction returns true if the matrix is diagonal, else false is returned.
This function can not be used with 3D matricies.
</para>
<para>
<command>const T getMaxValue(const int & col)</command>
Returns the largest value in a given  coloum.
<para><itemizedlist>
<listitem><para>col:- the coloum to be queried</para></listitem>
</itemizedlist></para>
</para>
<para>
<command>const T getMinValue(const int & col)</command>
Returns the smallest value in a given coloum
<para><itemizedlist>
<listitem><para>col:- the coloum to be queried</para></listitem>
</itemizedlist></para>
</para>
<para>
<command>const cepMatrix<T> & resize(const int & newRows)</command>
Returns the current matrix which is resized by newRows number of rows. This
function can only make the number of rows in the matrix larger and can not be
used on 3D matricies
<para><itemizedlist>
<listitem><para>newRows:- the new number of rows the resized matrix is to have</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const T & getValue (const int & row, const int & col)</command>
Returns the value of the matrix the specified point.
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>row:- the row number of the value</para></listitem>
<listitem><para>col:- the colum number of the value</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>void setValue (const int & row, const int & col, const T & value)</command>
Sets the value of the matrix at the specified point
This function can not be used with 3D matricies.
<para><itemizedlist>
<listitem><para>row:- the row number where the value is to be inserted</para></listitem>
<listitem><para>col:- the colum number where the value is to be inserted</para></listitem>
<listitem><para>value:- the value of the given matrix point</para></listitem>
</itemizedlist></para>
</para>
<para>
<command>const cepMatrix<T> & resize(int & newRows)</command>
Returns the current matrix which is resized by newRows number of rows. This function
can only make the number of rows in the matrix larger.
<para><itemizedlist>
<listitem><para>newRow:- The new number of rows in the matrix</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const int & getNumRows ()</command>
Gets the number of rows in the matrix.
</para>
<para> 
<command>const int & getNumCols ()</command>
Gets the number of colums in the matrix.
</para>
<para> 
<command>const T& getValue (const int & row, const int & col, const int & tab)/command>
Gets the value of a 3D matrix at a specfied point
This function can not be used with 2D matricies.
<para><itemizedlist>
<listitem><para>row:- the row number of the value</para></listitem>
<listitem><para>col:- the colum number of the value</para></listitem>
<listitem><para>tab:- the table number of the value</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>void setValue (const int & row, const int & col, const int & tab, const T & value)</command>
Sets the value of the 3D matrix at the specified point.
This function can not be used with 2D matricies.
<para><itemizedlist>
<listitem><para>row:- the row number where the value is to be inserted</para></listitem>
<listitem><para>col:- the colum number where the value is to be inserted</para></listitem>
<listitem><para>tab:- the table number where the value is to be inserted</para></listitem>
<listitem><para>value:- the value of the given matrix point</para></listitem>
</itemizedlist></para>
</para>
<para> 
<command>const int & getNumTables()</command>
Gets the number of tables in the matrix.
This function can not be used with 2D matricies.
</para>
<para>
<command>const bool is3D()</command>
Returns true if the matrix is a 3D matrix, else returns false.
</para>
<para>
<command>cepError getError()</command>
Returns any error that may have occored whilst carrying out an of the operations
in this class. The error is returned as a cepError object.
SEEALSOcepError
.SH "VERSION"
.PP
This documentation was generated for the \fBGeodetic Data Manipulation System\fR 0.1 by \fBautodocbook\fR (http://www.stillhq.com).
.SH "AUTHOR"
.PP
The \fBGeodetic Data Manipulation System\fR is under development by Michael Still (mikal@stillhq.com), Daniel Fernandez, Kristy Van Der Vlist, Blake Swadling, and Nick Wheatstone. All code is Copyright 2002 Michael Still, Daniel Fernandez, Kristy Van Der Vlist, Blake Swadling and Nick Wheatstone,  and is released under the GNU GPL. Code submissions are welcomed. Contact Michael at the address above if you have something you would like to contribute.
.SH "BUGS"
.PP
There  are no known bugs in the \fBGeodetic Data Manipulation System\fR. If you find one, please contact mikal@stillhq.com and let me know.

###########################################################
#
# Makefile for GDMS tests. For those who asre unfamiliar
# with make you can make these in various ways
#
# 1) simply type "make" or "make all". This will build the
#    uber test that runs all registered tests
#
# 2) type "make <target>" where target is the particular
#    test that you want to run. This makes a binary called
#    "test<target>".
#    e.g. to test the matrix class you would type
#    "make matrix" which will output a binary called
#    "testmatrix"
#
# Limitation:
# 1) This makefile expects the object files for the
#    actual project to be pre built. you will get
#    NASTY link errors if these files are missing.
#    If you get these then you need to build the project
# 2) Due t a imitaiton of make you need to indent the
#    second line of a rule with a TAB character. If you
#    get an error like the following then you need to
#    ensure that there si a precedign tab char before
#    the rule.
#      Makefile:115: *** missing separator.  Stop.
#
# Author: Blake Swadling <blake@swadling.org>, Sept 2002
#
###########################################################


###########################################################
# for make clean
RM = rm -f


###########################################################
# compiler settings
CXX = g++
CXXDEFINES = -D_GNU_SOURCE -D__WXGTK__ -D__CEP_UNIT_TEST__
CXXFLAGS = -g -Wall $(CXXDEFINES)


###########################################################
# linker settings
LXX = g++
LXXFLAGS = -L..
LXXLIBS = -lcppunit -lm

###########################################################
# objects for make targets
RUNNER = alltests.o
MATRIX = cep_testMatrix.o
CONFIG = cep_testConfig.o
WINDOWER = cep_testWindows.o
PRESENTATION = cep_testPresentation.o
DATASET = cep_testDataset.o
LS = cep_testLs.o

###########################################################
# additional objects required for linking
# make target specific object lists here

OBJS = ../cepError.o ../cepUtility.o
OBJS_MATRIX  =
OBJS_CONFIG  =
OBJS_LS = ../cepLs.o
OBJS_WINDOWER = ../cepDataWindower.o ../cepWindowAlg.o\
../cepWindowRect.o ../cepwindowhamming.o ../cepwindowchebyshev.o\
../cepwindowblackman.o ../cepConsoleErrorHandler.o ../cepErrorHandler.o
OBJS_PRESENTATION =
OBJS_DATASET = ../cepDataset.o

OBJS_ALL = $(OBJS) $(OBJS_MATRIX) $(OBJS_CONFIG) $(OBJS_WINDOWER) $(OBJS_LS) $(OBJS_DATASET)

###########################################################
# rule for all cpp files
%.o : %.cpp
	${CXX} ${CXXFLAGS} -c $< -o $@

  
###########################################################
# makes all tests an links to a binary called "testall"
all: runner $(MATRIX) $(CONFIG) $(WINDOWER) $(LS) $(DATASET)
	$(LXX) $(LXXFLAGS) -o test$@ $(MATRIX) $(CONFIG) $(WINDOWER) $(LS) $(RUNNER) $(DATASET) $(OBJS_ALL) $(LXXLIBS)


###########################################################
# removes objects and core files
tidy :
	@$(RM) *.o core

  
###########################################################
# removes the binaris as well as the other crud
clean : tidy
	@$(RM) test*

  
###########################################################
# compiles alltest.cpp file with the declaration of main(...)
runner: $(RUNNER)


###########################################################
################ The specific tarets. #####################
###########################################################

###########################################################
# Builds the matrix specific tests
matrix: runner $(MATRIX)
	$(LXX) $(LXXFLAGS) -o test$@ $(MATRIX) $(RUNNER) $(OBJS) $(LXXLIBS)


###########################################################
# Builds the config specific tests
config: runner $(CONFIG)
	$(LXX) $(LXXFLAGS) -o test$@ $(CONFIG) $(RUNNER) $(OBJS) $(LXXLIBS)


###########################################################
# Builds the windower specific tests
windower: runner $(WINDOWER)
	$(LXX) $(LXXFLAGS) -o test$@ $(WINDOWER) $(RUNNER) $(OBJS) $(OBJS_WINDOWER) $(LXXLIBS)

  
###########################################################
# Builds the presentation specific tests
presentation: runner $(PRESENTATION)
	$(LXX) $(LXXFLAGS) -o test$@ $(PRESENTATION) $(RUNNER) $(OBJS) $(OBJS_PRESENTATION) $(LXXLIBS)

  
###########################################################
# Builds the least squares specific tests
ls: runner $(LS)
	$(LXX) $(LXXFLAGS) -o test$@ $(LS) $(RUNNER) $(OBJS) $(OBJS_LS) $(LXXLIBS)

  
###########################################################
# Builds the least squares specific tests
dataset: runner $(DATASET)
	$(LXX) $(LXXFLAGS) -o test$@ $(DATASET) $(RUNNER) $(OBJS) $(OBJS_DATASET) $(LXXLIBS)

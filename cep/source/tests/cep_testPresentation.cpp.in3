
  // The testing function
  void runUI(string cmdline){
    int childPid, numRetries = 0;

retry:
    switch(childPid = fork())
    {
      case -1:
        if(numRetries < 5){
	  fprintf(stderr, "*");
	  fflush(stderr);
	  numRetries++;
	  sleep(60);
	  goto retry;
          }
        else
	  CPPUNIT_ASSERT_MESSAGE("Fork attempt repeatedly failed", false);
        break;

      case 0:
        sleep(5);
        system("killall -9 gdms");
        exit(0);
        break;

      default:
        int result = system(string("../gdms -d ../../datasets/" + cmdline).c_str());
        kill(childPid, 9);
	waitpid(childPid, NULL, 0);
        //printf("Result is %d signalled %s (%d)\n", WEXITSTATUS(result),
        //       WIFSIGNALED(result) ? "true" : "false",
        //       WTERMSIG(result));
        // WCOREDUMP would have been good, but glibc doesn't implement it
        CPPUNIT_ASSERT_MESSAGE(string("Test " + cmdline + " failed").c_str(), 
                               WTERMSIG(result) != SIGSEGV);
        break;
    }
  }
};

CPPUNIT_TEST_SUITE_REGISTRATION( Test );

} // end namespace

#!/bin/bash

#############
# shdns: take a query and build a response

# Set this to the location of the lookup
# file
execpath="/home/mikal/opensource/shdns/"

# The state of a given bit in the byte: 
# (byte, poweroftwo)
dumpbit(){
  local temp
  temp=$1

  if [ $1 -gt $(( $2 - 1 )) ]
  then
    echo -n "1"
    temp=$(( $1 - $2 ))
  else
    echo -n "0"
  fi

  return $temp
}

# Is a given bit on? (byte, poweroftwo)
testbit(){
  return `dumpbit $1 $2`
}

# Turn on a given bit in the byte: (initial byte 
# state, poweroftwo, desiredstate)
# Returns a decimal version of the byte
twiddlebit(){
  local temp
  temp=$1

  testbit $1 $2
  if [ $? = 1 ]
  then
    if [ $3 = 0 ]
    then
      temp=$(( $temp - $2 ))
    fi
  else 
    if [ $3 = 1 ]
    then
      temp=$(( $temp + $2 ))
    fi
  fi

  return $temp
}

# Spin until a byte exists: (filename, bytenumber)
spinfor(){
  local len

  len=`cat $1 | wc -c | tr -d " "`
  while [ $len -lt $2 ]
  do
    logger "shdns $$ Spin on byte $2"
    usleep $3
    len=`cat $1 | wc -c | tr -d " "`
  done
}

# Read a single byte from a file: 
# (filename, bytenumber)
readbyte(){
  spinfor $1 $2 10 
  cat $1 | cut -b $2
}

# Read a range of bytes from a file: 
# (filename, startbyte, length)
readstring(){
  spinfor $1 $(( $2 + $3 - 1 )) 10
  logger "shdns $$ Getting byte range $1:$2-"$(( $2 + $3 - 1 ))":$3"
  cat $1 | cut -b $2-$(( $2 + $3 - 1 ))
}

# Read a single binary byte as decimal from a file: 
# (filename, bytenumber)
readbytebinary(){
  local temp

  spinfor $1 $2 1000
  return `cat $1 | cut -b $2 | od -Ad -t u1 | head -1 | tr -s " " | cut -f 2 -d " "`
}

# Output the bit for this value: 
# (inputvalue, byteoffset)
writebinarybit(){
  if [ $1 -gt $(( $2 - 1 )) ]
  then
    echo -n "1"
    return $(( $1 - $2 ))
  else
    echo -n "0"
    return $1
  fi
}

# Turn a number into a binary byte: (inputvalue)
writebinarybyte(){
  writebinarybit $1 128
  writebinarybit $? 64
  writebinarybit $? 32
  writebinarybit $? 16
  writebinarybit $? 8
  writebinarybit $? 4
  writebinarybit $? 2
  writebinarybit $? 1
}

# Output the byte which is represented by a decimal 
# number
tobyte(){
  local octal
  local quotient
  local remainder

  # Echo only takes octal numbers, so we convert
  quotient=$1
  if [ $quotient -eq 0 ]
  then
    octal="0"
  fi

  while [ $quotient -ne 0 ]
  do
    remainder=$(( $quotient % 8 ))
    octal="$remainder$octal"
    quotient=$(( $quotient / 8 ))
  done

  echo -n -e \\$octal
}

####################################################

process(){
  logger "shdns $$ Started parsing $1 at $2"
  inset=$2

  # Identification: 2 bytes
  readbytebinary "$1" $inset; idtopbyte=$?
    inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; idbotbyte=$? 
    inset=$(( $inset + 1 ))
  logger "shdns $$ Packet id portions: $idtopbyte $idbotbyte"
  id=$(( ($idtopbyte * 128) + $idbotbyte ))
  logger "shdns $$ Packet id: $id"

  # Flags: 2 bytes
  temp=`cat $1 | cut -b $inset |  od -Ad -c | head -1 | cut -f 2 -d " "`
    inset=$(( $inset + 1 ))
  testbit $temp 128; qr=$?
  testbit $temp 8; op=$?
  testbit $temp 4; aa=$?
  testbit $temp 2; trun=$?
  testbit $temp 1; rd=$?

  logger "shdns $$ Query / response: $qr"
  logger "shdns $$ Opcode: $op"
  logger "shdns $$ Authoritative answer: $aa"
  logger "shdns $$ Packet truncated: $trun"
  logger "shdns $$ Recursion desired: $rd"

  readbytebinary "$1" $inset; temp=$?
    inset=$(( $inset + 1 ))
  testbit $temp 128; ra=$?
  
  logger "shdns $$ Recursion available: $ra"
  
  # The number of questions is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?
    inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?
    inset=$(( $inset + 1 ))
  qcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of questions: $qcount"
  
  # The number of answers is the next two bytes
  readbytebinary "$1" $inset; topbyte=$?
    inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?
    inset=$(( $inset + 1 ))
  acount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of answers: $acount"
  
  # The number of authority RRs is the next two 
  # bytes
  readbytebinary "$1" $inset; topbyte=$?
    inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?
    inset=$(( $inset + 1 ))
  authcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of authorities: $authcount"
  
  # The number of additional RRs is the next two 
  # bytes
  readbytebinary "$1" $inset; topbyte=$?
    inset=$(( $inset + 1 ))
  readbytebinary "$1" $inset; botbyte=$?
    inset=$(( $inset + 1 ))
  addcount=$(( ($topbyte * 128) + $botbyte ))
  logger "shdns $$ Number of additionals: $addcount"
  
  ######################
  # For each question
  ######################
  
  len=42
  questioncount=0
  
  while [ $questioncount -lt $qcount ]
  do
    questionstart=$inset
    logger "shdns $$ Question"
    name=""
  
    namelength=0
    readbytebinary "$1" $inset; len=$?
    while [ $len -gt 0 ]
    do
      inset=$(( $inset + 1 ))
      name="$name"`readstring "$1" $inset $len`"."
      inset=$(( $inset + $len ))
      
      namelength=$(( $namelength + $len + 1 ))
      readbytebinary "$1" $inset; len=$?
    done
    inset=$(( $inset + 1 ))
    logger "shdns $$ Lookup: $name"
  
    # Type of question -- assume we only want the 
    # last byte for now...
    inset=$(( $inset + 1 ))
    readbytebinary "$1" $inset; type=$?
    error="none"
    temp="shdns $$ Determine the query type"
    case $type in
    1 ) temp="$temp A";;
    2 ) temp="$temp NS";;
    5 ) temp="$temp CNAME";;
    12 ) temp="$temp PTR";;
    13 ) temp="$temp HINFO";;
    15 ) temp="$temp MX";;
    * ) temp="Error: Unknown query type"; error="yes";;
    esac
  
    logger "$temp (error = $error)"
    inset=$(( $inset + 1 ))  

    # The class should always be 1 -- assume it's 
    # all in the last byte as well
    inset=$(( $inset + 1 ))
    readbytebinary "$1" $inset; class=$?
      inset=$(( $inset + 1 ))
    logger "shdns $$ Query class: $class"
  
    if [ "%$error%" = "%none%" ]
    then
      # Dodgy bug fix
      name=`echo $name | sed 's/\.$//'`
    
      # Lookup the name in the db file
      result=`grep "$name" "$execpath" lookup | tr -s "\t" | cut -f 2`
      logger "shdns $$ Result: $result"

      ##############################################
      # Now we need to build a response to the query

      # The id number we were handed gets handed 
      # straight back
      tobyte $idtopbyte > /tmp/shdns-response-$$
      tobyte $idbotbyte >> /tmp/shdns-response-$$

      # Flag this packet as being a reply 
      # (we currently never claim to be authoritive)
      tobyte 128 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$

      # Number of questions (we have to return the 
      # question we are answering)
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 1 >> /tmp/shdns-response-$$
 
      # Number of answers
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 1 >> /tmp/shdns-response-$$

      # Number of authorities
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$

      # Number of additionals
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$

      # It's easy to return the question, we just 
      # copy it...
      echo -n `readstring $1 $questionstart $namelength` >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte $type >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte $class >> /tmp/shdns-response-$$

      # The domain name we are answering for in 
      # this answer
      echo -n `readstring $1 $questionstart $namelength` >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$

      # The type is the same as in the question
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte $type >> /tmp/shdns-response-$$

      # The class is the same as well
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte $class >> /tmp/shdns-response-$$

      # The time to live is always low, because we 
      # are dodgy
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 4 >> /tmp/shdns-response-$$

      # The length of the returned data is always 
      # an IP (32 bits)
      tobyte 0 >> /tmp/shdns-response-$$
      tobyte 4 >> /tmp/shdns-response-$$

      # And now the answer as a number
      # For the result in the answer, we are going 
      # to need this in a binary form of decimal
      while [ "%$result%" != "%%" ]
      do
        temp=`echo $result | cut -f 1 -d "."`
        result=`echo $result | sed 's/^[0-9]*\.*//'`
        tobyte $temp >> /tmp/shdns-response-$$
        logger "shdns $$ Processing result segment: $temp ($result)"
      done

      # And now we can send the result (done this 
      # way to make sure it is all in one packet)
      cat /tmp/shdns-response-$$
      logger "shdns $$ Finished extracting result"
    else
      # Work out the erroneous type
      logger "shdns $$ Erroneous type was $type ("`dumpbyte $type`")"
    fi

    logger "shdns $$ Finished processing question"
    questioncount=$(( $questioncount + 1 ))
  done

  return $inset`twiddlebit 0 128 1`
}

####################################################
# The entry point for the script
offset=1
spinfor $1 $offset
process $1 $offset
offset=$?
logger "shdns $$ Ended at $offset"
killall -9 cat
exit
#!/usr/bin/perl

# This script is used to generate the page that the user has requested.
# The following things are of interest:
#   area = the name of the 'directory' e.g. panda or gpg or gcc
#   page = the name of the page        e.g. index.htm or timetrials
#
# The data is currently stored in the following hashing structure
#   /common = shared page elements     e.g. the table layout for news blocks
#   /<area> = data elements for a given area
#   /<area>/<page> = the layout description for that page
#
# Big commands currently have their own code at the end of this file, smaller
# commands are just dealt with in the config file parser

use strict;
use CGI;
use getpage;

###############################################################################
# Setup the result of the CGI
my($result, $area, $page, $editmode, $archive, $item, $path, $ftppath);

$result = new CGI();

# The path is where to find the information to build the pages
#$path = "/var/www/html/stillhq/";
$path = "/home/httpd/html/";
$ftppath = "/var/ftp/";

$area = $result->param('area');
$page = $result->param('page');
$archive = $result->param('archive');
$editmode = $result->param('editmode');
$item = $result->param('item');

# Output the standard HTML prelude, which includes stuff like the page title
print $result->header;

# If there are no arguements, then output an error message
if(($area eq "") || ($page eq "")){
  error("$path", "The address that was passed as input was malformed", $result);
  exit;
  }

# What if there was no archive arguement?
if($archive eq ""){
  $archive=0;
  }

# What if there was no editmode arguement?
if($editmode eq ""){
  $editmode=0;
  }

# Get the title element
if($item ne ""){
    $conffile="$path/$area/$page.item";
}
else{
    $conffile="$path/$area/$page.conf";
}

$titleElement=gettitle($conffile);

# We must have a title to be willing to display the page
# If there are no arguements, then output an error message
if($titleElement eq ""){
  error("$path", 
	"Either the page you requested was misconfigured, or does not exist.",
	$result);
  exit;
  }

print $result->start_html(
 -title=>"$titleElement",
 -bgcolor=>"FFFFFF",
 -script=>"function doMoveBrowser(form) {parent.location.href = form.list.options[getSelectedValue()].value;}\nfunction getSelectedValue() {return document.quickmenu.list.selectedIndex;}");

# Initialise our module
init($path, $ftppath, $dateString, $area, $page, $days, $titleElement,
     $item, $elapsedtime, $result, $archive, $editmode);

# Output the content of the page -- this is based on the lines in the conf file
# (where we got the title from before)
processfile($conffile, $path, $dateString, $days, $elapsedtime, $area, $titleElement, $item);

# Finish off the page
print $result->end_html;

exit;

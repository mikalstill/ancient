<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article><title>JPEG to MPEG conversion howto</title>

<articleinfo>
<authorgroup>
<author>
<firstname>Michael</firstname>
<surname>Still</surname>
<affiliation>
<address>
<email>mikal@stillhq.com</email>
</address>
</affiliation>
</author>
</authorgroup>
</articleinfo>

<sect1>
<title>Abstract</title>
<para>
Recently, I went to a conference and was keen enough to setup a webcam to take a picture every couple of seconds. Now I have 27,000 JPEG images, which I want to turn into a simple MPEG movie. This document details the process I went through to make this happen.
</para>

<sidebar><title>This is an update of an older article</title>
<para>
Since the original version of this article, I have updated my machine from a pretty vanilla Redhat 7.1 box to a Debian unstable machine, for those who care about such things. Where things have changed from my experience about a year ago, I'll let you know.
</para>
</sidebar>
</sect1>

<sect1><title>About the author</title>
<para>
Michael has been working in the image processing field for several years, including a couple of years managing and developing large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as a bunch of other Open Source code.
</para>

<para>
Michael has a website at http://www.stillhq.com, and may be emailled at mikal@stillhq.com
</para>
</sect1>

<sect1><title>MPEG tools</title>
<para>
The project I found which did the conversion is called MJPEG tools. The URL for this project is http://mjpeg.sourceforge.net. There were lots of dependancies, which we should talk about first. The updated version of this article was written with version 1.6.1 beta.
</para>
</sect1>

<sect1><title>Dependancies</title>
<sect2><title>libavifile</title>
<para>
This library can be found at http://avifile.sourceforge.net. It is needed by MJPEG tools to be able to handle AVI files. The version I used was 0.7.37. It follows the standard autotools install process:
</para>

<programlisting>
./configure
make
make install
</programlisting>

<para>
For Debian, just use <command>apt-get install libavifile0.7-dev</command>.
</para>
</sect2>

<sect2><title>libsdl</title>
<para>
<quote>
Simple DirectMedia Layer is a cross-platform multimedia library designed to provide fast access to the graphics framebuffer and audio device. It is used by MPEG playback software, emulators, and many popular games, including the award winning Linux port of "Civilization: Call To Power." Simple DirectMedia Layer supports Linux, Win32, BeOS, MacOS, Solaris, IRIX, and FreeBSD.
</quote>
-- http://www.libsdl.org/index.php
</para>

<para>
libsdl can be found at http://www.libsdl.org, and is needed for some of the MJPEG playback routines. I used version 1.2.5. Again, installing is done by simply:
</para>

<programlisting>
./configure
make
make install
</programlisting>

<para>
For Debian, just do a <command>apt-get install libsdl-dev</command>.
</para>
</sect2>







<sect2><title>nasm</title>
<para>
The NASM webpage can be found at http://nasm.sourceforge.net/. An explaination of where NASM came from can be found in the documentation:
</para>

<blockquote><attribution>http://home.attbi.com/~fbkotler/nasmdoc1.html#section-1.1</attribution>
<para>
The Netwide Assembler grew out of an idea on comp.lang.asm.x86 (or possibly alt.lang.asm - I forget which), which was essentially that there didn't seem to be a good free x86-series assembler around, and that maybe someone ought to write one.
</para>

<itemizedlist>
<listitem><para>
a86 is good, but not free, and in particular you don't get any 32-bit capability until you pay. It's DOS only, too.
</para></listitem>

<listitem><para>
gas is free, and ports over DOS and Unix, but it's not very good, since it's designed to be a back end to gcc, which always feeds it correct code. So its error checking is minimal. Also, its syntax is horrible, from the point of view of anyone trying to actually write anything in it. Plus you can't write 16-bit code in it (properly).
</para></listitem>

<listitem><para>
as86 is Minix- and Linux-specific, and (my version at least) doesn't seem to have much (or any) documentation.
</para></listitem>

<listitem><para>
MASM isn't very good, and it's expensive, and it runs only under DOS.
</para></listitem>

<listitem><para>
TASM is better, but still strives for MASM compatibility, which means millions of directives and tons of red tape. And its syntax is essentially MASM's, with the contradictions and quirks that entails (although it sorts out some of those by means of Ideal mode). It's expensive too. And it's DOS-only.
</para></listitem>
</itemizedlist>

<para>
So here, for your coding pleasure, is NASM. At present it's still in prototype stage - we don't promise that it can outperform any of these assemblers. But please, please send us bug reports, fixes, helpful information, and anything else you can get your hands on (and thanks to the many people who've done this already! You all know who you are), and we'll improve it out of all recognition. Again.
</para>
</blockquote>

<para>
I downloaded 0.98.36 when I wrote the updated version of this article.
</para>

<para>
Install it by doing the autotools thing once more. Note that the make install step is still broken (it didn't work for the first version of the article a year ago either), and that I had to do this to get it to install:
</para>

<programlisting>
mkdir bin
mkdir man
mkdir man/man1
make install
cp bin/nasm /usr/local/bin/
cp man/man1/n* /usr/local/man/man1/
</programlisting>

<para>
This seems to be because it is trying to install everything in the the current working directory, instead of the system wide install location. You should also note that <command>apt-get install nasm</command> on a Debian machine does exactly what is expected of it, and packages exactly the version which was available from the NASM website.
</para>
</sect2>










<sect2><title>jpeg-mmx</title>
<para>
We'll also need the MJPEG people's MMX JPEG library, which was at version 0.1.4 at the time of writing this article. I believe the difference between the standard JPEG library and the MMX JPEG library is that the MMX version is optimised for MMX processors, and wont run on processors without MMX. The standard libjpeg also seems to be an option here. I downloaded version 0.1.4, and did the autotools thing.
</para>

<para>
For some reason they have disabled the install make target, possibly because they're worried about clobbering the standard libjpeg install. This reason doesn't really work though, as the library files have different names from those used in libjpeg. I did:
</para>

<programlisting>
[root@localhost jpeg-mmx-0.1.4]# make install
Make install has been disabled
If you really want to install libjpeg-mmx, please use make install_real
[root@localhost jpeg-mmx-0.1.4]# make install_real 
/usr/bin/install -c -m 644 jconfig.h /usr/local/include/jconfig.h
/usr/bin/install -c -m 644 ./jpeglib.h /usr/local/include/jpeglib.h
/usr/bin/install -c -m 644 ./jmorecfg.h /usr/local/include/jmorecfg.h
/usr/bin/install -c -m 644 ./jerror.h /usr/local/include/jerror.h
/usr/bin/install -c -m 644 ./jinclude.h /usr/local/include/jinclude.h
/usr/bin/install -c -m 644 libjpeg-mmx.a /usr/local/lib/libjpeg-mmx.a
[root@localhost jpeg-mmx-0.1.4]# 
</programlisting>

<para>
And annoyingly, I also had to manually copy a file:
</para>

<programlisting>
cp jpegint.h /usr/local/include/
</programlisting>

<para>
TODO: debian package?
</para>
</sect2>

<sect2><title>movtar</title>
<para>
movtar is actaully written by the MJPEG people. You can download it from http://download.sourceforge.net/mjpeg/. I used the 1.3.0 release, which hasn't changed since I wrote this article a year ago. The install was autotooled once more. I am sure by now I don't have to explain how to do that...
</para>

<para>
TODO: debian package
</para>
</sect2>

<sect2><title>fontconfig</title>
<para>
Since I first wrote this article, MJPEG tools appears to have added a dependany on the fontconfig library from www.fontconfig.org. I installed version 2.2.1. Annoyingly, the autotools configuration for MJPEG tools didn't detect that fontconfig was missing, it just failed to compile.
</para>

<para>
TODO: debian package
</para>
</sect2>

<sect2><title>Compiling MJPEG tools itself</title>
<para>
I downloaded version 1.6.1 from the sourceforge website. Yet again, the install process was based off the autotools.
</para>

<para>
Then we can go ahead and make the project:
</para>

<programlisting>
./configure
make
make install
</programlisting>

<para>
For those who are interested, my build configuration at the end of the configure script looked like:
</para>

<programlisting>
 MJPEG tools 1.6.1 build configuration :

    - X86 Optimizations:
      - MMX/3DNow!/SSE enabled      : true
      - cmov support enabled        : true

****************************************************************************
* NOTE:                                                                    *
*   The resultant binaries will ***NOT*** run on a K6 or Pentium CPU       *
****************************************************************************
    - video4linux recording/playback: true
    - software MJPEG playback       : true
    - movtar playback/recording     : true
    - Quicktime playback/recording  : false
    - AVI MJPEG playback/recording  : true (always)
    - libDV (digital video) support : false  
    - AVIFILE divx encoding support : true
    - Gtk+ support for glav         : true
    - glibc support for >2GB files  : true
</programlisting>

<para>
This time around, because I am using a newer version of GCC, I had to apply the following patch:
</para>

<execute><cmd>code2db</cmd><input>mjpegtools.patch</input></execute>

<para>
TODO: debian package
</para>
</sect2>
</sect1>

<sect1><title>Encoding the JPEGS into the MPEG</title>
<para>
Finally, we can use MJPEG tools to convert the JPEGs into a MPEG stream. The documentation for this says:
</para>

<para>
When I originally wrote this article, I recommended that people use the following command line, which is what I had found recommended on the web, and what worked for me:
</para>

<programlisting>
jpeg2yuv -f 25 -j frame-%05d.jpg -I p | mpeg2enc -o mpegfile.m1v
</programlisting>

<sidebar><title>Counting frames</title>
<para>
The frames also have to count from 00000 in this example. I used the following little script to convert to the required naming format:
</para>

<programlisting>
count=0
for item in `find . -type f`
do 
  mv $item frame-`printf "%05d" $count`.jpg
  count=$(( $count + 1 ))
done
</programlisting>
</sidebar>

<para>
It turns out that the recommended command line is much more like:
</para>

<programlisting>
ls *.ppm | xargs -n1 cat | ppmtoy4m | mpeg2enc -o mpegfile.m1v
</programlisting>

<para>
It should be noted that this command line requires that the input images be ppm files instead of jpeg files however. We can get around this by using convert to change the format of the images:
</para>

<programlisting>
for item in `ls *.jpg`
do
  convert $item $item.ppm
done
</programlisting>

<para>
Note that the conversion is also quite slow, I walked away and came back later.
</para>
</sect1>
</article>

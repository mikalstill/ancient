<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article>
<title>trivsql: A trivial SQL engine for your application</title>

<sect1><title>About the author and this paper</title>
  <para>
      Michael has been working in the image processing field for several years, including a couple of years managing and developing large image databases for an Australian government department. He currently works for TOWER Software, who manufacture a world leading EDMS and Records Management package named TRIM. Michael is also the developer of Panda, an open source PDF generation API, as well as being the maintainer of the comp.text.pdf USENET frequently asked questions document.
    </para>
</sect1>

<sect1><title>Executive summary</title>
<para>
trivsql is a simple SQL engine, implemented on the tdb database engine. The intention of this engine is that it can be embedded into your application, allowing the use of familiar SQL constructs for accessing data stored within your application.
</para>
</sect1>

<sect1>
<title>An introduction to tdb</title>
<para>
tdb is a (name, value) pair storing database similar to gdbm. It was originally implemented for the Samba project, as a way of avoiding having to implement a large number of in memory linked lists for storing usage and access information. The code for tdb is available from the Samba CVS server.
</para>

<para>
To quote from the Samba source code: <quote>This is a simple database API. 
It was inspired by the realisation that
in Samba we have several ad-hoc bits of code that essentially
implement small databases for sharing structures between parts of
Samba. As I was about to add another I realised that a generic
database module was called for to replace all the ad-hoc bits.

I based the interface on gdbm. I couldn't use gdbm as we need to be
able to have multiple writers to the databases at one time.</quote>
</para>

<para>
To make use of a tdb database at the most trivial level, you open the database with a <command>tdb_open</command> function call, you can then add pairs to the database using the <command>tdb_store</command> function, and retrieve pairs from the database with the <command>tdb_fetch</command> function. The database is closed when you are finished with the via the <command>tdb_close</command> function.

<footnote>
<para>
There are also functions which allow you to do slightly more interesting operations, such as enumerating all of the keys defined in the database.
</para>
</footnote>

</para>
</sect1>

<sect1><title>Why trivsql?</title>
<para>
The functionality offered by tdb is satisfactory for simple databases where all you want to store is small nuggets of data. For instance, when you want to store that the user Daniel is logged on, then a piece of code such as:
</para>

<programlisting>
  TDB_CONTEXT db;
  TDB_DATA dbkey, dbdata;

  // Open the database
  document->db = tdb_open ("foo.tdb", 0,
                           TDB_CLEAR_IF_FIRST, O_RDWR | O_CREAT | O_TRUNC,
                           0600);

  // Store the value
  dbkey.dptr = "Daniel";
  dbkey.dsize = strlen (key) + 1;
  dbdata.dptr = "LoggedOn";
  dbdata.dsize = strlen (value) + 1;

  if (tdb_store (db, dbkey, dbdata, TDB_REPLACE) != 0)
    {
      fprintf(stderr, "Could not store value");
    }
</programlisting>

<para>
And to retrieve the value:
</para>

<programlisting>
  TDB_CONTEXT db;
  TDB_DATA dbkey, dbdata;

  // Open the database
  document->db = tdb_open ("foo.tdb", 0,
                           TDB_CLEAR_IF_FIRST, O_RDWR | O_CREAT | O_TRUNC,
                           0600);

  // Fetch the value
  dbkey.dptr = "Daniel";
  dbkey.dsize = strlen (key) + 1;

  dbdata = tdb_fetch (document->db, dbkey);
</programlisting>

<para>
This doesn't work so well when the data you want to store is more complex. For example, let's imagine that we want to store some more information about Daniel -- for instance how many bytes he has transfered this session and a list of his favourite users. I can think of three ways that we can store this information in a tdb database:

<orderedlist>
<listitem><para>We can define a structure that contains these elements, and then store the pointer to this structure in the tdb. The problem with this is that it doesn't persist across restarts of the program, because the pointer will no longer be valid.</para></listitem>

<listitem><para>We can use a series of interestingly named keys, each storing a piece of information. For example:
     <orderedlist>
     <listitem><para>daniel-bytestransfered</para></listitem>
     <listitem><para>daniel-friends</para></listitem>
     <listitem><para>et cetera</para></listitem>
     </orderedlist>

The problem with this is that it produces horribly verbose code, because the code to read a single key is repeated all over the place.
</para></listitem>

<listitem><para>We can push all the information into one string, and then store that in the tdb, but this means that we have to handle parsing the information again when you need it back.</para></listitem>

<listitem><para>You can use trivsql, which looks after all the ugliness for you, and allows you to perform select and insert statements in a manner familiar to many programmers. It also makes you more attractive to the opposite sex.</para></listitem>
</orderedlist>
</para>
</sect1>

<sect1><title>Why SQL?</title>
<para>
SQL was selected as a logical layer over tdb because there are many developers in the world which are already familiar with it. It is also relatively simple to parse and process the commands.
</para>
</sect1>

<sect1><title>The current state of play</title>
<para>
The intention is not to implement the full SQL specification at this time. Currently, trivsql supports the CREATE TABLE command; the SELECT command; and the INSERT command. By the time this paper is presented at AUUG, the UPDATE command will also be implemented.
</para>

<sect2><title>Implementation details</title>
<para>
How is the information about the database stored within the tdb? This section endevours to explain the storage structures used.
</para>

<sect3><title>Table data</title>
<para>
The first thing that needs to be done to make a trivsql database useful is to have some tables within which to store your data. This is normally done with the SQL statement:
</para>

<programlisting>
CREATE TABLE foo (...)
</programlisting>

<para>
Where ... is a list of columns in the table which need to be created. At the time of writing, trivsql has untyped columns, which shortens the standard column list from something like:
</para>

<programlisting>
int banana, varchar(255) chicken, int hamster
</programlisting>

<para>
To something more like:
</para>

<programlisting>
banana, chicken, hamster
</programlisting>

<para>
Effectively, the only datatype which trivsql is aware of is char *. Internally, there are a bunch of things which trivsql needs to store about the table to be able to operate. These things are:

<orderedlist>
<listitem><para>The number of columns
  <footnote><para>Although this information is repeated, and really should be cleaned up before trivsql gets released</para></footnote>
</para></listitem>
<listitem><para>The names of the columns</para></listitem>
<listitem><para>The number of rows which have been created</para></listitem>
</orderedlist>

Information about the number of columns is stored in the tdb key <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_numcols</emphasis>. The name of each column is stored in the <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_col</emphasis><command>colcount</command> key. A count of the total number of rows added to this table is stored in the <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_numrows</emphasis> key. The value of this final key is never decremented, which means that every row can always be uniquely identified by it's row number.
  <footnote><para>This will be convenient when I bother to implement primary key values as columns, because I can recycle the row number</para></footnote>
</para>

<para>
An example of the effect of a simple CREATE TABLE command will assist with the illustration at this point. The command
</para>

<programlisting>
CREATE TABLE foo (cola, colb, colc);
</programlisting>

<para>
Is executed on a clean database. <command>tdbtool</command>, the standard way of inspecting the contents of a tdb
  <footnote><para><command>tdbtool</command> is distrubuted with the tdb code, including with Samba</para></footnote>
displays the following output when queried for all the keys in the database...
</para>

<programlisting>
[mikal@localhost trivsql]# tdbtool foodb.tdb 
tdb> dump

key 17 bytes
trivsql_foo_col1
data 5 bytes
[000] 63 6F 6C 62 00                                    colb 

key 20 bytes
trivsql_foo_numrows
data 2 bytes
[000] 30 00                                             0 

key 17 bytes
trivsql_foo_col2
data 5 bytes
[000] 63 6F 6C 63 00                                    colc 

key 20 bytes
trivsql_foo_numcols
data 2 bytes
[000] 33 00                                             3 

key 17 bytes
trivsql_foo_col0
data 5 bytes
[000] 63 6F 6C 61 00                                    cola 
tdb> quit
[mikal@localhost trivsql]# 
</programlisting>

<para>
It can therefore be seen that trivsql can determine all the information it needs from these few keys -- whether a table exists, the name of the table, the number of rows in the table, the number of columns in the table, and the name of those columns.
</para>
</sect3>

<sect3><title>Inserting data into the table</title>
<para>
Once you have a table, the next operation that a user is going to be interested in is placing data into that table. This subsection will only discuss the INSERT operation, because UPDATE is merely a special case of an INSERT for a row which already exists.
</para>

<para>
When the user requests that a row be inserted into a table, there are a number of steps that trivsql goes through. These are:

<orderedlist>
<listitem><para>Determining if the named table exists: lookup if <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_numrows</emphasis> exists</para></listitem>

<listitem><para>Determining what row number to insert at: this is the value returned by the existance check for <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_numrows</emphasis></para></listitem>

<listitem><para>Determining that the requested columns actually exist, and if so what column numbers they are</para></listitem>

<listitem><para>Insert the information
  <footnote><para>Duplicated information is allowed in a table --  in other words, you can have two identical rows if you really want</para></footnote></para></listitem>
</orderedlist>

As you can see, there really isn't much to it.
</para>

<para>
Data for a given cell (the intersection of a specific row and column) is stored in the tdb key <emphasis>trivsql_</emphasis><command>tablename</command><emphasis>_col</emphasis><command>colnumber</command><emphasis>row</emphasis><command>rownumber</command>.
</para>

<para>
So how does the database look after an insert has occured? The following is a dump of a clean database which has had a table created, and then a single row inserted using:
</para>

<programlisting>
INSERT INTO foo (cola, colc) VALUES ('duck', 'chicken');
</programlisting>

<para>
The tdbtool output will look like:
</para>

<programlisting>
[mikal@localhost trivsql]$ tdbtool foodb.tdb
tdb> dump

key 17 bytes
trivsql_foo_col1
data 5 bytes
[000] 63 6F 6C 62 00                                    colb 

key 20 bytes
trivsql_foo_numrows
data 2 bytes
[000] 31 00                                             1 

key 17 bytes
trivsql_foo_col2
data 5 bytes
[000] 63 6F 6C 63 00                                    colc 

key 20 bytes
trivsql_foo_numcols
data 2 bytes
[000] 33 00                                             3 

key 21 bytes
trivsql_foo_col0row0
data 5 bytes
[000] 64 75 63 6B 00                                    duck 

key 21 bytes
trivsql_foo_col2row0
data 8 bytes
[000] 63 68 69 63 6B 65 6E 00                           chicken 

key 17 bytes
trivsql_foo_col0
data 5 bytes
[000] 63 6F 6C 61 00                                    cola 
tdb> quit
[mikal@localhost trivsql]$
</programlisting>

<para>
Just to prove that the database does handle multiple rows and important things like that, I took a clean database and executed the following:
</para>

<programlisting>
CREATE TABLE foo (cola, colb, colc);
INSERT INTO foo (cola, colc) VALUES ('duck', 'chicken');
INSERT INTO foo (cola, colb) VALUES ('hamster', 'gerbil');
INSERT INTO foo (cola, colb, colc) VALUES ('red', 'green', 'blue');
</programlisting>

<para>
Which produced the following set of trivsql keys in the tdb...
</para>

<programlisting>
[mikal@localhost trivsql]$ tdbtool foodb.tdb
tdb> dump

key 17 bytes
trivsql_foo_col1
data 5 bytes
[000] 63 6F 6C 62 00                                    colb 

key 20 bytes
trivsql_foo_numrows
data 2 bytes
[000] 33 00                                             3 

key 17 bytes
trivsql_foo_col2
data 5 bytes
[000] 63 6F 6C 63 00                                    colc 

key 21 bytes
trivsql_foo_col0row2
data 4 bytes
[000] 72 65 64 00                                       red 

key 21 bytes
trivsql_foo_col1row2
data 6 bytes
[000] 67 72 65 65 6E 00                                 green 

key 21 bytes
trivsql_foo_col0row1
data 8 bytes
[000] 68 61 6D 73 74 65 72 00                           hamster 

key 21 bytes
trivsql_foo_col2row2
data 5 bytes
[000] 62 6C 75 65 00                                    blue 

key 20 bytes
trivsql_foo_numcols
data 2 bytes
[000] 33 00                                             3 

key 21 bytes
trivsql_foo_col1row1
data 7 bytes
[000] 67 65 72 62 69 6C 00                              gerbil 

key 21 bytes
trivsql_foo_col0row0
data 5 bytes
[000] 64 75 63 6B 00                                    duck 

key 21 bytes
trivsql_foo_col2row0
data 8 bytes
[000] 63 68 69 63 6B 65 6E 00                           chicken 

key 17 bytes
trivsql_foo_col0
data 5 bytes
[000] 63 6F 6C 61 00                                    cola 
tdb> quit
</programlisting>
</sect3>

</sect2>

<sect2><title>Examples of use</title>
<para>
The final paper will discuss how to use trivsql, and will include examples...
</para>
</sect2>
</sect1>

<sect1><title>Conclusion</title>
<para>
This paper has described trivsql, a SQL engine which can be embedded into your code. This code is still a work in progress, and updates on it's development can be found at http://www.stillhq.com
</para>
</sect1>
</article>
